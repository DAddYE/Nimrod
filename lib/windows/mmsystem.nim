#
#
#            Nimrod's Runtime Library
#        (c) Copyright 2006 Andreas Rumpf
#
#    See the file "copying.txt", included in this
#    distribution, for details about the copyright.
#

#*********************************
#*******************************
# Generated by c2pas32  v0.9b
#     Fixed by P.V.Ozerski
# (c) 2001 Oleg Bulychov
#     Original C header file
# Gladiators Software
#     (created at Dec-03-1998)
# http://www.astonshell.com/
#   from LCC-win32 is used
#*********************************
#   LCC-win32 (c) Jacob Navia
#*******************************

{.deadCodeElim: on.}

import
  windows

type
  Mmresult* = Uint
  Mmversion* = Uint
  Hwaveout* = THandle
  Lphwaveout* = ptr Hwaveout
  Hwavein* = THandle
  Lphwavein* = ptr Hwaveout
  Hwave* = THandle
  Lphwave* = ptr THandle
  Lpuint* = ptr Uint

const
  Maxpnamelen* = 32
  Maxerrorlength* = 256
  MaxJoystickoemvxdname* = 260
  MmMidiMapper* = 1
  MmWaveMapper* = 2
  MmSndblstMidiout* = 3
  MmSndblstMidiin* = 4
  MmSndblstSynth* = 5
  MmSndblstWaveout* = 6
  MmSndblstWavein* = 7
  MmAdlib* = 9
  MmMpu401Midiout* = 10
  MmMpu401Midiin* = 11
  MmPcJoystick* = 12
  TimeMs* = 1
  TimeSamples* = 2
  TimeBytes* = 4
  TimeSmpte* = 8
  TimeMidi* = 16
  TimeTicks* = 32
  MmMcinotify* = 0x000003B9
  MmWomOpen* = 0x000003BB
  MmWomClose* = 0x000003BC
  MmWomDone* = 0x000003BD
  MmWimOpen* = 0x000003BE
  MmWimClose* = 0x000003BF
  MmWimData* = 0x000003C0
  MmMimOpen* = 0x000003C1
  MmMimClose* = 0x000003C2
  MmMimData* = 0x000003C3
  MmMimLongdata* = 0x000003C4
  MmMimError* = 0x000003C5
  MmMimLongerror* = 0x000003C6
  MmMomOpen* = 0x000003C7
  MmMomClose* = 0x000003C8
  MmMomDone* = 0x000003C9
  MmDrvmOpen* = 0x000003D0
  MmDrvmClose* = 0x000003D1
  MmDrvmData* = 0x000003D2
  MmDrvmError* = 0x000003D3
  MmStreamOpen* = 0x000003D4
  MmStreamClose* = 0x000003D5
  MmStreamDone* = 0x000003D6
  MmStreamError* = 0x000003D7
  MmMomPositioncb* = 0x000003CA
  MmMcisignal* = 0x000003CB
  WaveInvalidformat* = 0
  WaveFormat1m08* = 1
  WaveFormat1s08* = 2
  WaveFormat1m16* = 4
  WaveFormat1s16* = 8
  WaveFormat2m08* = 16
  WaveFormat2s08* = 32
  WaveFormat2m16* = 64
  WaveFormat2s16* = 128
  WaveFormat4m08* = 256
  WaveFormat4s08* = 512
  WaveFormat4m16* = 0x00000400
  WaveFormat4s16* = 0x00000800
  MmMimMoredata* = 0x000003CC
  MmMixmLineChange* = 0x000003D0
  MmMixmControlChange* = 0x000003D1
  MmsyserrBase* = 0
  WaverrBase* = 32
  MidierrBase* = 64
  TimerrBase* = 96
  JoyerrBase* = 160
  McierrBase* = 256
  MixerrBase* = 1024
  MciStringOffset* = 512
  MciVdOffset* = 1024
  MciCdOffset* = 1088
  MciWaveOffset* = 1152
  MciSeqOffset* = 1216
  MmsyserrNoerror* = 0
  MmsyserrError* = (MMSYSERR_BASE + 1)
  MmsyserrBaddeviceid* = (MMSYSERR_BASE + 2)
  MmsyserrNotenabled* = (MMSYSERR_BASE + 3)
  MmsyserrAllocated* = (MMSYSERR_BASE + 4)
  MmsyserrInvalhandle* = (MMSYSERR_BASE + 5)
  MmsyserrNodriver* = (MMSYSERR_BASE + 6)
  MmsyserrNomem* = (MMSYSERR_BASE + 7)
  MmsyserrNotsupported* = (MMSYSERR_BASE + 8)
  MmsyserrBaderrnum* = (MMSYSERR_BASE + 9)
  MmsyserrInvalflag* = (MMSYSERR_BASE + 10)
  MmsyserrInvalparam* = (MMSYSERR_BASE + 11)
  MmsyserrHandlebusy* = (MMSYSERR_BASE + 12)
  MmsyserrInvalidalias* = (MMSYSERR_BASE + 13)
  MmsyserrBaddb* = (MMSYSERR_BASE + 14)
  MmsyserrKeynotfound* = (MMSYSERR_BASE + 15)
  MmsyserrReaderror* = (MMSYSERR_BASE + 16)
  MmsyserrWriteerror* = (MMSYSERR_BASE + 17)
  MmsyserrDeleteerror* = (MMSYSERR_BASE + 18)
  MmsyserrValnotfound* = (MMSYSERR_BASE + 19)
  MmsyserrNodrivercb* = (MMSYSERR_BASE + 20)
  MmsyserrLasterror* = (MMSYSERR_BASE + 20)
  MmJoy1move* = 0x000003A0
  MmJoy2move* = 0x000003A1
  MmJoy1zmove* = 0x000003A2
  MmJoy2zmove* = 0x000003A3
  MmJoy1buttondown* = 0x000003B5
  MmJoy2buttondown* = 0x000003B6
  MmJoy1buttonup* = 0x000003B7
  MmJoy2buttonup* = 0x000003B8
  CallbackTypemask* = 0x00070000
  CallbackNull* = 0
  CallbackEvent* = 0x00050000
  CallbackWindow* = 0x00010000
  CallbackTask* = 0x00020000
  CallbackThread* = CALLBACK_TASK
  CallbackFunction* = 0x00030000

type
  Hdrvr* = THandle

const
  DrvLoad* = 1
  DrvEnable* = 2
  DrvOpen* = 0x00000003
  DrvClose* = 4
  DrvDisable* = 0x00000005
  DrvFree* = 0x00000006
  DrvConfigure* = 0x00000007
  DrvQueryconfigure* = 8
  DrvInstall* = 0x00000009
  DrvRemove* = 0x0000000A
  DrvExitsession* = 0x0000000B
  DrvPower* = 0x0000000F
  DrvReserved* = 0x00000800
  DrvUser* = 0x00004000
  DrvcnfCancel* = 0
  DrvcnfOk* = 1
  DrvcnfRestart* = 2
  DrvCancel* = DRVCNF_CANCEL
  DrvOk* = DRVCNF_OK
  DrvRestart* = DRVCNF_RESTART
  DrvMciFirst* = DRV_RESERVED
  DrvMciLast* = (DRV_RESERVED + 0x00000FFF)

type
  Pdrvcallback* = proc (hdrvr: tHandle, uMsg: Uint, dwUser, dw1, dw2: Dword){.
      stdcall.}

proc sndPlaySoundA*(Name: Lpcstr, flags: Uint): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "sndPlaySoundA".}
proc sndPlaySoundW*(Name: Lpcwstr, flags: Uint): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "sndPlaySoundW".}
when defined(winUNICODE):
  proc sndPlaySound*(Name: cstring, flags: UINT): BOOL{.stdcall,
      dynlib: "winmm.dll", importc: "sndPlaySoundW".}
else:
  proc sndPlaySound*(Name: Cstring, flags: Uint): Bool{.stdcall,
      dynlib: "winmm.dll", importc: "sndPlaySoundA".}
const
  SndNodefault* = 2
  SndMemory* = 4
  SndLoop* = 8
  SndNostop* = 16
  SndSync* = 0
  SndAsync* = 1
  SndPurge* = 64
  SndApplication* = 128
  SndAliasStart* = 0
  SndAliasSystemhand* = 18515
  SndAliasSystemexclamation* = 8531
  SndAliasSystemasterisk* = 10835
  SndAliasSystemquestion* = 16211
  SndAliasSystemdefault* = 17491
  SndAliasSystemexit* = 17747
  SndAliasSystemstart* = 21331
  SndAliasSystemwelcome* = 22355
  SndNowait* = 0x00002000
  SndAlias* = 0x00010000
  SndAliasId* = 0x00110000
  SndFilename* = 0x00020000
  SndResource* = 0x00040004
  WaverrBadformat* = (WAVERR_BASE + 0)
  WaverrStillplaying* = (WAVERR_BASE + 1)
  WaverrUnprepared* = (WAVERR_BASE + 2)
  WaverrSync* = (WAVERR_BASE + 3)
  WaverrLasterror* = (WAVERR_BASE + 3)
  WomOpen* = MM_WOM_OPEN
  WomClose* = MM_WOM_CLOSE
  WomDone* = MM_WOM_DONE
  WimOpen* = MM_WIM_OPEN
  WimClose* = MM_WIM_CLOSE
  WimData* = MM_WIM_DATA
  WaveMapper* = UINT(- 1)
  WaveFormatQuery* = 1
  WaveAllowsync* = 2
  WaveMapped* = 4
  WaveFormatDirect* = 8
  WaveFormatDirectQuery* = (WAVE_FORMAT_QUERY Or WAVE_FORMAT_DIRECT)
  MimOpen* = MM_MIM_OPEN
  MimClose* = MM_MIM_CLOSE
  MimData* = MM_MIM_DATA
  MimLongdata* = MM_MIM_LONGDATA
  MimError* = MM_MIM_ERROR
  MimLongerror* = MM_MIM_LONGERROR
  MomOpen* = MM_MOM_OPEN
  MomClose* = MM_MOM_CLOSE
  MomDone* = MM_MOM_DONE
  MimMoredata* = MM_MIM_MOREDATA
  MomPositioncb* = MM_MOM_POSITIONCB
  Midimapper* = UINT(- 1)
  MidiIoStatus* = 32
  MidiCacheAll* = 1
  MidiCacheBestfit* = 2
  MidiCacheQuery* = 3
  MidiUncache* = 4
  WhdrDone* = 1
  WhdrPrepared* = 2
  WhdrBeginloop* = 0x00000004
  WhdrEndloop* = 0x00000008
  WhdrInqueue* = 0x00000010
  ModMidiport* = 1
  ModSynth* = 2
  ModSqsynth* = 3
  ModFmsynth* = 4
  ModMapper* = 5
  MidicapsVolume* = 1
  MidicapsLrvolume* = 2
  MidicapsCache* = 4
  MidicapsStream* = 8
  MhdrDone* = 1
  MhdrPrepared* = 2
  MhdrInqueue* = 0x00000004
  MhdrIsstrm* = 0x00000008
  MevtFShort* = 0
  MevtFLong* = 0x80000000
  MevtFCallback* = 0x40000000

proc mevtEventtype*(x: Int8): Int8
proc mevtEventparm*(x: Dword): Dword
const
  MevtShortmsg* = 0
  MevtTempo* = 0x00000001
  MevtNop* = 0x00000002
  MevtLongmsg* = 0x00000080
  MevtComment* = 0x00000082
  MevtVersion* = 0x00000084
  MidistrmError* = - 2
  MidipropSet* = 0x80000000
  MidipropGet* = 0x40000000
  MidipropTimediv* = 1
  MidipropTempo* = 2
  MixerlineLinefActive* = 1
  MixerlineLinefDisconnected* = 0x00008000
  MixerlineLinefSource* = 0x80000000
  MixerlineComponenttypeDstFirst* = 0
  MixerlineComponenttypeDstUndefined* = (MIXERLINE_COMPONENTTYPE_DST_FIRST)
  MixerlineComponenttypeDstDigital* = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 1)
  MixerlineComponenttypeDstLine* = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 2)
  MixerlineComponenttypeDstMonitor* = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 3)
  MixerlineComponenttypeDstSpeakers* = (MIXERLINE_COMPONENTTYPE_DST_FIRST +
      4)
  MixerlineComponenttypeDstHeadphones* = (
    MIXERLINE_COMPONENTTYPE_DST_FIRST + 5)
  MixerlineComponenttypeDstTelephone* = (
    MIXERLINE_COMPONENTTYPE_DST_FIRST + 6)
  MixerlineComponenttypeDstWavein* = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 7)
  MixerlineComponenttypeDstVoicein* = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 8)
  MixerlineComponenttypeDstLast* = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 8)
  MixerlineComponenttypeSrcFirst* = 0x00001000
  MixerlineComponenttypeSrcUndefined* = (
    MIXERLINE_COMPONENTTYPE_SRC_FIRST + 0)
  MixerlineComponenttypeSrcDigital* = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 1)
  MixerlineComponenttypeSrcLine* = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 2)
  MixerlineComponenttypeSrcMicrophone* = (
    MIXERLINE_COMPONENTTYPE_SRC_FIRST + 3)
  MixerlineComponenttypeSrcSynthesizer* = (
    MIXERLINE_COMPONENTTYPE_SRC_FIRST + 4)
  MixerlineComponenttypeSrcCompactdisc* = (
    MIXERLINE_COMPONENTTYPE_SRC_FIRST + 5)
  MixerlineComponenttypeSrcTelephone* = (
    MIXERLINE_COMPONENTTYPE_SRC_FIRST + 6)
  MixerlineComponenttypeSrcPcspeaker* = (
    MIXERLINE_COMPONENTTYPE_SRC_FIRST + 7)
  MixerlineComponenttypeSrcWaveout* = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 8)
  MixerlineComponenttypeSrcAuxiliary* = (
    MIXERLINE_COMPONENTTYPE_SRC_FIRST + 9)
  MixerlineComponenttypeSrcAnalog* = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10)
  MixerlineComponenttypeSrcLast* = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10)
  MixerlineTargettypeUndefined* = 0
  MixerlineTargettypeWaveout* = 1
  MixerlineTargettypeWavein* = 2
  MixerlineTargettypeMidiout* = 3
  MixerlineTargettypeMidiin* = 4
  MixerlineTargettypeAux* = 5
  MidierrUnprepared* = (MIDIERR_BASE + 0)
  MidierrStillplaying* = (MIDIERR_BASE + 1)
  MidierrNomap* = (MIDIERR_BASE + 2)
  MidierrNotready* = (MIDIERR_BASE + 3)
  MidierrNodevice* = (MIDIERR_BASE + 4)
  MidierrInvalidsetup* = (MIDIERR_BASE + 5)
  MidierrBadopenmode* = (MIDIERR_BASE + 6)
  MidierrDontContinue* = (MIDIERR_BASE + 7)
  MidierrLasterror* = (MIDIERR_BASE + 7)
  MixercontrolControlfUniform* = 1
  MixercontrolControlfMultiple* = 2
  MixercontrolControlfDisabled* = 0x80000000
  MixercontrolCtClassMask* = 0xF0000000
  MixercontrolCtClassCustom* = 0
  MixercontrolCtClassMeter* = 0x10000000
  MixercontrolCtClassSwitch* = 0x20000000
  MixercontrolCtClassNumber* = 0x30000000
  MixercontrolCtClassSlider* = 0x40000000
  MixercontrolCtClassFader* = 0x50000000
  MixercontrolCtClassTime* = 0x60000000
  MixercontrolCtClassList* = 0x70000000
  MixercontrolCtSubclassMask* = 0x0F000000
  MixercontrolCtScSwitchBoolean* = 0
  MixercontrolCtScSwitchButton* = 0x01000000
  MixercontrolCtScMeterPolled* = 0
  MixercontrolCtScTimeMicrosecs* = 0
  MixercontrolCtScTimeMillisecs* = 0x01000000
  MixercontrolCtScListSingle* = 0
  MixercontrolCtScListMultiple* = 0x01000000
  MixercontrolCtUnitsMask* = 0x00FF0000
  MixercontrolCtUnitsCustom* = 0
  MixercontrolCtUnitsBoolean* = 0x00010000
  MixercontrolCtUnitsSigned* = 0x00020000
  MixercontrolCtUnitsUnsigned* = 0x00030000
  MixercontrolCtUnitsDecibels* = 0x00040000
  MixercontrolCtUnitsPercent* = 0x00050000
  MixercontrolControltypeCustom* = (
    MIXERCONTROL_CT_CLASS_CUSTOM Or MIXERCONTROL_CT_UNITS_CUSTOM)
  MixercontrolControltypeBooleanmeter* = (MIXERCONTROL_CT_CLASS_METER Or
      MIXERCONTROL_CT_SC_METER_POLLED Or MIXERCONTROL_CT_UNITS_BOOLEAN)
  MixercontrolControltypeSignedmeter* = (MIXERCONTROL_CT_CLASS_METER Or
      MIXERCONTROL_CT_SC_METER_POLLED Or MIXERCONTROL_CT_UNITS_SIGNED)
  MixercontrolControltypePeakmeter* = (
    MIXERCONTROL_CONTROLTYPE_SIGNEDMETER + 1)
  MixercontrolControltypeUnsignedmeter* = (MIXERCONTROL_CT_CLASS_METER Or
      MIXERCONTROL_CT_SC_METER_POLLED Or MIXERCONTROL_CT_UNITS_UNSIGNED)
  MixercontrolControltypeBoolean* = (MIXERCONTROL_CT_CLASS_SWITCH Or
      MIXERCONTROL_CT_SC_SWITCH_BOOLEAN Or MIXERCONTROL_CT_UNITS_BOOLEAN)
  MixercontrolControltypeOnoff* = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 1)
  MixercontrolControltypeMute* = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 2)
  MixercontrolControltypeMono* = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 3)
  MixercontrolControltypeLoudness* = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 4)
  MixercontrolControltypeStereoenh* = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 5)
  MixercontrolControltypeButton* = (MIXERCONTROL_CT_CLASS_SWITCH Or
      MIXERCONTROL_CT_SC_SWITCH_BUTTON Or MIXERCONTROL_CT_UNITS_BOOLEAN)
  MixercontrolControltypeDecibels* = (
    MIXERCONTROL_CT_CLASS_NUMBER Or MIXERCONTROL_CT_UNITS_DECIBELS)
  MixercontrolControltypeSigned* = (
    MIXERCONTROL_CT_CLASS_NUMBER Or MIXERCONTROL_CT_UNITS_SIGNED)
  MixercontrolControltypeUnsigned* = (
    MIXERCONTROL_CT_CLASS_NUMBER Or MIXERCONTROL_CT_UNITS_UNSIGNED)
  MixercontrolControltypePercent* = (
    MIXERCONTROL_CT_CLASS_NUMBER Or MIXERCONTROL_CT_UNITS_PERCENT)
  MixercontrolControltypeSlider* = (
    MIXERCONTROL_CT_CLASS_SLIDER Or MIXERCONTROL_CT_UNITS_SIGNED)
  MixercontrolControltypePan* = (MIXERCONTROL_CONTROLTYPE_SLIDER + 1)
  MixercontrolControltypeQsoundpan* = (MIXERCONTROL_CONTROLTYPE_SLIDER + 2)
  MixercontrolControltypeFader* = (
    MIXERCONTROL_CT_CLASS_FADER Or MIXERCONTROL_CT_UNITS_UNSIGNED)
  MixercontrolControltypeVolume* = (MIXERCONTROL_CONTROLTYPE_FADER + 1)
  MixercontrolControltypeBass* = (MIXERCONTROL_CONTROLTYPE_FADER + 2)
  MixercontrolControltypeTreble* = (MIXERCONTROL_CONTROLTYPE_FADER + 3)
  MixercontrolControltypeEqualizer* = (MIXERCONTROL_CONTROLTYPE_FADER + 4)
  MixercontrolControltypeSingleselect* = (MIXERCONTROL_CT_CLASS_LIST Or
      MIXERCONTROL_CT_SC_LIST_SINGLE Or MIXERCONTROL_CT_UNITS_BOOLEAN)
  MixercontrolControltypeMux* = (MIXERCONTROL_CONTROLTYPE_SINGLESELECT + 1)
  MixercontrolControltypeMultipleselect* = (MIXERCONTROL_CT_CLASS_LIST Or
      MIXERCONTROL_CT_SC_LIST_MULTIPLE Or MIXERCONTROL_CT_UNITS_BOOLEAN)
  MixercontrolControltypeMixer* = (MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT +
      1)
  MixercontrolControltypeMicrotime* = (MIXERCONTROL_CT_CLASS_TIME Or
      MIXERCONTROL_CT_SC_TIME_MICROSECS Or MIXERCONTROL_CT_UNITS_UNSIGNED)
  MixercontrolControltypeMillitime* = (MIXERCONTROL_CT_CLASS_TIME Or
      MIXERCONTROL_CT_SC_TIME_MILLISECS Or MIXERCONTROL_CT_UNITS_UNSIGNED)
  MixerShortNameChars* = 16
  MixerLongNameChars* = 64
  MixerrInvalline* = (MIXERR_BASE + 0)
  MixerrInvalcontrol* = (MIXERR_BASE + 1)
  MixerrInvalvalue* = (MIXERR_BASE + 2)
  MixerrLasterror* = (MIXERR_BASE + 2)
  MixerObjectfHandle* = 0x80000000
  MixerObjectfMixer* = 0
  MixerObjectfHmixer* = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_MIXER)
  MixerObjectfWaveout* = 0x10000000
  MixerObjectfHwaveout* = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_WAVEOUT)
  MixerObjectfWavein* = 0x20000000
  MixerObjectfHwavein* = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_WAVEIN)
  MixerObjectfMidiout* = 0x30000000
  MixerObjectfHmidiout* = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_MIDIOUT)
  MixerObjectfMidiin* = 0x40000000
  MixerObjectfHmidiin* = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_MIDIIN)
  MixerObjectfAux* = 0x50000000
  MixerGetcontroldetailsfValue* = 0
  MixerGetcontroldetailsfListtext* = 1
  MixerGetcontroldetailsfQuerymask* = 0x0000000F
  MixerSetcontroldetailsfValue* = 0
  MixerSetcontroldetailsfCustom* = 1
  MixerSetcontroldetailsfQuerymask* = 0x0000000F
  JoyerrNoerror* = (0)
  JoyerrParms* = (JOYERR_BASE + 5)
  JoyerrNocando* = (JOYERR_BASE + 6)
  JoyerrUnplugged* = (JOYERR_BASE + 7)
  JoyButton1* = 1
  JoyButton2* = 2
  JoyButton3* = 4
  JoyButton4* = 8
  JoyButton1chg* = 256
  JoyButton2chg* = 512
  JoyButton3chg* = 0x00000400
  JoyButton4chg* = 0x00000800
  JoyButton5* = 16
  JoyButton6* = 32
  JoyButton7* = 64
  JoyButton8* = 128
  JoyButton9* = 256
  JoyButton10* = 512
  JoyButton11* = 0x00000400
  JoyButton12* = 0x00000800
  JoyButton13* = 0x00001000
  JoyButton14* = 0x00002000
  JoyButton15* = 0x00004000
  JoyButton16* = 0x00008000
  JoyButton17* = 0x00010000
  JoyButton18* = 0x00020000
  JoyButton19* = 0x00040000
  JoyButton20* = 0x00080000
  JoyButton21* = 0x00100000
  JoyButton22* = 0x00200000
  JoyButton23* = 0x00400000
  JoyButton24* = 0x00800000
  JoyButton25* = 0x01000000
  JoyButton26* = 0x02000000
  JoyButton27* = 0x04000000
  JoyButton28* = 0x08000000
  JoyButton29* = 0x10000000
  JoyButton30* = 0x20000000
  JoyButton31* = 0x40000000
  JoyButton32* = 0x80000000
  JoyPovcentered* = - 1
  JoyPovforward* = 0
  JoyPovright* = 9000
  JoyPovbackward* = 18000
  JoyPovleft* = 27000
  JoyReturnx* = 1
  JoyReturny* = 2
  JoyReturnz* = 4
  JoyReturnr* = 8
  JoyReturnu* = 16
  JoyReturnv* = 32
  JoyReturnpov* = 64
  JoyReturnbuttons* = 128
  JoyReturnrawdata* = 256
  JoyReturnpovcts* = 512
  JoyReturncentered* = 0x00000400
  JoyUsedeadzone* = 0x00000800
  JoyReturnall* = (JOY_RETURNX Or JOY_RETURNY Or JOY_RETURNZ Or JOY_RETURNR Or
      JOY_RETURNU Or JOY_RETURNV Or JOY_RETURNPOV Or JOY_RETURNBUTTONS)
  JoyCalReadalways* = 0x00010000
  JoyCalReadxyonly* = 0x00020000
  JoyCalRead3* = 0x00040000
  JoyCalRead4* = 0x00080000
  JoyCalReadxonly* = 0x00100000
  JoyCalReadyonly* = 0x00200000
  JoyCalRead5* = 0x00400000
  JoyCalRead6* = 0x00800000
  JoyCalReadzonly* = 0x01000000
  JoyCalReadronly* = 0x02000000
  JoyCalReaduonly* = 0x04000000
  JoyCalReadvonly* = 0x08000000
  Joystickid1* = 0
  Joystickid2* = 1
  JoycapsHasz* = 1
  JoycapsHasr* = 2
  JoycapsHasu* = 4
  JoycapsHasv* = 8
  JoycapsHaspov* = 16
  JoycapsPov4dir* = 32
  JoycapsPovcts* = 64
  MmioerrBase* = 256
  MmioerrFilenotfound* = (MMIOERR_BASE + 1)
  MmioerrOutofmemory* = (MMIOERR_BASE + 2)
  MmioerrCannotopen* = (MMIOERR_BASE + 3)
  MmioerrCannotclose* = (MMIOERR_BASE + 4)
  MmioerrCannotread* = (MMIOERR_BASE + 5)
  MmioerrCannotwrite* = (MMIOERR_BASE + 6)
  MmioerrCannotseek* = (MMIOERR_BASE + 7)
  MmioerrCannotexpand* = (MMIOERR_BASE + 8)
  MmioerrChunknotfound* = (MMIOERR_BASE + 9)
  MmioerrUnbuffered* = (MMIOERR_BASE + 10)
  MmioerrPathnotfound* = (MMIOERR_BASE + 11)
  MmioerrAccessdenied* = (MMIOERR_BASE + 12)
  MmioerrSharingviolation* = (MMIOERR_BASE + 13)
  MmioerrNetworkerror* = (MMIOERR_BASE + 14)
  MmioerrToomanyopenfiles* = (MMIOERR_BASE + 15)
  MmioerrInvalidfile* = (MMIOERR_BASE + 16)
  Cfsepchar* = '+'
  WavecapsPitch* = 1
  WavecapsPlaybackrate* = 2
  WavecapsVolume* = 4
  WavecapsLrvolume* = 8
  WavecapsSync* = 16
  WavecapsSampleaccurate* = 32
  WavecapsDirectsound* = 64
  MixerGetlineinfofDestination* = 0
  MixerGetlineinfofSource* = 1
  MixerGetlineinfofLineid* = 2
  MixerGetlineinfofComponenttype* = 3
  MixerGetlineinfofTargettype* = 4
  MixerGetlineinfofQuerymask* = 0x0000000F
  MmioRwmode* = 3
  MmioSharemode* = 0x00000070
  MmioCreate* = 0x00001000
  MmioParse* = 256
  MmioDelete* = 512
  MmioExist* = 0x00004000
  MmioAllocbuf* = 0x00010000
  MmioGettemp* = 0x00020000
  MmioDirty* = 0x10000000
  cMMIOREAD* = 0
  cMMIOWRITE* = 1
  MmioReadwrite* = 2
  MmioCompat* = 0
  MmioExclusive* = 16
  MmioDenywrite* = 32
  MmioDenyread* = 0x00000030
  MmioDenynone* = 64
  MmioFhopen* = 16
  MmioEmptybuf* = 16
  MmioToupper* = 16
  MmioInstallproc* = 0x00010000
  MmioGlobalproc* = 0x10000000
  MmioRemoveproc* = 0x00020000
  MmioUnicodeproc* = 0x01000000
  MmioFindproc* = 0x00040000
  MmioFindchunk* = 16
  MmioFindriff* = 32
  MmioFindlist* = 64
  MmioCreateriff* = 32
  MmioCreatelist* = 64
  MmiomRead* = cMMIO_READ
  MmiomWrite* = cMMIO_WRITE
  MmiomSeek* = 2
  MmiomOpen* = 3
  MmiomClose* = 4
  MmiomWriteflush* = 5
  MmiomRename* = 6
  MmiomUser* = 0x00008000
  FourccRiff* = 0x46464952   #'R','I','F','F'
  FourccList* = 0x5453494C   #'L','I','S','T'
  FourccDos* = 0x20532F44    #'D','O','S',' '
  FourccMem* = 0x204D454D    #'M','E','M',' '
  SeekSet* = 0
  SeekCur* = 1
  SeekEnd* = 2
  MmioDefaultbuffer* = 8192
  McierrInvalidDeviceId* = (MCIERR_BASE + 1)
  McierrUnrecognizedKeyword* = (MCIERR_BASE + 3)
  McierrUnrecognizedCommand* = (MCIERR_BASE + 5)
  McierrHardware* = (MCIERR_BASE + 6)
  McierrInvalidDeviceName* = (MCIERR_BASE + 7)
  McierrOutOfMemory* = (MCIERR_BASE + 8)
  McierrDeviceOpen* = (MCIERR_BASE + 9)
  McierrCannotLoadDriver* = (MCIERR_BASE + 10)
  McierrMissingCommandString* = (MCIERR_BASE + 11)
  McierrParamOverflow* = (MCIERR_BASE + 12)
  McierrMissingStringArgument* = (MCIERR_BASE + 13)
  McierrBadInteger* = (MCIERR_BASE + 14)
  McierrParserInternal* = (MCIERR_BASE + 15)
  McierrDriverInternal* = (MCIERR_BASE + 16)
  McierrMissingParameter* = (MCIERR_BASE + 17)
  McierrUnsupportedFunction* = (MCIERR_BASE + 18)
  McierrFileNotFound* = (MCIERR_BASE + 19)
  McierrDeviceNotReady* = (MCIERR_BASE + 20)
  McierrInternal* = (MCIERR_BASE + 21)
  McierrDriver* = (MCIERR_BASE + 22)
  McierrCannotUseAll* = (MCIERR_BASE + 23)
  McierrMultiple* = (MCIERR_BASE + 24)
  McierrExtensionNotFound* = (MCIERR_BASE + 25)
  McierrOutofrange* = (MCIERR_BASE + 26)
  McierrFlagsNotCompatible* = (MCIERR_BASE + 28)
  McierrFileNotSaved* = (MCIERR_BASE + 30)
  McierrDeviceTypeRequired* = (MCIERR_BASE + 31)
  McierrDeviceLocked* = (MCIERR_BASE + 32)
  McierrDuplicateAlias* = (MCIERR_BASE + 33)
  McierrBadConstant* = (MCIERR_BASE + 34)
  McierrMustUseShareable* = (MCIERR_BASE + 35)
  McierrMissingDeviceName* = (MCIERR_BASE + 36)
  McierrBadTimeFormat* = (MCIERR_BASE + 37)
  McierrNoClosingQuote* = (MCIERR_BASE + 38)
  McierrDuplicateFlags* = (MCIERR_BASE + 39)
  McierrInvalidFile* = (MCIERR_BASE + 40)
  McierrNullParameterBlock* = (MCIERR_BASE + 41)
  McierrUnnamedResource* = (MCIERR_BASE + 42)
  McierrNewRequiresAlias* = (MCIERR_BASE + 43)
  McierrNotifyOnAutoOpen* = (MCIERR_BASE + 44)
  McierrNoElementAllowed* = (MCIERR_BASE + 45)
  McierrNonapplicableFunction* = (MCIERR_BASE + 46)
  McierrIllegalForAutoOpen* = (MCIERR_BASE + 47)
  McierrFilenameRequired* = (MCIERR_BASE + 48)
  McierrExtraCharacters* = (MCIERR_BASE + 49)
  McierrDeviceNotInstalled* = (MCIERR_BASE + 50)
  McierrGetCd* = (MCIERR_BASE + 51)
  McierrSetCd* = (MCIERR_BASE + 52)
  McierrSetDrive* = (MCIERR_BASE + 53)
  McierrDeviceLength* = (MCIERR_BASE + 54)
  McierrDeviceOrdLength* = (MCIERR_BASE + 55)
  McierrNoInteger* = (MCIERR_BASE + 56)
  McierrWaveOutputsinuse* = (MCIERR_BASE + 64)
  McierrWaveSetoutputinuse* = (MCIERR_BASE + 65)
  McierrWaveInputsinuse* = (MCIERR_BASE + 66)
  McierrWaveSetinputinuse* = (MCIERR_BASE + 67)
  McierrWaveOutputunspecified* = (MCIERR_BASE + 68)
  McierrWaveInputunspecified* = (MCIERR_BASE + 69)
  McierrWaveOutputsunsuitable* = (MCIERR_BASE + 70)
  McierrWaveSetoutputunsuitable* = (MCIERR_BASE + 71)
  McierrWaveInputsunsuitable* = (MCIERR_BASE + 72)
  McierrWaveSetinputunsuitable* = (MCIERR_BASE + 73)
  McierrSeqDivIncompatible* = (MCIERR_BASE + 80)
  McierrSeqPortInuse* = (MCIERR_BASE + 81)
  McierrSeqPortNonexistent* = (MCIERR_BASE + 82)
  McierrSeqPortMapnodevice* = (MCIERR_BASE + 83)
  McierrSeqPortMiscerror* = (MCIERR_BASE + 84)
  McierrSeqTimer* = (MCIERR_BASE + 85)
  McierrSeqPortunspecified* = (MCIERR_BASE + 86)
  McierrSeqNomidipresent* = (MCIERR_BASE + 87)
  McierrNoWindow* = (MCIERR_BASE + 90)
  McierrCreatewindow* = (MCIERR_BASE + 91)
  McierrFileRead* = (MCIERR_BASE + 92)
  McierrFileWrite* = (MCIERR_BASE + 93)
  McierrNoIdentity* = (MCIERR_BASE + 94)
  McierrCustomDriverBase* = (MCIERR_BASE + 256)
  MciFirst* = DRV_MCI_FIRST
  MciEscape* = 0x00000805
  MciPlay* = 0x00000806
  MciSeek* = 0x00000807
  MciStop* = 0x00000808
  MciPause* = 0x00000809
  MciInfo* = 0x0000080A
  MciGetdevcaps* = 0x0000080B
  MciBreak* = 0x00000811
  MciWhere* = 0x00000843
  MciFreeze* = 0x00000844
  MciUnfreeze* = 0x00000845
  MciLoad* = 0x00000850
  MciCut* = 0x00000851
  MciCopy* = 0x00000852
  MciPaste* = 0x00000853
  MciUpdate* = 0x00000854
  MciResume* = 0x00000855
  MciDelete* = 0x00000856
  MciSet* = 0x0000080D
  MciStep* = 0x0000080E
  MciSave* = 0x00000813
  MciSpin* = 0x0000080C
  MciStatus* = 0x00000814
  MciCue* = 0x00000830
  MciRealize* = 0x00000840
  MciWindow* = 0x00000841
  MciPut* = 0x00000842
  MciRecord* = 0x0000080F
  MciSysinfo* = 0x00000810
  MciOpen* = 0x00000803
  MciClose* = 0x00000804
  MciUserMessages* = (DRV_MCI_FIRST + 0x00000400)
  MciLast* = 0x00000FFF
  MciAllDeviceId* = - 1
  MciDevtypeVcr* = 513
  MciDevtypeVideodisc* = 514
  MciDevtypeOverlay* = 515
  MciDevtypeCdAudio* = 516
  MciDevtypeDat* = 517
  MciDevtypeScanner* = 518
  MciDevtypeAnimation* = 519
  MciDevtypeDigitalVideo* = 520
  MciDevtypeOther* = 521
  MciDevtypeWaveformAudio* = 522
  MciDevtypeSequencer* = 523
  MciDevtypeFirst* = MCI_DEVTYPE_VCR
  MciDevtypeLast* = MCI_DEVTYPE_SEQUENCER
  MciDevtypeFirstUser* = 0x00001000
  MciModeNotReady* = (MCI_STRING_OFFSET + 12)
  MciModeStop* = (MCI_STRING_OFFSET + 13)
  MciModePlay* = (MCI_STRING_OFFSET + 14)
  MciModeRecord* = (MCI_STRING_OFFSET + 15)
  MciModeSeek* = (MCI_STRING_OFFSET + 16)
  MciModePause* = (MCI_STRING_OFFSET + 17)
  MciModeOpen* = (MCI_STRING_OFFSET + 18)
  MciFormatMilliseconds* = 0
  MciFormatHms* = 1
  MciFormatMsf* = 2
  MciFormatFrames* = 3
  MciFormatSmpte24* = 4
  MciFormatSmpte25* = 5
  MciFormatSmpte30* = 6
  MciFormatSmpte30drop* = 7
  MciFormatBytes* = 8
  MciFormatSamples* = 9
  MciFormatTmsf* = 10

proc mciMsfMinute*(msf: Int32): Int8
proc mciMsfSecond*(msf: Int32): Int8
proc mciMsfFrame*(msf: Int32): Int8
proc mciMakeMsf*(m, s, f: Int8): Int32
const
  MciSetDoorOpen* = 256
  MciSetDoorClosed* = 512
  MciSetTimeFormat* = 0x00000400
  MciSetAudio* = 0x00000800
  MciSetVideo* = 0x00001000
  MciSetOn* = 0x00002000
  MciSetOff* = 0x00004000
  MciSetAudioAll* = 0
  MciSetAudioLeft* = 1
  MciSetAudioRight* = 2

proc mciTmsfTrack*(tmsf: Int32): Int8
proc mciTmsfMinute*(tmsf: Int32): Int8
proc mciTmsfSecond*(tmsf: Int32): Int8
proc mciTmsfFrame*(tmsf: Int32): Int8
proc mciHmsHour*(h: Int32): Int8
proc mciHmsMinute*(h: Int32): Int8
proc mciHmsSecond*(h: Int32): Int8
proc mciMakeHms*(h, m, s: Int8): Int32
const
  MciInfoProduct* = 256
  MciInfoFile* = 512
  MciInfoMediaUpc* = 0x00000400
  MciInfoMediaIdentity* = 0x00000800
  MciInfoName* = 0x00001000
  MciInfoCopyright* = 0x00002000

proc mciMakeTmsf*(t, m, s, f: Int8): Int32
const
  MciWait* = 2
  MciFrom* = 4
  MciTo* = 8
  MciTrack* = 16
  MciSeekToStart* = 256
  MciSeekToEnd* = 512
  MciStatusItem* = 256
  MciStatusStart* = 512
  MciStatusLength* = 1
  MciStatusPosition* = 2
  MciStatusNumberOfTracks* = 3
  MciStatusMode* = 4
  MciStatusMediaPresent* = 5
  MciStatusTimeFormat* = 6
  MciStatusReady* = 7
  MciStatusCurrentTrack* = 8
  MciOpenShareable* = 256
  MciOpenElement* = 512
  MciOpenAlias* = 0x00000400
  MciOpenElementId* = 0x00000800
  MciOpenTypeId* = 0x00001000
  MciOpenType* = 0x00002000
  MciGetdevcapsItem* = 256
  MciGetdevcapsCanRecord* = 1
  MciGetdevcapsHasAudio* = 2
  MciGetdevcapsHasVideo* = 3
  MciGetdevcapsDeviceType* = 4
  MciGetdevcapsUsesFiles* = 5
  MciGetdevcapsCompoundDevice* = 6
  MciGetdevcapsCanEject* = 7
  MciGetdevcapsCanPlay* = 8
  MciGetdevcapsCanSave* = 9
  MciSysinfoQuantity* = 256
  MciSysinfoOpen* = 512
  MciSysinfoName* = 0x00000400
  MciSysinfoInstallname* = 0x00000800
  MciNotifySuccessful* = 1
  MciNotifySuperseded* = 2
  MciNotifyAborted* = 4
  MciNotifyFailure* = 8
  MciNotify* = 1
  MciBreakKey* = 256
  MciBreakHwnd* = 512
  MciBreakOff* = 0x00000400
  MciRecordInsert* = 256
  MciRecordOverwrite* = 512
  MciSaveFile* = 256
  MciLoadFile* = 256
  MciVdGetdevcapsFastRate* = 0x00004003
  MciVdGetdevcapsSlowRate* = 0x00004004
  MciVdGetdevcapsNormalRate* = 0x00004005
  MciVdStepFrames* = 0x00010000
  MciVdStepReverse* = 0x00020000
  MciVdEscapeString* = 256
  MciVdFormatTrack* = 0x00004001
  MciVdPlayReverse* = 0x00010000
  MciVdPlayFast* = 0x00020000
  MciVdModePark* = (MCI_VD_OFFSET + 1)
  MciVdGetdevcapsCav* = 0x00020000
  MciVdSpinUp* = 0x00010000
  MciVdSpinDown* = 0x00020000
  MciVdSeekReverse* = 0x00010000
  MciVdStatusSpeed* = 0x00004002
  MciVdStatusForward* = 0x00004003
  MciVdStatusMediaType* = 0x00004004
  MciVdStatusSide* = 0x00004005
  MciVdGetdevcapsCanReverse* = 0x00004002
  MciVdMediaClv* = (MCI_VD_OFFSET + 2)
  MciVdMediaCav* = (MCI_VD_OFFSET + 3)
  MciVdMediaOther* = (MCI_VD_OFFSET + 4)
  MciVdStatusDiscSize* = 0x00004006
  MciVdGetdevcapsClv* = 0x00010000
  MciVdPlaySpeed* = 0x00040000
  MciVdPlayScan* = 0x00080000
  MciVdPlaySlow* = 0x00100000
  MciWaveStatusChannels* = 0x00004002
  MciWaveStatusSamplespersec* = 0x00004003
  MciWavePcm* = MCI_WAVE_OFFSET
  MciWaveMapper* = (MCI_WAVE_OFFSET + 1)
  MciWaveOpenBuffer* = 0x00010000
  MciWaveStatusBitspersample* = 0x00004006
  MciWaveStatusLevel* = 0x00004007
  MciWaveSetFormattag* = 0x00010000
  MciWaveSetChannels* = 0x00020000
  MciWaveSetSamplespersec* = 0x00040000
  MciWaveSetAvgbytespersec* = 0x00080000
  MciWaveSetBlockalign* = 0x00100000
  MciWaveSetBitspersample* = 0x00200000
  MciWaveInput* = 0x00400000
  MciWaveOutput* = 0x00800000
  MciWaveStatusFormattag* = 0x00004001
  MciWaveSetAnyinput* = 0x04000000
  MciWaveSetAnyoutput* = 0x08000000
  MciWaveGetdevcapsInputs* = 0x00004001
  MciWaveGetdevcapsOutputs* = 0x00004002
  MciWaveStatusAvgbytespersec* = 0x00004004
  MciWaveStatusBlockalign* = 0x00004005
  MciCdaStatusTypeTrack* = 0x00004001
  MciCdaTrackAudio* = (MCI_CD_OFFSET)
  MciCdaTrackOther* = (MCI_CD_OFFSET + 1)
  MciSeqDivPpqn* = (MCI_SEQ_OFFSET)
  MciSeqDivSmpte24* = (MCI_SEQ_OFFSET + 1)
  MciSeqDivSmpte25* = (MCI_SEQ_OFFSET + 2)
  MciSeqDivSmpte30drop* = (MCI_SEQ_OFFSET + 3)
  MciSeqDivSmpte30* = (MCI_SEQ_OFFSET + 4)
  MciSeqFormatSongptr* = 0x00004001
  MciSeqFile* = 0x00004002
  MciSeqMidi* = 0x00004003
  MciSeqSmpte* = 0x00004004
  MciSeqNone* = 65533
  MciSeqMapper* = 65535
  MciSeqStatusTempo* = 0x00004002
  MciSeqStatusPort* = 0x00004003
  MciSeqStatusSlave* = 0x00004007
  MciSeqStatusMaster* = 0x00004008
  MciSeqStatusOffset* = 0x00004009
  MciSeqStatusDivtype* = 0x0000400A
  MciSeqStatusName* = 0x0000400B
  MciSeqStatusCopyright* = 0x0000400C
  MciSeqSetTempo* = 0x00010000
  MciSeqSetPort* = 0x00020000
  MciSeqSetSlave* = 0x00040000
  MciSeqSetMaster* = 0x00080000
  MciSeqSetOffset* = 0x01000000
  MciAnimPlaySlow* = 0x00080000
  MciAnimPlayScan* = 0x00100000
  MciAnimGetdevcapsSlowRate* = 0x00004003
  MciAnimGetdevcapsNormalRate* = 0x00004004
  MciAnimStepReverse* = 0x00010000
  MciAnimStepFrames* = 0x00020000
  MciAnimStatusSpeed* = 0x00004001
  MciAnimGetdevcapsPalettes* = 0x00004006
  MciAnimOpenWs* = 0x00010000
  MciAnimOpenParent* = 0x00020000
  MciAnimOpenNostatic* = 0x00040000
  MciAnimGetdevcapsFastRate* = 0x00004002
  MciAnimPlaySpeed* = 0x00010000
  MciAnimPlayReverse* = 0x00020000
  MciAnimPlayFast* = 0x00040000
  MciAnimStatusForward* = 0x00004002
  MciAnimStatusHwnd* = 0x00004003
  MciAnimStatusHpal* = 0x00004004
  MciAnimStatusStretch* = 0x00004005
  MciAnimInfoText* = 0x00010000
  MciAnimGetdevcapsCanReverse* = 0x00004001
  MciAnimWindowText* = 0x00080000
  MciAnimWindowEnableStretch* = 0x00100000
  MciAnimWindowDisableStretch* = 0x00200000
  MciAnimWindowDefault* = 0
  MciAnimRect* = 0x00010000
  MciAnimPutSource* = 0x00020000
  MciAnimPutDestination* = 0x00040000
  MciAnimWhereSource* = 0x00020000
  MciAnimWhereDestination* = 0x00040000
  MciAnimUpdateHdc* = 0x00020000
  MciAnimGetdevcapsCanStretch* = 0x00004007
  MciAnimGetdevcapsMaxWindows* = 0x00004008
  MciAnimRealizeNorm* = 0x00010000
  MciAnimRealizeBkgd* = 0x00020000
  MciAnimWindowHwnd* = 0x00010000
  MciAnimWindowState* = 0x00040000
  TimerrNoerror* = 0
  TimerrNocando* = (TIMERR_BASE + 1)
  TimerrStruct* = (TIMERR_BASE + 33)
  TimeOneshot* = 0
  TimePeriodic* = 1
  TimeCallbackFunction* = 0
  TimeCallbackEventSet* = 16
  TimeCallbackEventPulse* = 32
  MciOvlyOpenWs* = 0x00010000
  MciOvlyOpenParent* = 0x00020000
  MciOvlyStatusHwnd* = 0x00004001
  MciOvlyStatusStretch* = 0x00004002
  MciOvlyInfoText* = 0x00010000
  MciOvlyGetdevcapsCanStretch* = 0x00004001
  MciOvlyGetdevcapsCanFreeze* = 0x00004002
  MciOvlyGetdevcapsMaxWindows* = 0x00004003
  MciOvlyWindowHwnd* = 0x00010000
  MciOvlyWindowState* = 0x00040000
  MciOvlyWindowText* = 0x00080000
  MciOvlyWindowEnableStretch* = 0x00100000
  MciOvlyWindowDisableStretch* = 0x00200000
  MciOvlyWindowDefault* = 0
  MciOvlyRect* = 0x00010000
  MciOvlyPutSource* = 0x00020000
  MciOvlyPutDestination* = 0x00040000
  MciOvlyPutFrame* = 0x00080000
  MciOvlyPutVideo* = 0x00100000
  MciOvlyWhereSource* = 0x00020000
  MciOvlyWhereDestination* = 0x00040000
  MciOvlyWhereFrame* = 0x00080000
  MciOvlyWhereVideo* = 0x00100000
  AuxMapper* = - 1
  MixerGetlinecontrolsfOnebyid* = 1
  MixerGetlinecontrolsfOnebytype* = 2
  MixerGetlinecontrolsfAll* = 0
  MixerGetlinecontrolsfQuerymask* = 0x0000000F
  Newtransparent* = 3
  Queryropsupport* = 40
  Selectdib* = 41

proc dibindex*(n: Int32): Int32
const
  ScScreensave* = 0x0000F140
  AuxcapsCdaudio* = 1
  AuxcapsAuxin* = 2
  AuxcapsVolume* = 1
  AuxcapsLrvolume* = 2 #/////////////////////////////////////////////////////////
                        # Structures and typedefs
                        #/////////////////////////////////////////////////////////

type
  Mmtime* {.final.} = object
    wType*: Uint
    hour*, min*, sec*, frame*, fps*, dummy*: Int8
    pad*: Array[0..1, Int8]

  Pmmtime* = ptr Mmtime
  Npmmtime* = ptr Mmtime
  Lpmmtime* = ptr Mmtime
  Pwavehdr* = ptr Wavehdr
  TMMTime* = Mmtime
  Wavehdr* {.final.} = object
    lpData*: Cstring
    dwBufferLength*: Dword
    dwBytesRecorded*: Dword
    dwUser*: Dword
    dwFlags*: Dword
    dwLoops*: Dword
    lpNext*: Pwavehdr
    reserved*: Dword

  TWAVEHDR* = Wavehdr
  Npwavehdr* = ptr Wavehdr
  Lpwavehdr* = ptr Wavehdr
  Waveoutcapsa* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Char]
    dwFormats*: Dword
    wChannels*: Int16
    wReserved1*: Int16
    dwSupport*: Dword

  TWAVEOUTCAPSA* = Waveoutcapsa
  Pwaveoutcapsa* = ptr Waveoutcapsa
  Npwaveoutcapsa* = ptr Waveoutcapsa
  Lpwaveoutcapsa* = ptr Waveoutcapsa
  Waveoutcapsw* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Wchar]
    dwFormats*: Dword
    wChannels*: Int16
    wReserved1*: Int16
    dwSupport*: Dword

  Pwaveoutcapsw* = ptr Waveoutcapsw
  Npwaveoutcapsw* = ptr Waveoutcapsw
  Lpwaveoutcapsw* = ptr Waveoutcapsw
  TWAVEOUTCAPSW* = Waveoutcapsw

when defined(UNICODE):
  type
    WAVEOUTCAPS* = WAVEOUTCAPSW
    PWAVEOUTCAPS* = PWAVEOUTCAPSW
    NPWAVEOUTCAPS* = NPWAVEOUTCAPSW
    LPWAVEOUTCAPS* = LPWAVEOUTCAPSW
else:
  type
    Waveoutcaps* = Waveoutcapsa
    Pwaveoutcaps* = Pwaveoutcapsa
    Npwaveoutcaps* = Npwaveoutcapsa
    Lpwaveoutcaps* = Lpwaveoutcapsa
type
  TWAVEOUTCAPS* = Waveoutcaps
  Waveincapsa* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Char]
    dwFormats*: Dword
    wChannels*: Int16
    wReserved1*: Int16

  Pwaveincapsa* = ptr Waveincapsa
  Npwaveincapsa* = ptr Waveincapsa
  Lpwaveincapsa* = ptr Waveincapsa
  TWAVEINCAPSA* = Waveincapsa
  Waveincapsw* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Wchar]
    dwFormats*: Dword
    wChannels*: Int16
    wReserved1*: Int16

  Pwaveincapsw* = ptr Waveincapsw
  Npwaveincapsw* = ptr Waveincapsw
  Lpwaveincapsw* = ptr Waveincapsw
  TWAVEINCAPSW* = Waveincapsw

when defined(UNICODE):
  type
    WAVEINCAPS* = WAVEINCAPSW
    PWAVEINCAPS* = PWAVEINCAPSW
    NPWAVEINCAPS* = NPWAVEINCAPSW
    LPWAVEINCAPS* = LPWAVEINCAPSW
else:
  type
    Waveincaps* = Waveincapsa
    Pwaveincaps* = Pwaveincapsa
    Npwaveincaps* = Npwaveincapsa
    Lpwaveincaps* = Lpwaveincapsa
type
  TWAVEINCAPS* = Waveincaps
  Waveformat* {.final.} = object
    wFormatTag*: Int16
    nChannels*: Int16
    nSamplesPerSec*: Dword
    nAvgBytesPerSec*: Dword
    nBlockAlign*: Int16

  Pwaveformat* = ptr Waveformat
  Npwaveformat* = ptr Waveformat
  Lpwaveformat* = ptr Waveformat
  TWAVEFORMAT* = Waveformat

const
  WaveFormatPcm* = 1

type
  Pcmwaveformat* {.final.} = object
    wf*: Waveformat
    wBitsPerSample*: Int16

  Ppcmwaveformat* = ptr Pcmwaveformat
  Nppcmwaveformat* = ptr Pcmwaveformat
  Lppcmwaveformat* = ptr Pcmwaveformat
  TPCMWAVEFORMAT* = Pcmwaveformat
  Waveformatex* {.final.} = object
    wFormatTag*: Int16
    nChannels*: Int16
    nSamplesPerSec*: Dword
    nAvgBytesPerSec*: Dword
    nBlockAlign*: Int16
    wBitsPerSample*: Int16
    cbSize*: Int16

  Pwaveformatex* = ptr Waveformatex
  Npwaveformatex* = ptr Waveformatex
  Lpwaveformatex* = ptr Waveformatex
  Lpcwaveformatex* = ptr Waveformatex
  TWAVEFORMATEX* = Waveformatex
  Hmidi* = THandle
  Hmidiin* = THandle
  Hmidiout* = THandle
  Hmidistrm* = THandle
  Lphmidi* = ptr Hmidi
  Lphmidiin* = ptr Hmidiin
  Lphmidiout* = ptr Hmidiout
  Lphmidistrm* = ptr Hmidistrm
  Lpmidicallback* = Pdrvcallback

const
  Midipatchsize* = 128

type
  Patcharray* = Array[0..Pred(MIDIPATCHSIZE), Int16]
  Lppatcharray* = ptr Int16
  Keyarray* = Array[0..Pred(MIDIPATCHSIZE), Int16]
  Lpkeyarray* = ptr Int16
  Midioutcapsa* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Char]
    wTechnology*: Int16
    wVoices*: Int16
    wNotes*: Int16
    wChannelMask*: Int16
    dwSupport*: Dword

  Pmidioutcapsa* = ptr Midioutcapsa
  Npmidioutcapsa* = ptr Midioutcapsa
  Lpmidioutcapsa* = ptr Midioutcapsa
  TMIDIOUTCAPSA* = Midioutcapsa
  Midioutcapsw* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Wchar]
    wTechnology*: Int16
    wVoices*: Int16
    wNotes*: Int16
    wChannelMask*: Int16
    dwSupport*: Dword

  Pmidioutcapsw* = ptr Midioutcapsw
  Npmidioutcapsw* = ptr Midioutcapsw
  Lpmidioutcapsw* = ptr Midioutcapsw
  TMIDIOUTCAPSW* = Midioutcapsw
  Midiincapsa* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Char]
    dwSupport*: Dword

  Pmidiincapsa* = ptr Midiincapsa
  Npmidiincapsa* = ptr Midiincapsa
  Lpmidiincapsa* = ptr Midiincapsa
  TMIDIINCAPSA* = Midiincapsa
  Midiincapsw* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Wchar]
    dwSupport*: Dword

  Pmidiincapsw* = ptr Midiincapsw
  Npmidiincapsw* = ptr Midiincapsw
  Lpmidiincapsw* = ptr Midiincapsw
  TMIDIINCAPSW* = Midiincapsw

when defined(UNICODE):
  type
    MIDIINCAPS* = MIDIINCAPSW
    PMIDIINCAPS* = PMIDIINCAPSW
    NPMIDIINCAPS* = NPMIDIINCAPSW
    LPMIDIINCAPS* = LPMIDIINCAPSW
    MIDIOUTCAPS* = MIDIOUTCAPSW
    PMIDIOUTCAPS* = PMIDIOUTCAPSW
    NPMIDIOUTCAPS* = NPMIDIOUTCAPSW
    LPMIDIOUTCAPS* = LPMIDIOUTCAPSW
else:
  type
    Midioutcaps* = Midioutcapsa
    Pmidioutcaps* = Pmidioutcapsa
    Npmidioutcaps* = Npmidioutcapsa
    Lpmidioutcaps* = Lpmidioutcapsa
    Midiincaps* = Midiincapsa
    Pmidiincaps* = Pmidiincapsa
    Npmidiincaps* = Npmidiincapsa
    Lpmidiincaps* = Lpmidiincapsa
type
  TMIDIINCAPS* = Midiincaps
  Pmidihdr* = ptr Midihdr
  Midihdr* {.final.} = object
    lpData*: Cstring
    dwBufferLength*: Dword
    dwBytesRecorded*: Dword
    dwUser*: Dword
    dwFlags*: Dword
    lpNext*: Pmidihdr
    reserved*: Dword
    dwOffset*: Dword
    dwReserved*: Array[0..Pred(8), Dword]

  Npmidihdr* = ptr Midihdr
  Lpmidihdr* = ptr Midihdr
  TMIDIHDR* = Midihdr
  Midievent* {.final.} = object
    dwDeltaTime*: Dword
    dwStreamID*: Dword
    dwEvent*: Dword
    dwParms*: Array[0..Pred(1), Dword]

  TMIDIEVENT* = Midievent
  Midistrmbuffver* {.final.} = object
    dwVersion*: Dword
    dwMid*: Dword
    dwOEMVersion*: Dword

  TMIDISTRMBUFFVER* = Midistrmbuffver
  Tmidiproptimediv* {.final.} = object
    cbStruct*: Dword
    dwTimeDiv*: Dword

  Lpmidiproptimediv* = ptr Tmidiproptimediv
  Tmidiproptempo* {.final.} = object
    cbStruct*: Dword
    dwTempo*: Dword

  Lpmidiproptempo* = ptr Tmidiproptempo
  Auxcapsa* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Char]
    wTechnology*: Int16
    wReserved1*: Int16
    dwSupport*: Dword

  Pauxcapsa* = ptr Auxcapsa
  Npauxcapsa* = ptr Auxcapsa
  Lpauxcapsa* = ptr Auxcapsa
  TAUXCAPSA* = Auxcapsa
  Auxcapsw* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Wchar]
    wTechnology*: Int16
    wReserved1*: Int16
    dwSupport*: Dword

  Pauxcapsw* = ptr Auxcapsw
  Npauxcapsw* = ptr Auxcapsw
  Lpauxcapsw* = ptr Auxcapsw
  TAUXCAPSW* = Auxcapsw

when defined(UNICODE):
  type
    AUXCAPS* = AUXCAPSW
    PAUXCAPS* = PAUXCAPSW
    NPAUXCAPS* = NPAUXCAPSW
    LPAUXCAPS* = LPAUXCAPSW
else:
  type
    Auxcaps* = Auxcapsa
    Pauxcaps* = Pauxcapsa
    Npauxcaps* = Npauxcapsa
    Lpauxcaps* = Lpauxcapsa
type
  TAUXCAPS* = Auxcaps
  Hmixerobj* = THandle
  Lphmixerobj* = ptr Hmixerobj
  Hmixer* = THandle
  Lphmixer* = ptr Hmixer

proc mixerGetNumDevs*(): Uint{.stdcall, dynlib: "winmm.dll",
                               importc: "mixerGetNumDevs".}
type
  Mixercapsa* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Char]
    fdwSupport*: Dword
    cDestinations*: Dword

  Pmixercapsa* = ptr Mixercapsa
  Lpmixercapsa* = ptr Mixercapsa
  TMIXERCAPSA* = Mixercapsa
  Mixercapsw* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..Pred(MAXPNAMELEN), Wchar]
    fdwSupport*: Dword
    cDestinations*: Dword

  Pmixercapsw* = ptr Mixercapsw
  Lpmixercapsw* = ptr Mixercapsw
  TMIXERCAPSW* = Mixercapsw

when defined(UNICODE):
  type
    MIXERCAPS* = MIXERCAPSW
    PMIXERCAPS* = PMIXERCAPSW
    LPMIXERCAPS* = LPMIXERCAPSW
else:
  type
    Mixercaps* = Mixercapsa
    Pmixercaps* = Pmixercapsa
    Lpmixercaps* = Lpmixercapsa
type
  TMIXERCAPS* = Mixercaps
  Mixerlinea* {.final.} = object
    cbStruct*: Dword
    dwDestination*: Dword
    dwSource*: Dword
    dwLineID*: Dword
    fdwLine*: Dword
    dwUser*: Dword
    dwComponentType*: Dword
    cChannels*: Dword
    cConnections*: Dword
    cControls*: Dword
    szShortName*: Array[0..Pred(MIXER_SHORT_NAME_CHARS), Char]
    szName*: Array[0..Pred(MIXER_LONG_NAME_CHARS), Char]
    dwType*, dwDeviceID*: Dword
    wMid*, wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..pred(MAXPNAMELEN), Char]

  Pmixerlinea* = ptr Mixerlinea
  Lpmixerlinea* = ptr Mixerlinea
  TMIXERLINEA* = Mixerlinea
  Mixerlinew* {.final.} = object
    cbStruct*: Dword
    dwDestination*: Dword
    dwSource*: Dword
    dwLineID*: Dword
    fdwLine*: Dword
    dwUser*: Dword
    dwComponentType*: Dword
    cChannels*: Dword
    cConnections*: Dword
    cControls*: Dword
    szShortName*: Array[0..Pred(MIXER_SHORT_NAME_CHARS), Wchar]
    szName*: Array[0..Pred(MIXER_LONG_NAME_CHARS), Wchar]
    dwType*, dwDeviceID*: Dword
    wMid*, wPid*: Int16
    vDriverVersion*: Mmversion
    szPname*: Array[0..pred(MAXPNAMELEN), Wchar]

  TMIXERLINEW* = Mixerlinew
  Pmixerlinew* = ptr Mixerlinew
  Lpmixerlinew* = ptr Mixerlinew

when defined(UNICODE):
  type
    MIXERLINE* = MIXERLINEW
    PMIXERLINE* = PMIXERLINEW
    LPMIXERLINE* = LPMIXERLINEW
else:
  type
    Mixerline* = Mixerlinea
    Pmixerline* = Pmixerlinea
    Lpmixerline* = Lpmixerlinea
type
  TMIXERLINE* = Mixerline
  Mixercontrola* {.final.} = object
    cbStruct*: Dword
    dwControlID*: Dword
    dwControlType*: Dword
    fdwControl*: Dword
    cMultipleItems*: Dword
    szShortName*: Array[0..Pred(MIXER_SHORT_NAME_CHARS), Char]
    szName*: Array[0..Pred(MIXER_LONG_NAME_CHARS), Char]
    dwMinimum*, dwMaximum*: Dword
    dwReserved*: Array[0..3, Dword]
    cSteps*: Dword
    dwReserved2*: Array[0..4, Dword]

  Pmixercontrola* = ptr Mixercontrola
  Lpmixercontrola* = ptr Mixercontrola
  TMIXERCONTROLA* = Mixercontrola
  Mixercontrolw* {.final.} = object
    cbStruct*: Dword
    dwControlID*: Dword
    dwControlType*: Dword
    fdwControl*: Dword
    cMultipleItems*: Dword
    szShortName*: Array[0..Pred(MIXER_SHORT_NAME_CHARS), Wchar]
    szName*: Array[0..Pred(MIXER_LONG_NAME_CHARS), Wchar]
    dwMinimum*, dwMaximum*: Dword
    dwReserved*: Array[0..3, Dword]
    cSteps*: Dword
    dwReserved2*: Array[0..4, Dword]

  Pmixercontrolw* = ptr Mixercontrolw
  Lpmixercontrolw* = ptr Mixercontrolw
  TMIXERCONTROLW* = Mixercontrolw

when defined(UNICODE):
  type
    MIXERCONTROL* = MIXERCONTROLW
    PMIXERCONTROL* = PMIXERCONTROLW
    LPMIXERCONTROL* = LPMIXERCONTROLW
else:
  type
    Mixercontrol* = Mixercontrola
    Pmixercontrol* = Pmixercontrola
    Lpmixercontrol* = Lpmixercontrola
type
  TMIXERCONTROL* = Mixercontrol
  Mixerlinecontrolsa* {.final.} = object
    cbStruct*: Dword
    dwLineID*: Dword
    dwControlType*, cControls*, cbmxctrl*: Dword
    pamxctrl*: Pmixercontrola

  Pmixerlinecontrolsa* = ptr Mixerlinecontrolsa
  Lpmixerlinecontrolsa* = ptr Mixerlinecontrolsa
  TMIXERLINECONTROLSA* = Mixerlinecontrolsa
  Mixerlinecontrolsw* {.final.} = object
    cbStruct*: Dword
    dwLineID*: Dword
    dwControlType*, cControls*, cbmxctrl*: Dword
    pamxctrl*: Pmixercontrolw

  Pmixerlinecontrolsw* = ptr Mixerlinecontrolsw
  Lpmixerlinecontrolsw* = ptr Mixerlinecontrolsw
  TMIXERLINECONTROLSW* = Mixerlinecontrolsw

when defined(UNICODE):
  type
    MIXERLINECONTROLS* = MIXERLINECONTROLSW
    PMIXERLINECONTROLS* = PMIXERLINECONTROLSW
    LPMIXERLINECONTROLS* = LPMIXERLINECONTROLSW
else:
  type
    Mixerlinecontrols* = Mixerlinecontrolsa
    Pmixerlinecontrols* = Pmixerlinecontrolsa
    Lpmixerlinecontrols* = Lpmixerlinecontrolsa
type
  TMIXERLINECONTROLS* = Mixerlinecontrols
  TMIXERCONTROLDETAILS* {.final.} = object
    cbStruct*: Dword
    dwControlID*: Dword
    cChannels*: Dword
    cMultipleItems*, cbDetails*: Dword
    paDetails*: Pointer

  Mixercontroldetails* = tMIXERCONTROLDETAILS
  Pmixercontroldetails* = ptr tMIXERCONTROLDETAILS
  Lpmixercontroldetails* = ptr tMIXERCONTROLDETAILS
  MixercontroldetailsListtexta* {.final.} = object
    dwParam1*: Dword
    dwParam2*: Dword
    szName*: Array[0..Pred(MIXER_LONG_NAME_CHARS), Char]

  PmixercontroldetailsListtexta* = ptr MixercontroldetailsListtexta
  LpmixercontroldetailsListtexta* = ptr MixercontroldetailsListtexta
  TMIXERCONTROLDETAILS_LISTTEXTA* = MixercontroldetailsListtexta
  MixercontroldetailsListtextw* {.final.} = object
    dwParam1*: Dword
    dwParam2*: Dword
    szName*: Array[0..Pred(MIXER_LONG_NAME_CHARS), Wchar]

  PmixercontroldetailsListtextw* = ptr MixercontroldetailsListtextw
  LpmixercontroldetailsListtextw* = ptr MixercontroldetailsListtextw
  TMIXERCONTROLDETAILS_LISTTEXTW* = MixercontroldetailsListtextw

when defined(UNICODE):
  type
    MIXERCONTROLDETAILS_LISTTEXT* = MIXERCONTROLDETAILS_LISTTEXTW
    PMIXERCONTROLDETAILS_LISTTEXT* = PMIXERCONTROLDETAILS_LISTTEXTW
    LPMIXERCONTROLDETAILS_LISTTEXT* = LPMIXERCONTROLDETAILS_LISTTEXTW
else:
  type
    MixercontroldetailsListtext* = MixercontroldetailsListtexta
    PmixercontroldetailsListtext* = PmixercontroldetailsListtexta
    LpmixercontroldetailsListtext* = LpmixercontroldetailsListtexta
type
  TMIXERCONTROLDETAILS_LISTTEXT* = MixercontroldetailsListtext
  MixercontroldetailsBoolean* {.final.} = object
    fValue*: Int32

  PmixercontroldetailsBoolean* = ptr MixercontroldetailsBoolean
  LpmixercontroldetailsBoolean* = ptr MixercontroldetailsBoolean
  TMIXERCONTROLDETAILS_BOOLEAN* = MixercontroldetailsBoolean
  MixercontroldetailsSigned* {.final.} = object
    lValue*: Int32

  PmixercontroldetailsSigned* = ptr MixercontroldetailsSigned
  LpmixercontroldetailsSigned* = ptr MixercontroldetailsSigned
  TMIXERCONTROLDETAILS_SIGNED* = MixercontroldetailsSigned
  MixercontroldetailsUnsigned* {.final.} = object
    dwValue*: Dword

  PmixercontroldetailsUnsigned* = ptr MixercontroldetailsUnsigned
  LpmixercontroldetailsUnsigned* = ptr MixercontroldetailsUnsigned
  TMIXERCONTROLDETAILS_UNSIGNED* = MixercontroldetailsUnsigned
  Lptimecallback* = proc (uTimerID, uMsg: Uint, dwUser, dw1, dw2: Dword){.
      stdcall.}
  TTIMECALLBACK* = Lptimecallback
  Timecaps* {.final.} = object
    wPeriodMin*: Uint
    wPeriodMax*: Uint

  Ptimecaps* = ptr Timecaps
  Nptimecaps* = ptr Timecaps
  Lptimecaps* = ptr Timecaps
  TTIMECAS* = Timecaps
  Joycapsa* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    szPname*: Array[0..Pred(MAXPNAMELEN), Char]
    wXmin*: Uint
    wXmax*: Uint
    wYmin*: Uint
    wYmax*: Uint
    wZmin*: Uint
    wZmax*: Uint
    wNumButtons*: Uint
    wPeriodMin*: Uint
    wPeriodMax*: Uint
    wRmin*: Uint
    wRmax*: Uint
    wUmin*: Uint
    wUmax*: Uint
    wVmin*: Uint
    wVmax*: Uint
    wCaps*: Uint
    wMaxAxes*: Uint
    wNumAxes*: Uint
    wMaxButtons*: Uint
    szRegKey*: Array[0..Pred(MAXPNAMELEN), Char]
    szOEMVxD*: Array[0..Pred(MAX_JOYSTICKOEMVXDNAME), Char]

  Pjoycapsa* = ptr Joycapsa
  Npjoycapsa* = ptr Joycapsa
  Lpjoycapsa* = ptr Joycapsa
  TJOYCAPSA* = Joycapsa
  Joycapsw* {.final.} = object
    wMid*: Int16
    wPid*: Int16
    szPname*: Array[0..Pred(MAXPNAMELEN), Wchar]
    wXmin*: Uint
    wXmax*: Uint
    wYmin*: Uint
    wYmax*: Uint
    wZmin*: Uint
    wZmax*: Uint
    wNumButtons*: Uint
    wPeriodMin*: Uint
    wPeriodMax*: Uint
    wRmin*: Uint
    wRmax*: Uint
    wUmin*: Uint
    wUmax*: Uint
    wVmin*: Uint
    wVmax*: Uint
    wCaps*: Uint
    wMaxAxes*: Uint
    wNumAxes*: Uint
    wMaxButtons*: Uint
    szRegKey*: Array[0..Pred(MAXPNAMELEN), Wchar]
    szOEMVxD*: Array[0..Pred(MAX_JOYSTICKOEMVXDNAME), Wchar]

  Pjoycapsw* = ptr Joycapsw
  Npjoycapsw* = ptr Joycapsw
  Lpjoycapsw* = ptr Joycapsw
  TJOYCAPSW* = Joycapsw

when defined(UNICODE):
  type
    JOYCAPS* = JOYCAPSW
    PJOYCAPS* = PJOYCAPSW
    NPJOYCAPS* = NPJOYCAPSW
    LPJOYCAPS* = LPJOYCAPSW
else:
  type
    Joycaps* = Joycapsa
    Pjoycaps* = Pjoycapsa
    Npjoycaps* = Npjoycapsa
    Lpjoycaps* = Lpjoycapsa
type
  TJOYCAPS* = Joycaps
  Joyinfo* {.final.} = object
    wXpos*: Uint
    wYpos*: Uint
    wZpos*: Uint
    wButtons*: Uint

  Pjoyinfo* = ptr Joyinfo
  Npjoyinfo* = ptr Joyinfo
  Lpjoyinfo* = ptr Joyinfo
  TJOYINFO* = Joyinfo
  Joyinfoex* {.final.} = object
    dwSize*: Dword
    dwFlags*: Dword
    wXpos*: Uint
    wYpos*: Uint
    wZpos*: Uint
    dwRpos*: Dword
    dwUpos*: Dword
    dwVpos*: Dword
    wButtons*: Uint
    dwButtonNumber*: Dword
    dwPOV*: Dword
    dwReserved1*: Dword
    dwReserved2*: Dword

  Pjoyinfoex* = ptr Joyinfoex
  Npjoyinfoex* = ptr Joyinfoex
  Lpjoyinfoex* = ptr Joyinfoex
  TJOYINFOEX* = Joyinfoex
  Fourcc* = Dword
  Hpstr* = Cstring
  Hmmio* = THandle
  Lpmmioproc* = proc (x1: Lpstr, x2: Uint, x3, x4: Lparam): Lresult{.stdcall.}
  TMMIOPROC* = Lpmmioproc
  Mmioinfo* {.final.} = object
    dwFlags*: Dword
    fccIOProc*: Fourcc
    pIOProc*: Lpmmioproc
    wErrorRet*: Uint
    htask*: Htask
    cchBuffer*: Int32
    pchBuffer*: Hpstr
    pchNext*: Hpstr
    pchEndRead*: Hpstr
    pchEndWrite*: Hpstr
    lBufOffset*: Int32
    lDiskOffset*: Int32
    adwInfo*: Array[0..Pred(3), Dword]
    dwReserved1*: Dword
    dwReserved2*: Dword
    hmmio*: Hmmio

  Pmmioinfo* = ptr Mmioinfo
  Npmmioinfo* = ptr Mmioinfo
  Lpmmioinfo* = ptr Mmioinfo
  Lpcmmioinfo* = ptr Mmioinfo
  TMMIOINFO* = Mmioinfo
  Mmckinfo* {.final.} = object
    ckid*: Fourcc
    cksize*: Dword
    fccType*: Fourcc
    dwDataOffset*: Dword
    dwFlags*: Dword

  Pmmckinfo* = ptr Mmckinfo
  Npmmckinfo* = ptr Mmckinfo
  Lpmmckinfo* = ptr Mmckinfo
  Lpcmmckinfo* = ptr Mmckinfo
  TMMCKINFO* = Mmckinfo
  Mcierror* = Dword
  Mcideviceid* = Uint
  Yieldproc* = proc (mciId: Mcideviceid, dwYieldData: Dword): Uint{.stdcall.}
  TYIELDPROC* = Yieldproc
  MciGenericParms* {.final.} = object
    dwCallback*: Dword

  PmciGenericParms* = ptr MciGenericParms
  LpmciGenericParms* = ptr MciGenericParms
  TMCI_GENERIC_PARMS* = MciGenericParms
  MciOpenParmsa* {.final.} = object
    dwCallback*: Dword
    wDeviceID*: Mcideviceid
    lpstrDeviceType*: Lpcstr
    lpstrElementName*: Lpcstr
    lpstrAlias*: Lpcstr

  PmciOpenParmsa* = ptr MciOpenParmsa
  LpmciOpenParmsa* = ptr MciOpenParmsa
  TMCI_OPEN_PARMSA* = MciOpenParmsa
  MciOpenParmsw* {.final.} = object
    dwCallback*: Dword
    wDeviceID*: Mcideviceid
    lpstrDeviceType*: Lpcwstr
    lpstrElementName*: Lpcwstr
    lpstrAlias*: Lpcwstr

  PmciOpenParmsw* = ptr MciOpenParmsw
  LpmciOpenParmsw* = ptr MciOpenParmsw
  TMCI_OPEN_PARMSW* = MciOpenParmsw

when defined(UNICODE):
  type
    MCI_OPEN_PARMS* = MCI_OPEN_PARMSW
    PMCI_OPEN_PARMS* = PMCI_OPEN_PARMSW
    LPMCI_OPEN_PARMS* = LPMCI_OPEN_PARMSW
else:
  type
    MciOpenParms* = MciOpenParmsa
    PmciOpenParms* = PmciOpenParmsa
    LpmciOpenParms* = LpmciOpenParmsa
type
  TMCI_OPEN_PARMS* = MciOpenParms
  MciPlayParms* {.final.} = object
    dwCallback*: Dword
    dwFrom*: Dword
    dwTo*: Dword

  PmciPlayParms* = ptr MciPlayParms
  LpmciPlayParms* = ptr MciPlayParms
  TMCI_PLAY_PARMS* = MciPlayParms
  MciSeekParms* {.final.} = object
    dwCallback*: Dword
    dwTo*: Dword

  PmciSeekParms* = ptr MciSeekParms
  LpmciSeekParms* = ptr MciSeekParms
  TMCI_SEEK_PARMS* = MciSeekParms
  MciStatusParms* {.final.} = object
    dwCallback*: Dword
    dwReturn*: Dword
    dwItem*: Dword
    dwTrack*: Dword

  PmciStatusParms* = ptr MciStatusParms
  LpmciStatusParms* = ptr MciStatusParms
  TMCI_STATUS_PARMS* = MciStatusParms
  MciInfoParmsa* {.final.} = object
    dwCallback*: Dword
    lpstrReturn*: Cstring
    dwRetSize*: Dword

  LpmciInfoParmsa* = ptr MciInfoParmsa
  TMCI_INFO_PARMSA* = MciInfoParmsa
  MciInfoParmsw* {.final.} = object
    dwCallback*: Dword
    lpstrReturn*: Lpwstr
    dwRetSize*: Dword

  LpmciInfoParmsw* = ptr MciInfoParmsw
  TMCI_INFO_PARMSW* = MciInfoParmsw

when defined(UNICODE):
  type
    MCI_INFO_PARMS* = MCI_INFO_PARMSW
    LPMCI_INFO_PARMS* = LPMCI_INFO_PARMSW
else:
  type
    MciInfoParms* = MciInfoParmsa
    LpmciInfoParms* = LpmciInfoParmsa
type
  TMCI_INFO_PARMS* = MciInfoParms
  MciGetdevcapsParms* {.final.} = object
    dwCallback*: Dword
    dwReturn*: Dword
    dwItem*: Dword

  PmciGetdevcapsParms* = ptr MciGetdevcapsParms
  LpmciGetdevcapsParms* = ptr MciGetdevcapsParms
  TMCI_GETDEVCAPS_PARMS* = MciGetdevcapsParms
  MciSysinfoParmsa* {.final.} = object
    dwCallback*: Dword
    lpstrReturn*: Cstring
    dwRetSize*: Dword
    dwNumber*: Dword
    wDeviceType*: Uint

  PmciSysinfoParmsa* = ptr MciSysinfoParmsa
  LpmciSysinfoParmsa* = ptr MciSysinfoParmsa
  TMCI_SYSINFO_PARMSA* = MciSysinfoParmsa
  MciSysinfoParmsw* {.final.} = object
    dwCallback*: Dword
    lpstrReturn*: Lpwstr
    dwRetSize*: Dword
    dwNumber*: Dword
    wDeviceType*: Uint

  PmciSysinfoParmsw* = ptr MciSysinfoParmsw
  LpmciSysinfoParmsw* = ptr MciSysinfoParmsw
  TMCI_SYSINFO_PARMSW* = MciSysinfoParmsw

when defined(UNICODE):
  type
    MCI_SYSINFO_PARMS* = MCI_SYSINFO_PARMSW
    PMCI_SYSINFO_PARMS* = PMCI_SYSINFO_PARMSW
    LPMCI_SYSINFO_PARMS* = LPMCI_SYSINFO_PARMSW
else:
  type
    MciSysinfoParms* = MciSysinfoParmsa
    PmciSysinfoParms* = PmciSysinfoParmsa
    LpmciSysinfoParms* = LpmciSysinfoParmsa
type
  TMCI_SYSINFO_PARMS* = MciSysinfoParms
  MciSetParms* {.final.} = object
    dwCallback*: Dword
    dwTimeFormat*: Dword
    dwAudio*: Dword

  PmciSetParms* = ptr MciSetParms
  LpmciSetParms* = ptr MciSetParms
  TMCI_SET_PARMS* = MciSetParms
  MciBreakParms* {.final.} = object
    dwCallback*: Dword
    nVirtKey*: Int32
    hwndBreak*: Hwnd

  PmciBreakParms* = ptr MciBreakParms
  LpmciBreakParms* = ptr MciBreakParms
  TMCI_BREAK_PARMS* = MciBreakParms
  MciSaveParmsa* {.final.} = object
    dwCallback*: Dword
    lpfilename*: Lpcstr

  PmciSaveParmsa* = ptr MciSaveParmsa
  LpmciSaveParmsa* = ptr MciSaveParmsa
  TMCI_SAVE_PARMSA* = MciSaveParmsa
  MciSaveParmsw* {.final.} = object
    dwCallback*: Dword
    lpfilename*: Lpcwstr

  PmciSaveParmsw* = ptr MciSaveParmsw
  LpmciSaveParmsw* = ptr MciSaveParmsw
  TMCI_SAVE_PARMSW* = MciSaveParmsw

when defined(UNICODE):
  type
    MCI_SAVE_PARMS* = MCI_SAVE_PARMSW
    PMCI_SAVE_PARMS* = PMCI_SAVE_PARMSW
    LPMCI_SAVE_PARMS* = LPMCI_SAVE_PARMSW
else:
  type
    MciSaveParms* = MciSaveParmsa
    PmciSaveParms* = PmciSaveParmsa
    LpmciSaveParms* = LpmciSaveParmsa
type
  TMCI_SAVE_PARMS* = MciSaveParms
  MciLoadParmsa* {.final.} = object
    dwCallback*: Dword
    lpfilename*: Lpcstr

  PmciLoadParmsa* = ptr MciLoadParmsa
  LpmciLoadParmsa* = ptr MciLoadParmsa
  TMCI_LOAD_PARMSA* = MciLoadParmsa
  MciLoadParmsw* {.final.} = object
    dwCallback*: Dword
    lpfilename*: Lpcwstr

  PmciLoadParmsw* = ptr MciLoadParmsw
  LpmciLoadParmsw* = ptr MciLoadParmsw
  TMCI_LOAD_PARMSW* = MciLoadParmsw

when defined(UNICODE):
  type
    MCI_LOAD_PARMS* = MCI_LOAD_PARMSW
    PMCI_LOAD_PARMS* = PMCI_LOAD_PARMSW
    LPMCI_LOAD_PARMS* = LPMCI_LOAD_PARMSW
else:
  type
    MciLoadParms* = MciLoadParmsa
    PmciLoadParms* = PmciLoadParmsa
    LpmciLoadParms* = LpmciLoadParmsa
type
  TMCI_LOAD_PARMS* = MciLoadParms
  MciRecordParms* {.final.} = object
    dwCallback*: Dword
    dwFrom*: Dword
    dwTo*: Dword

  LpmciRecordParms* = ptr MciRecordParms
  TMCI_RECORD_PARMS* = MciRecordParms
  MciVdPlayParms* {.final.} = object
    dwCallback*: Dword
    dwFrom*: Dword
    dwTo*: Dword
    dwSpeed*: Dword

  PmciVdPlayParms* = ptr MciVdPlayParms
  LpmciVdPlayParms* = ptr MciVdPlayParms
  TMCI_VD_PLAY_PARMS* = MciVdPlayParms
  MciVdStepParms* {.final.} = object
    dwCallback*: Dword
    dwFrames*: Dword

  PmciVdStepParms* = ptr MciVdStepParms
  LpmciVdStepParms* = ptr MciVdStepParms
  MciVdEscapeParmsa* {.final.} = object
    dwCallback*: Dword
    lpstrCommand*: Lpcstr

  PmciVdEscapeParmsa* = ptr MciVdEscapeParmsa
  LpmciVdEscapeParmsa* = ptr MciVdEscapeParmsa
  TMCI_VD_ESCAPE_PARMSA* = MciVdEscapeParmsa
  MciVdEscapeParmsw* {.final.} = object
    dwCallback*: Dword
    lpstrCommand*: Lpcwstr

  PmciVdEscapeParmsw* = ptr MciVdEscapeParmsw
  LpmciVdEscapeParmsw* = ptr MciVdEscapeParmsw
  TMCI_VD_ESCAPE_PARMSW* = MciVdEscapeParmsw

when defined(UNICODE):
  type
    MCI_VD_ESCAPE_PARMS* = MCI_VD_ESCAPE_PARMSW
    PMCI_VD_ESCAPE_PARMS* = PMCI_VD_ESCAPE_PARMSW
    LPMCI_VD_ESCAPE_PARMS* = LPMCI_VD_ESCAPE_PARMSW
else:
  type
    MciVdEscapeParms* = MciVdEscapeParmsa
    PmciVdEscapeParms* = PmciVdEscapeParmsa
    LpmciVdEscapeParms* = LpmciVdEscapeParmsa
type
  TMCI_VD_ESCAPE_PARMS* = MciVdEscapeParms
  MciWaveOpenParmsa* {.final.} = object
    dwCallback*: Dword
    wDeviceID*: Mcideviceid
    lpstrDeviceType*: Lpcstr
    lpstrElementName*: Lpcstr
    lpstrAlias*: Lpcstr
    dwBufferSeconds*: Dword

  PmciWaveOpenParmsa* = ptr MciWaveOpenParmsa
  LpmciWaveOpenParmsa* = ptr MciWaveOpenParmsa
  TMCI_WAVE_OPEN_PARMSA* = MciWaveOpenParmsa
  MciWaveOpenParmsw* {.final.} = object
    dwCallback*: Dword
    wDeviceID*: Mcideviceid
    lpstrDeviceType*: Lpcwstr
    lpstrElementName*: Lpcwstr
    lpstrAlias*: Lpcwstr
    dwBufferSeconds*: Dword

  PmciWaveOpenParmsw* = ptr MciWaveOpenParmsw
  LpmciWaveOpenParmsw* = ptr MciWaveOpenParmsw
  TMCI_WAVE_OPEN_PARMSW* = MciWaveOpenParmsw

when defined(UNICODE):
  type
    MCI_WAVE_OPEN_PARMS* = MCI_WAVE_OPEN_PARMSW
    PMCI_WAVE_OPEN_PARMS* = PMCI_WAVE_OPEN_PARMSW
    LPMCI_WAVE_OPEN_PARMS* = LPMCI_WAVE_OPEN_PARMSW
else:
  type
    MciWaveOpenParms* = MciWaveOpenParmsa
    PmciWaveOpenParms* = PmciWaveOpenParmsa
    LpmciWaveOpenParms* = LpmciWaveOpenParmsa
type
  TMCI_WAVE_OPEN_PARMS* = MciWaveOpenParms
  MciWaveDeleteParms* {.final.} = object
    dwCallback*: Dword
    dwFrom*: Dword
    dwTo*: Dword

  PmciWaveDeleteParms* = ptr MciWaveDeleteParms
  LpmciWaveDeleteParms* = ptr MciWaveDeleteParms
  TMCI_WAVE_DELETE_PARMS* = MciWaveDeleteParms
  MciWaveSetParms* {.final.} = object
    dwCallback*: Dword
    dwTimeFormat*: Dword
    dwAudio*: Dword
    wInput*: Uint
    wOutput*: Uint
    wFormatTag*: Int16
    wReserved2*: Int16
    nChannels*: Int16
    wReserved3*: Int16
    nSamplesPerSec*: Dword
    nAvgBytesPerSec*: Dword
    nBlockAlign*: Int16
    wReserved4*: Int16
    wBitsPerSample*: Int16
    wReserved5*: Int16

  PmciWaveSetParms* = ptr MciWaveSetParms
  LpmciWaveSetParms* = ptr MciWaveSetParms
  TMCI_WAVE_SET_PARMS* = MciWaveSetParms
  MciSeqSetParms* {.final.} = object
    dwCallback*: Dword
    dwTimeFormat*: Dword
    dwAudio*: Dword
    dwTempo*: Dword
    dwPort*: Dword
    dwSlave*: Dword
    dwMaster*: Dword
    dwOffset*: Dword

  PmciSeqSetParms* = ptr MciSeqSetParms
  LpmciSeqSetParms* = ptr MciSeqSetParms
  TMCI_SEQ_SET_PARMS* = MciSeqSetParms
  MciAnimOpenParmsa* {.final.} = object
    dwCallback*: Dword
    wDeviceID*: Mcideviceid
    lpstrDeviceType*: Lpcstr
    lpstrElementName*: Lpcstr
    lpstrAlias*: Lpcstr
    dwStyle*: Dword
    hWndParent*: Hwnd

  PmciAnimOpenParmsa* = ptr MciAnimOpenParmsa
  LpmciAnimOpenParmsa* = ptr MciAnimOpenParmsa
  TMCI_ANIM_OPEN_PARMSA* = MciAnimOpenParmsa
  MciAnimOpenParmsw* {.final.} = object
    dwCallback*: Dword
    wDeviceID*: Mcideviceid
    lpstrDeviceType*: Lpcwstr
    lpstrElementName*: Lpcwstr
    lpstrAlias*: Lpcwstr
    dwStyle*: Dword
    hWndParent*: Hwnd

  PmciAnimOpenParmsw* = ptr MciAnimOpenParmsw
  LpmciAnimOpenParmsw* = ptr MciAnimOpenParmsw

when defined(UNICODE):
  type
    MCI_ANIM_OPEN_PARMS* = MCI_ANIM_OPEN_PARMSW
    PMCI_ANIM_OPEN_PARMS* = PMCI_ANIM_OPEN_PARMSW
    LPMCI_ANIM_OPEN_PARMS* = LPMCI_ANIM_OPEN_PARMSW
else:
  type
    MciAnimOpenParms* = MciAnimOpenParmsa
    PmciAnimOpenParms* = PmciAnimOpenParmsa
    LpmciAnimOpenParms* = LpmciAnimOpenParmsa
type
  TMCI_ANIM_OPEN_PARMS* = MciAnimOpenParms
  MciAnimWindowParmsw* {.final.} = object
    dwCallback*: Dword
    hWnd*: Hwnd
    nCmdShow*: Uint
    lpstrText*: Lpcwstr

  PmciAnimWindowParmsw* = ptr MciAnimWindowParmsw
  LpmciAnimWindowParmsw* = ptr MciAnimWindowParmsw
  TMCI_ANIM_WINDOW_PARMSW* = MciAnimWindowParmsw
  MciAnimStepParms* {.final.} = object
    dwCallback*: Dword
    dwFrames*: Dword

  PmciAnimStepParms* = ptr MciAnimStepParms
  LpmciAnimStepParms* = ptr MciAnimStepParms
  TMCI_ANIM_STEP_PARMS* = MciAnimStepParms
  MciAnimWindowParmsa* {.final.} = object
    dwCallback*: Dword
    hWnd*: Hwnd
    nCmdShow*: Uint
    lpstrText*: Lpcstr

  PmciAnimWindowParmsa* = ptr MciAnimWindowParmsa
  LpmciAnimWindowParmsa* = ptr MciAnimWindowParmsa
  TMCI_ANIM_WINDOW_PARMSA* = MciAnimWindowParmsa
  MciAnimPlayParms* {.final.} = object
    dwCallback*: Dword
    dwFrom*: Dword
    dwTo*: Dword
    dwSpeed*: Dword

  PmciAnimPlayParms* = ptr MciAnimPlayParms
  LpmciAnimPlayParms* = ptr MciAnimPlayParms

when defined(UNICODE):
  type
    MCI_ANIM_WINDOW_PARMS* = MCI_ANIM_WINDOW_PARMSW
    PMCI_ANIM_WINDOW_PARMS* = PMCI_ANIM_WINDOW_PARMSW
    LPMCI_ANIM_WINDOW_PARMS* = LPMCI_ANIM_WINDOW_PARMSW
else:
  type
    MciAnimWindowParms* = MciAnimWindowParmsa
    PmciAnimWindowParms* = PmciAnimWindowParmsa
    LpmciAnimWindowParms* = LpmciAnimWindowParmsa
type
  MciAnimRectParms* {.final.} = object
    dwCallback*: Dword
    rc*: TRECT

  PmciAnimRectParms* = ptr MciAnimRectParms
  LpmciAnimRectParms* = ptr MciAnimRectParms
  TMCI_ANIM_RECT_PARMS* = MciAnimRectParms
  MciAnimUpdateParms* {.final.} = object
    dwCallback*: Dword
    rc*: TRECT
    hDC*: Hdc

  PmciAnimUpdateParms* = ptr MciAnimUpdateParms
  LpmciAnimUpdateParms* = ptr MciAnimUpdateParms
  TMCI_ANIM_UPDATE_PARMS* = MciAnimUpdateParms
  MciOvlyOpenParmsa* {.final.} = object
    dwCallback*: Dword
    wDeviceID*: Mcideviceid
    lpstrDeviceType*: Lpcstr
    lpstrElementName*: Lpcstr
    lpstrAlias*: Lpcstr
    dwStyle*: Dword
    hWndParent*: Hwnd

  PmciOvlyOpenParmsa* = ptr MciOvlyOpenParmsa
  LpmciOvlyOpenParmsa* = ptr MciOvlyOpenParmsa
  TMCI_OVLY_OPEN_PARMSA* = MciOvlyOpenParmsa
  MciOvlyOpenParmsw* {.final.} = object
    dwCallback*: Dword
    wDeviceID*: Mcideviceid
    lpstrDeviceType*: Lpcwstr
    lpstrElementName*: Lpcwstr
    lpstrAlias*: Lpcwstr
    dwStyle*: Dword
    hWndParent*: Hwnd

  PmciOvlyOpenParmsw* = ptr MciOvlyOpenParmsw
  LpmciOvlyOpenParmsw* = ptr MciOvlyOpenParmsw
  TMCI_OVLY_OPEN_PARMSW* = MciOvlyOpenParmsw

when defined(UNICODE):
  type
    MCI_OVLY_OPEN_PARMS* = MCI_OVLY_OPEN_PARMSW
    PMCI_OVLY_OPEN_PARMS* = PMCI_OVLY_OPEN_PARMSW
    LPMCI_OVLY_OPEN_PARMS* = LPMCI_OVLY_OPEN_PARMSW
else:
  type
    MciOvlyOpenParms* = MciOvlyOpenParmsa
    PmciOvlyOpenParms* = PmciOvlyOpenParmsa
    LpmciOvlyOpenParms* = LpmciOvlyOpenParmsa
type
  TMCI_OVLY_OPEN_PARMS* = MciOvlyOpenParms
  MciOvlyWindowParmsa* {.final.} = object
    dwCallback*: Dword
    hWnd*: Hwnd
    nCmdShow*: Uint
    lpstrText*: Lpcstr

  PmciOvlyWindowParmsa* = ptr MciOvlyWindowParmsa
  LpmciOvlyWindowParmsa* = ptr MciOvlyWindowParmsa
  TMCI_OVLY_WINDOW_PARMSA* = MciOvlyWindowParmsa
  MciOvlyWindowParmsw* {.final.} = object
    dwCallback*: Dword
    hWnd*: Hwnd
    nCmdShow*: Uint
    lpstrText*: Lpcwstr

  PmciOvlyWindowParmsw* = ptr MciOvlyWindowParmsw
  LpmciOvlyWindowParmsw* = ptr MciOvlyWindowParmsw
  TMCI_OVLY_WINDOW_PARMSW* = MciOvlyWindowParmsw

when defined(UNICODE):
  type
    MCI_OVLY_WINDOW_PARMS* = MCI_OVLY_WINDOW_PARMSW
    PMCI_OVLY_WINDOW_PARMS* = PMCI_OVLY_WINDOW_PARMSW
    LPMCI_OVLY_WINDOW_PARMS* = LPMCI_OVLY_WINDOW_PARMSW
else:
  type
    MciOvlyWindowParms* = MciOvlyWindowParmsa
    PmciOvlyWindowParms* = PmciOvlyWindowParmsa
    LpmciOvlyWindowParms* = LpmciOvlyWindowParmsa
type
  TMCI_OVLY_WINDOW_PARMS* = MciOvlyWindowParmsw
  MciOvlyRectParms* {.final.} = object
    dwCallback*: Dword
    rc*: TRECT

  PmciOvlyRectParms* = ptr MciOvlyRectParms
  LpmciOvlyRectParms* = ptr MciOvlyRectParms
  TMCI_OVLY_RECT_PARMS* = MciOvlyRectParms
  MciOvlySaveParmsa* {.final.} = object
    dwCallback*: Dword
    lpfilename*: Lpcstr
    rc*: TRECT

  PmciOvlySaveParmsa* = ptr MciOvlySaveParmsa
  LpmciOvlySaveParmsa* = ptr MciOvlySaveParmsa
  TMCI_OVLY_SAVE_PARMSA* = MciOvlySaveParmsa
  MciOvlySaveParmsw* {.final.} = object
    dwCallback*: Dword
    lpfilename*: Lpcwstr
    rc*: TRECT

  PmciOvlySaveParmsw* = ptr MciOvlySaveParmsw
  LpmciOvlySaveParmsw* = ptr MciOvlySaveParmsw
  TMCI_OVLY_SAVE_PARMSW* = MciOvlySaveParmsw

when defined(UNICODE):
  type
    MCI_OVLY_SAVE_PARMS* = MCI_OVLY_SAVE_PARMSW
    PMCI_OVLY_SAVE_PARMS* = PMCI_OVLY_SAVE_PARMSW
    LPMCI_OVLY_SAVE_PARMS* = LPMCI_OVLY_SAVE_PARMSW
else:
  type
    MciOvlySaveParms* = MciOvlySaveParmsa
    PmciOvlySaveParms* = PmciOvlySaveParmsa
    LpmciOvlySaveParms* = LpmciOvlySaveParmsa
type
  TMCI_OVLY_SAVE_PARMS* = MciOvlySaveParms
  MciOvlyLoadParmsa* {.final.} = object
    dwCallback*: Dword
    lpfilename*: Lpcstr
    rc*: TRECT

  PmciOvlyLoadParmsa* = ptr MciOvlyLoadParmsa
  LpmciOvlyLoadParmsa* = ptr MciOvlyLoadParmsa
  TMCI_OVLY_LOAD_PARMSA* = MciOvlyLoadParmsa
  MciOvlyLoadParmsw* {.final.} = object
    dwCallback*: Dword
    lpfilename*: Lpcwstr
    rc*: TRECT

  PmciOvlyLoadParmsw* = ptr MciOvlyLoadParmsw
  LpmciOvlyLoadParmsw* = ptr MciOvlyLoadParmsw
  TMCI_OVLY_LOAD_PARMSW* = MciOvlyLoadParmsw

when defined(UNICODE):
  type
    MCI_OVLY_LOAD_PARMS* = MCI_OVLY_LOAD_PARMSW
    PMCI_OVLY_LOAD_PARMS* = PMCI_OVLY_LOAD_PARMSW
    LPMCI_OVLY_LOAD_PARMS* = LPMCI_OVLY_LOAD_PARMSW
else:
  type
    MciOvlyLoadParms* = MciOvlyLoadParmsa
    PmciOvlyLoadParms* = PmciOvlyLoadParmsa
    LpmciOvlyLoadParms* = LpmciOvlyLoadParmsa
type
  TMCI_OVLY_LOAD_PARMS* = MciOvlyLoadParms

type
  PcmwaveformatTag* = Pcmwaveformat

proc mmioStringToFOURCCA*(x1: Lpcstr, x2: Uint): Fourcc{.stdcall,
    dynlib: "winmm.dll", importc: "mmioStringToFOURCCA".}
proc mmioStringToFOURCCW*(x1: Lpcwstr, x2: Uint): Fourcc{.stdcall,
    dynlib: "winmm.dll", importc: "mmioStringToFOURCCW".}
proc mmioStringToFOURCC*(x1: Cstring, x2: Uint): Fourcc{.stdcall,
    dynlib: "winmm.dll", importc: "mmioStringToFOURCCA".}
proc mmioInstallIOProcA*(x1: Fourcc, x2: Lpmmioproc, x3: Dword): Lpmmioproc{.
    stdcall, dynlib: "winmm.dll", importc: "mmioInstallIOProcA".}
proc mmioInstallIOProcW*(x1: Fourcc, x2: Lpmmioproc, x3: Dword): Lpmmioproc{.
    stdcall, dynlib: "winmm.dll", importc: "mmioInstallIOProcW".}
proc mmioInstallIOProc*(x1: Fourcc, x2: Lpmmioproc, x3: Dword): Lpmmioproc{.
    stdcall, dynlib: "winmm.dll", importc: "mmioInstallIOProcA".}
proc mmioOpenA*(x1: Lpstr, x2: Lpmmioinfo, x3: Dword): Hmmio{.stdcall,
    dynlib: "winmm.dll", importc: "mmioOpenA".}
proc mmioOpenW*(x1: Lpwstr, x2: Lpmmioinfo, x3: Dword): Hmmio{.stdcall,
    dynlib: "winmm.dll", importc: "mmioOpenW".}
proc mmioOpen*(x1: Cstring, x2: Lpmmioinfo, x3: Dword): Hmmio{.stdcall,
    dynlib: "winmm.dll", importc: "mmioOpenA".}
proc mmioRenameA*(x1: Lpcstr, x2: Lpcstr, x3: Lpcmmioinfo, x4: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mmioRenameA".}
proc mmioRenameW*(x1: Lpcwstr, x2: Lpcwstr, x3: Lpcmmioinfo, x4: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mmioRenameW".}
proc mmioRename*(x1: Cstring, x2: Cstring, x3: Lpcmmioinfo, x4: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mmioRenameA".}
proc mmioClose*(x1: Hmmio, x2: Uint): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "mmioClose".}
proc mmioRead*(x1: Hmmio, x2: Hpstr, x3: Long): Long{.stdcall,
    dynlib: "winmm.dll", importc: "mmioRead".}
proc mmioWrite*(x1: Hmmio, x2: Cstring, x3: Long): Long{.stdcall,
    dynlib: "winmm.dll", importc: "mmioWrite".}
proc mmioSeek*(x1: Hmmio, x2: Long, x3: Wint): Long{.stdcall,
    dynlib: "winmm.dll", importc: "mmioSeek".}
proc mmioGetInfo*(x1: Hmmio, x2: Lpmmioinfo, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mmioGetInfo".}
proc mmioSetInfo*(x1: Hmmio, x2: Lpcmmioinfo, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mmioSetInfo".}
proc mmioSetBuffer*(x1: Hmmio, x2: Lpstr, x3: Long, x4: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mmioSetBuffer".}
proc mmioFlush*(x1: Hmmio, x2: Uint): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "mmioFlush".}
proc mmioAdvance*(x1: Hmmio, x2: Lpmmioinfo, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mmioAdvance".}
proc mmioSendMessage*(x1: Hmmio, x2: Uint, x3: Lparam, x4: Lparam): Lresult{.
    stdcall, dynlib: "winmm.dll", importc: "mmioSendMessage".}
proc mmioDescend*(x1: Hmmio, x2: Lpmmckinfo, x3: Pmmckinfo, x4: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mmioDescend".}
proc mmioAscend*(x1: Hmmio, x2: Lpmmckinfo, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mmioAscend".}
proc mmioCreateChunk*(x1: Hmmio, x2: Lpmmckinfo, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mmioCreateChunk".}
proc mciSendCommandA*(x1: Mcideviceid, x2: Uint, x3: Dword, x4: Dword): Mcierror{.
    stdcall, dynlib: "winmm.dll", importc: "mciSendCommandA".}
proc mciSendCommandW*(x1: Mcideviceid, x2: Uint, x3: Dword, x4: Dword): Mcierror{.
    stdcall, dynlib: "winmm.dll", importc: "mciSendCommandW".}
proc mciSendCommand*(x1: Mcideviceid, x2: Uint, x3: Dword, x4: Dword): Mcierror{.
    stdcall, dynlib: "winmm.dll", importc: "mciSendCommandA".}
proc mciSendStringA*(x1: Lpcstr, x2: Lpstr, x3: Uint, x4: Hwnd): Mcierror{.
    stdcall, dynlib: "winmm.dll", importc: "mciSendStringA".}
proc mciSendStringW*(x1: Lpcwstr, x2: Lpwstr, x3: Uint, x4: Hwnd): Mcierror{.
    stdcall, dynlib: "winmm.dll", importc: "mciSendStringW".}
proc mciSendString*(x1: Cstring, x2: Cstring, x3: Uint, x4: Hwnd): Mcierror{.
    stdcall, dynlib: "winmm.dll", importc: "mciSendStringA".}
proc mciGetDeviceIDA*(x1: Lpcstr): Mcideviceid{.stdcall, dynlib: "winmm.dll",
    importc: "mciGetDeviceIDA".}
proc mciGetDeviceIDW*(x1: Lpcwstr): Mcideviceid{.stdcall, dynlib: "winmm.dll",
    importc: "mciGetDeviceIDW".}
proc mciGetDeviceID*(x1: Cstring): Mcideviceid{.stdcall, dynlib: "winmm.dll",
    importc: "mciGetDeviceIDA".}
proc mciGetDeviceIDFromElementIDA*(x1: Dword, x2: Lpcstr): Mcideviceid{.stdcall,
    dynlib: "winmm.dll", importc: "mciGetDeviceIDFromElementIDA".}
proc mciGetDeviceIDFromElementIDW*(x1: Dword, x2: Lpcwstr): Mcideviceid{.
    stdcall, dynlib: "winmm.dll", importc: "mciGetDeviceIDFromElementIDW".}
proc mciGetDeviceIDFromElementID*(x1: Dword, x2: Cstring): Mcideviceid{.stdcall,
    dynlib: "winmm.dll", importc: "mciGetDeviceIDFromElementIDA".}
proc mciGetErrorStringA*(x1: Mcierror, x2: Lpstr, x3: Uint): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "mciGetErrorStringA".}
proc mciGetErrorStringW*(x1: Mcierror, x2: Lpwstr, x3: Uint): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "mciGetErrorStringW".}
proc mciGetErrorString*(x1: Mcierror, x2: Cstring, x3: Uint): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "mciGetErrorStringA".}
proc mciSetYieldProc*(x1: Mcideviceid, x2: Yieldproc, x3: Dword): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "mciSetYieldProc".}
proc mciGetCreatorTask*(x1: Mcideviceid): Htask{.stdcall, dynlib: "winmm.dll",
    importc: "mciGetCreatorTask".}
proc mciGetYieldProc*(x1: Mcideviceid, x2: Lpdword): Yieldproc{.stdcall,
    dynlib: "winmm.dll", importc: "mciGetYieldProc".}
proc mciExecute*(x1: Lpcstr): Bool{.stdcall, dynlib: "winmm.dll",
                                    importc: "mciExecute".}
proc joyGetPos*(x1: Uint, x2: Lpjoyinfo): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "joyGetPos".}
proc joyGetPosEx*(x1: Uint, x2: Lpjoyinfoex): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "joyGetPosEx".}
proc joyGetThreshold*(x1: Uint, x2: Lpuint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "joyGetThreshold".}
proc joyReleaseCapture*(x1: Uint): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "joyReleaseCapture".}
proc joySetCapture*(x1: Hwnd, x2: Uint, x3: Uint, x4: Bool): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "joySetCapture".}
proc joySetThreshold*(x1: Uint, x2: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "joySetThreshold".}
proc waveOutGetNumDevs*(): Uint{.stdcall, dynlib: "winmm.dll",
                                 importc: "waveOutGetNumDevs".}
proc waveOutGetDevCapsA*(x1: Uint, x2: Lpwaveoutcapsa, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutGetDevCapsA".}
proc waveOutGetDevCapsW*(x1: Uint, x2: Lpwaveoutcapsw, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutGetDevCapsW".}
proc waveOutGetDevCaps*(x1: Uint, x2: Lpwaveoutcaps, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutGetDevCapsA".}
proc waveOutGetVolume*(x1: Hwaveout, x2: Lpdword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveOutGetVolume".}
proc waveOutSetVolume*(x1: Hwaveout, x2: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveOutSetVolume".}
proc waveOutGetErrorTextA*(x1: Mmresult, x2: Lpstr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutGetErrorTextA".}
proc waveOutGetErrorTextW*(x1: Mmresult, x2: Lpwstr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutGetErrorTextW".}
proc waveOutGetErrorText*(x1: Mmresult, x2: Cstring, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutGetErrorTextA".}
proc waveOutOpen*(x1: Lphwaveout, x2: Uint, x3: Lpcwaveformatex, x4: Dword,
                  x5: Dword, x6: Dword): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveOutOpen".}
proc waveOutClose*(x1: Hwaveout): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveOutClose".}
proc waveOutPrepareHeader*(x1: Hwaveout, x2: Lpwavehdr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutPrepareHeader".}
proc waveOutUnprepareHeader*(x1: Hwaveout, x2: Lpwavehdr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutUnprepareHeader".}
proc waveOutWrite*(x1: Hwaveout, x2: Lpwavehdr, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveOutWrite".}
proc waveOutPause*(x1: Hwaveout): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveOutPause".}
proc waveOutRestart*(x1: Hwaveout): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveOutRestart".}
proc waveOutReset*(x1: Hwaveout): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveOutReset".}
proc waveOutBreakLoop*(x1: Hwaveout): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveOutBreakLoop".}
proc waveOutGetPosition*(x1: Hwaveout, x2: Lpmmtime, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutGetPosition".}
proc waveOutGetPitch*(x1: Hwaveout, x2: Lpdword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveOutGetPitch".}
proc waveOutSetPitch*(x1: Hwaveout, x2: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveOutSetPitch".}
proc waveOutGetPlaybackRate*(x1: Hwaveout, x2: Lpdword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveOutGetPlaybackRate".}
proc waveOutSetPlaybackRate*(x1: Hwaveout, x2: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveOutSetPlaybackRate".}
proc waveOutGetID*(x1: Hwaveout, x2: Lpuint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveOutGetID".}
proc waveOutMessage*(x1: Hwaveout, x2: Uint, x3: Dword, x4: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveOutMessage".}
proc waveInGetNumDevs*(): Uint{.stdcall, dynlib: "winmm.dll",
                                importc: "waveInGetNumDevs".}
proc waveInGetDevCapsA*(x1: Uint, x2: Lpwaveincapsa, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveInGetDevCapsA".}
proc waveInGetDevCapsW*(x1: Uint, x2: Lpwaveincapsw, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveInGetDevCapsW".}
proc waveInGetDevCaps*(x1: Uint, x2: Lpwaveincaps, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveInGetDevCapsA".}
proc waveInGetErrorTextA*(x1: Mmresult, x2: Lpstr, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveInGetErrorTextA".}
proc waveInGetErrorTextW*(x1: Mmresult, x2: Lpwstr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveInGetErrorTextW".}
proc waveInGetErrorText*(x1: Mmresult, x2: Cstring, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveInGetErrorTextA".}
proc waveInOpen*(x1: Lphwavein, x2: Uint, x3: Lpcwaveformatex, x4: Dword,
                 x5: Dword, x6: Dword): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveInOpen".}
proc waveInClose*(x1: Hwavein): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveInClose".}
proc waveInPrepareHeader*(x1: Hwavein, x2: Lpwavehdr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveInPrepareHeader".}
proc waveInUnprepareHeader*(x1: Hwavein, x2: Lpwavehdr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveInUnprepareHeader".}
proc waveInAddBuffer*(x1: Hwavein, x2: Lpwavehdr, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveInAddBuffer".}
proc waveInStart*(x1: Hwavein): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveInStart".}
proc waveInStop*(x1: Hwavein): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveInStop".}
proc waveInReset*(x1: Hwavein): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "waveInReset".}
proc waveInGetPosition*(x1: Hwavein, x2: Lpmmtime, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveInGetPosition".}
proc waveInGetID*(x1: Hwavein, x2: Lpuint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "waveInGetID".}
proc waveInMessage*(x1: Hwavein, x2: Uint, x3: Dword, x4: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "waveInMessage".}
proc mixerGetLineControlsA*(x1: Hmixerobj, x2: Lpmixerlinecontrolsa, x3: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mixerGetLineControlsA".}
proc mixerGetLineControlsW*(x1: Hmixerobj, x2: Lpmixerlinecontrolsw, x3: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mixerGetLineControlsW".}
proc mixerGetLineControls*(x1: Hmixerobj, x2: Lpmixerlinecontrols, x3: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mixerGetLineControlsA".}
proc joyGetNumDevs*(): Uint{.stdcall, dynlib: "winmm.dll",
                             importc: "joyGetNumDevs".}
proc joyGetDevCapsA*(x1: Uint, x2: Lpjoycapsa, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "joyGetDevCapsA".}
proc joyGetDevCapsW*(x1: Uint, x2: Lpjoycapsw, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "joyGetDevCapsW".}
proc joyGetDevCaps*(x1: Uint, x2: Lpjoycaps, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "joyGetDevCapsA".}
proc mixerGetControlDetailsA*(x1: Hmixerobj, x2: Lpmixercontroldetails,
                              x3: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mixerGetControlDetailsA".}
proc mixerGetControlDetailsW*(x1: Hmixerobj, x2: Lpmixercontroldetails,
                              x3: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mixerGetControlDetailsW".}
proc mixerGetControlDetails*(x1: Hmixerobj, x2: Lpmixercontroldetails, x3: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mixerGetControlDetailsA".}
proc timeGetSystemTime*(x1: Lpmmtime, x2: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "timeGetSystemTime".}
proc timeGetTime*(): Dword{.stdcall, dynlib: "winmm.dll", importc: "timeGetTime".}
proc timeSetEvent*(x1: Uint, x2: Uint, x3: Lptimecallback, x4: Dword, x5: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "timeSetEvent".}
proc timeKillEvent*(x1: Uint): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "timeKillEvent".}
proc timeGetDevCaps*(x1: Lptimecaps, x2: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "timeGetDevCaps".}
proc timeBeginPeriod*(x1: Uint): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "timeBeginPeriod".}
proc timeEndPeriod*(x1: Uint): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "timeEndPeriod".}
proc mixerGetDevCapsA*(x1: Uint, x2: Lpmixercapsa, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mixerGetDevCapsA".}
proc mixerGetDevCapsW*(x1: Uint, x2: Lpmixercapsw, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mixerGetDevCapsW".}
proc mixerGetDevCaps*(x1: Uint, x2: Lpmixercaps, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mixerGetDevCapsA".}
proc mixerOpen*(x1: Lphmixer, x2: Uint, x3: Dword, x4: Dword, x5: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mixerOpen".}
proc mixerClose*(x1: Hmixer): Mmresult{.stdcall, dynlib: "winmm.dll",
                                        importc: "mixerClose".}
proc mixerMessage*(x1: Hmixer, x2: Uint, x3: Dword, x4: Dword): Dword{.stdcall,
    dynlib: "winmm.dll", importc: "mixerMessage".}
proc auxGetNumDevs*(): Uint{.stdcall, dynlib: "winmm.dll",
                             importc: "auxGetNumDevs".}
proc auxGetDevCapsA*(x1: Uint, x2: Lpauxcapsa, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "auxGetDevCapsA".}
proc auxGetDevCapsW*(x1: Uint, x2: Lpauxcapsw, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "auxGetDevCapsW".}
proc auxGetDevCaps*(x1: Uint, x2: Lpauxcaps, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "auxGetDevCapsA".}
proc auxSetVolume*(x1: Uint, x2: Dword): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "auxSetVolume".}
proc auxGetVolume*(x1: Uint, x2: Lpdword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "auxGetVolume".}
proc auxOutMessage*(x1: Uint, x2: Uint, x3: Dword, x4: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "auxOutMessage".}
proc midiOutGetNumDevs*(): Uint{.stdcall, dynlib: "winmm.dll",
                                 importc: "midiOutGetNumDevs".}
proc midiStreamOpen*(x1: Lphmidistrm, x2: Lpuint, x3: Dword, x4: Dword,
                     x5: Dword, x6: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiStreamOpen".}
proc midiStreamClose*(x1: Hmidistrm): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiStreamClose".}
proc midiStreamProperty*(x1: Hmidistrm, x2: Lpbyte, x3: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiStreamProperty".}
proc midiStreamPosition*(x1: Hmidistrm, x2: Lpmmtime, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiStreamPosition".}
proc midiStreamOut*(x1: Hmidistrm, x2: Lpmidihdr, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiStreamOut".}
proc midiStreamPause*(x1: Hmidistrm): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiStreamPause".}
proc midiStreamRestart*(x1: Hmidistrm): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiStreamRestart".}
proc midiStreamStop*(x1: Hmidistrm): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiStreamStop".}
proc midiConnect*(x1: Hmidi, x2: Hmidiout, x3: Pointer): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiConnect".}
proc midiDisconnect*(x1: Hmidi, x2: Hmidiout, x3: Pointer): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiDisconnect".}
proc midiOutGetDevCapsA*(x1: Uint, x2: Lpmidioutcapsa, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutGetDevCapsA".}
proc midiOutGetDevCapsW*(x1: Uint, x2: Lpmidioutcapsw, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutGetDevCapsW".}
proc midiOutGetDevCaps*(x1: Uint, x2: Lpmidioutcaps, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutGetDevCapsA".}
proc midiOutGetVolume*(x1: Hmidiout, x2: Lpdword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiOutGetVolume".}
proc midiOutSetVolume*(x1: Hmidiout, x2: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiOutSetVolume".}
proc midiOutGetErrorTextA*(x1: Mmresult, x2: Lpstr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutGetErrorTextA".}
proc midiOutGetErrorTextW*(x1: Mmresult, x2: Lpwstr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutGetErrorTextW".}
proc midiOutGetErrorText*(x1: Mmresult, x2: Cstring, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutGetErrorTextA".}
proc midiOutOpen*(x1: Lphmidiout, x2: Uint, x3: Dword, x4: Dword, x5: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutOpen".}
proc midiOutClose*(x1: Hmidiout): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiOutClose".}
proc midiOutPrepareHeader*(x1: Hmidiout, x2: Lpmidihdr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutPrepareHeader".}
proc midiOutUnprepareHeader*(x1: Hmidiout, x2: Lpmidihdr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutUnprepareHeader".}
proc midiOutShortMsg*(x1: Hmidiout, x2: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiOutShortMsg".}
proc midiOutLongMsg*(x1: Hmidiout, x2: Lpmidihdr, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiOutLongMsg".}
proc midiOutReset*(x1: Hmidiout): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiOutReset".}
proc midiOutCachePatches*(x1: Hmidiout, x2: Uint, x3: Lpword, x4: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutCachePatches".}
proc midiOutCacheDrumPatches*(x1: Hmidiout, x2: Uint, x3: Lpword, x4: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutCacheDrumPatches".}
proc midiOutGetID*(x1: Hmidiout, x2: Lpuint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiOutGetID".}
proc midiOutMessage*(x1: Hmidiout, x2: Uint, x3: Dword, x4: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiOutMessage".}
proc midiInGetNumDevs*(): Uint{.stdcall, dynlib: "winmm.dll",
                                importc: "midiInGetNumDevs".}
proc midiInGetDevCapsA*(x1: Uint, x2: Lpmidiincapsa, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiInGetDevCapsA".}
proc midiInGetDevCapsW*(x1: Uint, x2: Lpmidiincapsw, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiInGetDevCapsW".}
proc midiInGetDevCaps*(x1: Uint, x2: Lpmidiincaps, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiInGetDevCapsA".}
proc midiInGetErrorTextA*(x1: Mmresult, x2: Lpstr, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiInGetErrorTextA".}
proc midiInGetErrorTextW*(x1: Mmresult, x2: Lpwstr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiInGetErrorTextW".}
proc midiInGetErrorText*(x1: Mmresult, x2: Cstring, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiInGetErrorTextA".}
proc midiInOpen*(x1: Lphmidiin, x2: Uint, x3: Dword, x4: Dword, x5: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiInOpen".}
proc midiInClose*(x1: Hmidiin): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiInClose".}
proc midiInPrepareHeader*(x1: Hmidiin, x2: Lpmidihdr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiInPrepareHeader".}
proc midiInUnprepareHeader*(x1: Hmidiin, x2: Lpmidihdr, x3: Uint): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiInUnprepareHeader".}
proc midiInAddBuffer*(x1: Hmidiin, x2: Lpmidihdr, x3: Uint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiInAddBuffer".}
proc midiInStart*(x1: Hmidiin): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiInStart".}
proc midiInStop*(x1: Hmidiin): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiInStop".}
proc midiInReset*(x1: Hmidiin): Mmresult{.stdcall, dynlib: "winmm.dll",
    importc: "midiInReset".}
proc midiInGetID*(x1: Hmidiin, x2: Lpuint): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "midiInGetID".}
proc midiInMessage*(x1: Hmidiin, x2: Uint, x3: Dword, x4: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "midiInMessage".}
proc mixerGetLineInfoA*(x1: Hmixerobj, x2: Lpmixerlinea, x3: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mixerGetLineInfoA".}
proc mixerGetLineInfoW*(x1: Hmixerobj, x2: Lpmixerlinew, x3: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mixerGetLineInfoW".}
proc mixerGetLineInfo*(x1: Hmixerobj, x2: Lpmixerline, x3: Dword): Mmresult{.
    stdcall, dynlib: "winmm.dll", importc: "mixerGetLineInfoA".}
proc mixerGetID*(x1: Hmixerobj, x2: var Uint, x3: Dword): Mmresult{.stdcall,
    dynlib: "winmm.dll", importc: "mixerGetID".}
proc playSoundA*(x1: Lpcstr, x2: Hmodule, x3: Dword): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "PlaySoundA".}
proc playSoundW*(x1: Lpcwstr, x2: Hmodule, x3: Dword): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "PlaySoundW".}
proc playSound*(x1: Cstring, x2: Hmodule, x3: Dword): Bool{.stdcall,
    dynlib: "winmm.dll", importc: "PlaySoundA".}
# implementation

proc mevtEventtype(x: int8): int8 =
  result = toU8(x shr 24)

proc mevtEventparm(x: DWORD): DWORD =
  result = x and 0x00FFFFFF

proc mciMsfMinute(msf: int32): int8 =
  result = toU8(msf and 0xff)

proc mciTmsfTrack(tmsf: int32): int8 =
  result = toU8(tmsf and 0xff)

proc mciHmsHour(h: int32): int8 =
  result = toU8(h and 0xff)

proc mciMsfSecond(msf: int32): int8 =
  result = toU8(msf shr 8)

proc mciTmsfMinute(tmsf: int32): int8 =
  result = toU8(tmsf shr 8)

proc mciHmsMinute(h: int32): int8 =
  result = toU8(h shr 8)

proc mciMsfFrame(msf: int32): int8 =
  result = toU8(msf shr 16)

proc mciTmsfSecond(tmsf: int32): int8 =
  result = toU8(tmsf shr 16)

proc mciHmsSecond(h: int32): int8 =
  result = toU8(h shr 16)

proc mciMakeMsf(m, s, f: int8): int32 =
  result = toU32(ze(m) or ze(s) shl 8 or ze(f) shl 16)

proc mciMakeHms(h, m, s: int8): int32 =
  result = toU32(ze(h) or ze(m) shl 8 or ze(s) shl 16)

proc mciTmsfFrame(tmsf: int32): int8 =
  result = toU8(tmsf shr 24)

proc mciMakeTmsf(t, m, s, f: int8): int32 =
  result = (ze(t) or ze(m) shl 8 or ze(s) shl 16 or ze(f) shl 24).Int32

proc dibindex(n: int32): int32 =
  result = n or 0x000010FF'i32 shl 16'i32
