#
#
#            Nimrod's Runtime Library
#        (c) Copyright 2010 Andreas Rumpf
#
#    See the file "copying.txt", included in this
#    distribution, for details about the copyright.
#

## Define ``winUnicode`` before importing this module for the
## Unicode version.

{.deadCodeElim: on.}

type
  WideChar* = Uint16
  PWideChar* = ptr Uint16

type  # WinNT.h -- Defines the 32-Bit Windows types and constants
  Short* = Int16
  Long* = Int32
  # UNICODE (Wide Character) types
  Pwchar* = PWideChar
  Lpwch* = PWideChar
  Pwch* = PWideChar
  Lpcwch* = PWideChar
  Pcwch* = PWideChar
  Nwpstr* = PWideChar
  Lpwstr* = PWideChar
  Lpcwstr* = PWideChar
  Pcwstr* = PWideChar
  # ANSI (Multi-byte Character) types
  Lpch* = Cstring
  Pch* = Cstring
  Lpcch* = Cstring
  Pcch* = Cstring
  Lpstr* = Cstring
  Pstr* = Cstring
  Lpcstr* = Cstring
  Pcstr* = Cstring

type  # BaseTsd.h -- Type definitions for the basic sized types
      # Give here only the bare minimum, to be expanded as needs arise
  Long32* = Int32
  Ulong32* = Int32
  Dword32* = Int32
  Long64* = Int64
  Ulong64* = Int64
  Dword64* = Int64
  Pdword64* = ptr Dword64
  # int32 on Win32, int64 on Win64
  IntPtr* = TAddress
  UintPtr* = TAddress
  LongPtr* = TAddress
  UlongPtr* = TAddress
  SizeT* = TAddress
  SsizeT* = TAddress
  DwordPtr* = TAddress
  # Thread affinity
  Kaffinity* = TAddress
  Pkaffinity* = ptr Kaffinity

type  # WinDef.h -- Basic Windows Type Definitions
  # BaseTypes
  Uint = Int32
  Ulong* = Int
  Pulong* = ptr Int
  Ushort* = Int16
  Pushort* = ptr Int16
  Uchar* = Int8
  Puchar* = ptr Int8
  Psz* = Cstring

  Dword* = Int32
  Winbool* = Int32
  Word* = Int16
  # FLOAT* = float
  Pfloat* = ptr Float
  Pwinbool* = ptr Winbool
  Lpwinbool* = ptr Winbool
  Pbyte* = ptr Int8
  Lpbyte* = ptr Int8
  Pint* = ptr Int32
  Lpint* = ptr Int32
  Pword* = ptr Int16
  Lpword* = ptr Int16
  Lplong* = ptr Int32
  Pdword* = ptr Dword
  Lpdword* = ptr Dword
  Lpvoid* = Pointer
  Lpcvoid* = Pointer

  # INT* = int  # Cannot work and not necessary anyway
  Puint* = ptr Int

  Wparam* = LongPtr
  Lparam* = LongPtr
  Lresult* = LongPtr

  Atom* = Int16
  TAtom* = Atom
  Handle* = Int
  THandle* = Handle
  Phandle* = ptr Handle
  Lphandle* = ptr Handle
  Hwnd* = Handle
  Hhook* = Handle
  Hevent* = Handle
  Hglobal* = Handle
  Hlocal* = Handle
  Hgdiobj* = Handle
  Hkey* = Handle
  Phkey* = ptr Hkey
  Haccel* = Handle
  Hbitmap* = Handle
  Hbrush* = Handle
  Hcolorspace* = Handle
  Hdc* = Handle
  Hglrc* = Handle
  Hdesk* = Handle
  Henhmetafile* = Handle
  Hfont* = Handle
  Hicon* = Handle
  Hmetafile* = Handle
  Hinst* = Handle  # Not HINSTANCE, else it has problems with the var HInstance
  Hmodule* = Handle
  Hpalette* = Handle
  Hpen* = Handle
  Hrgn* = Handle
  Hrsrc* = Handle
  Htask* = Handle
  Hwinsta* = Handle
  Hkl* = Handle
  Hmonitor* = Handle
  Hwineventhook* = Handle
  Humpd* = Handle

  Hfile* = Handle
  Hcursor* = Handle # = HICON
  Colorref* = Int
  Lpcolorref* = ptr Colorref

  Point* {.final, pure.} = object
    x*: Long
    y*: Long
  Ppoint* = ptr Point
  Lppoint* = ptr Point
  Pointl* {.final, pure.} = object
    x*: Long
    y*: Long
  Ppointl* = ptr Pointl

  TPOINT* = Point
  TPOINTL* = Pointl

  Rect* {.final, pure.} = object
    TopLeft*, BottomRight*: TPoint
  Prect* = ptr Rect
  Lprect* = ptr Rect

  Rectl* {.final, pure.} = object
    left*: Long
    top*: Long
    right*: Long
    bottom*: Long
  Prectl* = ptr Rectl

  Size* {.final, pure.} = object
    cx*: Long
    cy*: Long
  Psize* = ptr Size
  Lpsize* = ptr Size
  Sizel* = Size
  Psizel* = ptr Size
  Lpsizel* = ptr Size

  Points* {.final, pure.} = object
    x*: Short
    y*: Short
  Ppoints* = ptr Points

  TRECT* = Rect
  TRECTL* = Rectl
  TSIZE* = Size
  TSIZEL* = Size
  TPOINTS* = Points

  Filetime* {.final, pure.} = object
    dwLowDateTime*: Dword
    dwHighDateTime*: Dword
  Pfiletime* = ptr Filetime
  Lpfiletime* = ptr Filetime

  TFILETIME* = Filetime

const
  MaxPath* = 260
  HfileError* = HFILE(-1)

  # mode selections for the device mode function
  # DocumentProperties
  DmUpdate* = 1
  DmCopy* = 2
  DmPrompt* = 4
  DmModify* = 8

  DmInBuffer* = DM_MODIFY
  DmInPrompt* = DM_PROMPT
  DmOutBuffer* = DM_COPY
  DmOutDefault* = DM_UPDATE

  # device capabilities indices
  DcFields* = 1
  DcPapers* = 2
  DcPapersize* = 3
  DcMinextent* = 4
  DcMaxextent* = 5
  DcBins* = 6
  DcDuplex* = 7
  DcSize* = 8
  DcExtra* = 9
  DcVersion* = 10
  DcDriver* = 11
  DcBinnames* = 12
  DcEnumresolutions* = 13
  DcFiledependencies* = 14
  DcTruetype* = 15
  DcPapernames* = 16
  DcOrientation* = 17
  DcCopies* = 18

  DcBinadjust* = 19
  DcEmfCompliant* = 20
  DcDatatypeProduced* = 21

type
  Wordbool* = Int16  # XXX: not a bool
  Caltype* = Int
  Calid* = Int
  Cchar* = Char
  TCOLORREF* = Int
  Wint* = Int32
  Pinteger* = ptr Int32
  Pbool* = ptr Winbool
  Longlong* = Int64
  Plonglong* = ptr Longlong
  Lplonglong* = ptr Longlong
  Ulonglong* = Int64          # used in AMD64 CONTEXT
  Pulonglong* = ptr Ulonglong #
  Dwordlong* = Int64          # was unsigned long
  Pdwordlong* = ptr Dwordlong
  Hresult* = Int
  Phresult* = ptr Hresult
  Hconv* = Handle
  Hconvlist* = Handle
  Hdbc* = Handle
  Hddedata* = Handle
  Hdrop* = Handle
  Hdwp* = Handle
  Henv* = Handle
  Himagelist* = Handle
  Hmenu* = Handle
  Hrasconn* = Handle
  Hstmt* = Handle
  Hstr* = Handle
  Hsz* = Handle
  Langid* = Int16
  Lcid* = Dword
  Lctype* = Dword
  Lp* = ptr Int16
  Lpbool* = ptr Winbool

when defined(winUnicode):
  type
    LPCTSTR* = PWideChar
else:
  type
    Lpctstr* = Cstring
type
  Lppcstr* = ptr Lpcstr
  Lppctstr* = ptr Lpctstr
  Lppcwstr* = ptr Lpcwstr

when defined(winUnicode):
  type
    LPTCH* = PWideChar
    LPTSTR* = PWideChar
else:
  type
    Lptch* = Cstring
    Lptstr* = Cstring
type
  Pboolean* = ptr Int8
  Plong* = ptr Int32
  Pshort* = ptr Short

when defined(winUnicode):
  type
    PTBYTE* = ptr uint16
    PTCH* = PWideChar
    PTCHAR* = PWideChar
    PTSTR* = PWideChar
else:
  type
    Ptbyte* = ptr Byte
    Ptch* = Cstring
    Ptchar* = Cstring
    Ptstr* = Cstring
type
  Pvoid* = Pointer
  Retcode* = Short
  ScHandle* = Handle
  ScLock* = Lpvoid
  LpscHandle* = ptr ScHandle
  ServiceStatusHandle* = Dword

when defined(winUnicode):
  type
    TBYTE* = uint16
    TCHAR* = widechar
    BCHAR* = int16
else:
  type
    TBYTE* = Uint8
    TCHAR* = Char
    Bchar* = Int8
type
  Wchar* = WideChar
  Plpstr* = ptr Lpstr
  PLPWStr* = ptr Lpwstr
  AclInformationClass* = enum
    AclRevisionInformation = 1, AclSizeInformation
  MediaType* = enum
    Unknown, F5_1Pt2_512, F3_1Pt44_512, F3_2Pt88_512, F3_20Pt8_512, F3_720_512,
    F5_360_512, F5_320_512, F5_320_1024, F5_180_512, F5_160_512, RemovableMedia,
    FixedMedia

const
  RascsDone* = 0x00002000
  RascsPaused* = 0x00001000

type
  Rasconnstate* = enum
    RASCS_OpenPort = 0, RASCS_PortOpened, RASCS_ConnectDevice,
    RASCS_DeviceConnected, RASCS_AllDevicesConnected, RASCS_Authenticate,
    RASCS_AuthNotify, RASCS_AuthRetry, RASCS_AuthCallback,
    RASCS_AuthChangePassword, RASCS_AuthProject, RASCS_AuthLinkSpeed,
    RASCS_AuthAck, RASCS_ReAuthenticate, RASCS_Authenticated,
    RASCS_PrepareForCallback, RASCS_WaitForModemReset, RASCS_WaitForCallback,
    RASCS_Projected, RASCS_StartAuthentication, RASCS_CallbackComplete,
    RASCS_LogonNetwork, RASCS_Interactive = RASCS_PAUSED,
    RASCS_RetryAuthentication, RASCS_CallbackSetByCaller, RASCS_PasswordExpired,
    RASCS_Connected = RASCS_DONE, RASCS_Disconnected
  Rasprojection* = enum
    RASP_PppIp = 0x00008021, RASP_PppIpx = 0x0000802B, RASP_PppNbf = 0x0000803F,
    RASP_Amb = 0x00010000
  SecurityImpersonationLevel* = enum


    SecurityAnonymous, SecurityIdentification, SecurityImpersonation,
    SecurityDelegation
  SidNameUse* = enum
    SidTypeUser = 1, SidTypeGroup, SidTypeDomain, SidTypeAlias,
    SidTypeWellKnownGroup, SidTypeDeletedAccount, SidTypeInvalid, SidTypeUnknown
  PsidNameUse* = ptr SidNameUse
  TOKEN_INFORMATION_CLASS* = enum
    TokenUser = 1, TokenGroups, TokenPrivileges, TokenOwner, TokenPrimaryGroup,
    TokenDefaultDacl, TokenSource, TokenType, TokenImpersonationLevel,
    TokenStatistics
  TTOKEN_TYPE* = enum
    TokenPrimary = 1, TokenImpersonation
  MakeIntResourceA* = Cstring
  MakeIntResourceW* = PWideChar
  MakeIntResource* = MakeIntResourceA

#
#    Definitions for callback procedures
#
type
  Bffcallback* = proc (para1: Hwnd, para2: Uint, para3: Lparam, para4: Lparam): Int32{.
      stdcall.}
  Lpcchookproc* = proc (para1: Hwnd, para2: Uint, para3: Wparam, para4: Lparam): Uint{.
      stdcall.}
  Lpcfhookproc* = proc (para1: Hwnd, para2: Uint, para3: Wparam, para4: Lparam): Uint{.
      stdcall.}
  PthreadStartRoutine* = Pointer
  LpthreadStartRoutine* = PthreadStartRoutine
  Editstreamcallback* = proc (para1: Dword, para2: Lpbyte, para3: Long,
                              para4: Long): Dword{.stdcall.}
  Lpfrhookproc* = proc (para1: Hwnd, para2: Uint, para3: Wparam, para4: Lparam): Uint{.
      stdcall.}
  Lpofnhookproc* = proc (para1: Hwnd, para2: Uint, para3: Wparam, para4: Lparam): Uint{.
      stdcall.}
  Lpprinthookproc* = proc (para1: Hwnd, para2: Uint, para3: Wparam,
                           para4: Lparam): Uint{.stdcall.}
  Lpsetuphookproc* = proc (para1: Hwnd, para2: Uint, para3: Wparam,
                           para4: Lparam): Uint{.stdcall.}
  Dlgproc* = proc (para1: Hwnd, para2: Uint, para3: Wparam, para4: Lparam): Lresult{.
      stdcall.}
  Pfnpropsheetcallback* = proc (para1: Hwnd, para2: Uint, para3: Lparam): Int32{.
      stdcall.}
  LpserviceMainFunction* = proc (para1: Dword, para2: Lptstr){.stdcall.}
  Pfntvcompare* = proc (para1: Lparam, para2: Lparam, para3: Lparam): Int32{.
      stdcall.}
  Wndproc* = proc (para1: Hwnd, para2: Uint, para3: Wparam, para4: Lparam): Lresult{.
      stdcall.}
  Farproc* = Pointer
  TFarProc* = Farproc
  TProc* = Pointer
  Enumrestypeproc* = proc (para1: Handle, para2: Lptstr, para3: Long): Winbool{.
      stdcall.}
  Enumresnameproc* = proc (para1: Handle, para2: Lpctstr, para3: Lptstr,
                           para4: Long): Winbool{.stdcall.}
  Enumreslangproc* = proc (para1: Handle, para2: Lpctstr, para3: Lpctstr,
                           para4: Int16, para5: Long): Winbool{.stdcall.}
  Desktopenumproc* = Farproc
  Enumwindowsproc* = proc (para1: Hwnd, para2: Lparam): Winbool{.stdcall.}
  Enumwindowstationproc* = proc (para1: Lptstr, para2: Lparam): Winbool{.stdcall.}
  Sendasyncproc* = proc (para1: Hwnd, para2: Uint, para3: Dword, para4: Lresult){.
      stdcall.}
  TIMERPROC* = proc (para1: Hwnd, para2: Uint, para3: Uint, para4: Dword){.
      stdcall.}
  Graystringproc* = Farproc
  Drawstateproc* = proc (para1: Hdc, para2: Lparam, para3: Wparam, para4: Int32,
                         para5: Int32): Winbool{.stdcall.}
  Propenumprocex* = proc (para1: Hwnd, para2: Lpctstr, para3: Handle,
                          para4: Dword): Winbool{.stdcall.}
  Propenumproc* = proc (para1: Hwnd, para2: Lpctstr, para3: Handle): Winbool{.
      stdcall.}
  Hookproc* = proc (para1: Int32, para2: Wparam, para3: Lparam): Lresult{.
      stdcall.}
  Enumobjectsproc* = proc (para1: Lpvoid, para2: Lparam){.stdcall.}
  Lineddaproc* = proc (para1: Int32, para2: Int32, para3: Lparam){.stdcall.}
  TABORTPROC* = proc (para1: Hdc, para2: Int32): Winbool{.stdcall.}
  Lppagepainthook* = proc (para1: Hwnd, para2: Uint, para3: Wparam,
                           para4: Lparam): Uint{.stdcall.}
  Lppagesetuphook* = proc (para1: Hwnd, para2: Uint, para3: Wparam,
                           para4: Lparam): Uint{.stdcall.}
  Icmenumproc* = proc (para1: Lptstr, para2: Lparam): Int32{.stdcall.}
  Editwordbreakprocex* = proc (para1: Cstring, para2: Long, para3: Int8,
                               para4: Wint): Long{.stdcall.}
  Pfnlvcompare* = proc (para1: Lparam, para2: Lparam, para3: Lparam): Int32{.
      stdcall.}
  LocaleEnumproc* = proc (para1: Lptstr): Winbool{.stdcall.}
  CodepageEnumproc* = proc (para1: Lptstr): Winbool{.stdcall.}
  DatefmtEnumproc* = proc (para1: Lptstr): Winbool{.stdcall.}
  TIMEFMT_ENUMPROC* = proc (para1: Lptstr): Winbool{.stdcall.}
  CalinfoEnumproc* = proc (para1: Lptstr): Winbool{.stdcall.}
  PhandlerRoutine* = proc (para1: Dword): Winbool{.stdcall.}
  LphandlerFunction* = proc (para1: Dword): Winbool{.stdcall.}
  Pfngetprofilepath* = proc (para1: Lpctstr, para2: Lpstr, para3: Uint): Uint{.
      stdcall.}
  Pfnreconcileprofile* = proc (para1: Lpctstr, para2: Lpctstr, para3: Dword): Uint{.
      stdcall.}
  Pfnprocesspolicies* = proc (para1: Hwnd, para2: Lpctstr, para3: Lpctstr,
                              para4: Lpctstr, para5: Dword): Winbool{.stdcall.}

const
  SeCreateTokenName* = "SeCreateTokenPrivilege"
  SeAssignprimarytokenName* = "SeAssignPrimaryTokenPrivilege"
  SeLockMemoryName* = "SeLockMemoryPrivilege"
  SeIncreaseQuotaName* = "SeIncreaseQuotaPrivilege"
  SeUnsolicitedInputName* = "SeUnsolicitedInputPrivilege"
  SeMachineAccountName* = "SeMachineAccountPrivilege"
  SeTcbName* = "SeTcbPrivilege"
  SeSecurityName* = "SeSecurityPrivilege"
  SeTakeOwnershipName* = "SeTakeOwnershipPrivilege"
  SeLoadDriverName* = "SeLoadDriverPrivilege"
  SeSystemProfileName* = "SeSystemProfilePrivilege"
  SeSystemtimeName* = "SeSystemtimePrivilege"
  SeProfSingleProcessName* = "SeProfileSingleProcessPrivilege"
  SeIncBasePriorityName* = "SeIncreaseBasePriorityPrivilege"
  SeCreatePagefileName* = "SeCreatePagefilePrivilege"
  SeCreatePermanentName* = "SeCreatePermanentPrivilege"
  SeBackupName* = "SeBackupPrivilege"
  SeRestoreName* = "SeRestorePrivilege"
  SeShutdownName* = "SeShutdownPrivilege"
  SeDebugName* = "SeDebugPrivilege"
  SeAuditName* = "SeAuditPrivilege"
  SeSystemEnvironmentName* = "SeSystemEnvironmentPrivilege"
  SeChangeNotifyName* = "SeChangeNotifyPrivilege"
  SeRemoteShutdownName* = "SeRemoteShutdownPrivilege"
  ServicesActiveDatabasew* = "ServicesActive"
  ServicesFailedDatabasew* = "ServicesFailed"
  ServicesActiveDatabasea* = "ServicesActive"
  ServicesFailedDatabasea* = "ServicesFailed"
  ScGroupIdentifierw* = "+"
  ScGroupIdentifiera* = "+"

when defined(winUnicode):
  const
    SERVICES_ACTIVE_DATABASE* = SERVICES_ACTIVE_DATABASEW
    SERVICES_FAILED_DATABASE* = SERVICES_FAILED_DATABASEW
    SC_GROUP_IDENTIFIER* = SC_GROUP_IDENTIFIERW
else:
  const
    ServicesActiveDatabase* = SERVICES_ACTIVE_DATABASEA
    ServicesFailedDatabase* = SERVICES_FAILED_DATABASEA
    ScGroupIdentifier* = SC_GROUP_IDENTIFIERA
type
  Pfncallback* = proc (para1, para2: Uint, para3: Hconv, para4, para5: Hsz,
                       para6: Hddedata, para7, para8: Dword): Hddedata{.stdcall.}
  Callb* = Pfncallback
  SecurityContextTrackingMode* = Winbool
  # End of stuff from ddeml.h in old Cygnus headers

  Wndenumproc* = Farproc
  Enhmfenumproc* = Farproc
  Ccstyle* = Dword
  Pccstyle* = ptr Ccstyle
  Lpccstyle* = ptr Ccstyle
  Ccstyleflaga* = Dword
  Pccstyleflaga* = ptr Ccstyleflaga
  Lpccstyleflaga* = ptr Ccstyleflaga

const
  LzerrorUnknownalg* = -8
  LzerrorBadvalue* = -7
  LzerrorGloblock* = -6
  LzerrorGloballoc* = -5
  LzerrorWrite* = -4
  LzerrorRead* = -3
  LzerrorBadouthandle* = -2
  LzerrorBadinhandle* = -1
  NoError* = 0
  ErrorSuccess* = 0
  ErrorInvalidFunction* = 1
  ErrorFileNotFound* = 2
  ErrorPathNotFound* = 3
  ErrorTooManyOpenFiles* = 4
  ErrorAccessDenied* = 5
  ErrorInvalidHandle* = 6
  ErrorArenaTrashed* = 7
  ErrorNotEnoughMemory* = 8
  ErrorInvalidBlock* = 9
  ErrorBadEnvironment* = 10
  ErrorBadFormat* = 11
  ErrorInvalidAccess* = 12
  ErrorInvalidData* = 13
  ErrorOutofmemory* = 14
  ErrorInvalidDrive* = 15
  ErrorCurrentDirectory* = 16
  ErrorNotSameDevice* = 17
  ErrorNoMoreFiles* = 18
  ErrorWriteProtect* = 19
  ErrorBadUnit* = 20
  ErrorNotReady* = 21
  ErrorBadCommand* = 22
  ErrorCrc* = 23
  ErrorBadLength* = 24
  ErrorSeek* = 25
  ErrorNotDosDisk* = 26
  ErrorSectorNotFound* = 27
  ErrorOutOfPaper* = 28
  ErrorWriteFault* = 29
  ErrorReadFault* = 30
  ErrorGenFailure* = 31
  ErrorSharingViolation* = 32
  ErrorLockViolation* = 33
  ErrorWrongDisk* = 34
  ErrorSharingBufferExceeded* = 36
  ErrorHandleEof* = 38
  ErrorHandleDiskFull* = 39
  ErrorNotSupported* = 50
  ErrorRemNotList* = 51
  ErrorDupName* = 52
  ErrorBadNetpath* = 53
  ErrorNetworkBusy* = 54
  ErrorDevNotExist* = 55
  ErrorTooManyCmds* = 56
  ErrorAdapHdwErr* = 57
  ErrorBadNetResp* = 58
  ErrorUnexpNetErr* = 59
  ErrorBadRemAdap* = 60
  ErrorPrintqFull* = 61
  ErrorNoSpoolSpace* = 62
  ErrorPrintCancelled* = 63
  ErrorNetnameDeleted* = 64
  ErrorNetworkAccessDenied* = 65
  ErrorBadDevType* = 66
  ErrorBadNetName* = 67
  ErrorTooManyNames* = 68
  ErrorTooManySess* = 69
  ErrorSharingPaused* = 70
  ErrorReqNotAccep* = 71
  ErrorRedirPaused* = 72
  ErrorFileExists* = 80
  ErrorCannotMake* = 82
  ErrorFailI24* = 83
  ErrorOutOfStructures* = 84
  ErrorAlreadyAssigned* = 85
  ErrorInvalidPassword* = 86
  ErrorInvalidParameter* = 87
  ErrorNetWriteFault* = 88
  ErrorNoProcSlots* = 89
  ErrorTooManySemaphores* = 100
  ErrorExclSemAlreadyOwned* = 101
  ErrorSemIsSet* = 102
  ErrorTooManySemRequests* = 103
  ErrorInvalidAtInterruptTime* = 104
  ErrorSemOwnerDied* = 105
  ErrorSemUserLimit* = 106
  ErrorDiskChange* = 107
  ErrorDriveLocked* = 108
  ErrorBrokenPipe* = 109
  ErrorOpenFailed* = 110
  ErrorBufferOverflow* = 111
  ErrorDiskFull* = 112
  ErrorNoMoreSearchHandles* = 113
  ErrorInvalidTargetHandle* = 114
  ErrorInvalidCategory* = 117
  ErrorInvalidVerifySwitch* = 118
  ErrorBadDriverLevel* = 119
  ErrorCallNotImplemented* = 120
  ErrorSemTimeout* = 121
  ErrorInsufficientBuffer* = 122
  ErrorInvalidName* = 123
  ErrorInvalidLevel* = 124
  ErrorNoVolumeLabel* = 125
  ErrorModNotFound* = 126
  ErrorProcNotFound* = 127
  ErrorWaitNoChildren* = 128
  ErrorChildNotComplete* = 129
  ErrorDirectAccessHandle* = 130
  ErrorNegativeSeek* = 131
  ErrorSeekOnDevice* = 132
  ErrorIsJoinTarget* = 133
  ErrorIsJoined* = 134
  ErrorIsSubsted* = 135
  ErrorNotJoined* = 136
  ErrorNotSubsted* = 137
  ErrorJoinToJoin* = 138
  ErrorSubstToSubst* = 139
  ErrorJoinToSubst* = 140
  ErrorSubstToJoin* = 141
  ErrorBusyDrive* = 142
  ErrorSameDrive* = 143
  ErrorDirNotRoot* = 144
  ErrorDirNotEmpty* = 145
  ErrorIsSubstPath* = 146
  ErrorIsJoinPath* = 147
  ErrorPathBusy* = 148
  ErrorIsSubstTarget* = 149
  ErrorSystemTrace* = 150
  ErrorInvalidEventCount* = 151
  ErrorTooManyMuxwaiters* = 152
  ErrorInvalidListFormat* = 153
  ErrorLabelTooLong* = 154
  ErrorTooManyTcbs* = 155
  ErrorSignalRefused* = 156
  ErrorDiscarded* = 157
  ErrorNotLocked* = 158
  ErrorBadThreadidAddr* = 159
  ErrorBadArguments* = 160
  ErrorBadPathname* = 161
  ErrorSignalPending* = 162
  ErrorMaxThrdsReached* = 164
  ErrorLockFailed* = 167
  ErrorBusy* = 170
  ErrorCancelViolation* = 173
  ErrorAtomicLocksNotSupported* = 174
  ErrorInvalidSegmentNumber* = 180
  ErrorInvalidOrdinal* = 182
  ErrorAlreadyExists* = 183
  ErrorInvalidFlagNumber* = 186
  ErrorSemNotFound* = 187
  ErrorInvalidStartingCodeseg* = 188
  ErrorInvalidStackseg* = 189
  ErrorInvalidModuletype* = 190
  ErrorInvalidExeSignature* = 191
  ErrorExeMarkedInvalid* = 192
  ErrorBadExeFormat* = 193
  ERRORITERATEDDATAEXCEEDS64k* = 194
  ErrorInvalidMinallocsize* = 195
  ErrorDynlinkFromInvalidRing* = 196
  ErrorIoplNotEnabled* = 197
  ErrorInvalidSegdpl* = 198
  ERRORAUTODATASEGEXCEEDS64k* = 199
  ErrorRing2segMustBeMovable* = 200
  ErrorRelocChainXeedsSeglim* = 201
  ErrorInfloopInRelocChain* = 202
  ErrorEnvvarNotFound* = 203
  ErrorNoSignalSent* = 205
  ErrorFilenameExcedRange* = 206
  ErrorRing2StackInUse* = 207
  ErrorMetaExpansionTooLong* = 208
  ErrorInvalidSignalNumber* = 209
  ErrorThread1Inactive* = 210
  ErrorLocked* = 212
  ErrorTooManyModules* = 214
  ErrorNestingNotAllowed* = 215
  ErrorBadPipe* = 230
  ErrorPipeBusy* = 231
  ErrorNoData* = 232
  ErrorPipeNotConnected* = 233
  ErrorMoreData* = 234
  ErrorVcDisconnected* = 240
  ErrorInvalidEaName* = 254
  ErrorEaListInconsistent* = 255
  ErrorNoMoreItems* = 259
  ErrorCannotCopy* = 266
  ErrorDirectory* = 267
  ErrorEasDidntFit* = 275
  ErrorEaFileCorrupt* = 276
  ErrorEaTableFull* = 277
  ErrorInvalidEaHandle* = 278
  ErrorEasNotSupported* = 282
  ErrorNotOwner* = 288
  ErrorTooManyPosts* = 298
  ErrorPartialCopy* = 299
  ErrorMrMidNotFound* = 317
  ErrorInvalidAddress* = 487
  ErrorArithmeticOverflow* = 534
  ErrorPipeConnected* = 535
  ErrorPipeListening* = 536
  ErrorEaAccessDenied* = 994
  ErrorOperationAborted* = 995
  ErrorIoIncomplete* = 996
  ErrorIoPending* = 997
  ErrorNoaccess* = 998
  ErrorSwaperror* = 999
  ErrorStackOverflow* = 1001
  ErrorInvalidMessage* = 1002
  ErrorCanNotComplete* = 1003
  ErrorInvalidFlags* = 1004
  ErrorUnrecognizedVolume* = 1005
  ErrorFileInvalid* = 1006
  ErrorFullscreenMode* = 1007
  ErrorNoToken* = 1008
  ErrorBaddb* = 1009
  ErrorBadkey* = 1010
  ErrorCantopen* = 1011
  ErrorCantread* = 1012
  ErrorCantwrite* = 1013
  ErrorRegistryRecovered* = 1014
  ErrorRegistryCorrupt* = 1015
  ErrorRegistryIoFailed* = 1016
  ErrorNotRegistryFile* = 1017
  ErrorKeyDeleted* = 1018
  ErrorNoLogSpace* = 1019
  ErrorKeyHasChildren* = 1020
  ErrorChildMustBeVolatile* = 1021
  ErrorNotifyEnumDir* = 1022
  ErrorDependentServicesRunning* = 1051
  ErrorInvalidServiceControl* = 1052
  ErrorServiceRequestTimeout* = 1053
  ErrorServiceNoThread* = 1054
  ErrorServiceDatabaseLocked* = 1055
  ErrorServiceAlreadyRunning* = 1056
  ErrorInvalidServiceAccount* = 1057
  ErrorServiceDisabled* = 1058
  ErrorCircularDependency* = 1059
  ErrorServiceDoesNotExist* = 1060
  ErrorServiceCannotAcceptCtrl* = 1061
  ErrorServiceNotActive* = 1062
  ErrorFailedServiceControllerConnect* = 1063
  ErrorExceptionInService* = 1064
  ErrorDatabaseDoesNotExist* = 1065
  ErrorServiceSpecificError* = 1066
  ErrorProcessAborted* = 1067
  ErrorServiceDependencyFail* = 1068
  ErrorServiceLogonFailed* = 1069
  ErrorServiceStartHang* = 1070
  ErrorInvalidServiceLock* = 1071
  ErrorServiceMarkedForDelete* = 1072
  ErrorServiceExists* = 1073
  ErrorAlreadyRunningLkg* = 1074
  ErrorServiceDependencyDeleted* = 1075
  ErrorBootAlreadyAccepted* = 1076
  ErrorServiceNeverStarted* = 1077
  ErrorDuplicateServiceName* = 1078
  ErrorEndOfMedia* = 1100
  ErrorFilemarkDetected* = 1101
  ErrorBeginningOfMedia* = 1102
  ErrorSetmarkDetected* = 1103
  ErrorNoDataDetected* = 1104
  ErrorPartitionFailure* = 1105
  ErrorInvalidBlockLength* = 1106
  ErrorDeviceNotPartitioned* = 1107
  ErrorUnableToLockMedia* = 1108
  ErrorUnableToUnloadMedia* = 1109
  ErrorMediaChanged* = 1110
  ErrorBusReset* = 1111
  ErrorNoMediaInDrive* = 1112
  ErrorNoUnicodeTranslation* = 1113
  ErrorDllInitFailed* = 1114
  ErrorShutdownInProgress* = 1115
  ErrorNoShutdownInProgress* = 1116
  ErrorIoDevice* = 1117
  ErrorSerialNoDevice* = 1118
  ErrorIrqBusy* = 1119
  ErrorMoreWrites* = 1120
  ErrorCounterTimeout* = 1121
  ErrorFloppyIdMarkNotFound* = 1122
  ErrorFloppyWrongCylinder* = 1123
  ErrorFloppyUnknownError* = 1124
  ErrorFloppyBadRegisters* = 1125
  ErrorDiskRecalibrateFailed* = 1126
  ErrorDiskOperationFailed* = 1127
  ErrorDiskResetFailed* = 1128
  ErrorEomOverflow* = 1129
  ErrorNotEnoughServerMemory* = 1130
  ErrorPossibleDeadlock* = 1131
  ErrorMappedAlignment* = 1132
  ErrorSetPowerStateVetoed* = 1140
  ErrorSetPowerStateFailed* = 1141
  ErrorOldWinVersion* = 1150
  ErrorAppWrongOs* = 1151
  ErrorSingleInstanceApp* = 1152
  ErrorRmodeApp* = 1153
  ErrorInvalidDll* = 1154
  ErrorNoAssociation* = 1155
  ErrorDdeFail* = 1156
  ErrorDllNotFound* = 1157
  ErrorBadUsername* = 2202
  ErrorNotConnected* = 2250
  ErrorOpenFiles* = 2401
  ErrorActiveConnections* = 2402
  ErrorDeviceInUse* = 2404
  ErrorBadDevice* = 1200
  ErrorConnectionUnavail* = 1201
  ErrorDeviceAlreadyRemembered* = 1202
  ErrorNoNetOrBadPath* = 1203
  ErrorBadProvider* = 1204
  ErrorCannotOpenProfile* = 1205
  ErrorBadProfile* = 1206
  ErrorNotContainer* = 1207
  ErrorExtendedError* = 1208
  ErrorInvalidGroupname* = 1209
  ErrorInvalidComputername* = 1210
  ErrorInvalidEventname* = 1211
  ErrorInvalidDomainname* = 1212
  ErrorInvalidServicename* = 1213
  ErrorInvalidNetname* = 1214
  ErrorInvalidSharename* = 1215
  ErrorInvalidPasswordname* = 1216
  ErrorInvalidMessagename* = 1217
  ErrorInvalidMessagedest* = 1218
  ErrorSessionCredentialConflict* = 1219
  ErrorRemoteSessionLimitExceeded* = 1220
  ErrorDupDomainname* = 1221
  ErrorNoNetwork* = 1222
  ErrorCancelled* = 1223
  ErrorUserMappedFile* = 1224
  ErrorConnectionRefused* = 1225
  ErrorGracefulDisconnect* = 1226
  ErrorAddressAlreadyAssociated* = 1227
  ErrorAddressNotAssociated* = 1228
  ErrorConnectionInvalid* = 1229
  ErrorConnectionActive* = 1230
  ErrorNetworkUnreachable* = 1231
  ErrorHostUnreachable* = 1232
  ErrorProtocolUnreachable* = 1233
  ErrorPortUnreachable* = 1234
  ErrorRequestAborted* = 1235
  ErrorConnectionAborted* = 1236
  ErrorRetry* = 1237
  ErrorConnectionCountLimit* = 1238
  ErrorLoginTimeRestriction* = 1239
  ErrorLoginWkstaRestriction* = 1240
  ErrorIncorrectAddress* = 1241
  ErrorAlreadyRegistered* = 1242
  ErrorServiceNotFound* = 1243
  ErrorNotAuthenticated* = 1244
  ErrorNotLoggedOn* = 1245
  ErrorContinue* = 1246
  ErrorAlreadyInitialized* = 1247
  ErrorNoMoreDevices* = 1248
  ErrorNotAllAssigned* = 1300
  ErrorSomeNotMapped* = 1301
  ErrorNoQuotasForAccount* = 1302
  ErrorLocalUserSessionKey* = 1303
  ErrorNullLmPassword* = 1304
  ErrorUnknownRevision* = 1305
  ErrorRevisionMismatch* = 1306
  ErrorInvalidOwner* = 1307
  ErrorInvalidPrimaryGroup* = 1308
  ErrorNoImpersonationToken* = 1309
  ErrorCantDisableMandatory* = 1310
  ErrorNoLogonServers* = 1311
  ErrorNoSuchLogonSession* = 1312
  ErrorNoSuchPrivilege* = 1313
  ErrorPrivilegeNotHeld* = 1314
  ErrorInvalidAccountName* = 1315
  ErrorUserExists* = 1316
  ErrorNoSuchUser* = 1317
  ErrorGroupExists* = 1318
  ErrorNoSuchGroup* = 1319
  ErrorMemberInGroup* = 1320
  ErrorMemberNotInGroup* = 1321
  ErrorLastAdmin* = 1322
  ErrorWrongPassword* = 1323
  ErrorIllFormedPassword* = 1324
  ErrorPasswordRestriction* = 1325
  ErrorLogonFailure* = 1326
  ErrorAccountRestriction* = 1327
  ErrorInvalidLogonHours* = 1328
  ErrorInvalidWorkstation* = 1329
  ErrorPasswordExpired* = 1330
  ErrorAccountDisabled* = 1331
  ErrorNoneMapped* = 1332
  ErrorTooManyLuidsRequested* = 1333
  ErrorLuidsExhausted* = 1334
  ErrorInvalidSubAuthority* = 1335
  ErrorInvalidAcl* = 1336
  ErrorInvalidSid* = 1337
  ErrorInvalidSecurityDescr* = 1338
  ErrorBadInheritanceAcl* = 1340
  ErrorServerDisabled* = 1341
  ErrorServerNotDisabled* = 1342
  ErrorInvalidIdAuthority* = 1343
  ErrorAllottedSpaceExceeded* = 1344
  ErrorInvalidGroupAttributes* = 1345
  ErrorBadImpersonationLevel* = 1346
  ErrorCantOpenAnonymous* = 1347
  ErrorBadValidationClass* = 1348
  ErrorBadTokenType* = 1349
  ErrorNoSecurityOnObject* = 1350
  ErrorCantAccessDomainInfo* = 1351
  ErrorInvalidServerState* = 1352
  ErrorInvalidDomainState* = 1353
  ErrorInvalidDomainRole* = 1354
  ErrorNoSuchDomain* = 1355
  ErrorDomainExists* = 1356
  ErrorDomainLimitExceeded* = 1357
  ErrorInternalDbCorruption* = 1358
  ErrorInternalError* = 1359
  ErrorGenericNotMapped* = 1360
  ErrorBadDescriptorFormat* = 1361
  ErrorNotLogonProcess* = 1362
  ErrorLogonSessionExists* = 1363
  ErrorNoSuchPackage* = 1364
  ErrorBadLogonSessionState* = 1365
  ErrorLogonSessionCollision* = 1366
  ErrorInvalidLogonType* = 1367
  ErrorCannotImpersonate* = 1368
  ErrorRxactInvalidState* = 1369
  ErrorRxactCommitFailure* = 1370
  ErrorSpecialAccount* = 1371
  ErrorSpecialGroup* = 1372
  ErrorSpecialUser* = 1373
  ErrorMembersPrimaryGroup* = 1374
  ErrorTokenAlreadyInUse* = 1375
  ErrorNoSuchAlias* = 1376
  ErrorMemberNotInAlias* = 1377
  ErrorMemberInAlias* = 1378
  ErrorAliasExists* = 1379
  ErrorLogonNotGranted* = 1380
  ErrorTooManySecrets* = 1381
  ErrorSecretTooLong* = 1382
  ErrorInternalDbError* = 1383
  ErrorTooManyContextIds* = 1384
  ErrorLogonTypeNotGranted* = 1385
  ErrorNtCrossEncryptionRequired* = 1386
  ErrorNoSuchMember* = 1387
  ErrorInvalidMember* = 1388
  ErrorTooManySids* = 1389
  ErrorLmCrossEncryptionRequired* = 1390
  ErrorNoInheritance* = 1391
  ErrorFileCorrupt* = 1392
  ErrorDiskCorrupt* = 1393
  ErrorNoUserSessionKey* = 1394
  ErrorLicenseQuotaExceeded* = 1395
  ErrorInvalidWindowHandle* = 1400
  ErrorInvalidMenuHandle* = 1401
  ErrorInvalidCursorHandle* = 1402
  ErrorInvalidAccelHandle* = 1403
  ErrorInvalidHookHandle* = 1404
  ErrorInvalidDwpHandle* = 1405
  ErrorTlwWithWschild* = 1406
  ErrorCannotFindWndClass* = 1407
  ErrorWindowOfOtherThread* = 1408
  ErrorHotkeyAlreadyRegistered* = 1409
  ErrorClassAlreadyExists* = 1410
  ErrorClassDoesNotExist* = 1411
  ErrorClassHasWindows* = 1412
  ErrorInvalidIndex* = 1413
  ErrorInvalidIconHandle* = 1414
  ErrorPrivateDialogIndex* = 1415
  ErrorListboxIdNotFound* = 1416
  ErrorNoWildcardCharacters* = 1417
  ErrorClipboardNotOpen* = 1418
  ErrorHotkeyNotRegistered* = 1419
  ErrorWindowNotDialog* = 1420
  ErrorControlIdNotFound* = 1421
  ErrorInvalidComboboxMessage* = 1422
  ErrorWindowNotCombobox* = 1423
  ErrorInvalidEditHeight* = 1424
  ErrorDcNotFound* = 1425
  ErrorInvalidHookFilter* = 1426
  ErrorInvalidFilterProc* = 1427
  ErrorHookNeedsHmod* = 1428
  ErrorGlobalOnlyHook* = 1429
  ErrorJournalHookSet* = 1430
  ErrorHookNotInstalled* = 1431
  ErrorInvalidLbMessage* = 1432
  ErrorSetcountOnBadLb* = 1433
  ErrorLbWithoutTabstops* = 1434
  ErrorDestroyObjectOfOtherThread* = 1435
  ErrorChildWindowMenu* = 1436
  ErrorNoSystemMenu* = 1437
  ErrorInvalidMsgboxStyle* = 1438
  ErrorInvalidSpiValue* = 1439
  ErrorScreenAlreadyLocked* = 1440
  ErrorHwndsHaveDiffParent* = 1441
  ErrorNotChildWindow* = 1442
  ErrorInvalidGwCommand* = 1443
  ErrorInvalidThreadId* = 1444
  ErrorNonMdichildWindow* = 1445
  ErrorPopupAlreadyActive* = 1446
  ErrorNoScrollbars* = 1447
  ErrorInvalidScrollbarRange* = 1448
  ErrorInvalidShowwinCommand* = 1449
  ErrorNoSystemResources* = 1450
  ErrorNonpagedSystemResources* = 1451
  ErrorPagedSystemResources* = 1452
  ErrorWorkingSetQuota* = 1453
  ErrorPagefileQuota* = 1454
  ErrorCommitmentLimit* = 1455
  ErrorMenuItemNotFound* = 1456
  ErrorInvalidKeyboardHandle* = 1457
  ErrorHookTypeNotAllowed* = 1458
  ErrorRequiresInteractiveWindowstation* = 1459
  ErrorTimeout* = 1460
  ErrorEventlogFileCorrupt* = 1500
  ErrorEventlogCantStart* = 1501
  ErrorLogFileFull* = 1502
  ErrorEventlogFileChanged* = 1503
  RpcSInvalidStringBinding* = 1700
  RpcSWrongKindOfBinding* = 1701
  RpcSInvalidBinding* = 1702
  RpcSProtseqNotSupported* = 1703
  RpcSInvalidRpcProtseq* = 1704
  RpcSInvalidStringUuid* = 1705
  RpcSInvalidEndpointFormat* = 1706
  RpcSInvalidNetAddr* = 1707
  RpcSNoEndpointFound* = 1708
  RpcSInvalidTimeout* = 1709
  RpcSObjectNotFound* = 1710
  RpcSAlreadyRegistered* = 1711
  RpcSTypeAlreadyRegistered* = 1712
  RpcSAlreadyListening* = 1713
  RpcSNoProtseqsRegistered* = 1714
  RpcSNotListening* = 1715
  RpcSUnknownMgrType* = 1716
  RpcSUnknownIf* = 1717
  RpcSNoBindings* = 1718
  RpcSNoProtseqs* = 1719
  RpcSCantCreateEndpoint* = 1720
  RpcSOutOfResources* = 1721
  RpcSServerUnavailable* = 1722
  RpcSServerTooBusy* = 1723
  RpcSInvalidNetworkOptions* = 1724
  RpcSNoCallActive* = 1725
  RpcSCallFailed* = 1726
  RpcSCallFailedDne* = 1727
  RpcSProtocolError* = 1728
  RpcSUnsupportedTransSyn* = 1730
  RpcSUnsupportedType* = 1732
  RpcSInvalidTag* = 1733
  RpcSInvalidBound* = 1734
  RpcSNoEntryName* = 1735
  RpcSInvalidNameSyntax* = 1736
  RpcSUnsupportedNameSyntax* = 1737
  RpcSUuidNoAddress* = 1739
  RpcSDuplicateEndpoint* = 1740
  RpcSUnknownAuthnType* = 1741
  RpcSMaxCallsTooSmall* = 1742
  RpcSStringTooLong* = 1743
  RpcSProtseqNotFound* = 1744
  RpcSProcnumOutOfRange* = 1745
  RpcSBindingHasNoAuth* = 1746
  RpcSUnknownAuthnService* = 1747
  RpcSUnknownAuthnLevel* = 1748
  RpcSInvalidAuthIdentity* = 1749
  RpcSUnknownAuthzService* = 1750
  EptSInvalidEntry* = 1751
  EptSCantPerformOp* = 1752
  EptSNotRegistered* = 1753
  RpcSNothingToExport* = 1754
  RpcSIncompleteName* = 1755
  RpcSInvalidVersOption* = 1756
  RpcSNoMoreMembers* = 1757
  RpcSNotAllObjsUnexported* = 1758
  RpcSInterfaceNotFound* = 1759
  RpcSEntryAlreadyExists* = 1760
  RpcSEntryNotFound* = 1761
  RpcSNameServiceUnavailable* = 1762
  RpcSInvalidNafId* = 1763
  RpcSCannotSupport* = 1764
  RpcSNoContextAvailable* = 1765
  RpcSInternalError* = 1766
  RpcSZeroDivide* = 1767
  RpcSAddressError* = 1768
  RpcSFpDivZero* = 1769
  RpcSFpUnderflow* = 1770
  RpcSFpOverflow* = 1771
  RpcXNoMoreEntries* = 1772
  RpcXSsCharTransOpenFail* = 1773
  RpcXSsCharTransShortFile* = 1774
  RpcXSsInNullContext* = 1775
  RpcXSsContextDamaged* = 1777
  RpcXSsHandlesMismatch* = 1778
  RpcXSsCannotGetCallHandle* = 1779
  RpcXNullRefPointer* = 1780
  RpcXEnumValueOutOfRange* = 1781
  RpcXByteCountTooSmall* = 1782
  RpcXBadStubData* = 1783
  ErrorInvalidUserBuffer* = 1784
  ErrorUnrecognizedMedia* = 1785
  ErrorNoTrustLsaSecret* = 1786
  ErrorNoTrustSamAccount* = 1787
  ErrorTrustedDomainFailure* = 1788
  ErrorTrustedRelationshipFailure* = 1789
  ErrorTrustFailure* = 1790
  RpcSCallInProgress* = 1791
  ErrorNetlogonNotStarted* = 1792
  ErrorAccountExpired* = 1793
  ErrorRedirectorHasOpenHandles* = 1794
  ErrorPrinterDriverAlreadyInstalled* = 1795
  ErrorUnknownPort* = 1796
  ErrorUnknownPrinterDriver* = 1797
  ErrorUnknownPrintprocessor* = 1798
  ErrorInvalidSeparatorFile* = 1799
  ErrorInvalidPriority* = 1800
  ErrorInvalidPrinterName* = 1801
  ErrorPrinterAlreadyExists* = 1802
  ErrorInvalidPrinterCommand* = 1803
  ErrorInvalidDatatype* = 1804
  ErrorInvalidEnvironment* = 1805
  RpcSNoMoreBindings* = 1806
  ErrorNologonInterdomainTrustAccount* = 1807
  ErrorNologonWorkstationTrustAccount* = 1808
  ErrorNologonServerTrustAccount* = 1809
  ErrorDomainTrustInconsistent* = 1810
  ErrorServerHasOpenHandles* = 1811
  ErrorResourceDataNotFound* = 1812
  ErrorResourceTypeNotFound* = 1813
  ErrorResourceNameNotFound* = 1814
  ErrorResourceLangNotFound* = 1815
  ErrorNotEnoughQuota* = 1816
  RpcSNoInterfaces* = 1817
  RpcSCallCancelled* = 1818
  RpcSBindingIncomplete* = 1819
  RpcSCommFailure* = 1820
  RpcSUnsupportedAuthnLevel* = 1821
  RpcSNoPrincName* = 1822
  RpcSNotRpcError* = 1823
  RpcSUuidLocalOnly* = 1824
  RpcSSecPkgError* = 1825
  RpcSNotCancelled* = 1826
  RpcXInvalidEsAction* = 1827
  RpcXWrongEsVersion* = 1828
  RpcXWrongStubVersion* = 1829
  RpcXInvalidPipeObject* = 1830
  RpcXInvalidPipeOperation* = 1831
  RpcSGroupMemberNotFound* = 1898
  EptSCantCreate* = 1899
  RpcSInvalidObject* = 1900
  ErrorInvalidTime* = 1901
  ErrorInvalidFormName* = 1902
  ErrorInvalidFormSize* = 1903
  ErrorAlreadyWaiting* = 1904
  ErrorPrinterDeleted* = 1905
  ErrorInvalidPrinterState* = 1906
  ErrorPasswordMustChange* = 1907
  ErrorDomainControllerNotFound* = 1908
  ErrorAccountLockedOut* = 1909
  OrInvalidOxid* = 1910
  OrInvalidOid* = 1911
  OrInvalidSet* = 1912
  RpcSSendIncomplete* = 1913
  ErrorNoBrowserServersFound* = 6118
  ErrorInvalidPixelFormat* = 2000
  ErrorBadDriver* = 2001
  ErrorInvalidWindowStyle* = 2002
  ErrorMetafileNotSupported* = 2003
  ErrorTransformNotSupported* = 2004
  ErrorClippingNotSupported* = 2005
  ErrorUnknownPrintMonitor* = 3000
  ErrorPrinterDriverInUse* = 3001
  ErrorSpoolFileNotFound* = 3002
  ErrorSplNoStartdoc* = 3003
  ErrorSplNoAddjob* = 3004
  ErrorPrintProcessorAlreadyInstalled* = 3005
  ErrorPrintMonitorAlreadyInstalled* = 3006
  ErrorInvalidPrintMonitor* = 3007
  ErrorPrintMonitorInUse* = 3008
  ErrorPrinterHasJobsQueued* = 3009
  ErrorSuccessRebootRequired* = 3010
  ErrorSuccessRestartRequired* = 3011
  ErrorWinsInternal* = 4000
  ErrorCanNotDelLocalWins* = 4001
  ErrorStaticInit* = 4002
  ErrorIncBackup* = 4003
  ErrorFullBackup* = 4004
  ErrorRecNonExistent* = 4005
  ErrorRplNotAllowed* = 4006
  EUnexpected* = HRESULT(0x8000FFFF)
  ENotimpl* = HRESULT(0x80004001)
  EOutofmemory* = HRESULT(0x8007000E)
  EInvalidarg* = HRESULT(0x80070057)
  ENointerface* = HRESULT(0x80004002)
  EPointer* = HRESULT(0x80004003)
  EHandle* = HRESULT(0x80070006)
  EAbort* = HRESULT(0x80004004)
  EFail* = HRESULT(0x80004005)
  EAccessdenied* = HRESULT(0x80070005)
  EPending* = HRESULT(0x8000000A)
  CoEInitTls* = HRESULT(0x80004006)
  CoEInitSharedAllocator* = HRESULT(0x80004007)
  CoEInitMemoryAllocator* = HRESULT(0x80004008)
  CoEInitClassCache* = HRESULT(0x80004009)
  CoEInitRpcChannel* = HRESULT(0x8000400A)
  CoEInitTlsSetChannelControl* = HRESULT(0x8000400B)
  CoEInitTlsChannelControl* = HRESULT(0x8000400C)
  CoEInitUnacceptedUserAllocator* = HRESULT(0x8000400D)
  CoEInitScmMutexExists* = HRESULT(0x8000400E)
  CoEInitScmFileMappingExists* = HRESULT(0x8000400F)
  CoEInitScmMapViewOfFile* = HRESULT(0x80004010)
  CoEInitScmExecFailure* = HRESULT(0x80004011)
  CoEInitOnlySingleThreaded* = HRESULT(0x80004012)
  CoECantRemote* = HRESULT(0x80004013)
  CoEBadServerName* = HRESULT(0x80004014)
  CoEWrongServerIdentity* = HRESULT(0x80004015)
  CoEOle1ddeDisabled* = HRESULT(0x80004016)
  CoERunasSyntax* = HRESULT(0x80004017)
  CoECreateprocessFailure* = HRESULT(0x80004018)
  CoERunasCreateprocessFailure* = HRESULT(0x80004019)
  CoERunasLogonFailure* = HRESULT(0x8000401A)
  CoELaunchPermssionDenied* = HRESULT(0x8000401B)
  CoEStartServiceFailure* = HRESULT(0x8000401C)
  CoERemoteCommunicationFailure* = HRESULT(0x8000401D)
  CoEServerStartTimeout* = HRESULT(0x8000401E)
  CoEClsregInconsistent* = HRESULT(0x8000401F)
  CoEIidregInconsistent* = HRESULT(0x80004020)
  CoENotSupported* = HRESULT(0x80004021)
  CoEFirst* = DWORD(0x800401F0)
  CoELast* = DWORD(0x800401FF)
  CoSFirst* = DWORD(0x000401F0)
  CoSLast* = DWORD(0x000401FF)
  SOk* = HRESULT(0x00000000)
  SFalse* = HRESULT(0x00000001)
  CoENotinitialized* = HRESULT(0x800401F0)
  CoEAlreadyinitialized* = HRESULT(0x800401F1)
  CoECantdetermineclass* = HRESULT(0x800401F2)
  CoEClassstring* = HRESULT(0x800401F3)
  CoEIidstring* = HRESULT(0x800401F4)
  CoEAppnotfound* = HRESULT(0x800401F5)
  CoEAppsingleuse* = HRESULT(0x800401F6)
  CoEErrorinapp* = HRESULT(0x800401F7)
  CoEDllnotfound* = HRESULT(0x800401F8)
  CoEErrorindll* = HRESULT(0x800401F9)
  CoEWrongosforapp* = HRESULT(0x800401FA)
  CoEObjnotreg* = HRESULT(0x800401FB)
  CoEObjisreg* = HRESULT(0x800401FC)
  CoEObjnotconnected* = HRESULT(0x800401FD)
  CoEAppdidntreg* = HRESULT(0x800401FE)
  CoEReleased* = HRESULT(0x800401FF)
  OleEFirst* = HRESULT(0x80040000)
  OleELast* = HRESULT(0x800400FF)
  OleSFirst* = HRESULT(0x00040000)
  OleSLast* = HRESULT(0x000400FF)
  OleEOleverb* = HRESULT(0x80040000)
  OleEAdvf* = HRESULT(0x80040001)
  OleEEnumNomore* = HRESULT(0x80040002)
  OleEAdvisenotsupported* = HRESULT(0x80040003)
  OleENoconnection* = HRESULT(0x80040004)
  OleENotrunning* = HRESULT(0x80040005)
  OleENocache* = HRESULT(0x80040006)
  OleEBlank* = HRESULT(0x80040007)
  OleEClassdiff* = HRESULT(0x80040008)
  OleECantGetmoniker* = HRESULT(0x80040009)
  OleECantBindtosource* = HRESULT(0x8004000A)
  OleEStatic* = HRESULT(0x8004000B)
  OleEPromptsavecancelled* = HRESULT(0x8004000C)
  OleEInvalidrect* = HRESULT(0x8004000D)
  OleEWrongcompobj* = HRESULT(0x8004000E)
  OleEInvalidhwnd* = HRESULT(0x8004000F)
  OleENotInplaceactive* = HRESULT(0x80040010)
  OleECantconvert* = HRESULT(0x80040011)
  OleENostorage* = HRESULT(0x80040012)
  DvEFormatetc* = HRESULT(0x80040064)
  DvEDvtargetdevice* = HRESULT(0x80040065)
  DvEStgmedium* = HRESULT(0x80040066)
  DvEStatdata* = HRESULT(0x80040067)
  DvELindex* = HRESULT(0x80040068)
  DvETymed* = HRESULT(0x80040069)
  DvEClipformat* = HRESULT(0x8004006A)
  DvEDvaspect* = HRESULT(0x8004006B)
  DvEDvtargetdeviceSize* = HRESULT(0x8004006C)
  DvENoiviewobject* = HRESULT(0x8004006D)
  DragdropEFirst* = DWORD(0x80040100)
  DragdropELast* = DWORD(0x8004010F)
  DragdropSFirst* = DWORD(0x00040100)
  DragdropSLast* = DWORD(0x0004010F)
  DragdropENotregistered* = HRESULT(0x80040100)
  DragdropEAlreadyregistered* = HRESULT(0x80040101)
  DragdropEInvalidhwnd* = HRESULT(0x80040102)
  ClassfactoryEFirst* = DWORD(0x80040110)
  ClassfactoryELast* = DWORD(0x8004011F)
  ClassfactorySFirst* = DWORD(0x00040110)
  ClassfactorySLast* = DWORD(0x0004011F)
  ClassENoaggregation* = HRESULT(0x80040110)
  ClassEClassnotavailable* = HRESULT(0x80040111)
  MarshalEFirst* = DWORD(0x80040120)
  MarshalELast* = DWORD(0x8004012F)
  MarshalSFirst* = DWORD(0x00040120)
  MarshalSLast* = DWORD(0x0004012F)
  DataEFirst* = DWORD(0x80040130)
  DataELast* = DWORD(0x8004013F)
  DataSFirst* = DWORD(0x00040130)
  DataSLast* = DWORD(0x0004013F)
  ViewEFirst* = DWORD(0x80040140)
  ViewELast* = DWORD(0x8004014F)
  ViewSFirst* = DWORD(0x00040140)
  ViewSLast* = DWORD(0x0004014F)
  ViewEDraw* = HRESULT(0x80040140)
  RegdbEFirst* = DWORD(0x80040150)
  RegdbELast* = DWORD(0x8004015F)
  RegdbSFirst* = DWORD(0x00040150)
  RegdbSLast* = DWORD(0x0004015F)
  RegdbEReadregdb* = HRESULT(0x80040150)
  RegdbEWriteregdb* = HRESULT(0x80040151)
  RegdbEKeymissing* = HRESULT(0x80040152)
  RegdbEInvalidvalue* = HRESULT(0x80040153)
  RegdbEClassnotreg* = HRESULT(0x80040154)
  RegdbEIidnotreg* = HRESULT(0x80040155)
  CacheEFirst* = DWORD(0x80040170)
  CacheELast* = DWORD(0x8004017F)
  CacheSFirst* = DWORD(0x00040170)
  CacheSLast* = DWORD(0x0004017F)
  CacheENocacheUpdated* = HRESULT(0x80040170)
  OleobjEFirst* = DWORD(0x80040180)
  OleobjELast* = DWORD(0x8004018F)
  OleobjSFirst* = DWORD(0x00040180)
  OleobjSLast* = DWORD(0x0004018F)
  OleobjENoverbs* = HRESULT(0x80040180)
  OleobjEInvalidverb* = HRESULT(0x80040181)
  ClientsiteEFirst* = DWORD(0x80040190)
  ClientsiteELast* = DWORD(0x8004019F)
  ClientsiteSFirst* = DWORD(0x00040190)
  ClientsiteSLast* = DWORD(0x0004019F)
  InplaceENotundoable* = HRESULT(0x800401A0)
  InplaceENotoolspace* = HRESULT(0x800401A1)
  InplaceEFirst* = DWORD(0x800401A0)
  InplaceELast* = DWORD(0x800401AF)
  InplaceSFirst* = DWORD(0x000401A0)
  InplaceSLast* = DWORD(0x000401AF)
  EnumEFirst* = DWORD(0x800401B0)
  EnumELast* = DWORD(0x800401BF)
  EnumSFirst* = DWORD(0x000401B0)
  EnumSLast* = DWORD(0x000401BF)
  Convert10EFirst* = DWORD(0x800401C0)
  Convert10ELast* = DWORD(0x800401CF)
  Convert10SFirst* = DWORD(0x000401C0)
  Convert10SLast* = DWORD(0x000401CF)
  Convert10EOlestreamGet* = HRESULT(0x800401C0)
  Convert10EOlestreamPut* = HRESULT(0x800401C1)
  Convert10EOlestreamFmt* = HRESULT(0x800401C2)
  Convert10EOlestreamBitmapToDib* = HRESULT(0x800401C3)
  Convert10EStgFmt* = HRESULT(0x800401C4)
  Convert10EStgNoStdStream* = HRESULT(0x800401C5)
  Convert10EStgDibToBitmap* = HRESULT(0x800401C6)
  ClipbrdEFirst* = DWORD(0x800401D0)
  ClipbrdELast* = DWORD(0x800401DF)
  ClipbrdSFirst* = DWORD(0x000401D0)
  ClipbrdSLast* = DWORD(0x000401DF)
  ClipbrdECantOpen* = HRESULT(0x800401D0)
  ClipbrdECantEmpty* = HRESULT(0x800401D1)
  ClipbrdECantSet* = HRESULT(0x800401D2)
  ClipbrdEBadData* = HRESULT(0x800401D3)
  ClipbrdECantClose* = HRESULT(0x800401D4)
  MkEFirst* = DWORD(0x800401E0)
  MkELast* = DWORD(0x800401EF)
  MkSFirst* = DWORD(0x000401E0)
  MkSLast* = DWORD(0x000401EF)
  MkEConnectmanually* = HRESULT(0x800401E0)
  MkEExceededdeadline* = HRESULT(0x800401E1)
  MkENeedgeneric* = HRESULT(0x800401E2)
  MkEUnavailable* = HRESULT(0x800401E3)
  MkESyntax* = HRESULT(0x800401E4)
  MkENoobject* = HRESULT(0x800401E5)
  MkEInvalidextension* = HRESULT(0x800401E6)
  MkEIntermediateinterfacenotsupported* = HRESULT(0x800401E7)
  MkENotbindable* = HRESULT(0x800401E8)
  MkENotbound* = HRESULT(0x800401E9)
  MkECantopenfile* = HRESULT(0x800401EA)
  MkEMustbotheruser* = HRESULT(0x800401EB)
  MkENoinverse* = HRESULT(0x800401EC)
  MkENostorage* = HRESULT(0x800401ED)
  MkENoprefix* = HRESULT(0x800401EE)
  MkEEnumerationFailed* = HRESULT(0x800401EF)
  OleSUsereg* = HRESULT(0x00040000)
  OleSStatic* = HRESULT(0x00040001)
  OleSMacClipformat* = HRESULT(0x00040002)
  DragdropSDrop* = HRESULT(0x00040100)
  DragdropSCancel* = HRESULT(0x00040101)
  DragdropSUsedefaultcursors* = HRESULT(0x00040102)
  DataSSameformatetc* = HRESULT(0x00040130)
  ViewSAlreadyFrozen* = HRESULT(0x00040140)
  CacheSFormatetcNotsupported* = HRESULT(0x00040170)
  CacheSSamecache* = HRESULT(0x00040171)
  CacheSSomecachesNotupdated* = HRESULT(0x00040172)
  OleobjSInvalidverb* = HRESULT(0x00040180)
  OleobjSCannotDoverbNow* = HRESULT(0x00040181)
  OleobjSInvalidhwnd* = HRESULT(0x00040182)
  InplaceSTruncated* = HRESULT(0x000401A0)
  Convert10SNoPresentation* = HRESULT(0x000401C0)
  MkSReducedToSelf* = HRESULT(0x000401E2)
  MkSMe* = HRESULT(0x000401E4)
  MkSHim* = HRESULT(0x000401E5)
  MkSUs* = HRESULT(0x000401E6)
  MkSMonikeralreadyregistered* = HRESULT(0x000401E7)
  CoEClassCreateFailed* = HRESULT(0x80080001)
  CoEScmError* = HRESULT(0x80080002)
  CoEScmRpcFailure* = HRESULT(0x80080003)
  CoEBadPath* = HRESULT(0x80080004)
  CoEServerExecFailure* = HRESULT(0x80080005)
  CoEObjsrvRpcFailure* = HRESULT(0x80080006)
  MkENoNormalized* = HRESULT(0x80080007)
  CoEServerStopping* = HRESULT(0x80080008)
  MemEInvalidRoot* = HRESULT(0x80080009)
  MemEInvalidLink* = HRESULT(0x80080010)
  MemEInvalidSize* = HRESULT(0x80080011)
  CoSNotallinterfaces* = HRESULT(0x00080012)
  DispEUnknowninterface* = HRESULT(0x80020001)
  DispEMembernotfound* = HRESULT(0x80020003)
  DispEParamnotfound* = HRESULT(0x80020004)
  DispETypemismatch* = HRESULT(0x80020005)
  DispEUnknownname* = HRESULT(0x80020006)
  DispENonamedargs* = HRESULT(0x80020007)
  DispEBadvartype* = HRESULT(0x80020008)
  DispEException* = HRESULT(0x80020009)
  DispEOverflow* = HRESULT(0x8002000A)
  DispEBadindex* = HRESULT(0x8002000B)
  DispEUnknownlcid* = HRESULT(0x8002000C)
  DispEArrayislocked* = HRESULT(0x8002000D)
  DispEBadparamcount* = HRESULT(0x8002000E)
  DispEParamnotoptional* = HRESULT(0x8002000F)
  DispEBadcallee* = HRESULT(0x80020010)
  DispENotacollection* = HRESULT(0x80020011)
  TypeEBuffertoosmall* = HRESULT(0x80028016)
  TypeEInvdataread* = HRESULT(0x80028018)
  TypeEUnsupformat* = HRESULT(0x80028019)
  TypeERegistryaccess* = HRESULT(0x8002801C)
  TypeELibnotregistered* = HRESULT(0x8002801D)
  TypeEUndefinedtype* = HRESULT(0x80028027)
  TypeEQualifiednamedisallowed* = HRESULT(0x80028028)
  TypeEInvalidstate* = HRESULT(0x80028029)
  TypeEWrongtypekind* = HRESULT(0x8002802A)
  TypeEElementnotfound* = HRESULT(0x8002802B)
  TypeEAmbiguousname* = HRESULT(0x8002802C)
  TypeENameconflict* = HRESULT(0x8002802D)
  TypeEUnknownlcid* = HRESULT(0x8002802E)
  TypeEDllfunctionnotfound* = HRESULT(0x8002802F)
  TypeEBadmodulekind* = HRESULT(0x800288BD)
  TypeESizetoobig* = HRESULT(0x800288C5)
  TypeEDuplicateid* = HRESULT(0x800288C6)
  TypeEInvalidid* = HRESULT(0x800288CF)
  TypeETypemismatch* = HRESULT(0x80028CA0)
  TypeEOutofbounds* = HRESULT(0x80028CA1)
  TypeEIoerror* = HRESULT(0x80028CA2)
  TypeECantcreatetmpfile* = HRESULT(0x80028CA3)
  TypeECantloadlibrary* = HRESULT(0x80029C4A)
  TypeEInconsistentpropfuncs* = HRESULT(0x80029C83)
  TypeECirculartype* = HRESULT(0x80029C84)
  StgEInvalidfunction* = HRESULT(0x80030001)
  StgEFilenotfound* = HRESULT(0x80030002)
  StgEPathnotfound* = HRESULT(0x80030003)
  StgEToomanyopenfiles* = HRESULT(0x80030004)
  StgEAccessdenied* = HRESULT(0x80030005)
  StgEInvalidhandle* = HRESULT(0x80030006)
  StgEInsufficientmemory* = HRESULT(0x80030008)
  StgEInvalidpointer* = HRESULT(0x80030009)
  StgENomorefiles* = HRESULT(0x80030012)
  StgEDiskiswriteprotected* = HRESULT(0x80030013)
  StgESeekerror* = HRESULT(0x80030019)
  StgEWritefault* = HRESULT(0x8003001D)
  StgEReadfault* = HRESULT(0x8003001E)
  StgEShareviolation* = HRESULT(0x80030020)
  StgELockviolation* = HRESULT(0x80030021)
  StgEFilealreadyexists* = HRESULT(0x80030050)
  StgEInvalidparameter* = HRESULT(0x80030057)
  StgEMediumfull* = HRESULT(0x80030070)
  StgEPropsetmismatched* = HRESULT(0x800300F0)
  StgEAbnormalapiexit* = HRESULT(0x800300FA)
  StgEInvalidheader* = HRESULT(0x800300FB)
  StgEInvalidname* = HRESULT(0x800300FC)
  StgEUnknown* = HRESULT(0x800300FD)
  StgEUnimplementedfunction* = HRESULT(0x800300FE)
  StgEInvalidflag* = HRESULT(0x800300FF)
  StgEInuse* = HRESULT(0x80030100)
  StgENotcurrent* = HRESULT(0x80030101)
  StgEReverted* = HRESULT(0x80030102)
  StgECantsave* = HRESULT(0x80030103)
  StgEOldformat* = HRESULT(0x80030104)
  StgEOlddll* = HRESULT(0x80030105)
  StgESharerequired* = HRESULT(0x80030106)
  StgENotfilebasedstorage* = HRESULT(0x80030107)
  StgEExtantmarshallings* = HRESULT(0x80030108)
  StgEDocfilecorrupt* = HRESULT(0x80030109)
  StgEBadbaseaddress* = HRESULT(0x80030110)
  StgEIncomplete* = HRESULT(0x80030201)
  StgETerminated* = HRESULT(0x80030202)
  StgSConverted* = HRESULT(0x00030200)
  StgSBlock* = HRESULT(0x00030201)
  StgSRetrynow* = HRESULT(0x00030202)
  StgSMonitoring* = HRESULT(0x00030203)
  RpcECallRejected* = HRESULT(0x80010001)
  RpcECallCanceled* = HRESULT(0x80010002)
  RpcECantpostInsendcall* = HRESULT(0x80010003)
  RpcECantcalloutInasynccall* = HRESULT(0x80010004)
  RpcECantcalloutInexternalcall* = HRESULT(0x80010005)
  RpcEConnectionTerminated* = HRESULT(0x80010006)
  RpcEServerDied* = HRESULT(0x80010007)
  RpcEClientDied* = HRESULT(0x80010008)
  RpcEInvalidDatapacket* = HRESULT(0x80010009)
  RpcECanttransmitCall* = HRESULT(0x8001000A)
  RpcEClientCantmarshalData* = HRESULT(0x8001000B)
  RpcEClientCantunmarshalData* = HRESULT(0x8001000C)
  RpcEServerCantmarshalData* = HRESULT(0x8001000D)
  RpcEServerCantunmarshalData* = HRESULT(0x8001000E)
  RpcEInvalidData* = HRESULT(0x8001000F)
  RpcEInvalidParameter* = HRESULT(0x80010010)
  RpcECantcalloutAgain* = HRESULT(0x80010011)
  RpcEServerDiedDne* = HRESULT(0x80010012)
  RpcESysCallFailed* = HRESULT(0x80010100)
  RpcEOutOfResources* = HRESULT(0x80010101)
  RpcEAttemptedMultithread* = HRESULT(0x80010102)
  RpcENotRegistered* = HRESULT(0x80010103)
  RpcEFault* = HRESULT(0x80010104)
  RpcEServerfault* = HRESULT(0x80010105)
  RpcEChangedMode* = HRESULT(0x80010106)
  RpcEInvalidmethod* = HRESULT(0x80010107)
  RpcEDisconnected* = HRESULT(0x80010108)
  RpcERetry* = HRESULT(0x80010109)
  RpcEServercallRetrylater* = HRESULT(0x8001010A)
  RpcEServercallRejected* = HRESULT(0x8001010B)
  RpcEInvalidCalldata* = HRESULT(0x8001010C)
  RpcECantcalloutIninputsynccall* = HRESULT(0x8001010D)
  RpcEWrongThread* = HRESULT(0x8001010E)
  RpcEThreadNotInit* = HRESULT(0x8001010F)
  RpcEVersionMismatch* = HRESULT(0x80010110)
  RpcEInvalidHeader* = HRESULT(0x80010111)
  RpcEInvalidExtension* = HRESULT(0x80010112)
  RpcEInvalidIpid* = HRESULT(0x80010113)
  RpcEInvalidObject* = HRESULT(0x80010114)
  RpcSCallpending* = HRESULT(0x80010115)
  RpcSWaitontimer* = HRESULT(0x80010116)
  RpcECallComplete* = HRESULT(0x80010117)
  RpcEUnsecureCall* = HRESULT(0x80010118)
  RpcETooLate* = HRESULT(0x80010119)
  RpcENoGoodSecurityPackages* = HRESULT(0x8001011A)
  RpcEAccessDenied* = HRESULT(0x8001011B)
  RpcERemoteDisabled* = HRESULT(0x8001011C)
  RpcEInvalidObjref* = HRESULT(0x8001011D)
  RpcEUnexpected* = HRESULT(0x8001FFFF)
  NteBadUid* = HRESULT(0x80090001)
  NteBadHash* = HRESULT(0x80090002)
  NteBadKey* = HRESULT(0x80090003)
  NteBadLen* = HRESULT(0x80090004)
  NteBadData* = HRESULT(0x80090005)
  NteBadSignature* = HRESULT(0x80090006)
  NteBadVer* = HRESULT(0x80090007)
  NteBadAlgid* = HRESULT(0x80090008)
  NteBadFlags* = HRESULT(0x80090009)
  NteBadType* = HRESULT(0x8009000A)
  NteBadKeyState* = HRESULT(0x8009000B)
  NteBadHashState* = HRESULT(0x8009000C)
  NteNoKey* = HRESULT(0x8009000D)
  NteNoMemory* = HRESULT(0x8009000E)
  NteExists* = HRESULT(0x8009000F)
  NtePerm* = HRESULT(0x80090010)
  NteNotFound* = HRESULT(0x80090011)
  NteDoubleEncrypt* = HRESULT(0x80090012)
  NteBadProvider* = HRESULT(0x80090013)
  NteBadProvType* = HRESULT(0x80090014)
  NteBadPublicKey* = HRESULT(0x80090015)
  NteBadKeyset* = HRESULT(0x80090016)
  NteProvTypeNotDef* = HRESULT(0x80090017)
  NteProvTypeEntryBad* = HRESULT(0x80090018)
  NteKeysetNotDef* = HRESULT(0x80090019)
  NteKeysetEntryBad* = HRESULT(0x8009001A)
  NteProvTypeNoMatch* = HRESULT(0x8009001B)
  NteSignatureFileBad* = HRESULT(0x8009001C)
  NteProviderDllFail* = HRESULT(0x8009001D)
  NteProvDllNotFound* = HRESULT(0x8009001E)
  NteBadKeysetParam* = HRESULT(0x8009001F)
  NteFail* = HRESULT(0x80090020)
  NteSysErr* = HRESULT(0x80090021)
  NteOpOk* = HRESULT(0)
  TrustEProviderUnknown* = HRESULT(0x800B0001)
  TrustEActionUnknown* = HRESULT(0x800B0002)
  TrustESubjectFormUnknown* = HRESULT(0x800B0003)
  TrustESubjectNotTrusted* = HRESULT(0x800B0004)
  DigsigEEncode* = HRESULT(0x800B0005)
  DigsigEDecode* = HRESULT(0x800B0006)
  DigsigEExtensibility* = HRESULT(0x800B0007)
  DigsigECrypto* = HRESULT(0x800B0008)
  PersistESizedefinite* = HRESULT(0x800B0009)
  PersistESizeindefinite* = HRESULT(0x800B000A)
  PersistENotselfsizing* = HRESULT(0x800B000B)
  TrustENosignature* = HRESULT(0x800B0100)
  CertEExpired* = HRESULT(0x800B0101)
  CertEValidiyperiodnesting* = HRESULT(0x800B0102)
  CertERole* = HRESULT(0x800B0103)
  CertEPathlenconst* = HRESULT(0x800B0104)
  CertECritical* = HRESULT(0x800B0105)
  CertEPurpose* = HRESULT(0x800B0106)
  CertEIssuerchaining* = HRESULT(0x800B0107)
  CertEMalformed* = HRESULT(0x800B0108)
  CertEUntrustedroot* = HRESULT(0x800B0109)
  CertEChaining* = HRESULT(0x800B010A)

proc unicodeNull*(): Wchar
const
  LfFacesize* = 32
  LfFullfacesize* = 64
  ElfVendorSize* = 4
  SecurityStaticTracking* = 0
  SecurityDynamicTracking* = 1
  MaxDefaultchar* = 2
  MaxLeadbytes* = 12
  ExceptionMaximumParameters* = 15
  Cchdevicename* = 32
  Cchformname* = 32
  MenuTextLen* = 40
  MaxLana* = 254
  Ncbnamsz* = 16
  NetbiosNameLen* = 16
  OfsMaxpathname* = 128
  MaxTabStops* = 32
  AnysizeArray* = 1
  RASMaxCallbackNumber* = 128
  RASMaxDeviceName* = 128
  RASMaxDeviceType* = 16
  RASMaxEntryName* = 256
  RASMaxIpAddress* = 15
  RASMaxIpxAddress* = 21
  RASMaxPhoneNumber* = 128
  Unlen* = 256
  Pwlen* = 256
  Cnlen* = 15
  Dnlen* = 15
  # Unsigned types max
  Maxdword* = 0xFFFFFFFF
  Maxword* = 0x0000FFFF
  Maxbyte* = 0x000000FF
  # Signed types max/min
  Minchar* = 0x00000080
  Maxchar* = 0x0000007F
  Minshort* = 0x00008000
  Maxshort* = 0x00007FFF
  Minlong* = 0x80000000
  Maxlong* = 0x7FFFFFFF
  # _llseek
  FileBegin* = 0
  FileCurrent* = 1
  FileEnd* = 2
  # _lopen, LZOpenFile, OpenFile
  OfRead* = 0
  OfReadwrite* = 2
  OfWrite* = 1
  OfShareCompat* = 0
  OfShareDenyNone* = 64
  OfShareDenyRead* = 48
  OfShareDenyWrite* = 32
  OfShareExclusive* = 16
  OfCancel* = 2048
  OfCreate* = 4096
  OfDelete* = 512
  OfExist* = 16384
  OfParse* = 256
  OfPrompt* = 8192
  OfReopen* = 32768
  OfVerify* = 1024
  # ActivateKeyboardLayout, LoadKeyboardLayout
  HklNext* = 1
  HklPrev* = 0
  KlfReorder* = 8
  KlfUnloadprevious* = 4
  KlfActivate* = 1
  KlfNotellshell* = 128
  KlfReplacelang* = 16
  KlfSubstituteOk* = 2
  # AppendMenu
  MfBitmap* = 0x00000004
  MfDisabled* = 0x00000002
  MfEnabled* = 0
  MfGrayed* = 0x00000001
  MfHelp* = 0x00004000
  MfMenubarbreak* = 0x00000020
  MfMenubreak* = 0x00000040
  MfMouseselect* = 0x00008000
  MfOwnerdraw* = 0x00000100
  MfPopup* = 0x00000010
  MfSeparator* = 0x00000800
  MfString* = 0
  MfSysmenu* = 0x00002000
  MfUsecheckbitmaps* = 0x00000200
  # Ternary Raster Operations - BitBlt
  Blackness* = 0x00000042
  Notsrcerase* = 0x001100A6
  Notsrccopy* = 0x00330008
  Srcerase* = 0x00440328
  Dstinvert* = 0x00550009
  Patinvert* = 0x005A0049
  Srcinvert* = 0x00660046
  Srcand* = 0x008800C6
  Mergepaint* = 0x00BB0226
  Mergecopy* = 0x00C000CA
  Srccopy* = 0x00CC0020
  Srcpaint* = 0x00EE0086
  Patcopy* = 0x00F00021
  Patpaint* = 0x00FB0A09
  Whiteness* = 0x00FF0062
  # Binary Raster Operations
  R2Black* = 1
  R2Copypen* = 13
  R2Masknotpen* = 3
  R2Maskpen* = 9
  R2Maskpennot* = 5
  R2Mergenotpen* = 12
  R2Mergepen* = 15
  R2Mergepennot* = 14
  R2Nop* = 11
  R2Not* = 6
  R2Notcopypen* = 4
  R2Notmaskpen* = 8
  R2Notmergepen* = 2
  R2Notxorpen* = 10
  R2White* = 16
  R2Xorpen* = 7
  # BroadcastSystemMessage
  BsfFlushdisk* = 4
  BsfForceifhung* = 32
  BsfIgnorecurrenttask* = 2
  BsfNohang* = 8
  BsfPostmessage* = 16
  BsfQuery* = 1
  BsmAllcomponents* = 0
  BsmApplications* = 8
  BsmInstallabledrivers* = 4
  BsmNetdriver* = 2
  BsmVxds* = 1
  BroadcastQueryDeny* = 1112363332
                                     # CallNamedPipe
  NmpwaitNowait* = 1
  NmpwaitWaitForever* = -1
  NmpwaitUseDefaultWait* = 0
  # CascadeWindows, TileWindows
  MditileSkipdisabled* = 2
  MditileHorizontal* = 1
  MditileVertical* = 0
  # CBTProc
  HcbtActivate* = 5
  HcbtClickskipped* = 6
  HcbtCreatewnd* = 3
  HcbtDestroywnd* = 4
  HcbtKeyskipped* = 7
  HcbtMinmax* = 1
  HcbtMovesize* = 0
  HcbtQs* = 2
  HcbtSetfocus* = 9
  HcbtSyscommand* = 8

  CdsUpdateregistry* = 1
  CdsTest* = 2
  CdsFullscreen* = 4
  CdsGlobal* = 8
  CdsSetPrimary* = 0x00000010
  CdsReset* = 0x40000000
  CdsSetrect* = 0x20000000
  CdsNoreset* = 0x10000000
  DispChangeSuccessful* = 0
  DispChangeRestart* = 1
  DispChangeBadflags* = -4
  DispChangeFailed* = -1
  DispChangeBadmode* = -2
  DispChangeNotupdated* = -3
  # ChangeServiceConfig
  ServiceNoChange* = -1
  ServiceWin32OwnProcess* = 16
  ServiceWin32ShareProcess* = 32
  ServiceKernelDriver* = 1
  ServiceFileSystemDriver* = 2
  ServiceInteractiveProcess* = 256
  ServiceBootStart* = 0
  ServiceSystemStart* = 1
  ServiceAutoStart* = 2
  ServiceDemandStart* = 3
  ServiceDisabled* = 4
  ServiceStopped* = 1
  ServiceStartPending* = 2
  ServiceStopPending* = 3
  ServiceRunning* = 4
  ServiceContinuePending* = 5
  ServicePausePending* = 6
  ServicePaused* = 7
  ServiceAcceptStop* = 1
  ServiceAcceptPauseContinue* = 2
  ServiceAcceptShutdown* = 4
  # CheckDlgButton
  BstChecked* = 1
  BstIndeterminate* = 2
  BstUnchecked* = 0
  BstFocus* = 8
  BstPushed* = 4
  # CheckMenuItem, HiliteMenuItem
  MfBycommand* = 0
  MfByposition* = 0x00000400
  MfChecked* = 0x00000008
  MfUnchecked* = 0
  MfHilite* = 0x00000080
  MfUnhilite* = 0
  # ChildWindowFromPointEx
  CwpAll* = 0
  CwpSkipinvisible* = 1
  CwpSkipdisabled* = 2
  CwpSkiptransparent* = 4
  # ClearCommError
  CeBreak* = 16
  CeDns* = 2048
  CeFrame* = 8
  CeIoe* = 1024
  CeMode* = 32768
  CeOop* = 4096
  CeOverrun* = 2
  CePto* = 512
  CeRxover* = 1
  CeRxparity* = 4
  CeTxfull* = 256
                              # CombineRgn
  RgnAnd* = 1
  RgnCopy* = 5
  RgnDiff* = 4
  RgnOr* = 2
  RgnXor* = 3
  Nullregion* = 1
  Simpleregion* = 2
  Complexregion* = 3
  Error* = 0
  # CommonDlgExtendedError
  CderrDialogfailure* = 0x0000FFFF
  CderrFindresfailure* = 6
  CderrInitialization* = 2
  CderrLoadresfailure* = 7
  CderrLoadstrfailure* = 5
  CderrLockresfailure* = 8
  CderrMemallocfailure* = 9
  CderrMemlockfailure* = 10
  CderrNohinstance* = 4
  CderrNohook* = 11
  CderrNotemplate* = 3
  CderrRegistermsgfail* = 12
  CderrStructsize* = 1
  PderrCreateicfailure* = 0x00001000 + 10
  PderrDefaultdifferent* = 0x00001000 + 12
  PderrDndmmismatch* = 0x00001000 + 9
  PderrGetdevmodefail* = 0x00001000 + 5
  PderrInitfailure* = 0x00001000 + 6
  PderrLoaddrvfailure* = 0x00001000 + 4
  PderrNodefaultprn* = 0x00001000 + 8
  PderrNodevices* = 0x00001000 + 7
  PderrParsefailure* = 0x00001000 + 2
  PderrPrinternotfound* = 0x00001000 + 11
  PderrRetdeffailure* = 0x00001000 + 3
  PderrSetupfailure* = 0x00001000 + 1
  CferrMaxlessthanmin* = 0x00002000 + 2
  CferrNofonts* = 0x00002000 + 1
  FnerrBuffertoosmall* = 0x00003000 + 3
  FnerrInvalidfilename* = 0x00003000 + 2
  FnerrSubclassfailure* = 0x00003000 + 1
  FrerrBufferlengthzero* = 0x00004000 + 1
  # CompareString, LCMapString
  LocaleSystemDefault* = 0x00000800
  LocaleUserDefault* = 0x00000400
  NormIgnorecase* = 1
  NormIgnorekanatype* = 65536
  NormIgnorenonspace* = 2
  NormIgnoresymbols* = 4
  NormIgnorewidth* = 131072
  SortStringsort* = 4096
  LcmapByterev* = 2048
  LcmapFullwidth* = 8388608
  LcmapHalfwidth* = 4194304
  LcmapHiragana* = 1048576
  LcmapKatakana* = 2097152
  LcmapLowercase* = 256
  LcmapSortkey* = 1024
  LcmapUppercase* = 512
  # ContinueDebugEvent
  DbgContinue* = 0x00010002
  DbgControlBreak* = 0x40010008
  DbgControlC* = 0x40010005
  DbgExceptionNotHandled* = 0x80010001
  DbgTerminateThread* = 0x40010003
  DbgTerminateProcess* = 0x40010004
  # ControlService
  ServiceControlStop* = 1
  ServiceControlPause* = 2
  ServiceControlContinue* = 3
  ServiceControlInterrogate* = 4
  ServiceControlShutdown* = 5
  # CopyImage, LoadImage
  ImageBitmap* = 0
  ImageCursor* = 2
  ImageEnhmetafile* = 1
  ImageIcon* = 1
  LrMonochrome* = 1
  LrColor* = 2
  LrCopyreturnorg* = 4
  LrCopydeleteorg* = 8
  LrDefaultsize* = 64
  LrCreatedibsection* = 8192
  LrCopyfromresource* = 0x00004000
  LrShared* = 0x00008000
  # CreateDesktop
  DfAllowotheraccounthook* = 0x00000001
  DesktopCreatemenu* = 0x00000004
  DesktopCreatewindow* = 0x00000002
  DesktopEnumerate* = 0x00000040
  DesktopHookcontrol* = 0x00000008
  DesktopJournalplayback* = 0x00000020
  DesktopJournalrecord* = 0x00000010
  DesktopReadobjects* = 0x00000001
  DesktopSwitchdesktop* = 0x00000100
  DesktopWriteobjects* = 0x00000080
  WsfVisible* = 0x00000001
  # CreateDIBitmap
  CbmInit* = 0x00000004
  DibPalColors* = 1
  DibRgbColors* = 0
  # CreateFile, GetFileAttributes, SetFileAttributes
  GenericRead* = 0x80000000
  GenericWrite* = 0x40000000
  FileReadData* = 0x00000001 # file & pipe
  FileListDirectory* = 0x00000001 # directory
  FileWriteData* = 0x00000002 # file & pipe
  FileAddFile* = 0x00000002 # directory
  FileAppendData* = 0x00000004 # file
  FileAddSubdirectory* = 0x00000004 # directory
  FileCreatePipeInstance* = 0x00000004 # named pipe
  FileReadEa* = 0x00000008 # file & directory
  FileReadProperties* = FILE_READ_EA
  FileWriteEa* = 0x00000010 # file & directory
  FileWriteProperties* = FILE_WRITE_EA
  FileExecute* = 0x00000020 # file
  FileTraverse* = 0x00000020 # directory
  FileDeleteChild* = 0x00000040 # directory
  FileReadAttributes* = 0x00000080 # all
  FileWriteAttributes* = 0x00000100 # all
  FileShareDelete* = 4
  FileShareRead* = 1
  FileShareWrite* = 2
  ConsoleTextmodeBuffer* = 1
  CreateNew* = 1
  CreateAlways* = 2
  OpenExisting* = 3
  OpenAlways* = 4
  TruncateExisting* = 5
  FileAttributeArchive* = 32
  FileAttributeCompressed* = 2048
  FileAttributeNormal* = 128
  FileAttributeDirectory* = 16
  FileAttributeHidden* = 2
  FileAttributeReadonly* = 1
  FileAttributeSystem* = 4
  FileAttributeTemporary* = 256
  FileFlagWriteThrough* = 0x80000000
  FileFlagOverlapped* = 1073741824
  FileFlagNoBuffering* = 536870912
  FileFlagRandomAccess* = 268435456
  FileFlagSequentialScan* = 134217728
  FileFlagDeleteOnClose* = 67108864
  FileFlagBackupSemantics* = 33554432
  FileFlagPosixSemantics* = 16777216
  cSECURITYANONYMOUS* = 0
  cSECURITYIDENTIFICATION* = 65536
  cSECURITYIMPERSONATION* = 131072
  cSECURITYDELEGATION* = 196608
  cSECURITYCONTEXTTRACKING* = 262144
  cSECURITYEFFECTIVEONLY* = 524288
  cSECURITYSQOSPRESENT* = 1048576
  # CreateFileMapping, VirtualAlloc, VirtualFree, VirtualProtect
  SecCommit* = 134217728
  SecImage* = 16777216
  SecNocache* = 268435456
  SecReserve* = 67108864
  PageReadonly* = 2
  PageReadwrite* = 4
  PageWritecopy* = 8
  PageExecute* = 16
  PageExecuteRead* = 32
  PageExecuteReadwrite* = 64
  PageExecuteWritecopy* = 128
  PageGuard* = 256
  PageNoaccess* = 1
  PageNocache* = 512
  MemCommit* = 4096
  MemFree* = 65536
  MemReserve* = 8192
  MemImage* = 16777216
  MemMapped* = 262144
  MemPrivate* = 131072
  MemDecommit* = 16384
  MemRelease* = 32768
  MemTopDown* = 1048576
  ExceptionGuardPage* = 0x80000001
  SectionExtendSize* = 0x00000010
  SectionMapRead* = 0x00000004
  SectionMapWrite* = 0x00000002
  SectionQuery* = 0x00000001
  SectionAllAccess* = 0x000F001F
  # CreateFont
  FwDontcare* = 0
  FwThin* = 100
  FwExtralight* = 200
  FwLight* = 300
  FwNormal* = 400
  FwRegular* = FW_NORMAL
  FwMedium* = 500
  FwSemibold* = 600
  FwBold* = 700
  FwExtrabold* = 800
  FwHeavy* = 900
  AnsiCharset* = 0
  DefaultCharset* = 1
  SymbolCharset* = 2
  ShiftjisCharset* = 128
  HangeulCharset* = 129
  Gb2312Charset* = 134
  Chinesebig5Charset* = 136
  GreekCharset* = 161
  TurkishCharset* = 162
  HebrewCharset* = 177
  ArabicCharset* = 178
  BalticCharset* = 186
  RussianCharset* = 204
  ThaiCharset* = 222
  EasteuropeCharset* = 238
  OemCharset* = 255
  OutDefaultPrecis* = 0
  OutStringPrecis* = 1
  OutCharacterPrecis* = 2
  OutStrokePrecis* = 3
  OutTtPrecis* = 4
  OutDevicePrecis* = 5
  OutRasterPrecis* = 6
  OutTtOnlyPrecis* = 7
  OutOutlinePrecis* = 8
  ClipDefaultPrecis* = 0
  ClipCharacterPrecis* = 1
  ClipStrokePrecis* = 2
  ClipMask* = 15
  ClipLhAngles* = 16
  ClipTtAlways* = 32
  ClipEmbedded* = 128
  DefaultQuality* = 0
  DraftQuality* = 1
  ProofQuality* = 2
  NonantialiasedQuality* = 3
  AntialiasedQuality* = 4
  DefaultPitch* = 0
  FixedPitch* = 1
  VariablePitch* = 2
  MonoFont* = 8
  FfDecorative* = 80
  FfDontcare* = 0
  FfModern* = 48
  FfRoman* = 16
  FfScript* = 64
  FfSwiss* = 32
  # CreateHatchBrush
  HsBdiagonal* = 3
  HsCross* = 4
  HsDiagcross* = 5
  HsFdiagonal* = 2
  HsHorizontal* = 0
  HsVertical* = 1
  # CreateIconFromResourceEx
  LrDefaultcolor* = 0
  LrLoadrealsize* = 128
                              # CreateMailslot, GetMailslotInfo
  MailslotWaitForever* = 0xFFFFFFFF
  MailslotNoMessage* = 0xFFFFFFFF
  # CreateMappedBitmap
  CmbMasked* = 2
  # CreateNamedPipe
  PipeAccessDuplex* = 3
  PipeAccessInbound* = 1
  PipeAccessOutbound* = 2
  WriteDac* = 0x00040000
  WriteOwner* = 0x00080000
  AccessSystemSecurity* = 0x01000000
  PipeTypeByte* = 0
  PipeTypeMessage* = 4
  PipeReadmodeByte* = 0
  PipeReadmodeMessage* = 2
  PipeWait* = 0
  PipeNowait* = 1
  # CreatePen, ExtCreatePen
  PsGeometric* = 65536
  PsCosmetic* = 0
  PsAlternate* = 8
  PsSolid* = 0
  PsDash* = 1
  PsDot* = 2
  PsDashdot* = 3
  PsDashdotdot* = 4
  PsNull* = 5
  PsUserstyle* = 7
  PsInsideframe* = 6
  PsEndcapRound* = 0
  PsEndcapSquare* = 256
  PsEndcapFlat* = 512
  PsJoinBevel* = 4096
  PsJoinMiter* = 8192
  PsJoinRound* = 0
  PsStyleMask* = 15
  PsEndcapMask* = 3840
  PsTypeMask* = 983040
  # CreatePolygonRgn
  Alternate* = 1
  Winding* = 2
  # CreateProcess
  CreateDefaultErrorMode* = 67108864
  CreateNewConsole* = 16
  CreateNewProcessGroup* = 512
  CreateSeparateWowVdm* = 2048
  CreateSuspended* = 4
  CreateUnicodeEnvironment* = 1024
  DebugProcess* = 1
  DebugOnlyThisProcess* = 2
  DetachedProcess* = 8
  HighPriorityClass* = 128
  IdlePriorityClass* = 64
  NormalPriorityClass* = 32
  RealtimePriorityClass* = 256
  # CreateService
  ServiceAllAccess* = 0x000F01FF
  ServiceChangeConfig* = 2
  ServiceEnumerateDependents* = 8
  ServiceInterrogate* = 128
  ServicePauseContinue* = 64
  ServiceQueryConfig* = 1
  ServiceQueryStatus* = 4
  ServiceStart* = 16
  ServiceStop* = 32
  ServiceUserDefinedControl* = 256
  ServiceDelete* = 0x00010000
  ServiceReadControl* = 0x00020000
  ServiceGenericExecute* = 0x20000000
  ServiceErrorIgnore* = 0
  ServiceErrorNormal* = 1
  ServiceErrorSevere* = 2
  ServiceErrorCritical* = 3
  # CreateTapePartition, WriteTapemark
  TapeFixedPartitions* = 0
  TapeInitiatorPartitions* = 0x00000002
  TapeSelectPartitions* = 0x00000001
  TapeFilemarks* = 0x00000001
  TapeLongFilemarks* = 0x00000003
  TapeSetmarks* = 0
  TapeShortFilemarks* = 0x00000002
  # CreateWindow
  CwUsedefault* = int32(0x80000000)
  WsBorder* = 0x00800000
  WsCaption* = 0x00C00000
  WsChild* = 0x40000000
  WsChildwindow* = 0x40000000
  WsClipchildren* = 0x02000000
  WsClipsiblings* = 0x04000000
  WsDisabled* = 0x08000000
  WsDlgframe* = 0x00400000
  WsGroup* = 0x00020000
  WsHscroll* = 0x00100000
  WsIconic* = 0x20000000
  WsMaximize* = 0x01000000
  WsMaximizebox* = 0x00010000
  WsMinimize* = 0x20000000
  WsMinimizebox* = 0x00020000
  WsOverlapped* = 0
  WsOverlappedwindow* = 0x00CF0000
  WsPopup* = LONG(0x80000000)
  WsPopupwindow* = LONG(0x80880000)
  WsSizebox* = 0x00040000
  WsSysmenu* = 0x00080000
  WsTabstop* = 0x00010000
  WsThickframe* = 0x00040000

  WsTiled* = 0
  WsTiledwindow* = 0x00CF0000
  WsVisible* = 0x10000000
  WsVscroll* = 0x00200000
  MdisAllchildstyles* = 0x00000001
  Bs3state* = 0x00000005
  BsAuto3state* = 0x00000006
  BsAutocheckbox* = 0x00000003
  BsAutoradiobutton* = 0x00000009
  BsBitmap* = 0x00000080
  BsBottom* = 0x00000800
  BsCenter* = 0x00000300
  BsCheckbox* = 0x00000002
  BsDefpushbutton* = 0x00000001
  BsGroupbox* = 0x00000007
  BsIcon* = 0x00000040
  BsLeft* = 0x00000100
  BsLefttext* = 0x00000020
  BsMultiline* = 0x00002000
  BsNotify* = 0x00004000
  BsOwnerdraw* = 0x0000000B
  BsPushbutton* = 0
  BsPushlike* = 0x00001000
  BsRadiobutton* = 0x00000004
  BsRight* = 0x00000200
  BsRightbutton* = 0x00000020
  BsText* = 0
  BsTop* = 0x00000400
  BsUserbutton* = 0x00000008
  BsVcenter* = 0x00000C00
  BsFlat* = 0x00008000
  CbsAutohscroll* = 0x00000040
  CbsDisablenoscroll* = 0x00000800
  CbsDropdown* = 0x00000002
  CbsDropdownlist* = 0x00000003
  CbsHasstrings* = 0x00000200
  CbsLowercase* = 0x00004000
  CbsNointegralheight* = 0x00000400
  CbsOemconvert* = 0x00000080
  CbsOwnerdrawfixed* = 0x00000010
  CbsOwnerdrawvariable* = 0x00000020
  CbsSimple* = 0x00000001
  CbsSort* = 0x00000100
  CbsUppercase* = 0x00002000
  EsAutohscroll* = 0x00000080
  EsAutovscroll* = 0x00000040
  EsCenter* = 0x00000001
  EsLeft* = 0
  EsLowercase* = 0x00000010
  EsMultiline* = 0x00000004
  EsNohidesel* = 0x00000100
  EsNumber* = 0x00002000
  EsOemconvert* = 0x00000400
  EsPassword* = 0x00000020
  EsReadonly* = 0x00000800
  EsRight* = 0x00000002
  EsUppercase* = 0x00000008
  EsWantreturn* = 0x00001000
  LbsDisablenoscroll* = 0x00001000
  LbsExtendedsel* = 0x00000800
  LbsHasstrings* = 0x00000040
  LbsMulticolumn* = 0x00000200
  LbsMultiplesel* = 0x00000008
  LbsNodata* = 0x00002000
  LbsNointegralheight* = 0x00000100
  LbsNoredraw* = 0x00000004
  LbsNosel* = 0x00004000
  LbsNotify* = 0x00000001
  LbsOwnerdrawfixed* = 0x00000010
  LbsOwnerdrawvariable* = 0x00000020
  LbsSort* = 0x00000002
  LbsStandard* = 0x00A00003
  LbsUsetabstops* = 0x00000080
  LbsWantkeyboardinput* = 0x00000400
  SbsBottomalign* = 0x00000004
  SbsHorz* = 0
  SbsLeftalign* = 0x00000002
  SbsRightalign* = 0x00000004
  SbsSizebox* = 0x00000008
  SbsSizeboxbottomrightalign* = 0x00000004
  SbsSizeboxtopleftalign* = 0x00000002
  SbsSizegrip* = 0x00000010
  SbsTopalign* = 0x00000002
  SbsVert* = 0x00000001
  SsBitmap* = 0x0000000E
  SsBlackframe* = 0x00000007
  SsBlackrect* = 0x00000004
  SsCenter* = 0x00000001
  SsCenterimage* = 0x00000200
  SsEnhmetafile* = 0x0000000F
  SsEtchedframe* = 0x00000012
  SsEtchedhorz* = 0x00000010
  SsEtchedvert* = 0x00000011
  SsGrayframe* = 0x00000008
  SsGrayrect* = 0x00000005
  SsIcon* = 0x00000003
  SsLeft* = 0
  SsLeftnowordwrap* = 0x0000000C
  SsNoprefix* = 0x00000080
  SsNotify* = 0x00000100
  SsOwnerdraw* = 0x0000000D
  SsRealsizeimage* = 0x00000800
  SsRight* = 0x00000002
  SsRightjust* = 0x00000400
  SsSimple* = 0x0000000B
  SsSunken* = 0x00001000
  SsUseritem* = 0x0000000A
  SsWhiteframe* = 0x00000009
  SsWhiterect* = 0x00000006
  Ds3dlook* = 0x00000004
  DsAbsalign* = 0x00000001
  DsCenter* = 0x00000800
  DsCentermouse* = 0x00001000
  DsContexthelp* = 0x00002000
  DsControl* = 0x00000400
  DsFixedsys* = 0x00000008
  DsLocaledit* = 0x00000020
  DsModalframe* = 0x00000080
  DsNofailcreate* = 0x00000010
  DsNoidlemsg* = 0x00000100
  DsSetfont* = 0x00000040
  DsSetforeground* = 0x00000200
  DsSysmodal* = 0x00000002
  # CreateWindowEx
  WsExAcceptfiles* = 0x00000010
  WsExAppwindow* = 0x00040000
  WsExClientedge* = 0x00000200
  WsExContexthelp* = 0x00000400
  WsExControlparent* = 0x00010000
  WsExDlgmodalframe* = 0x00000001
  WsExLeft* = 0
  WsExLeftscrollbar* = 0x00004000
  WsExLtrreading* = 0
  WsExMdichild* = 0x00000040
  WsExNoparentnotify* = 0x00000004
  WsExOverlappedwindow* = 0x00000300
  WsExPalettewindow* = 0x00000188
  WsExRight* = 0x00001000
  WsExRightscrollbar* = 0
  WsExRtlreading* = 0x00002000
  WsExStaticedge* = 0x00020000
  WsExToolwindow* = 0x00000080
  WsExTopmost* = 0x00000008
  WsExTransparent* = 0x00000020
  WsExWindowedge* = 0x00000100
  # CreateWindowStation
  WinstaAccessclipboard* = 0x00000004
  WinstaAccessglobalatoms* = 0x00000020
  WinstaCreatedesktop* = 0x00000008
  WinstaEnumdesktops* = 0x00000001
  WinstaEnumerate* = 0x00000100
  WinstaExitwindows* = 0x00000040
  WinstaReadattributes* = 0x00000002
  WinstaReadscreen* = 0x00000200
  WinstaWriteattributes* = 0x00000010
  # DdeCallback
  # DdeClientTransaction
  # DdeEnableCallback
  # DdeGetLastError
  # DdeInitialize
  # DdeNameService
  # DebugProc
  WhCallwndproc* = 4
  WhCallwndprocret* = 12
  WhCbt* = 5
  WhDebug* = 9
  WhGetmessage* = 3
  WhJournalplayback* = 1
  WhJournalrecord* = 0
  WhKeyboard* = 2
  WhMouse* = 7
  WhMsgfilter* = -1
  WhShell* = 10
  WhSysmsgfilter* = 6
  WhForegroundidle* = 11
  # DefineDosDevice
  DddRawTargetPath* = 1
  DddRemoveDefinition* = 2
  DddExactMatchOnRemove* = 4
  # DeviceCapbilities
  DcttBitmap* = 0x00000001
  DcttDownload* = 0x00000002
  DcttSubdev* = 0x00000004
                              # DlgDirList
  DdlArchive* = 32
  DdlDirectory* = 16
  DdlDrives* = 16384
  DdlExclusive* = 32768
  DdlHidden* = 2
  DdlReadonly* = 1
  DdlReadwrite* = 0
  DdlSystem* = 4
  DdlPostmsgs* = 8192
  # DllEntryPoint
  DllProcessAttach* = 1
  DllThreadAttach* = 2
  DllProcessDetach* = 0
  DllThreadDetach* = 3
  # DrawAnimatedRects
  IdaniOpen* = 1
  IdaniClose* = 2
  # DrawCaption
  DcActive* = 1
  DcSmallcap* = 2
  # DrawEdge
  BdrRaisedinner* = 4
  BdrSunkeninner* = 8
  BdrRaisedouter* = 1
  BdrSunkenouter* = 2
  BdrOuter* = BDR_RAISEDOUTER or BDR_SUNKENOUTER
  BdrInner* = BDR_RAISEDINNER or BDR_SUNKENINNER
  BdrRaised* = BDR_RAISEDOUTER or BDR_RAISEDINNER
  BdrSunken* = BDR_SUNKENOUTER or BDR_SUNKENINNER
  EdgeBump* = 9
  EdgeEtched* = 6
  EdgeRaised* = 5
  EdgeSunken* = 10
  BfAdjust* = 8192
  BfBottom* = 8
  BfBottomleft* = 9
  BfBottomright* = 12
  BfDiagonal* = 16
  BfDiagonalEndbottomleft* = 25
  BfDiagonalEndbottomright* = 28
  BfDiagonalEndtopleft* = 19
  BfDiagonalEndtopright* = 22
  BfFlat* = 16384
  BfLeft* = 1
  BfMiddle* = 2048
  BfMono* = 32768
  BfRect* = 15
  BfRight* = 4
  BfSoft* = 4096
  BfTop* = 2
  BfTopleft* = 3
  BfTopright* = 6
  # DrawFrameControl
  DfcButton* = 4
  DfcCaption* = 1
  DfcMenu* = 2
  DfcScroll* = 3
  DfcsButton3state* = 8
  DfcsButtoncheck* = 0
  DfcsButtonpush* = 16
  DfcsButtonradio* = 4
  DfcsButtonradioimage* = 1
  DfcsButtonradiomask* = 2
  DfcsCaptionclose* = 0
  DfcsCaptionhelp* = 4
  DfcsCaptionmax* = 2
  DfcsCaptionmin* = 1
  DfcsCaptionrestore* = 3
  DfcsMenuarrow* = 0
  DfcsMenubullet* = 2
  DfcsMenucheck* = 1
  DfcsScrollcombobox* = 5
  DfcsScrolldown* = 1
  DfcsScrollleft* = 2
  DfcsScrollright* = 3
  DfcsScrollsizegrip* = 8
  DfcsScrollup* = 0
  DfcsAdjustrect* = 8192
  DfcsChecked* = 1024
  DfcsFlat* = 16384
  DfcsInactive* = 256
  DfcsMono* = 32768
  DfcsPushed* = 512
  # DrawIconEx
  DiCompat* = 4
  DiDefaultsize* = 8
  DiImage* = 2
  DiMask* = 1
  DiNormal* = 3
  # DrawState
  DstBitmap* = 4
  DstComplex* = 0
  DstIcon* = 3
  DstPrefixtext* = 2
  DstText* = 1
  DssNormal* = 0
  DssUnion* = 16
  DssDisabled* = 32
  DssMono* = 128
  # DrawStatusText
  SbtNoborders* = 256
  SbtOwnerdraw* = 4096
  SbtPopout* = 512
  SbtRtlreading* = 1024
  # DrawText, DrawTextEx
  DtBottom* = 8
  DtCalcrect* = 1024
  DtCenter* = 1
  DtEditcontrol* = 8192
  DtEndEllipsis* = 32768
  DtPathEllipsis* = 16384
  DtExpandtabs* = 64
  DtExternalleading* = 512
  DtLeft* = 0
  DtModifystring* = 65536
  DtNoclip* = 256
  DtNoprefix* = 2048
  DtRight* = 2
  DtRtlreading* = 131072
  DtSingleline* = 32
  DtTabstop* = 128
  DtTop* = 0
  DtVcenter* = 4
  DtWordbreak* = 16
  DtInternal* = 4096
  DtWordEllipsis* = 0x00040000
  DtHideprefix* = 0x00100000
  DtPrefixonly* = 0x00200000
  # DuplicateHandle, MapViewOfFile
  DuplicateCloseSource* = 1
  DuplicateSameAccess* = 2
  FileMapAllAccess* = 0x000F001F
  FileMapRead* = 4
  FileMapWrite* = 2
  FileMapCopy* = 1
  MutexAllAccess* = 0x001F0001
  MutexModifyState* = 1
  Synchronize* = 0x00100000
  SemaphoreAllAccess* = 0x001F0003
  SemaphoreModifyState* = 2
  EventAllAccess* = 0x001F0003
  EventModifyState* = 2
  KeyAllAccess* = 0x000F003F
  KeyCreateLink* = 32
  KeyCreateSubKey* = 4
  KeyEnumerateSubKeys* = 8
  KeyExecute* = 0x00020019
  KeyNotify* = 16
  KeyQueryValue* = 1
  KeyRead* = 0x00020019
  KeySetValue* = 2
  KeyWrite* = 0x00020006
  ProcessAllAccess* = 0x001F0FFF
  ProcessCreateProcess* = 128
  ProcessCreateThread* = 2
  ProcessDupHandle* = 64
  ProcessQueryInformation* = 1024
  ProcessSetInformation* = 512
  ProcessTerminate* = 1
  ProcessVmOperation* = 8
  ProcessVmRead* = 16
  ProcessVmWrite* = 32
  ThreadAllAccess* = 0x001F03FF
  ThreadDirectImpersonation* = 512
  ThreadGetContext* = 8
  ThreadImpersonate* = 256
  ThreadQueryInformation* = 64
  ThreadSetContext* = 16
  ThreadSetInformation* = 32
  ThreadSetThreadToken* = 128
  ThreadSuspendResume* = 2
  ThreadTerminate* = 1
  # EditWordBreakProc
  WbIsdelimiter* = 2
  WbLeft* = 0
  WbRight* = 1
  # EnableScrollBar
  SbBoth* = 3
  SbCtl* = 2
  SbHorz* = 0
  SbVert* = 1
  EsbDisableBoth* = 3
  EsbDisableDown* = 2
  EsbDisableLeft* = 1
  EsbDisableLtup* = 1
  EsbDisableRight* = 2
  EsbDisableRtdn* = 2
  EsbDisableUp* = 1
  EsbEnableBoth* = 0
  # Scroll Bar notifications
  SbLineup* = 0
  SbLinedown* = 1
  SbLineleft* = 0
  SbLineright* = 1
  SbPageup* = 2
  SbPagedown* = 3
  SbPageleft* = 2
  SbPageright* = 3
  SbThumbposition* = 4
  SbThumbtrack* = 5
  SbEndscroll* = 8
  SbLeft* = 6
  SbRight* = 7
  SbBottom* = 7
  SbTop* = 6
  # EnumCalendarInfo
  EnumAllCalendars* = -1
  # EnumDateFormats
  # GetDateFormat
  DateShortdate* = 1
  DateLongdate* = 2
  DateUseAltCalendar* = 4
  # EnumDependentServices
  ServiceActive* = 1
  ServiceInactive* = 2
  # EnumFontFamExProc
  DeviceFonttype* = 2
  RasterFonttype* = 1
  TruetypeFonttype* = 4
  # EnumObjects, GetCurrentObject, GetObjectType
  ObjBrush* = 2
  ObjPen* = 1
  ObjPal* = 5
  ObjFont* = 6
  ObjBitmap* = 7
  ObjExtpen* = 11
  ObjRegion* = 8
  ObjDc* = 3
  ObjMemdc* = 10
  ObjMetafile* = 9
  ObjMetadc* = 4
  ObjEnhmetafile* = 13
  ObjEnhmetadc* = 12

                              #
                              # Predefined Resource Types
                              #
const
  RtCursor* = cast[MAKEINTRESOURCE](1)
  RtBitmap* = cast[MAKEINTRESOURCE](2)
  RtIcon* = cast[MAKEINTRESOURCE](3)
  RtMenu* = cast[MAKEINTRESOURCE](4)
  RtDialog* = cast[MAKEINTRESOURCE](5)
  RtString* = cast[MAKEINTRESOURCE](6)
  RtFontdir* = cast[MAKEINTRESOURCE](7)
  RtFont* = cast[MAKEINTRESOURCE](8)
  RtAccelerator* = cast[MAKEINTRESOURCE](9)
  RtRcdata* = cast[MAKEINTRESOURCE](10)
  RtMessagetable* = cast[MAKEINTRESOURCE](11)
  Difference* = 11
  RtGroupCursor* = cast[MAKEINTRESOURCE](12)
  RtGroupIcon* = cast[MAKEINTRESOURCE](14)
  RtVersion* = cast[MAKEINTRESOURCE](16)
  RtDlginclude* = cast[MAKEINTRESOURCE](17)
  RtPlugplay* = cast[MAKEINTRESOURCE](19)
  RtVxd* = cast[MAKEINTRESOURCE](20)
  RtAnicursor* = cast[MAKEINTRESOURCE](21)
  RtAniicon* = cast[MAKEINTRESOURCE](22)
  RtHtml* = cast[MAKEINTRESOURCE](23)
  RtManifest* = cast[MAKEINTRESOURCE](24)

const
  # EnumServicesStatus
  ServiceWin32* = 48
  ServiceDriver* = 11
  # EnumSystemCodePages
  CpInstalled* = 1
  CpSupported* = 2
  # EnumSystemLocales
  LcidInstalled* = 1
  LcidSupported* = 2
  # EraseTape
  TapeEraseLong* = 0x00000001
  TapeEraseShort* = 0
  # Escape
  SpError* = -1
  SpOutofdisk* = -4
  SpOutofmemory* = -5
  SpUserabort* = -3
  Physicalwidth* = 110
  Physicalheight* = 111
  Physicaloffsetx* = 112
  Physicaloffsety* = 113
  Scalingfactorx* = 114
  Scalingfactory* = 115
  Queryescsupport* = 8
  #ABORTDOC = 2; conflicts with AbortDoc function
  cABORTDOC* = 2
  #ENDDOC = 11; conflicts with AbortDoc function
  cENDDOC* = 11
  Getphyspagesize* = 12
  Getprintingoffset* = 13
  Getscalingfactor* = 14
  Newframe* = 1
  Nextband* = 3
  Passthrough* = 19
  #SETABORTPROC = 9; conflicts with AbortDoc function
  cSETABORTPROC* = 9
  #STARTDOC = 10; conflicts with AbortDoc function
  cSTARTDOC* = 10
  # EscapeCommFunction
  Clrdtr* = 6
  Clrrts* = 4
  Setdtr* = 5
  Setrts* = 3
  Setxoff* = 1
  Setxon* = 2
  Setbreak* = 8
  Clrbreak* = 9
  # ExitWindowsEx
  EwxForce* = 4
  EwxLogoff* = 0
  EwxPoweroff* = 8
  EwxReboot* = 2
  EwxShutdown* = 1
  # ExtFloodFill
  Floodfillborder* = 0
  Floodfillsurface* = 1
  # ExtTextOut
  EtoClipped* = 4
  EtoGlyphIndex* = 16
  EtoOpaque* = 2
  EtoRtlreading* = 128
  # FillConsoleOutputAttribute
  ForegroundBlue* = 1
  ForegroundGreen* = 2
  ForegroundRed* = 4
  ForegroundIntensity* = 8
  BackgroundBlue* = 16
  BackgroundGreen* = 32
  BackgroundRed* = 64
  BackgroundIntensity* = 128
  # FindFirstChangeNotification
  FileNotifyChangeFileName* = 1
  FileNotifyChangeDirName* = 2
  FileNotifyChangeAttributes* = 4
  FileNotifyChangeSize* = 8
  FileNotifyChangeLastWrite* = 16
  FileNotifyChangeSecurity* = 256
  # FindFirstPrinterChangeNotification
  # FindNextPrinterNotification
  # FMExtensionProc
  # FoldString
  MapFoldczone* = 16
  MapFolddigits* = 128
  MapPrecomposed* = 32
  MapComposite* = 64
  # ForegroundIdleProc
  HcAction* = 0
  # FormatMessage
  FormatMessageAllocateBuffer* = 256
  FormatMessageIgnoreInserts* = 512
  FormatMessageFromString* = 1024
  FormatMessageFromHmodule* = 2048
  FormatMessageFromSystem* = 4096
  FormatMessageArgumentArray* = 8192
  FormatMessageMaxWidthMask* = 255
  # GdiComment
  GdicommentWindowsMetafile* = -2147483647
  GdicommentBegingroup* = 2
  GdicommentEndgroup* = 3
  GdicommentMultiformats* = 1073741828
  GdicommentIdentifier* = 1128875079
  # GenerateConsoleCtrlEvent, HandlerRoutine
  CtrlCEvent* = 0
  CtrlBreakEvent* = 1
  CtrlCloseEvent* = 2
  CtrlLogoffEvent* = 5
  CtrlShutdownEvent* = 6
  # GetAddressByName
  # GetArcDirection
  AdCounterclockwise* = 1
  AdClockwise* = 2
  # GetBinaryTypes
  Scs32bitBinary* = 0
  ScsDosBinary* = 1
  ScsOs216Binary* = 5
  ScsPifBinary* = 3
  ScsPosixBinary* = 4
  ScsWowBinary* = 2
  # GetBoundsRect, SetBoundsRect
  DcbDisable* = 8
  DcbEnable* = 4
  DcbReset* = 1
  DcbSet* = 3
  DcbAccumulate* = 2
  # GetCharacterPlacement, GetFontLanguageInfo
  GcpDbcs* = 1
  GcpError* = 0x00008000
  GcpClassin* = 0x00080000
  GcpDiacritic* = 256
  GcpDisplayzwg* = 0x00400000
  GcpGlyphshape* = 16
  GcpJustify* = 0x00010000
  GcpJustifyin* = 0x00200000
  GcpKashida* = 1024
  GcpLigate* = 32
  GcpMaxextent* = 0x00100000
  GcpNeutraloverride* = 0x02000000
  GcpNumericoverride* = 0x01000000
  GcpNumericslatin* = 0x04000000
  GcpNumericslocal* = 0x08000000
  GcpReorder* = 2
  GcpSymswapoff* = 0x00800000
  GcpUsekerning* = 8
  FliGlyphs* = 0x00040000
  FliMask* = 0x0000103B
  # GetClassLong, GetClassWord
  GcwAtom* = -32
  GclCbclsextra* = -20
  GclCbwndextra* = -18
  GclHbrbackground* = -10
  GclHcursor* = -12
  GclHicon* = -14
  GclHiconsm* = -34
  GclHmodule* = -16
  GclMenuname* = -8
  GclStyle* = -26
  GclWndproc* = -24
  # GetClipboardFormat, SetClipboardData
  CfBitmap* = 2
  CfDib* = 8
  CfPalette* = 9
  CfEnhmetafile* = 14
  CfMetafilepict* = 3
  CfOemtext* = 7
  CfText* = 1
  CfUnicodetext* = 13
  CfDif* = 5
  CfDspbitmap* = 130
  CfDspenhmetafile* = 142
  CfDspmetafilepict* = 131
  CfDsptext* = 129
  CfGdiobjfirst* = 768
  CfGdiobjlast* = 1023
  CfHdrop* = 15
  CfLocale* = 16
  CfOwnerdisplay* = 128
  CfPendata* = 10
  CfPrivatefirst* = 512
  CfPrivatelast* = 767
  CfRiff* = 11
  CfSylk* = 4
  CfWave* = 12
  CfTiff* = 6
  # GetCommMask
  EvBreak* = 64
  EvCts* = 8
  EvDsr* = 16
  EvErr* = 128
  EvEvent1* = 2048
  EvEvent2* = 4096
  EvPerr* = 512
  EvRing* = 256
  EvRlsd* = 32
  EvRx80full* = 1024
  EvRxchar* = 1
  EvRxflag* = 2
  EvTxempty* = 4
  # GetCommModemStatus
  MsCtsOn* = 0x00000010
  MsDsrOn* = 0x00000020
  MsRingOn* = 0x00000040
  MsRlsdOn* = 0x00000080
  # GetComputerName
  MaxComputernameLength* = 15
  # GetConsoleMode
  EnableLineInput* = 2
  EnableEchoInput* = 4
  EnableProcessedInput* = 1
  EnableWindowInput* = 8
  EnableMouseInput* = 16
  EnableProcessedOutput* = 1
  EnableWrapAtEolOutput* = 2
  # GetCPInfo
  CpAcp* = 0
  CpMaccp* = 2
  CpOemcp* = 1
  # GetDCEx
  DcxWindow* = 0x00000001
  DcxCache* = 0x00000002
  DcxParentclip* = 0x00000020
  DcxClipsiblings* = 0x00000010
  DcxClipchildren* = 0x00000008
  DcxNoresetattrs* = 0x00000004
  DcxLockwindowupdate* = 0x00000400
  DcxExcludergn* = 0x00000040
  DcxIntersectrgn* = 0x00000080
  DcxValidate* = 0x00200000
  # GetDeviceCaps
  Driverversion* = 0
  Technology* = 2
  DtPlotter* = 0
  DtRasdisplay* = 1
  DtRasprinter* = 2
  DtRascamera* = 3
  DtCharstream* = 4
  DtMetafile* = 5
  DtDispfile* = 6
  Horzsize* = 4
  Vertsize* = 6
  Horzres* = 8
  Vertres* = 10
  Logpixelsx* = 88
  Logpixelsy* = 90
  Bitspixel* = 12
  Planes* = 14
  Numbrushes* = 16
  Numpens* = 18
  Numfonts* = 22
  Numcolors* = 24
  Aspectx* = 40
  Aspecty* = 42
  Aspectxy* = 44
  Pdevicesize* = 26
  Clipcaps* = 36
  Sizepalette* = 104
  Numreserved* = 106
  Colorres* = 108
  Vrefresh* = 116
  Desktophorzres* = 118
  Desktopvertres* = 117
  Bltalignment* = 119
  Rastercaps* = 38
  RcBanding* = 2
  RcBitblt* = 1
  RcBitmap64* = 8
  RcDiBitmap* = 128
  RcDibtodev* = 512
  RcFloodfill* = 4096
  RcGdi20Output* = 16
  RcPalette* = 256
  RcScaling* = 4
  RcStretchblt* = 2048
  RcStretchdib* = 8192
  Curvecaps* = 28
  CcNone* = 0
  CcCircles* = 1
  CcPie* = 2
  CcChord* = 4
  CcEllipses* = 8
  CcWide* = 16
  CcStyled* = 32
  CcWidestyled* = 64
  CcInteriors* = 128
  CcRoundrect* = 256
  Linecaps* = 30
  LcNone* = 0
  LcPolyline* = 2
  LcMarker* = 4
  LcPolymarker* = 8
  LcWide* = 16
  LcStyled* = 32
  LcWidestyled* = 64
  LcInteriors* = 128
  Polygonalcaps* = 32
  PcNone* = 0
  PcPolygon* = 1
  PcRectangle* = 2
  PcWindpolygon* = 4
  PcScanline* = 8
  PcWide* = 16
  PcStyled* = 32
  PcWidestyled* = 64
  PcInteriors* = 128
  Textcaps* = 34
  TcOpCharacter* = 1
  TcOpStroke* = 2
  TcCpStroke* = 4
  TcCr90* = 8
  TcCrAny* = 16
  TcSfXYindep* = 32
  TcSaDouble* = 64
  TcSaInteger* = 128
  TcSaContin* = 256
  TcEaDouble* = 512
  TcIaAble* = 1024
  TcUaAble* = 2048
  TcSoAble* = 4096
  TcRaAble* = 8192
  TcVaAble* = 16384
  TcReserved* = 32768
  TcScrollblt* = 65536
  PcPaths* = 512
  # GetDriveType
  DriveRemovable* = 2
  DriveFixed* = 3
  DriveRemote* = 4
  DriveCdrom* = 5
  DriveRamdisk* = 6
  DriveUnknown* = 0
  DriveNoRootDir* = 1
  # GetExceptionCode
  ExceptionAccessViolation* = 0xC0000005
  ExceptionBreakpoint* = 0x80000003
  ExceptionDatatypeMisalignment* = 0x80000002
  ExceptionSingleStep* = 0x80000004
  ExceptionArrayBoundsExceeded* = 0xC000008C
  ExceptionFltDenormalOperand* = 0xC000008D
  ExceptionFltDivideByZero* = 0xC000008E
  ExceptionFltInexactResult* = 0xC000008F
  ExceptionFltInvalidOperation* = 0xC0000090
  ExceptionFltOverflow* = 0xC0000091
  ExceptionFltStackCheck* = 0xC0000092
  ExceptionFltUnderflow* = 0xC0000093
  ExceptionIntDivideByZero* = 0xC0000094
  ExceptionIntOverflow* = 0xC0000095
  ExceptionInvalidHandle* = 0xC0000008
  ExceptionPrivInstruction* = 0xC0000096
  ExceptionNoncontinuableException* = 0xC0000025
  ExceptionNoncontinuable* = 0x00000001
  ExceptionStackOverflow* = 0xC00000FD
  ExceptionInvalidDisposition* = 0xC0000026
  ExceptionInPageError* = 0xC0000006
  ExceptionIllegalInstruction* = 0xC000001D
  ExceptionPossibleDeadlock* = 0xC0000194
  # GetFileType
  FileTypeUnknown* = 0
  FileTypeDisk* = 1
  FileTypeChar* = 2
  FileTypePipe* = 3
  # GetGlyphOutline
  GgoBitmap* = 1
  GgoNative* = 2
  GgoMetrics* = 0
  GgoGray2Bitmap* = 4
  GgoGray4Bitmap* = 5
  GgoGray8Bitmap* = 6
  GdiError* = 0xFFFFFFFF
  # GetGraphicsMode
  GmCompatible* = 1
  GmAdvanced* = 2
  # GetHandleInformation
  HandleFlagInherit* = 1
  HandleFlagProtectFromClose* = 2
  # GetIconInfo
  IdcArrow* =       cast[MAKEINTRESOURCE](32512)
  IdcIbeam* =       cast[MAKEINTRESOURCE](32513)
  IdcWait* =        cast[MAKEINTRESOURCE](32514)
  IdcCross* =       cast[MAKEINTRESOURCE](32515)
  IdcUparrow* =     cast[MAKEINTRESOURCE](32516)
  IdcSize* =        cast[MAKEINTRESOURCE](32640)  # OBSOLETE: use IDC_SIZEALL
  IdcIcon* =        cast[MAKEINTRESOURCE](32641)  # OBSOLETE: use IDC_ARROW
  IdcSizenwse* =    cast[MAKEINTRESOURCE](32642)
  IdcSizenesw* =    cast[MAKEINTRESOURCE](32643)
  IdcSizewe* =      cast[MAKEINTRESOURCE](32644)
  IdcSizens* =      cast[MAKEINTRESOURCE](32645)
  IdcSizeall* =     cast[MAKEINTRESOURCE](32646)
  IdcNo* =          cast[MAKEINTRESOURCE](32648)
  IdcHand* =        cast[MAKEINTRESOURCE](32649)
  IdcAppstarting* = cast[MAKEINTRESOURCE](32650)
  IdcHelp* =        cast[MAKEINTRESOURCE](32651)

  IdiApplication* = cast[MAKEINTRESOURCE](32512)
  IdiHand* =        cast[MAKEINTRESOURCE](32513)
  IdiQuestion* =    cast[MAKEINTRESOURCE](32514)
  IdiExclamation* = cast[MAKEINTRESOURCE](32515)
  IdiAsterisk* =    cast[MAKEINTRESOURCE](32516)
  IdiWinlogo* =     cast[MAKEINTRESOURCE](32517)
  IdiWarning* =     IDI_EXCLAMATION
  IdiError* =       IDI_HAND
  IdiInformation* = IDI_ASTERISK

const
  # GetMapMode
  MmAnisotropic* = 8
  MmHienglish* = 5
  MmHimetric* = 3
  MmIsotropic* = 7
  MmLoenglish* = 4
  MmLometric* = 2
  MmText* = 1
  MmTwips* = 6
  # GetMenuDefaultItem
  GmdiGointopopups* = 0x00000002
  GmdiUsedisabled* = 0x00000001
  # PeekMessage
  PmNoremove* = 0
  PmRemove* = 1
  PmNoyield* = 2
  # GetNamedPipeHandleState
  #   PIPE_NOWAIT = 1; already above
  #   PIPE_READMODE_MESSAGE = 2;already above
  # GetNamedPipeInfo
  PipeClientEnd* = 0
  PipeServerEnd* = 1
  #   PIPE_TYPE_MESSAGE = 4;already above
  # GetNextWindow, GetWindow
  GwHwndnext* = 2
  GwHwndprev* = 3
  GwChild* = 5
  GwHwndfirst* = 0
  GwHwndlast* = 1
  GwOwner* = 4
  # GetPath
  PtMoveto* = 6
  PtLineto* = 2
  PtBezierto* = 4
  PtClosefigure* = 1
  # GetProcessShutdownParameters
  ShutdownNoretry* = 1
  # GetQueueStatus
  QsAllevents* = 191
  QsAllinput* = 255
  QsHotkey* = 128
  QsInput* = 7
  QsKey* = 1
  QsMouse* = 6
  QsMousebutton* = 4
  QsMousemove* = 2
  QsPaint* = 32
  QsPostmessage* = 8
  QsSendmessage* = 64
  QsTimer* = 16
  # GetScrollInfo, SetScrollInfo
  SifAll* = 23
  SifPage* = 2
  SifPos* = 4
  SifRange* = 1
  SifDisablenoscroll* = 8

  # GetStdHandle
  StdInputHandle* =  DWORD(-10)
  StdOutputHandle* = DWORD(-11)
  StdErrorHandle* =  DWORD(-12)

  InvalidHandleValue* = HANDLE(-1)
  InvalidSetFilePointer* = ULONG(-1)
  InvalidFileSize* = ULONG(-1)
  InvalidFileAttributes* = ULONG(-1)

const
  # GetStockObject
  BlackBrush* = 4
  DkgrayBrush* = 3
  GrayBrush* = 2
  HollowBrush* = 5
  LtgrayBrush* = 1
  NullBrush* = 5
  WhiteBrush* = 0
  BlackPen* = 7
  NullPen* = 8
  WhitePen* = 6
  AnsiFixedFont* = 11
  AnsiVarFont* = 12
  DeviceDefaultFont* = 14
  DefaultGuiFont* = 17
  OemFixedFont* = 10
  SystemFont* = 13
  SystemFixedFont* = 16
  DefaultPalette* = 15
  # GetStringTypeA
  CtCtype1* = 1
  CtCtype2* = 2
  CtCtype3* = 4
  C1Upper* = 1
  C1Lower* = 2
  C1Digit* = 4
  C1Space* = 8
  C1Punct* = 16
  C1Cntrl* = 32
  C1Blank* = 64
  C1Xdigit* = 128
  C1Alpha* = 256
  C2Lefttoright* = 1
  C2Righttoleft* = 2
  C2Europenumber* = 3
  C2Europeseparator* = 4
  C2Europeterminator* = 5
  C2Arabicnumber* = 6
  C2Commonseparator* = 7
  C2Blockseparator* = 8
  C2Segmentseparator* = 9
  C2Whitespace* = 10
  C2Otherneutral* = 11
  C2Notapplicable* = 0
  C3Nonspacing* = 1
  C3Diacritic* = 2
  C3Vowelmark* = 4
  C3Symbol* = 8
  C3Katakana* = 16
  C3Hiragana* = 32
  C3Halfwidth* = 64
  C3Fullwidth* = 128
  C3Ideograph* = 256
  C3Kashida* = 512
  C3Alpha* = 32768
  C3Notapplicable* = 0
  # GetSysColor
  Color3ddkshadow* = 21
  Color3dface* = 15
  Color3dhilight* = 20
  Color3dlight* = 22
  ColorBtnhilight* = 20
  Color3dshadow* = 16
  ColorActiveborder* = 10
  ColorActivecaption* = 2
  ColorAppworkspace* = 12
  ColorBackground* = 1
  ColorDesktop* = 1
  ColorBtnface* = 15
  ColorBtnhighlight* = 20
  ColorBtnshadow* = 16
  ColorBtntext* = 18
  ColorCaptiontext* = 9
  ColorGraytext* = 17
  ColorHighlight* = 13
  ColorHighlighttext* = 14
  ColorInactiveborder* = 11
  ColorInactivecaption* = 3
  ColorInactivecaptiontext* = 19
  ColorInfobk* = 24
  ColorInfotext* = 23
  ColorMenu* = 4
  ColorMenutext* = 7
  ColorScrollbar* = 0
  ColorWindow* = 5
  ColorWindowframe* = 6
  ColorWindowtext* = 8
  # GetSystemMetrics
  SmCymin* = 29
  SmCxmin* = 28
  SmArrange* = 56
  SmCleanboot* = 67
  # The right value for SM_CEMETRICS for NT 3.5 is 75.  For Windows 95
  #     and NT 4.0, it is 76.  The meaning is undocumented, anyhow.
  SmCmetrics* = 76
  SmCmousebuttons* = 43
  SmCxborder* = 5
  SmCyborder* = 6
  SmCxcursor* = 13
  SmCycursor* = 14
  SmCxdlgframe* = 7
  SmCydlgframe* = 8
  SmCxdoubleclk* = 36
  SmCydoubleclk* = 37
  SmCxdrag* = 68
  SmCydrag* = 69
  SmCxedge* = 45
  SmCyedge* = 46
  SmCxfixedframe* = 7
  SmCyfixedframe* = 8
  SmCxframe* = 32
  SmCyframe* = 33
  SmCxfullscreen* = 16
  SmCyfullscreen* = 17
  SmCxhscroll* = 21
  SmCyhscroll* = 3
  SmCxhthumb* = 10
  SmCxicon* = 11
  SmCyicon* = 12
  SmCxiconspacing* = 38
  SmCyiconspacing* = 39
  SmCxmaximized* = 61
  SmCymaximized* = 62
  SmCxmaxtrack* = 59
  SmCymaxtrack* = 60
  SmCxmenucheck* = 71
  SmCymenucheck* = 72
  SmCxmenusize* = 54
  SmCymenusize* = 55
  SmCxminimized* = 57
  SmCyminimized* = 58
  SmCxminspacing* = 47
  SmCyminspacing* = 48
  SmCxmintrack* = 34
  SmCymintrack* = 35
  SmCxscreen* = 0
  SmCyscreen* = 1
  SmCxsize* = 30
  SmCysize* = 31
  SmCxsizeframe* = 32
  SmCysizeframe* = 33
  SmCxsmicon* = 49
  SmCysmicon* = 50
  SmCxsmsize* = 52
  SmCysmsize* = 53
  SmCxvscroll* = 2
  #SM_CYHSCROLL = 3;already above
  #SM_CXHSCROLL = 21;already above
  SmCyvscroll* = 20
  SmCyvthumb* = 9
  SmCycaption* = 4
  SmCykanjiwindow* = 18
  SmCymenu* = 15
  SmCysmcaption* = 51
  SmDbcsenabled* = 42
  SmDebug* = 22
  SmMenudropalignment* = 40
  SmMideastenabled* = 74
  SmMousepresent* = 19
  SmMousewheelpresent* = 75
  SmNetwork* = 63
  SmPenwindows* = 41
  SmSecure* = 44
  SmShowsounds* = 70
  SmSlowmachine* = 73
  SmSwapbutton* = 23
  ArwBottomleft* = 0
  ArwBottomright* = 0x00000001
  ArwHide* = 0x00000008
  ArwTopleft* = 0x00000002
  ArwTopright* = 0x00000003
  ArwDown* = 0x00000004
  ArwLeft* = 0
  ArwRight* = 0
  ArwUp* = 0x00000004
  # GetSystemPaletteUse
  SyspalNostatic* = 2
  SyspalStatic* = 1
  SyspalError* = 0
  # GetTapeParameters, SetTapeParameters
  GetTapeMediaInformation* = 0
  GetTapeDriveInformation* = 1
  SetTapeMediaInformation* = 0
  SetTapeDriveInformation* = 1
  # GetTapePosition
  TapeAbsolutePosition* = 0
  TapeLogicalPosition* = 0x00000001
  # GetTextAlign
  TaBaseline* = 24
  TaBottom* = 8
  TaTop* = 0
  TaCenter* = 6
  TaLeft* = 0
  TaRight* = 2
  TaRtlreading* = 256
  TaNoupdatecp* = 0
  TaUpdatecp* = 1
  VtaBaseline* = 24
  VtaCenter* = 6
  # GetThreadPriority
  ThreadPriorityAboveNormal* = 1
  ThreadPriorityBelowNormal* = -1
  ThreadPriorityHighest* = 2
  ThreadPriorityIdle* = -15
  ThreadPriorityLowest* = -2
  ThreadPriorityNormal* = 0
  ThreadPriorityTimeCritical* = 15
  ThreadPriorityErrorReturn* = 2147483647
  TlsMinimumAvailable* = 64
  # GetTimeFormat
  TimeNominutesorseconds* = 1
  TimeNoseconds* = 2
  TimeNotimemarker* = 4
  TimeForce24hourformat* = 8

const
  # GetTimeZoneInformation
  TimeZoneIdInvalid* = DWORD(- 1)
  TimeZoneIdUnknown* = 0
  TimeZoneIdStandard* = 1
  TimeZoneIdDaylight* = 2
  # GetUserObjectInformation
  UoiFlags* = 1
  UoiName* = 2
  UoiType* = 3
  # GetVolumeInformation
  FsCaseIsPreserved* = 2
  FsCaseSensitive* = 1
  FsUnicodeStoredOnDisk* = 4
  FsPersistentAcls* = 8
  FsFileCompression* = 16
  FsVolIsCompressed* = 32768
  # GetWindowLong
  GwlExstyle* = -20
  GwlStyle* = -16
  GwlWndproc* = -4
  GwlHinstance* = -6
  GwlHwndparent* = -8
  GwlId* = -12
  GwlUserdata* = -21
  DwlDlgproc* = 4
  DwlMsgresult* = 0
  DwlUser* = 8
  # GlobalAlloc, GlobalFlags
  GmemFixed* = 0
  GmemMoveable* = 2
  Gptr* = 64
  Ghnd* = 66
  GmemDdeshare* = 8192
  GmemDiscardable* = 256
  GmemLower* = 4096
  GmemNocompact* = 16
  GmemNodiscard* = 32
  GmemNotBanked* = 4096
  GmemNotify* = 16384
  GmemShare* = 8192
  GmemZeroinit* = 64
  GmemDiscarded* = 16384
  GmemInvalidHandle* = 32768
  GmemLockcount* = 255
  # HeapAlloc, HeapReAlloc
  HeapGenerateExceptions* = 4
  HeapNoSerialize* = 1
  HeapZeroMemory* = 8
  StatusNoMemory* = 0xC0000017
  StatusAccessViolation* = 0xC0000005
  HeapReallocInPlaceOnly* = 16
  # ImageList_Create
  IlcColor* = 0
  IlcColor4* = 4
  IlcColor8* = 8
  IlcColor16* = 16
  IlcColor24* = 24
  IlcColor32* = 32
  IlcColorddb* = 254
  IlcMask* = 1
  IlcPalette* = 2048
  # ImageList_Draw, ImageList_DrawEx
  IldBlend25* = 2
  IldBlend50* = 4
  IldSelected* = 4
  IldBlend* = 4
  IldFocus* = 2
  IldMask* = 16
  IldNormal* = 0
  IldTransparent* = 1
  ClrNone* = 0xFFFFFFFF
  ClrDefault* = 0xFF000000
  ClrInvalid* = 0xFFFFFFFF
  # ImageList_LoadImage
  #LR_DEFAULTCOLOR = 0;already above
  LrLoadfromfile* = 16
  LrLoadmap3dcolors* = 4096
  LrLoadtransparent* = 32
  # ImmConfigureIME
  ImeConfigGeneral* = 1
  ImeConfigRegisterword* = 2
  ImeConfigSelectdictionary* = 3
  # ImmGetConversionList
  GclConversion* = 1
  GclReverseconversion* = 2
  GclReverseLength* = 3
  # ImmGetGuideLine
  GglLevel* = 1
  GglIndex* = 2
  GglString* = 3
  GglPrivate* = 4
  GlLevelError* = 2
  GlLevelFatal* = 1
  GlLevelInformation* = 4
  GlLevelNoguideline* = 0
  GlLevelWarning* = 3
  GlIdCannotsave* = 17
  GlIdNoconvert* = 32
  GlIdNodictionary* = 16
  GlIdNomodule* = 1
  GlIdReadingconflict* = 35
  GlIdToomanystroke* = 34
  GlIdTypingerror* = 33
  GlIdUnknown* = 0
  GlIdInputreading* = 36
  GlIdInputradical* = 37
  GlIdInputcode* = 38
  GlIdChoosecandidate* = 40
  GlIdReverseconversion* = 41
  # ImmGetProperty
  IgpProperty* = 4
  IgpConversion* = 8
  IgpSentence* = 12
  IgpUi* = 16
  IgpSetcompstr* = 20
  IgpSelect* = 24
  ImePropAtCaret* = 65536
  ImePropSpecialUi* = 131072
  ImePropCandlistStartFrom1* = 262144
  ImePropUnicode* = 524288
  UiCap2700* = 1
  UiCapRot90* = 2
  UiCapRotany* = 4
  ScsCapCompstr* = 1
  ScsCapMakeread* = 2
  SelectCapConversion* = 1
  SelectCapSentence* = 2
  # ImmNotifyIME
  NiChangecandidatelist* = 19
  NiClosecandidate* = 17
  NiCompositionstr* = 21
  NiOpencandidate* = 16
  NiSelectcandidatestr* = 18
  NiSetcandidatePagesize* = 23
  NiSetcandidatePagestart* = 22
  CpsCancel* = 4
  CpsComplete* = 1
  CpsConvert* = 2
  CpsRevert* = 3
  # ImmSetCompositionString
  ScsSetstr* = 9
  ScsChangeattr* = 18
  ScsChangeclause* = 36
  # ImmUnregisterWord
  ImeRegwordStyleEudc* = 1
  ImeRegwordStyleUserFirst* = 0x80000000
  ImeRegwordStyleUserLast* = -1
  # InitializeSecurityDescriptor
  SecurityDescriptorRevision* = 1
  # IsTextUnicode
  IsTextUnicodeAscii16* = 1
  IsTextUnicodeReverseAscii16* = 16
  IsTextUnicodeStatistics* = 2
  IsTextUnicodeReverseStatistics* = 32
  IsTextUnicodeControls* = 4
  IsTextUnicodeReverseControls* = 64
  IsTextUnicodeSignature* = 8
  IsTextUnicodeReverseSignature* = 128
  IsTextUnicodeIllegalChars* = 256
  IsTextUnicodeOddLength* = 512
  IsTextUnicodeNullBytes* = 4096
  IsTextUnicodeUnicodeMask* = 15
  IsTextUnicodeReverseMask* = 240
  IsTextUnicodeNotUnicodeMask* = 3840
  IsTextUnicodeNotAsciiMask* = 61440
  # JournalPlaybackProc, KeyboardProc
  HcGetnext* = 1
  HcSkip* = 2
  HcSysmodaloff* = 5
  HcSysmodalon* = 4
  HcNoremove* = 3
  # keybd_event
  KeyeventfExtendedkey* = 1
  KeyeventfKeyup* = 2
  # LoadBitmap
  ObmBtncorners* = 32758
  ObmBtsize* = 32761
  ObmCheck* = 32760
  ObmCheckboxes* = 32759
  ObmClose* = 32754
  ObmCombo* = 32738
  ObmDnarrow* = 32752
  ObmDnarrowd* = 32742
  ObmDnarrowi* = 32736
  ObmLfarrow* = 32750
  ObmLfarrowi* = 32734
  ObmLfarrowd* = 32740
  ObmMnarrow* = 32739
  ObmOldClose* = 32767
  ObmOldDnarrow* = 32764
  ObmOldLfarrow* = 32762
  ObmOldReduce* = 32757
  ObmOldRestore* = 32755
  ObmOldRgarrow* = 32763
  ObmOldUparrow* = 32765
  ObmOldZoom* = 32756
  ObmReduce* = 32749
  ObmReduced* = 32746
  ObmRestore* = 32747
  ObmRestored* = 32744
  ObmRgarrow* = 32751
  ObmRgarrowd* = 32741
  ObmRgarrowi* = 32735
  ObmSize* = 32766
  ObmUparrow* = 32753
  ObmUparrowd* = 32743
  ObmUparrowi* = 32737
  ObmZoom* = 32748
  ObmZoomd* = 32745
  # LoadLibraryEx
  DontResolveDllReferences* = 1
  LoadLibraryAsDatafile* = 2
  LoadWithAlteredSearchPath* = 8
  # LocalAlloc, LocalFlags
  Lptr* = 64
  Lhnd* = 66
  Nonzerolhnd* = 2
  Nonzerolptr* = 0
  LmemNonzerolhnd* = 2
  LmemNonzerolptr* = 0
  LmemFixed* = 0
  LmemMoveable* = 2
  LmemNocompact* = 16
  LmemNodiscard* = 32
  LmemZeroinit* = 64
  LmemModify* = 128
  LmemLockcount* = 255
  LmemDiscardable* = 3840
  LmemDiscarded* = 16384
  LmemInvalidHandle* = 32768
  # LockFileEx
  LockfileFailImmediately* = 1
  LockfileExclusiveLock* = 2
  # LogonUser
  # LZCopy, LZInit, LZRead
  # MessageBeep, MessageBox
  MbUsericon* = 0x00000080
  MbIconasterisk* = 0x00000040
  MbIconexclamation* = 0x00000030
  MbIconwarning* = 0x00000030
  MbIconerror* = 0x00000010
  MbIconhand* = 0x00000010
  MbIconquestion* = 0x00000020
  MbOk* = 0
  MbAbortretryignore* = 0x00000002
  MbApplmodal* = 0
  MbDefaultDesktopOnly* = 0x00020000
  MbHelp* = 0x00004000
  MbRight* = 0x00080000
  MbRtlreading* = 0x00100000
  MbTopmost* = 0x00040000
  MbDefbutton1* = 0
  MbDefbutton2* = 0x00000100
  MbDefbutton3* = 0x00000200
  MbDefbutton4* = 0x00000300
  MbIconinformation* = 0x00000040
  MbIconstop* = 0x00000010
  MbOkcancel* = 0x00000001
  MbRetrycancel* = 0x00000005
  MbServiceNotification* = 0x00040000
  MbSetforeground* = 0x00010000
  MbSystemmodal* = 0x00001000
  MbTaskmodal* = 0x00002000
  MbYesno* = 0x00000004
  MbYesnocancel* = 0x00000003
  Idabort* = 3
  Idcancel* = 2
  Idclose* = 8
  Idhelp* = 9
  Idignore* = 5
  Idno* = 7
  Idok* = 1
  Idretry* = 4
  Idyes* = 6
  # MessageProc
  MsgfDialogbox* = 0
  MsgfMenu* = 2
  MsgfNextwindow* = 6
  MsgfScrollbar* = 5
  MsgfMainloop* = 8
  MsgfUser* = 4096
  # ModifyWorldTransform
  MwtIdentity* = 1
  MwtLeftmultiply* = 2
  MwtRightmultiply* = 3
  # mouse_event
  MouseeventfAbsolute* = 32768
  MouseeventfMove* = 1
  MouseeventfLeftdown* = 2
  MouseeventfLeftup* = 4
  MouseeventfRightdown* = 8
  MouseeventfRightup* = 16
  MouseeventfMiddledown* = 32
  MouseeventfMiddleup* = 64
  # MoveFileEx
  MovefileReplaceExisting* = 1
  MovefileCopyAllowed* = 2
  MovefileDelayUntilReboot* = 4
  # MsgWaitForMultipleObjects, WaitForMultipleObjectsEx
  WaitObject0* = 0
  WaitAbandoned0* = 0x00000080
  WaitTimeout* = 0x00000102
  WaitIoCompletion* = 0x000000C0
  WaitAbandoned* = 0x00000080
  WaitFailed* = 0xFFFFFFFF
  MaximumWaitObjects* = 0x00000040
  MaximumSuspendCount* = 0x0000007F
  # MultiByteToWideChar
  MbPrecomposed* = 1
  MbComposite* = 2
  MbErrInvalidChars* = 8
  MbUseglyphchars* = 4
  # NDdeSetTrustedShare
  # NetAccessCheck
  # NetServerEnum
  # NetServiceControl
  # NetUserEnum
  # OpenProcessToken
  TokenAdjustDefault* = 128
  TokenAdjustGroups* = 64
  TokenAdjustPrivileges* = 32
  TokenAllAccess* = 0x000F00FF
  TokenAssignPrimary* = 1
  TokenDuplicate* = 2
  TokenExecute* = 0x00020000
  TokenImpersonate* = 4
  TokenQuery* = 8
  TokenQuerySource* = 16
  TokenRead* = 0x00020008
  TokenWrite* = 0x000200E0
  # OpenSCManager
  ScManagerAllAccess* = 0x000F003F
  ScManagerConnect* = 1
  ScManagerCreateService* = 2
  ScManagerEnumerateService* = 4
  ScManagerLock* = 8
  ScManagerQueryLockStatus* = 16
  ScManagerModifyBootConfig* = 32
  # PostMessage
  HwndBroadcast* = HWND(0xffff)

const
  # PrepareTape
  TapeFormat* = 0x00000005
  TapeLoad* = 0
  TapeLock* = 0x00000003
  TapeTension* = 0x00000002
  TapeUnload* = 0x00000001
  TapeUnlock* = 0x00000004
  # PropertySheet
  IsPsrebootsystem* = 3
  IsPsrestartwindows* = 2
  # PropSheetPageProc
  PspcbCreate* = 2
  PspcbRelease* = 1
  # PurgeComm
  PurgeTxabort* = 1
  PurgeRxabort* = 2
  PurgeTxclear* = 4
  PurgeRxclear* = 8
  # QueryServiceObjectSecurity
  OwnerSecurityInformation* = 0x00000001
  GroupSecurityInformation* = 0x00000002
  DaclSecurityInformation* = 0x00000004
  SaclSecurityInformation* = 0x00000008
  # ReadEventLog, ReportEvent
  EventlogForwardsRead* = 4
  EventlogBackwardsRead* = 8
  EventlogSeekRead* = 2
  EventlogSequentialRead* = 1
  EventlogErrorType* = 1
  EventlogWarningType* = 2
  EventlogInformationType* = 4
  EventlogAuditSuccess* = 8

  EventlogAuditFailure* = 16
  # RedrawWindow
  RdwErase* = 4
  RdwFrame* = 1024
  RdwInternalpaint* = 2
  RdwInvalidate* = 1
  RdwNoerase* = 32
  RdwNoframe* = 2048
  RdwNointernalpaint* = 16
  RdwValidate* = 8
  RdwErasenow* = 512
  RdwUpdatenow* = 256
  RdwAllchildren* = 128
  RdwNochildren* = 64

  # RegCreateKey
  HkeyClassesRoot* =     HKEY(0x80000000)
  HkeyCurrentUser* =     HKEY(0x80000001)
  HkeyLocalMachine* =    HKEY(0x80000002)
  HkeyUsers* =            HKEY(0x80000003)
  HkeyPerformanceData* = HKEY(0x80000004)
  HkeyCurrentConfig* =   HKEY(0x80000005)
  HkeyDynData* =         HKEY(0x80000006)

const
  # RegCreateKeyEx
  RegOptionVolatile* = 0x00000001
  RegOptionNonVolatile* = 0
  RegCreatedNewKey* = 0x00000001
  RegOpenedExistingKey* = 0x00000002
  # RegEnumValue
  RegBinary* = 3
  RegDword* = 4
  RegDwordLittleEndian* = 4
  RegDwordBigEndian* = 5
  RegExpandSz* = 2
  RegFullResourceDescriptor* = 9
  RegLink* = 6
  RegMultiSz* = 7
  RegNone* = 0
  RegResourceList* = 8
  RegResourceRequirementsList* = 10
  RegSz* = 1
  # RegisterHotKey
  ModAlt* = 1
  ModControl* = 2
  ModShift* = 4
  ModWin* = 8
  IdhotSnapdesktop* = -2
  IdhotSnapwindow* = -1
  # RegNotifyChangeKeyValue
  RegNotifyChangeName* = 0x00000001
  RegNotifyChangeAttributes* = 0x00000002
  RegNotifyChangeLastSet* = 0x00000004
  RegNotifyChangeSecurity* = 0x00000008
  # ScrollWindowEx
  SwErase* = 4
  SwInvalidate* = 2
  SwScrollchildren* = 1
  # SendMessageTimeout
  SmtoAbortifhung* = 2
  SmtoBlock* = 1
  SmtoNormal* = 0
  # SetBkMode
  Opaque* = 2

  Transparent* = 1
  # SetDebugErrorLevel
  SleError* = 1
  SleMinorerror* = 2
  SleWarning* = 3
  # SetErrorMode
  SemFailcriticalerrors* = 1
  SemNoalignmentfaultexcept* = 4
  SemNogpfaulterrorbox* = 2
  SemNoopenfileerrorbox* = 32768
  # SetICMMode
  IcmOn* = 2
  IcmOff* = 1
  IcmQuery* = 3
  # SetJob
  # Locale Information
  LocaleIlanguage* = 1
  LocaleSlanguage* = 2
  LocaleSenglanguage* = 4097
  LocaleSabbrevlangname* = 3
  LocaleSnativelangname* = 4
  LocaleIcountry* = 5
  LocaleScountry* = 6
  LocaleSengcountry* = 4098
  LocaleSabbrevctryname* = 7
  LocaleSnativectryname* = 8
  LocaleIdefaultlanguage* = 9
  LocaleIdefaultcountry* = 10
  LocaleIdefaultansicodepage* = 4100
  LocaleIdefaultcodepage* = 11
  LocaleSlist* = 12
  LocaleImeasure* = 13
  LocaleSdecimal* = 14
  LocaleSthousand* = 15
  LocaleSgrouping* = 16
  LocaleIdigits* = 17
  LocaleIlzero* = 18
  LocaleInegnumber* = 4112
  LocaleScurrency* = 20
  LocaleSmondecimalsep* = 22
  LocaleSmonthousandsep* = 23
  LocaleSmongrouping* = 24
  LocaleIcurrdigits* = 25
  LocaleIcurrency* = 27
  LocaleInegcurr* = 28
  LocaleSdate* = 29
  LocaleStime* = 30
  LocaleStimeformat* = 4099
  LocaleSshortdate* = 31
  LocaleSlongdate* = 32
  LocaleIdate* = 33
  LocaleIldate* = 34
  LocaleItime* = 35
  LocaleItlzero* = 37
  LocaleIdaylzero* = 38
  LocaleImonlzero* = 39
  LocaleS1159* = 40
  LocaleS2359* = 41
  LocaleIcalendartype* = 4105
  LocaleIoptionalcalendar* = 4107
  LocaleIfirstdayofweek* = 4108
  LocaleIfirstweekofyear* = 4109
  LocaleSdayname1* = 42
  LocaleSdayname2* = 43
  LocaleSdayname3* = 44
  LocaleSdayname4* = 45
  LocaleSdayname5* = 46
  LocaleSdayname6* = 47
  LocaleSdayname7* = 48
  LocaleSabbrevdayname1* = 49
  LocaleSabbrevdayname2* = 50
  LocaleSabbrevdayname3* = 51
  LocaleSabbrevdayname4* = 52
  LocaleSabbrevdayname5* = 53
  LocaleSabbrevdayname6* = 54
  LocaleSabbrevdayname7* = 55
  LocaleSmonthname1* = 56
  LocaleSmonthname2* = 57
  LocaleSmonthname3* = 58
  LocaleSmonthname4* = 59
  LocaleSmonthname5* = 60
  LocaleSmonthname6* = 61
  LocaleSmonthname7* = 62
  LocaleSmonthname8* = 63
  LocaleSmonthname9* = 64
  LocaleSmonthname10* = 65
  LocaleSmonthname11* = 66
  LocaleSmonthname12* = 67
  LocaleSmonthname13* = 4110
  LocaleSabbrevmonthname1* = 68
  LocaleSabbrevmonthname2* = 69
  LocaleSabbrevmonthname3* = 70
  LocaleSabbrevmonthname4* = 71
  LocaleSabbrevmonthname5* = 72
  LocaleSabbrevmonthname6* = 73
  LocaleSabbrevmonthname7* = 74
  LocaleSabbrevmonthname8* = 75
  LocaleSabbrevmonthname9* = 76
  LocaleSabbrevmonthname10* = 77
  LocaleSabbrevmonthname11* = 78
  LocaleSabbrevmonthname12* = 79
  LocaleSabbrevmonthname13* = 4111
  LocaleSpositivesign* = 80
  LocaleSnegativesign* = 81
  LocaleIpossignposn* = 82
  LocaleInegsignposn* = 83
  LocaleIpossymprecedes* = 84
  LocaleIpossepbyspace* = 85
  LocaleInegsymprecedes* = 86
  LocaleInegsepbyspace* = 87
  LocaleNouseroverride* = 0x80000000
  LocaleUseCpAcp* = 0x40000000 # use the system ACP
  LocaleReturnNumber* = 0x20000000 # return number instead
  LocaleSiso639langname* = 0x00000059
  LocaleSiso3166ctryname* = 0x0000005A
  # Calendar Type Information
  CalIcalintvalue* = 1
  CalIyearoffsetrange* = 3
  CalSabbrevdayname1* = 14
  CalSabbrevdayname2* = 15
  CalSabbrevdayname3* = 16
  CalSabbrevdayname4* = 17
  CalSabbrevdayname5* = 18
  CalSabbrevdayname6* = 19
  CalSabbrevdayname7* = 20
  CalSabbrevmonthname1* = 34
  CalSabbrevmonthname2* = 35
  CalSabbrevmonthname3* = 36
  CalSabbrevmonthname4* = 37
  CalSabbrevmonthname5* = 38
  CalSabbrevmonthname6* = 39
  CalSabbrevmonthname7* = 40
  CalSabbrevmonthname8* = 41
  CalSabbrevmonthname9* = 42
  CalSabbrevmonthname10* = 43
  CalSabbrevmonthname11* = 44
  CalSabbrevmonthname12* = 45
  CalSabbrevmonthname13* = 46
  CalScalname* = 2
  CalSdayname1* = 7
  CalSdayname2* = 8
  CalSdayname3* = 9
  CalSdayname4* = 10
  CalSdayname5* = 11
  CalSdayname6* = 12
  CalSdayname7* = 13
  CalSerastring* = 4
  CalSlongdate* = 6
  CalSmonthname1* = 21
  CalSmonthname2* = 22
  CalSmonthname3* = 23
  CalSmonthname4* = 24
  CalSmonthname5* = 25
  CalSmonthname6* = 26
  CalSmonthname7* = 27
  CalSmonthname8* = 28
  CalSmonthname9* = 29
  CalSmonthname10* = 30
  CalSmonthname11* = 31
  CalSmonthname12* = 32
  CalSmonthname13* = 33
  CalSshortdate* = 5
  # SetProcessWorkingSetSize
  ProcessSetQuota* = 256
  # SetPrinter
  # SetService
  # SetStretchBltMode
  Blackonwhite* = 1
  Coloroncolor* = 3
  Halftone* = 4
  StretchAndscans* = 1
  StretchDeletescans* = 3
  StretchHalftone* = 4
  StretchOrscans* = 2
  Whiteonblack* = 2
  # SetSystemCursor
  OcrNormal* = 32512
  OcrIbeam* = 32513
  OcrWait* = 32514
  OcrCross* = 32515
  OcrUp* = 32516
  OcrSize* = 32640
  OcrIcon* = 32641
  OcrSizenwse* = 32642
  OcrSizenesw* = 32643
  OcrSizewe* = 32644
  OcrSizens* = 32645
  OcrSizeall* = 32646
  OcrNo* = 32648
  OcrAppstarting* = 32650
  # SetTapePosition
  TapeAbsoluteBlock* = 0x00000001
  TapeLogicalBlock* = 0x00000002
  TapeRewind* = 0
  TapeSpaceEndOfData* = 0x00000004
  TapeSpaceFilemarks* = 0x00000006
  TapeSpaceRelativeBlocks* = 0x00000005
  TapeSpaceSequentialFmks* = 0x00000007
  TapeSpaceSequentialSmks* = 0x00000009
  TapeSpaceSetmarks* = 0x00000008
  # SetUnhandledExceptionFilter
  ExceptionExecuteHandler* = 1
  ExceptionContinueExecution* = -1
  ExceptionContinueSearch* = 0

  # SetWindowPos, DeferWindowPos
  HwndBottom* =    HWND(1)
  HwndNotopmost* = HWND(-2)
  HwndTop* =       HWND(0)
  HwndTopmost* =   HWND(-1)

const
  SwpDrawframe* = 32
  SwpFramechanged* = 32
  SwpHidewindow* = 128
  SwpNoactivate* = 16
  SwpNocopybits* = 256
  SwpNomove* = 2
  SwpNosize* = 1
  SwpNoredraw* = 8
  SwpNozorder* = 4
  SwpShowwindow* = 64
  SwpNoownerzorder* = 512
  SwpNoreposition* = 512
  SwpNosendchanging* = 1024
  # SHAddToRecentDocs
  # SHAppBarMessage
  # SHChangeNotify
  # ShellProc
  HshellActivateshellwindow* = 3
  HshellGetminrect* = 5
  HshellLanguage* = 8
  HshellRedraw* = 6
  HshellTaskman* = 7
  HshellWindowactivated* = 4
  HshellWindowcreated* = 1
  HshellWindowdestroyed* = 2
  # SHGetFileInfo
  # SHGetSpecialFolderLocation
  # ShowWindow
  SwHide* = 0
  SwMaximize* = 3
  SwMinimize* = 6
  SwNormal* = 1
  SwRestore* = 9
  SwShow* = 5
  SwShowdefault* = 10
  SwShowmaximized* = 3
  SwShowminimized* = 2
  SwShowminnoactive* = 7
  SwShowna* = 8
  SwShownoactivate* = 4
  SwShownormal* = 1
  WpfRestoretomaximized* = 2
  WpfSetminposition* = 1
  # Sleep
  Infinite* = -1'i32
  # SystemParametersInfo
  SpiGetbeep* = 1
  SpiSetbeep* = 2
  SpiGetmouse* = 3
  SpiSetmouse* = 4
  SpiGetborder* = 5
  SpiSetborder* = 6
  SpiGetkeyboardspeed* = 10
  SpiSetkeyboardspeed* = 11
  SpiLangdriver* = 12
  SpiIconhorizontalspacing* = 13
  SpiGetscreensavetimeout* = 14
  SpiSetscreensavetimeout* = 15
  SpiGetscreensaveactive* = 16
  SpiSetscreensaveactive* = 17
  SpiGetgridgranularity* = 18
  SpiSetgridgranularity* = 19
  SpiSetdeskwallpaper* = 20
  SpiSetdeskpattern* = 21
  SpiGetkeyboarddelay* = 22
  SpiSetkeyboarddelay* = 23
  SpiIconverticalspacing* = 24
  SpiGeticontitlewrap* = 25
  SpiSeticontitlewrap* = 26
  SpiGetmenudropalignment* = 27
  SpiSetmenudropalignment* = 28
  SpiSetdoubleclkwidth* = 29
  SpiSetdoubleclkheight* = 30
  SpiGeticontitlelogfont* = 31
  SpiSetdoubleclicktime* = 32
  SpiSetmousebuttonswap* = 33
  SpiSeticontitlelogfont* = 34
  SpiGetfasttaskswitch* = 35
  SpiSetfasttaskswitch* = 36
  SpiSetdragfullwindows* = 37
  SpiGetdragfullwindows* = 38
  SpiGetnonclientmetrics* = 41
  SpiSetnonclientmetrics* = 42

  SpiGetminimizedmetrics* = 43
  SpiSetminimizedmetrics* = 44
  SpiGeticonmetrics* = 45
  SpiSeticonmetrics* = 46
  SpiSetworkarea* = 47
  SpiGetworkarea* = 48
  SpiSetpenwindows* = 49
  SpiGetfilterkeys* = 50
  SpiSetfilterkeys* = 51
  SpiGettogglekeys* = 52
  SpiSettogglekeys* = 53
  SpiGetmousekeys* = 54
  SpiSetmousekeys* = 55
  SpiGetshowsounds* = 56
  SpiSetshowsounds* = 57
  SpiGetstickykeys* = 58
  SpiSetstickykeys* = 59
  SpiGetaccesstimeout* = 60
  SpiSetaccesstimeout* = 61
  SpiGetserialkeys* = 62
  SpiSetserialkeys* = 63
  SpiGetsoundsentry* = 64
  SpiSetsoundsentry* = 65
  SpiGethighcontrast* = 66
  SpiSethighcontrast* = 67
  SpiGetkeyboardpref* = 68
  SpiSetkeyboardpref* = 69
  SpiGetscreenreader* = 70
  SpiSetscreenreader* = 71
  SpiGetanimation* = 72
  SpiSetanimation* = 73
  SpiGetfontsmoothing* = 74
  SpiSetfontsmoothing* = 75
  SpiSetdragwidth* = 76
  SpiSetdragheight* = 77
  SpiSethandheld* = 78
  SpiGetlowpowertimeout* = 79
  SpiGetpowerofftimeout* = 80
  SpiSetlowpowertimeout* = 81
  SpiSetpowerofftimeout* = 82
  SpiGetlowpoweractive* = 83
  SpiGetpoweroffactive* = 84
  SpiSetlowpoweractive* = 85
  SpiSetpoweroffactive* = 86
  SpiSetcursors* = 87
  SpiSeticons* = 88
  SpiGetdefaultinputlang* = 89
  SpiSetdefaultinputlang* = 90
  SpiSetlangtoggle* = 91
  SpiGetwindowsextension* = 92
  SpiSetmousetrails* = 93
  SpiGetmousetrails* = 94
  SpiGetsnaptodefbutton* = 95
  SpiSetsnaptodefbutton* = 96
  SpiScreensaverrunning* = 97
  SpiSetscreensaverrunning* = 97
  SpiGetmousehoverwidth* = 98
  SpiSetmousehoverwidth* = 99
  SpiGetmousehoverheight* = 100
  SpiSetmousehoverheight* = 101
  SpiGetmousehovertime* = 102
  SpiSetmousehovertime* = 103
  SpiGetwheelscrolllines* = 104
  SpiSetwheelscrolllines* = 105
  SpiGetmenushowdelay* = 106
  SpiSetmenushowdelay* = 107
  SpiGetshowimeui* = 110
  SpiSetshowimeui* = 111
  # Windows Me/2000 and higher
  SpiGetmousespeed* = 112
  SpiSetmousespeed* = 113
  SpiGetscreensaverrunning* = 114
  SpiGetdeskwallpaper* = 115
  SpiGetactivewindowtracking* = 4096
  SpiSetactivewindowtracking* = 4097
  SpiGetmenuanimation* = 4098
  SpiSetmenuanimation* = 4099
  SpiGetcomboboxanimation* = 4100
  SpiSetcomboboxanimation* = 4101
  SpiGetlistboxsmoothscrolling* = 4102
  SpiSetlistboxsmoothscrolling* = 4103
  SpiGetgradientcaptions* = 4104
  SpiSetgradientcaptions* = 4105
  SpiGetkeyboardcues* = 4106
  SpiSetkeyboardcues* = 4107
  SpiGetmenuunderlines* = 4106
  SpiSetmenuunderlines* = 4107
  SpiGetactivewndtrkzorder* = 4108
  SpiSetactivewndtrkzorder* = 4109
  SpiGethottracking* = 4110
  SpiSethottracking* = 4111
  SpiGetmenufade* = 4114
  SpiSetmenufade* = 4115
  SpiGetselectionfade* = 4116
  SpiSetselectionfade* = 4117
  SpiGettooltipanimation* = 4118
  SpiSettooltipanimation* = 4119
  SpiGettooltipfade* = 4120
  SpiSettooltipfade* = 4121
  SpiGetcursorshadow* = 4122
  SpiSetcursorshadow* = 4123
  SpiGetuieffects* = 4158
  SpiSetuieffects* = 4159
  SpiGetforegroundlocktimeout* = 8192
  SpiSetforegroundlocktimeout* = 8193
  SpiGetactivewndtrktimeout* = 8194
  SpiSetactivewndtrktimeout* = 8195
  SpiGetforegroundflashcount* = 8196
  SpiSetforegroundflashcount* = 8197
  SpiGetcaretwidth* = 8198
  SpiSetcaretwidth* = 8199
  # Windows XP and higher
  SpiGetmousesonar* = 4124
  SpiSetmousesonar* = 4125
  SpiGetmouseclicklock* = 4126
  SpiSetmouseclicklock* = 4127
  SpiGetmousevanish* = 4128
  SpiSetmousevanish* = 4129
  SpiGetflatmenu* = 4130
  SpiSetflatmenu* = 4131
  SpiGetdropshadow* = 4132
  SpiSetdropshadow* = 4133
  SpiGetblocksendinputresets* = 4134
  SpiSetblocksendinputresets* = 4135
  SpiGetmouseclicklocktime* = 8200
  SpiSetmouseclicklocktime* = 8201
  SpiGetfontsmoothingtype* = 8202
  SpiSetfontsmoothingtype* = 8203
  SpiGetfontsmoothingcontrast* = 8204
  SpiSetfontsmoothingcontrast* = 8205
  SpiGetfocusborderwidth* = 8206
  SpiSetfocusborderwidth* = 8207
  SpiGetfocusborderheight* = 8208
  SpiSetfocusborderheight* = 8209
  SpiGetfontsmoothingorientation* = 8210
  SpiSetfontsmoothingorientation* = 8211
  # constants for SPI_GETFONTSMOOTHINGTYPE and SPI_SETFONTSMOOTHINGTYPE:
  FeFontsmoothingstandard* = 1
  FeFontsmoothingcleartype* = 2
  FeFontsmoothingdocking* = 32768
  # constants for SPI_GETFONTSMOOTHINGORIENTATION and SPI_SETFONTSMOOTHINGORIENTATION:
  FeFontsmoothingorientationbgr* = 0
  FeFontsmoothingorientationrgb* = 1
  # Flags
  SpifUpdateinifile* = 1
  SpifSendwininichange* = 2
  SpifSendchange* = 2
  # TrackPopupMenu, TrackPopMenuEx
  TpmCenteralign* = 0x00000004
  TpmLeftalign* = 0
  TpmRightalign* = 0x00000008
  TpmLeftbutton* = 0
  TpmRightbutton* = 0x00000002
  TpmHorizontal* = 0
  TpmVertical* = 0x00000040
  # TranslateCharsetInfo
  TciSrccharset* = 1
  TciSrccodepage* = 2
  TciSrcfontsig* = 3
  # VerFindFile
  VfffIssharedfile* = 1
  VffCurnedest* = 1
  VffFileinuse* = 2
  VffBufftoosmall* = 4
  # VerInstallFile
  ViffForceinstall* = 1
  ViffDontdeleteold* = 2
  VifTempfile* = 0x00000001
  VifMismatch* = 0x00000002
  VifSrcold* = 0x00000004
  VifDifflang* = 0x00000008
  VifDiffcodepg* = 0x00000010
  VifDifftype* = 0x00000020
  VifWriteprot* = 0x00000040
  VifFileinuse* = 0x00000080
  VifOutofspace* = 0x00000100
  VifAccessviolation* = 0x00000200
  VifSharingviolation* = 0x00000400
  VifCannotcreate* = 0x00000800
  VifCannotdelete* = 0x00001000
  VifCannotdeletecur* = 0x00004000
  VifCannotrename* = 0x00002000
  VifOutofmemory* = 0x00008000
  VifCannotreadsrc* = 0x00010000
  VifCannotreaddst* = 0x00020000
  VifBufftoosmall* = 0x00040000
  # WideCharToMultiByte
  WcCompositecheck* = 512
  WcDiscardns* = 16
  WcSepchars* = 32
  WcDefaultchar* = 64
  # WinHelp
  HelpCommand* = 0x00000102
  HelpContents* = 0x00000003
  HelpContext* = 0x00000001
  HelpContextpopup* = 0x00000008
  HelpForcefile* = 0x00000009
  HelpHelponhelp* = 0x00000004
  HelpIndex* = 0x00000003
  HelpKey* = 0x00000101
  HelpMultikey* = 0x00000201
  HelpPartialkey* = 0x00000105
  HelpQuit* = 0x00000002
  HelpSetcontents* = 0x00000005
  HelpSetindex* = 0x00000005
  HelpContextmenu* = 0x0000000A
  HelpFinder* = 0x0000000B
  HelpWmHelp* = 0x0000000C
  HelpTcard* = 0x00008000
  HelpTcardData* = 0x00000010
  HelpTcardOtherCaller* = 0x00000011
  # WNetAddConnectino2
  ConnectUpdateProfile* = 1
  # WNetConnectionDialog, WNetDisconnectDialog, WNetOpenEnum
  ResourcetypeDisk* = 1
  ResourcetypePrint* = 2
  ResourcetypeAny* = 0
  ResourceConnected* = 1
  ResourceGlobalnet* = 2
  ResourceRemembered* = 3
  ResourceusageConnectable* = 1
  ResourceusageContainer* = 2
  # WNetGetResourceInformation, WNetGetResourceParent
  WnBadNetname* = 0x00000043
  WnExtendedError* = 0x000004B8
  WnMoreData* = 0x000000EA
  WnNoNetwork* = 0x000004C6
  WnSuccess* = 0
  WnAccessDenied* = 0x00000005
  WnBadProvider* = 0x000004B4
  WnNotAuthenticated* = 0x000004DC
  # WNetGetUniversalName
  UniversalNameInfoLevel* = 1
  RemoteNameInfoLevel* = 2
  # GetExitCodeThread
  StillActive* = 0x00000103
  # COMMPROP structure
  SpSerialcomm* = 0x00000001
  Baud075* = 0x00000001
  Baud110* = 0x00000002
  Baud1345* = 0x00000004
  Baud150* = 0x00000008
  Baud300* = 0x00000010
  Baud600* = 0x00000020
  Baud1200* = 0x00000040
  Baud1800* = 0x00000080
  Baud2400* = 0x00000100
  Baud4800* = 0x00000200
  Baud7200* = 0x00000400
  Baud9600* = 0x00000800
  Baud14400* = 0x00001000
  Baud19200* = 0x00002000
  Baud38400* = 0x00004000
  Baud56k* = 0x00008000
  Baud57600* = 0x00040000
  Baud115200* = 0x00020000
  Baud128k* = 0x00010000
  BaudUser* = 0x10000000
  PstFax* = 0x00000021
  PstLat* = 0x00000101
  PstModem* = 0x00000006
  PstNetworkBridge* = 0x00000100
  PstParallelport* = 0x00000002
  PstRs232* = 0x00000001
  PstRs422* = 0x00000003
  PstRs423* = 0x00000004
  PstRs449* = 0x00000005
  PstScanner* = 0x00000022
  PstTcpipTelnet* = 0x00000102
  PstUnspecified* = 0
  PstX25* = 0x00000103
  Pcf16bitmode* = 0x00000200
  PcfDtrdsr* = 0x00000001
  PcfInttimeouts* = 0x00000080
  PcfParityCheck* = 0x00000008
  PcfRlsd* = 0x00000004
  PcfRtscts* = 0x00000002
  PcfSetxchar* = 0x00000020
  PcfSpecialchars* = 0x00000100
  PcfTotaltimeouts* = 0x00000040
  PcfXonxoff* = 0x00000010
  SpBaud* = 0x00000002
  SpDatabits* = 0x00000004
  SpHandshaking* = 0x00000010
  SpParity* = 0x00000001
  SpParityCheck* = 0x00000020
  SpRlsd* = 0x00000040
  SpStopbits* = 0x00000008
  Databits5* = 1
  Databits6* = 2
  Databits7* = 4
  Databits8* = 8
  Databits16* = 16
  Databits16x* = 32
  Stopbits10* = 1
  Stopbits15* = 2
  Stopbits20* = 4
  ParityNone* = 256
  ParityOdd* = 512
  ParityEven* = 1024
  ParityMark* = 2048
  ParitySpace* = 4096
  CommpropInitialized* = 0xE73CF52E
  # DCB structure
  Cbr110* = 110
  Cbr300* = 300
  Cbr600* = 600
  Cbr1200* = 1200
  Cbr2400* = 2400
  Cbr4800* = 4800
  Cbr9600* = 9600
  Cbr14400* = 14400
  Cbr19200* = 19200
  Cbr38400* = 38400
  Cbr56000* = 56000
  Cbr57600* = 57600
  Cbr115200* = 115200
  Cbr128000* = 128000
  Cbr256000* = 256000
  DtrControlDisable* = 0
  DtrControlEnable* = 1
  DtrControlHandshake* = 2
  RtsControlDisable* = 0
  RtsControlEnable* = 1
  RtsControlHandshake* = 2
  RtsControlToggle* = 3
  Evenparity* = 2
  Markparity* = 3
  Noparity* = 0
  Oddparity* = 1
  Spaceparity* = 4
  Onestopbit* = 0
  One5stopbits* = 1
  Twostopbits* = 2
  # Debugging events
  CreateProcessDebugEvent* = 3
  CreateThreadDebugEvent* = 2
  ExceptionDebugEvent* = 1
  ExitProcessDebugEvent* = 5
  ExitThreadDebugEvent* = 4
  LoadDllDebugEvent* = 6
  OutputDebugStringEvent* = 8
  UnloadDllDebugEvent* = 7
  RipEvent* = 9
  # PROCESS_HEAP_ENTRY structure
  ProcessHeapRegion* = 1
  ProcessHeapUncommittedRange* = 2
  ProcessHeapEntryBusy* = 4
  ProcessHeapEntryMoveable* = 16
  ProcessHeapEntryDdeshare* = 32
  # Win32s
  HinstanceError* = 32
  # WIN32_STREAM_ID structure
  BackupData* = 1
  BackupEaData* = 2
  BackupSecurityData* = 3
  BackupAlternateData* = 4
  BackupLink* = 5
  StreamModifiedWhenRead* = 1
  StreamContainsSecurity* = 2
  # STARTUPINFO structure
  StartfUseshowwindow* = 1
  StartfUseposition* = 4
  StartfUsesize* = 2
  StartfUsecountchars* = 8
  StartfUsefillattribute* = 16
  StartfRunfullscreen* = 32
  StartfForceonfeedback* = 64
  StartfForceofffeedback* = 128
  StartfUsestdhandles* = 256
  StartfUsehotkey* = 512
  # OSVERSIONINFO structure
  VERPLATFORMWIN32s* = 0
  VerPlatformWin32Windows* = 1
  VerPlatformWin32Nt* = 2
  # More versions
  VerServerNt* = 0x80000000
  VerWorkstationNt* = 0x40000000
  VerSuiteSmallbusiness* = 0x00000001
  VerSuiteEnterprise* = 0x00000002
  VerSuiteBackoffice* = 0x00000004
  VerSuiteCommunications* = 0x00000008
  VerSuiteTerminal* = 0x00000010
  VerSuiteSmallbusinessRestricted* = 0x00000020
  VerSuiteEmbeddednt* = 0x00000040
  VerSuiteDatacenter* = 0x00000080
  VerSuiteSingleuserts* = 0x00000100
  VerSuitePersonal* = 0x00000200
  VerSuiteBlade* = 0x00000400
  VerSuiteEmbeddedRestricted* = 0x00000800
  # PROPSHEETPAGE structure
  Maxproppages* = 100
  PspDefault* = 0
  PspDlgindirect* = 1
  PspHashelp* = 32
  PspUsecallback* = 128
  PspUsehicon* = 2
  PspUseiconid* = 4
  PspUserefparent* = 64
  PspUsetitle* = 8
  PspRtlreading* = 16
  # PROPSHEETHEADER structure
  PshDefault* = 0
  PshHashelp* = 512
  PshModeless* = 1024
  PshNoapplynow* = 128
  PshPropsheetpage* = 8
  PshProptitle* = 1
  PshUsecallback* = 256
  PshUsehicon* = 2
  PshUseiconid* = 4
  PshUsepstartpage* = 64
  PshWizard* = 32
  PshRtlreading* = 2048
  PscbInitialized* = 1
  PscbPrecreate* = 2
  # PSN_APPLY message
  PsnretNoerror* = 0
  PsnretInvalidNochangepage* = 2
  # Property Sheet
  PsbtnApplynow* = 4
  PsbtnBack* = 0
  PsbtnCancel* = 5
  PsbtnFinish* = 2
  PsbtnHelp* = 6
  PsbtnNext* = 1
  PsbtnOk* = 3
  PswizbBack* = 1
  PswizbNext* = 2
  PswizbFinish* = 4
  PswizbDisabledfinish* = 8
  IdPsrebootsystem* = 3
  IdPsrestartwindows* = 2
  WizBodycx* = 184
  WizBodyx* = 92
  WizCxbmp* = 80
  WizCxdlg* = 276
  WizCydlg* = 140

  # VX_FIXEDFILEINFO structure
  VsFileInfo* = cast[MAKEINTRESOURCE](16)

const
  VsVersionInfo* = 1
  VsFfDebug* = 0x00000001
  VsFfInfoinferred* = 0x00000010
  VsFfPatched* = 0x00000004
  VsFfPrerelease* = 0x00000002
  VsFfPrivatebuild* = 0x00000008
  VsFfSpecialbuild* = 0x00000020
  VosUnknown* = 0
  VosDos* = 0x00010000
  VosOs216* = 0x00020000
  VosOs232* = 0x00030000
  VosNt* = 0x00040000
  VosDosWindows16* = 0x00010001
  VosDosWindows32* = 0x00010004
  VosOs216Pm16* = 0x00020002
  VosOs232Pm32* = 0x00030003
  VosNtWindows32* = 0x00040004
  VftUnknown* = 0
  VftApp* = 0x00000001
  VftDll* = 0x00000002
  VftDrv* = 0x00000003
  VftFont* = 0x00000004
  VftVxd* = 0x00000005
  VftStaticLib* = 0x00000007
  Vft2Unknown* = 0
  Vft2DrvPrinter* = 0x00000001
  Vft2DrvKeyboard* = 0x00000002
  Vft2DrvLanguage* = 0x00000003
  Vft2DrvDisplay* = 0x00000004
  Vft2DrvMouse* = 0x00000005
  Vft2DrvNetwork* = 0x00000006
  Vft2DrvSystem* = 0x00000007
  Vft2DrvInstallable* = 0x00000008
  Vft2DrvSound* = 0x00000009
  Vft2FontRaster* = 0x00000001
  Vft2FontVector* = 0x00000002
  Vft2FontTruetype* = 0x00000003
  # PANOSE structure
  PanAny* = 0
  PanNoFit* = 1
  PanFamilyTextDisplay* = 2
  PanFamilyScript* = 3
  PanFamilyDecorative* = 4
  PanFamilyPictorial* = 5
  PanSerifCove* = 2
  PanSerifObtuseCove* = 3
  PanSerifSquareCove* = 4
  PanSerifObtuseSquareCove* = 5
  PanSerifSquare* = 6
  PanSerifThin* = 7
  PanSerifBone* = 8
  PanSerifExaggerated* = 9
  PanSerifTriangle* = 10
  PanSerifNormalSans* = 11
  PanSerifObtuseSans* = 12
  PanSerifPerpSans* = 13
  PanSerifFlared* = 14
  PanSerifRounded* = 15
  PanWeightVeryLight* = 2
  PanWeightLight* = 3
  PanWeightThin* = 4
  PanWeightBook* = 5
  PanWeightMedium* = 6
  PanWeightDemi* = 7
  PanWeightBold* = 8
  PanWeightHeavy* = 9
  PanWeightBlack* = 10
  PanWeightNord* = 11
  PanPropOldStyle* = 2
  PanPropModern* = 3
  PanPropEvenWidth* = 4
  PanPropExpanded* = 5
  PanPropCondensed* = 6
  PanPropVeryExpanded* = 7
  PanPropVeryCondensed* = 8
  PanPropMonospaced* = 9
  PanContrastNone* = 2
  PanContrastVeryLow* = 3
  PanContrastLow* = 4
  PanContrastMediumLow* = 5
  PanContrastMedium* = 6
  PanContrastMediumHigh* = 7
  PanContrastHigh* = 8
  PanContrastVeryHigh* = 9
  PanStrokeGradualDiag* = 2
  PanStrokeGradualTran* = 3
  PanStrokeGradualVert* = 4
  PanStrokeGradualHorz* = 5
  PanStrokeRapidVert* = 6
  PanStrokeRapidHorz* = 7
  PanStrokeInstantVert* = 8
  PanStraightArmsHorz* = 2
  PanStraightArmsWedge* = 3
  PanStraightArmsVert* = 4
  PanStraightArmsSingleSerif* = 5
  PanStraightArmsDoubleSerif* = 6
  PanBentArmsHorz* = 7
  PanBentArmsVert* = 9
  PanBentArmsWedge* = 8
  PanBentArmsSingleSerif* = 10
  PanBentArmsDoubleSerif* = 11
  PanLettNormalContact* = 2
  PanLettNormalWeighted* = 3
  PanLettNormalBoxed* = 4
  PanLettNormalFlattened* = 5
  PanLettNormalRounded* = 6
  PanLettNormalOffCenter* = 7
  PanLettNormalSquare* = 8
  PanLettObliqueContact* = 9
  PanLettObliqueWeighted* = 10
  PanLettObliqueBoxed* = 11
  PanLettObliqueFlattened* = 12
  PanLettObliqueRounded* = 13
  PanLettObliqueOffCenter* = 14
  PanLettObliqueSquare* = 15
  PanMidlineStandardTrimmed* = 2
  PanMidlineStandardPointed* = 3
  PanMidlineStandardSerifed* = 4
  PanMidlineHighTrimmed* = 5
  PanMidlineHighPointed* = 6
  PanMidlineHighSerifed* = 7
  PanMidlineConstantTrimmed* = 8
  PanMidlineConstantPointed* = 9
  PanMidlineConstantSerifed* = 10
  PanMidlineLowTrimmed* = 11
  PanMidlineLowPointed* = 12
  PanMidlineLowSerifed* = 13
  PanXheightConstantSmall* = 2
  PanXheightConstantStd* = 3
  PanXheightConstantLarge* = 4
  PanXheightDuckingSmall* = 5
  PanXheightDuckingStd* = 6
  PanXheightDuckingLarge* = 7
  # PALETTENTRY structure
  PcExplicit* = 2
  PcNocollapse* = 4
  PcReserved* = 1
  # LOGBRUSH structure
  BsDibpattern* = 5
  BsDibpattern8x8* = 8
  BsDibpatternpt* = 6
  BsHatched* = 2
  BsHollow* = 1
  BsNull* = 1
  BsPattern* = 3
  BsPattern8x8* = 7
  BsSolid* = 0
  # DEVMODE structure, field selection bits
  DmOrientation* = 0x00000001
  DmPapersize* = 0x00000002
  DmPaperlength* = 0x00000004
  DmPaperwidth* = 0x00000008
  DmScale* = 0x00000010
  DmPosition* = 0x00000020
  DmNup* = 0x00000040
  DmDisplayorientation* = 0x00000080
  DmCopies* = 0x00000100
  DmDefaultsource* = 0x00000200
  DmPrintquality* = 0x00000400
  DmColor* = 0x00000800
  DmDuplex* = 0x00001000
  DmYresolution* = 0x00002000
  DmTtoption* = 0x00004000
  DmCollate* = 0x00008000
  DmFormname* = 0x00010000
  DmLogpixels* = 0x00020000
  DmBitsperpel* = 0x00040000
  DmPelswidth* = 0x00080000
  DmPelsheight* = 0x00100000
  DmDisplayflags* = 0x00200000
  DmDisplayfrequency* = 0x00400000
  DmIcmmethod* = 0x00800000
  DmIcmintent* = 0x01000000
  DmMediatype* = 0x02000000
  DmDithertype* = 0x04000000
  DmPanningwidth* = 0x08000000
  DmPanningheight* = 0x10000000
  DmDisplayfixedoutput* = 0x20000000
  # orientation selections
  DmorientLandscape* = 2
  DmorientPortrait* = 1
  # paper selections
  DmpaperLetter* = 1
  DmpaperLegal* = 5
  DmpaperA4* = 9
  DmpaperCsheet* = 24
  DmpaperDsheet* = 25
  DmpaperEsheet* = 26
  DmpaperLettersmall* = 2
  DmpaperTabloid* = 3
  DmpaperLedger* = 4
  DmpaperStatement* = 6
  DmpaperExecutive* = 7
  DmpaperA3* = 8
  DmpaperA4small* = 10
  DmpaperA5* = 11
  DmpaperB4* = 12
  DmpaperB5* = 13
  DmpaperFolio* = 14
  DmpaperQuarto* = 15
  Dmpaper10x14* = 16
  Dmpaper11x17* = 17
  DmpaperNote* = 18
  DmpaperEnv9* = 19
  DmpaperEnv10* = 20
  DmpaperEnv11* = 21
  DmpaperEnv12* = 22
  DmpaperEnv14* = 23
  DmpaperEnvDl* = 27
  DmpaperEnvC5* = 28
  DmpaperEnvC3* = 29
  DmpaperEnvC4* = 30
  DmpaperEnvC6* = 31
  DmpaperEnvC65* = 32
  DmpaperEnvB4* = 33
  DmpaperEnvB5* = 34
  DmpaperEnvB6* = 35
  DmpaperEnvItaly* = 36
  DmpaperEnvMonarch* = 37
  DmpaperEnvPersonal* = 38
  DmpaperFanfoldUs* = 39
  DmpaperFanfoldStdGerman* = 40
  DmpaperFanfoldLglGerman* = 41
  DmpaperIsoB4* = 42
  DmpaperJapanesePostcard* = 43
  Dmpaper9x11* = 44
  Dmpaper10x11* = 45
  Dmpaper15x11* = 46
  DmpaperEnvInvite* = 47
  DmpaperReserved48* = 48
  DmpaperReserved49* = 49
  DmpaperLetterExtra* = 50
  DmpaperLegalExtra* = 51
  DmpaperTabloidExtra* = 52
  DmpaperA4Extra* = 53
  DmpaperLetterTransverse* = 54
  DmpaperA4Transverse* = 55
  DmpaperLetterExtraTransverse* = 56
  DmpaperAPlus* = 57
  DmpaperBPlus* = 58
  DmpaperLetterPlus* = 59
  DmpaperA4Plus* = 60
  DmpaperA5Transverse* = 61
  DmpaperB5Transverse* = 62
  DmpaperA3Extra* = 63
  DmpaperA5Extra* = 64
  DmpaperB5Extra* = 65
  DmpaperA2* = 66
  DmpaperA3Transverse* = 67
  DmpaperA3ExtraTransverse* = 68
  DmpaperDblJapanesePostcard* = 69
  DmpaperA6* = 70
  DmpaperJenvKaku2* = 71
  DmpaperJenvKaku3* = 72
  DmpaperJenvChou3* = 73
  DmpaperJenvChou4* = 74
  DmpaperLetterRotated* = 75
  DmpaperA3Rotated* = 76
  DmpaperA4Rotated* = 77
  DmpaperA5Rotated* = 78
  DmpaperB4JisRotated* = 79
  DmpaperB5JisRotated* = 80
  DmpaperJapanesePostcardRotated* = 81
  DmpaperDblJapanesePostcardRotated* = 82
  DmpaperA6Rotated* = 83
  DmpaperJenvKaku2Rotated* = 84
  DmpaperJenvKaku3Rotated* = 85
  DmpaperJenvChou3Rotated* = 86
  DmpaperJenvChou4Rotated* = 87
  DmpaperB6Jis* = 88
  DmpaperB6JisRotated* = 89
  Dmpaper12x11* = 90
  DmpaperJenvYou4* = 91
  DmpaperJenvYou4Rotated* = 92
  DmpaperP16k* = 93
  DmpaperP32k* = 94
  DmpaperP32kbig* = 95
  DmpaperPenv1* = 96
  DmpaperPenv2* = 97
  DmpaperPenv3* = 98
  DmpaperPenv4* = 99
  DmpaperPenv5* = 100
  DmpaperPenv6* = 101
  DmpaperPenv7* = 102
  DmpaperPenv8* = 103
  DmpaperPenv9* = 104
  DmpaperPenv10* = 105
  DmpaperP16kRotated* = 106
  DmpaperP32kRotated* = 107
  DmpaperP32kbigRotated* = 108
  DmpaperPenv1Rotated* = 109
  DmpaperPenv2Rotated* = 110
  DmpaperPenv3Rotated* = 111
  DmpaperPenv4Rotated* = 112
  DmpaperPenv5Rotated* = 113
  DmpaperPenv6Rotated* = 114
  DmpaperPenv7Rotated* = 115
  DmpaperPenv8Rotated* = 116
  DmpaperPenv9Rotated* = 117
  DmpaperPenv10Rotated* = 118
  DmpaperUser* = 256
  # bin selections
  DmbinUpper* = 1
  DmbinOnlyone* = 1
  DmbinLower* = 2
  DmbinMiddle* = 3
  DmbinManual* = 4
  DmbinEnvelope* = 5
  DmbinEnvmanual* = 6
  DmbinAuto* = 7
  DmbinTractor* = 8
  DmbinSmallfmt* = 9
  DmbinLargefmt* = 10
  DmbinLargecapacity* = 11
  DmbinCassette* = 14
  DmbinFormsource* = 15
  DmbinUser* = 256
  # print qualities
  DmresDraft* = -1
  DmresLow* = -2
  DmresMedium* = -3
  DmresHigh* = -4
  # color enable/disable for color printers
  DmcolorMonochrome* = 1
  DmcolorColor* = 2
  # duplex enable
  DmdupSimplex* = 1
  DmdupVertical* = 2
  DmdupHorizontal* = 3
  # TrueType options
  DmttBitmap* = 1
  DmttDownload* = 2
  DmttSubdev* = 3
  # Collation selections
  DmcollateTrue* = 1
  DmcollateFalse* = 0
  # DEVMODE dmDisplayOrientation specifiations
  DmdoDefault* = 0
  Dmdo90* = 1
  Dmdo180* = 2
  Dmdo270* = 3
  # DEVMODE dmDisplayFixedOutput specifiations
  DmdfoDefault* = 0
  DmdfoStretch* = 1
  DmdfoCenter* = 2
  # Deprecated
  #DM_GRAYSCALE* = 1
  #DM_INTERLACED* = 2
  DmdisplayflagsTextmode* = 0x00000004
  # dmNup , multiple logical page per physical page options
  DmnupSystem* = 1
  DmnupOneup* = 2
  # ICM methods
  DmicmmethodNone* = 1
  DmicmmethodSystem* = 2
  DmicmmethodDriver* = 3
  DmicmmethodDevice* = 4
  DmicmmethodUser* = 256
  # ICM Intents
  DmicmSaturate* = 1
  DmicmContrast* = 2
  DmicmColormetric* = 3
  DmicmUser* = 256
  # Media types
  DmmediaStandard* = 1
  DmmediaTransparency* = 2
  DmmediaGlossy* = 3
  DmmediaUser* = 256
  # Dither types
  DmditherNone* = 1
  DmditherCoarse* = 2
  DmditherFine* = 3
  DmditherLineart* = 4
  DmditherGrayscale* = 10
  DmditherUser* = 256
  # RGNDATAHEADER structure
  RdhRectangles* = 1
  # TTPOLYGONHEADER structure
  TtPolygonType* = 24
  # TTPOLYCURVE structure
  TtPrimLine* = 1
  TtPrimQspline* = 2
  # GCP_RESULTS structure
  GcpclassArabic* = 2
  GcpclassHebrew* = 2
  GcpclassLatin* = 1
  GcpclassLatinnumber* = 5
  GcpclassLocalnumber* = 4
  GcpclassLatinnumericseparator* = 7
  GcpclassLatinnumericterminator* = 6
  GcpclassNeutral* = 3
  GcpclassNumericseparator* = 8
  GcpclassPreboundltr* = 128
  GcpclassPreboundrtl* = 64
  GcpclassPostboundltr* = 32
  GcpclassPostboundrtl* = 16
  GcpglyphLinkbefore* = 32768
  GcpglyphLinkafter* = 16384
  # RASTERIZER_STATUS structure
  TtAvailable* = 1
  TtEnabled* = 2
  # COLORADJUSTMENT structure
  CaNegative* = 1
  CaLogFilter* = 2
  IlluminantDeviceDefault* = 0
  IlluminantA* = 1
  IlluminantB* = 2
  IlluminantC* = 3
  IlluminantD50* = 4
  IlluminantD55* = 5
  IlluminantD65* = 6
  IlluminantD75* = 7
  IlluminantF2* = 8
  IlluminantTungsten* = 1
  IlluminantDaylight* = 3
  IlluminantFluorescent* = 8
  IlluminantNtsc* = 3
  # DOCINFO structure
  DiAppbanding* = 1
  # EMRMETAHEADER structure
  EmrHeader* = 1
  EnhmetaSignature* = 1179469088
  # RTF event masks
  EnmChange* = 1
  EnmCorrecttext* = 4194304
  EnmDropfiles* = 1048576
  EnmKeyevents* = 65536
  EnmMouseevents* = 131072
  EnmProtected* = 2097152
  EnmRequestresize* = 262144
  EnmScroll* = 4
  EnmSelchange* = 524288
  EnmUpdate* = 2
  EnmNone* = 0
  # RTF styles
  EsDisablenoscroll* = 8192
  EsExNocalloleinit* = 16777216
  EsNoime* = 524288
  EsSavesel* = 32768
  EsSelfime* = 262144
  EsSunken* = 16384
  EsVertical* = 4194304
  EsSelectionbar* = 16777216
  # EM_SETOPTIONS message
  EcoopSet* = 1
  EcoopOr* = 2
  EcoopAnd* = 3
  EcoopXor* = 4
  EcoAutowordselection* = 1
  EcoAutovscroll* = 64
  EcoAutohscroll* = 128
  EcoNohidesel* = 256
  EcoReadonly* = 2048
  EcoWantreturn* = 4096
  EcoSavesel* = 32768
  EcoSelectionbar* = 16777216
  EcoVertical* = 4194304
  # EM_SETCHARFORMAT message
  ScfWord* = 2
  ScfSelection* = 1
  # EM_STREAMOUT message
  SfText* = 1
  SfRtf* = 2
  SfRtfnoobjs* = 3
  SfTextized* = 4
  SffSelection* = 32768
  SffPlainrtf* = 16384
  # EM_FINDWORDBREAK message
  WbClassify* = 3
  #WB_ISDELIMITER = 2;
  #     WB_LEFT = 0; already above
  WbLeftbreak* = 6
  WbPrevbreak* = 6
  WbMovewordleft* = 4
  WbMovewordprev* = 4
  WbMovewordright* = 5
  WbMovewordnext* = 5
  #WB_RIGHT = 1;already above
  WbRightbreak* = 7
  WbNextbreak* = 7
  # EM_GETPUNCTUATION message
  PcLeading* = 2
  PcFollowing* = 1
  PcDelimiter* = 4
  PcOverflow* = 3
  # EM_SETWORDWRAPMODE message
  WbfWordwrap* = 16
  WbfWordbreak* = 32
  WbfOverflow* = 64
  WbfLevel1* = 128
  WbfLevel2* = 256
  WbfCustom* = 512
  WbfBreakafter* = 64
  WbfBreakline* = 32
  WbfIswhite* = 16
  # CHARFORMAT structure
  CfmBold* = 1
  CfmColor* = 1073741824
  CfmFace* = 536870912
  CfmItalic* = 2
  CfmOffset* = 268435456
  CfmProtected* = 16
  CfmSize* = 0x80000000
  CfmStrikeout* = 8
  CfmUnderline* = 4
  CfeAutocolor* = 1073741824
  CfeBold* = 1
  CfeItalic* = 2
  CfeStrikeout* = 8
  CfeUnderline* = 4
  CfeProtected* = 16
  # PARAFORMAT structure
  PfmAlignment* = 8
  PfmNumbering* = 32
  PfmOffset* = 4
  PfmOffsetindent* = 0x80000000
  PfmRightindent* = 2
  PfmStartindent* = 1
  PfmTabstops* = 16
  PfnBullet* = 1
  PfaLeft* = 1
  PfaRight* = 2
  PfaCenter* = 3
  # SELCHANGE structure
  SelEmpty* = 0
  SelText* = 1
  SelObject* = 2
  SelMultichar* = 4
  SelMultiobject* = 8
  # RTF clipboard formats
  CfRtf* = "Rich Text Format"
  CfRetextobj* = "RichEdit Text and Objects"
  # DRAWITEMSTRUCT structure
  OdtButton* = 4
  OdtCombobox* = 3
  OdtListbox* = 2
  OdtListview* = 102
  OdtMenu* = 1
  OdtStatic* = 5
  OdtTab* = 101
  OdtHeader* = 100
  OdaDrawentire* = 1
  OdaFocus* = 4
  OdaSelect* = 2
  OdsSelected* = 1
  OdsGrayed* = 2
  OdsDisabled* = 4
  OdsChecked* = 8
  OdsFocus* = 16
  OdsDefault* = 32
  OdsHotlight* = 0x00000040
  OdsInactive* = 0x00000080
  OdsNoaccel* = 0x00000100
  OdsNofocusrect* = 0x00000200
  OdsComboboxedit* = 0x00001000
  # Common control styles
  CcsAdjustable* = 0x00000020
  CcsBottom* = 0x00000003
  CcsNodivider* = 0x00000040
  CcsNomovey* = 0x00000002
  CcsNoparentalign* = 0x00000008
  CcsNoresize* = 0x00000004
  CcsTop* = 0x00000001

  # Common control window classes
  AnimateClassw* = "SysAnimate32"
  HotkeyClassw* = "msctls_hotkey32"
  ProgressClassw* = "msctls_progress32"
  Statusclassnamew* = "msctls_statusbar32"
  Toolbarclassnamew* = "ToolbarWindow32"
  TooltipsClassw* = "tooltips_class32"
  TrackbarClassw* = "msctls_trackbar32"
  UpdownClassw* = "msctls_updown32"
  WcHeaderw* = "SysHeader32"
  WcListvieww* = "SysListView32"
  WcTabcontrolw* = "SysTabControl32"
  WcTreevieww* = "SysTreeView32"

  AnimateClassa* = "SysAnimate32"
  HotkeyClassa* = "msctls_hotkey32"
  ProgressClassa* = "msctls_progress32"
  Statusclassnamea* = "msctls_statusbar32"
  Toolbarclassnamea* = "ToolbarWindow32"
  TooltipsClassa* = "tooltips_class32"
  TrackbarClassa* = "msctls_trackbar32"
  UpdownClassa* = "msctls_updown32"
  WcHeadera* = "SysHeader32"
  WcListviewa* = "SysListView32"
  WcTabcontrola* = "SysTabControl32"
  WcTreeviewa* = "SysTreeView32"

when defined(winUnicode):
  const
    ANIMATE_CLASS* = ANIMATE_CLASSW
    HOTKEY_CLASS* = HOTKEY_CLASSW
    PROGRESS_CLASS* = PROGRESS_CLASSW
    STATUSCLASSNAME* = STATUSCLASSNAMEW
    TOOLBARCLASSNAME* = TOOLBARCLASSNAMEW
    TOOLTIPS_CLASS* = TOOLTIPS_CLASSW
    TRACKBAR_CLASS* = TRACKBAR_CLASSW
    UPDOWN_CLASS* = UPDOWN_CLASSW
    WC_HEADER* = WC_HEADERW
    WC_LISTVIEW* = WC_LISTVIEWW
    WC_TABCONTROL* = WC_TABCONTROLW
    WC_TREEVIEW* = WC_TREEVIEWW
else:
  const
    AnimateClass* = ANIMATE_CLASSA
    HotkeyClass* = HOTKEY_CLASSA
    ProgressClass* = PROGRESS_CLASSA
    Statusclassname* = STATUSCLASSNAMEA
    Toolbarclassname* = TOOLBARCLASSNAMEA
    TooltipsClass* = TOOLTIPS_CLASSA
    TrackbarClass* = TRACKBAR_CLASSA
    UpdownClass* = UPDOWN_CLASSA
    WcHeader* = WC_HEADERA
    WcListview* = WC_LISTVIEWA
    WcTabcontrol* = WC_TABCONTROLA
    WcTreeview* = WC_TREEVIEWA
# UNICODE

const
  # Header control styles
  HdsButtons* = 2
  HdsHidden* = 8
  HdsHorz* = 0
  # HD_ITEM structure
  HdiBitmap* = 16
  HdiFormat* = 4
  HdiHeight* = 1
  HdiLparam* = 8
  HdiText* = 2
  HdiWidth* = 1
  HdfCenter* = 2
  HdfLeft* = 0
  HdfRight* = 1
  HdfRtlreading* = 4
  HdfBitmap* = 8192
  HdfOwnerdraw* = 32768
  HdfString* = 16384
  HdfJustifymask* = 3
  # HD_HITTESTINFO structure
  HhtNowhere* = 1
  HhtOndivider* = 4
  HhtOndivopen* = 8
  HhtOnheader* = 2
  HhtToleft* = 2048
  HhtToright* = 1024
  # TBADDBITMAP structure
  HinstCommctrl* = HINST(-1)

const
  IdbStdLargeColor* = 1
  IdbStdSmallColor* = 0
  IdbViewLargeColor* = 5
  IdbViewSmallColor* = 4
  StdCopy* = 1
  StdCut* = 0
  StdDelete* = 5
  StdFilenew* = 6
  StdFileopen* = 7
  StdFilesave* = 8
  StdFind* = 12
  StdHelp* = 11
  StdPaste* = 2
  StdPrint* = 14
  StdPrintpre* = 9
  StdProperties* = 10
  StdRedow* = 4
  StdReplace* = 13
  StdUndo* = 3
  ViewLargeicons* = 0
  ViewSmallicons* = 1
  ViewList* = 2
  ViewDetails* = 3
  ViewSortname* = 4
  ViewSortsize* = 5
  ViewSortdate* = 6
  ViewSorttype* = 7
  # Toolbar styles
  TbstyleAltdrag* = 1024
  TbstyleTooltips* = 256
  TbstyleWrapable* = 512
  TbstyleButton* = 0
  TbstyleCheck* = 2
  TbstyleCheckgroup* = 6
  TbstyleGroup* = 4
  TbstyleSep* = 1
  # Toolbar states
  TbstateChecked* = 1
  TbstateEnabled* = 4
  TbstateHidden* = 8
  TbstateIndeterminate* = 16
  TbstatePressed* = 2
  TbstateWrap* = 32
  # Tooltip styles
  TtsAlwaystip* = 1
  TtsNoprefix* = 2
  # TOOLINFO structure
  TtfIdishwnd* = 1
  TtfCentertip* = 2
  TtfRtlreading* = 4
  TtfSubclass* = 16
  # TTM_SETDELAYTIME message
  TtdtAutomatic* = 0
  TtdtAutopop* = 2
  TtdtInitial* = 3
  TtdtReshow* = 1
  # Status window
  SbarsSizegrip* = 256
  #SBARS_SIZEGRIP = 256;already above
  # DL_DRAGGING message
  DlMovecursor* = 3
  DlCopycursor* = 2
  DlStopcursor* = 1
  # Up-down control styles
  UdsAlignleft* = 8
  UdsAlignright* = 4
  UdsArrowkeys* = 32
  UdsAutobuddy* = 16
  UdsHorz* = 64
  UdsNothousands* = 128
  UdsSetbuddyint* = 2
  UdsWrap* = 1
  # UDM_SETRANGE message
  UdMaxval* = 32767
  UdMinval* = -32767
  # HKM_GETHOTKEY message
  HotkeyfAlt* = 4
  HotkeyfControl* = 2
  HotkeyfExt* = 8
  HotkeyfShift* = 1
  # HKM_SETRULES message
  HkcombA* = 8
  HkcombC* = 4
  HkcombCa* = 64
  HkcombNone* = 1
  HkcombS* = 2
  HkcombSa* = 32
  HkcombSc* = 16
  HkcombSca* = 128
  # Trackbar styles
  TbsHorz* = 0
  TbsVert* = 2
  TbsAutoticks* = 1
  TbsNoticks* = 16
  TbsTop* = 4
  TbsBottom* = 0
  TbsLeft* = 4
  TbsRight* = 0
  TbsBoth* = 8
  TbsEnableselrange* = 32
  TbsFixedlength* = 64
  TbsNothumb* = 128
  TbBottom* = 7
  TbEndtrack* = 8
  TbLinedown* = 1
  TbLineup* = 0
  TbPagedown* = 3
  TbPageup* = 2
  TbThumbposition* = 4
  TbThumbtrack* = 5
  TbTop* = 6
  # List view styles
  LvsAlignleft* = 2048
  LvsAligntop* = 0
  LvsAutoarrange* = 256
  LvsEditlabels* = 512
  LvsIcon* = 0
  LvsList* = 3
  LvsNocolumnheader* = 16384
  LvsNolabelwrap* = 128
  LvsNoscroll* = 8192
  LvsNosortheader* = 32768
  LvsOwnerdrawfixed* = 1024
  LvsReport* = 1
  LvsShareimagelists* = 64
  LvsShowselalways* = 8
  LvsSinglesel* = 4
  LvsSmallicon* = 2
  LvsSortascending* = 16
  LvsSortdescending* = 32
  LvsTypestylemask* = 64512
  LvsilNormal* = 0
  LvsilSmall* = 1
  LvsilState* = 2
  LvisCut* = 4
  LvisDrophilited* = 8
  LvisFocused* = 1
  LvisSelected* = 2
  LvisOverlaymask* = 3840
  LvisStateimagemask* = 61440

  LpstrTextcallbackw* = cast[LPWSTR](-1)
  LpstrTextcallbacka* = cast[LPSTR](-1)
when defined(winUnicode):
  const LPSTR_TEXTCALLBACK*  = cast[LPWSTR](-1)
else:
  const LpstrTextcallback*  = cast[LPSTR](-1)

const
  LvifText* = 1
  LvifImage* = 2
  LvifParam* = 4
  LvifState* = 8
  LvifDiSetitem* = 4096
  # LVM_GETNEXTITEM structure
  LvniAbove* = 256
  LvniAll* = 0
  LvniBelow* = 512
  LvniToleft* = 1024
  LvniToright* = 2048
  LvniCut* = 4
  LvniDrophilited* = 8
  LvniFocused* = 1
  LvniSelected* = 2
  # LV_FINDINFO structure
  LvfiParam* = 1
  LvfiPartial* = 8
  LvfiString* = 2
  LvfiWrap* = 32
  LvfiNearestxy* = 64
  # LV_HITTESTINFO structure
  LvhtAbove* = 8
  LvhtBelow* = 16
  LvhtNowhere* = 1
  LvhtOnitemicon* = 2
  LvhtOnitemlabel* = 4
  LvhtOnitemstateicon* = 8
  LvhtToleft* = 64
  LvhtToright* = 32
  # LV_COLUMN structure
  LvcfFmt* = 1
  LvcfSubitem* = 8
  LvcfText* = 4
  LvcfWidth* = 2
  LvcfmtCenter* = 2
  LvcfmtLeft* = 0
  LvcfmtRight* = 1
  # ListView_GetItemRect
  LvirBounds* = 0
  LvirIcon* = 1
  LvirLabel* = 2
  LvirSelectbounds* = 3
  # LVM_ARRANGE message
  LvaAlignleft* = 1
  LvaAligntop* = 2
  LvaDefault* = 0
  LvaSnaptogrid* = 5
  # LVM_SETCOLUMNWIDTH message
  LvscwAutosize* = -1
  LvscwAutosizeUseheader* = -2
  # Tree View styles
  TvsDisabledragdrop* = 16
  TvsEditlabels* = 8
  TvsHasbuttons* = 1
  TvsHaslines* = 2
  TvsLinesatroot* = 4
  TvsShowselalways* = 32
  # Tree View states
  TvisBold* = 16
  TvisCut* = 4
  TvisDrophilited* = 8
  TvisExpanded* = 32
  TvisExpandedonce* = 64
  TvisFocused* = 1
  TvisOverlaymask* = 3840
  TvisSelected* = 2
  TvisStateimagemask* = 61440
  TvisUsermask* = 61440
  # TV_ITEM structure
  TvifChildren* = 64
  TvifHandle* = 16
  TvifImage* = 2
  TvifParam* = 4
  TvifSelectedimage* = 32
  TvifState* = 8
  TvifText* = 1
  IChildrencallback* = -1
  IImagecallback* = -1
  # TV_INSERTSTRUCT structure

type
  TTREEITEM* {.final, pure.} = object
  Htreeitem* = ptr TTREEITEM
  Ptreeitem* = ptr TTREEITEM

const
  TviRoot* =  cast[HTREEITEM](0xFFFF0000)
  TviFirst* = cast[HTREEITEM](0xFFFF0001)
  TviLast* =  cast[HTREEITEM](0xFFFF0002)
  TviSort* =  cast[HTREEITEM](0xFFFF0003)

const
  # TV_HITTESTINFO structure
  TvhtAbove* = 256
  TvhtBelow* = 512
  TvhtNowhere* = 1
  TvhtOnitem* = 70
  TvhtOnitembutton* = 16
  TvhtOnitemicon* = 2
  TvhtOnitemindent* = 8
  TvhtOnitemlabel* = 4
  TvhtOnitemright* = 32
  TvhtOnitemstateicon* = 64
  TvhtToleft* = 2048
  TvhtToright* = 1024
  # TVM_EXPAND message
  TveCollapse* = 1
  TveCollapsereset* = 32768
  TveExpand* = 2
  TveToggle* = 3
  # TVM_GETIMAGELIST message
  TvsilNormal* = 0
  TvsilState* = 2
  # TVM_GETNEXTITEM message
  TvgnCaret* = 9
  TvgnChild* = 4
  TvgnDrophilite* = 8
  TvgnFirstvisible* = 5
  TvgnNext* = 1
  TvgnNextvisible* = 6
  TvgnParent* = 3
  TvgnPrevious* = 2
  TvgnPreviousvisible* = 7
  TvgnRoot* = 0
  # TVN_SELCHANGED message
  TvcBykeyboard* = 2
  TvcBymouse* = 1
  TvcUnknown* = 0
  # Tab control styles
  TcsButtons* = 256
  TcsFixedwidth* = 1024
  TcsFocusnever* = 32768
  TcsFocusonbuttondown* = 4096
  TcsForceiconleft* = 16
  TcsForcelabelleft* = 32
  TcsMultiline* = 512
  TcsOwnerdrawfixed* = 8192
  TcsRaggedright* = 2048
  TcsRightjustify* = 0
  TcsSingleline* = 0
  TcsTabs* = 0
  TcsTooltips* = 16384
  # TC_ITEM structure
  TcifText* = 1
  TcifImage* = 2
  TcifParam* = 8
  TcifRtlreading* = 4
  # TC_HITTESTINFO structure
  TchtNowhere* = 1
  TchtOnitem* = 6
  TchtOnitemicon* = 2
  TchtOnitemlabel* = 4
  # Animation control styles
  AcsAutoplay* = 4
  AcsCenter* = 1
  AcsTransparent* = 2
  # MODEMDEVCAPS structure
  DialoptionBilling* = 64
  DialoptionQuiet* = 128
  DialoptionDialtone* = 256
  MdmvolflagLow* = 1
  MdmvolflagMedium* = 2
  MdmvolflagHigh* = 4
  MdmvolLow* = 0
  MdmvolMedium* = 1
  MdmvolHigh* = 2
  MdmspkrflagOff* = 1
  MdmspkrflagDial* = 2
  MdmspkrflagOn* = 4
  MdmspkrflagCallsetup* = 8
  MdmspkrOff* = 0
  MdmspkrDial* = 1
  MdmspkrOn* = 2
  MdmspkrCallsetup* = 3
  MdmBlindDial* = 512
  MdmCcittOverride* = 64
  MdmCellular* = 8
  MdmCompression* = 1
  MdmErrorControl* = 2
  MdmFlowcontrolHard* = 16
  MdmFlowcontrolSoft* = 32
  MdmForcedEc* = 4
  MdmSpeedAdjust* = 128
  MdmToneDial* = 256
  MdmV23Override* = 1024

  # Languages
  #
  #  Language IDs.
  #
  #  The following two combinations of primary language ID and
  #  sublanguage ID have special semantics:
  #
  #    Primary Language ID   Sublanguage ID      Result
  #    -------------------   ---------------     ------------------------
  #    LANG_NEUTRAL          SUBLANG_NEUTRAL     Language neutral
  #    LANG_NEUTRAL          SUBLANG_DEFAULT     User default language
  #    LANG_NEUTRAL          SUBLANG_SYS_DEFAULT System default language
  #    LANG_INVARIANT        SUBLANG_NEUTRAL     Invariant locale
  #
  #
  #  Primary language IDs.
  #
  LangNeutral* = 0x00000000
  LangInvariant* = 0x0000007F
  LangAfrikaans* = 0x00000036
  LangAlbanian* = 0x0000001C
  LangArabic* = 0x00000001
  LangArmenian* = 0x0000002B
  LangAssamese* = 0x0000004D
  LangAzeri* = 0x0000002C
  LangBasque* = 0x0000002D
  LangBelarusian* = 0x00000023
  LangBengali* = 0x00000045
  LangBulgarian* = 0x00000002
  LangCatalan* = 0x00000003
  LangChinese* = 0x00000004
  LangCroatian* = 0x0000001A
  LangCzech* = 0x00000005
  LangDanish* = 0x00000006
  LangDivehi* = 0x00000065
  LangDutch* = 0x00000013
  LangEnglish* = 0x00000009
  LangEstonian* = 0x00000025
  LangFaeroese* = 0x00000038
  LangFarsi* = 0x00000029
  LangFinnish* = 0x0000000B
  LangFrench* = 0x0000000C
  LangGalician* = 0x00000056
  LangGeorgian* = 0x00000037
  LangGerman* = 0x00000007
  LangGreek* = 0x00000008
  LangGujarati* = 0x00000047
  LangHebrew* = 0x0000000D
  LangHindi* = 0x00000039
  LangHungarian* = 0x0000000E
  LangIcelandic* = 0x0000000F
  LangIndonesian* = 0x00000021
  LangItalian* = 0x00000010
  LangJapanese* = 0x00000011
  LangKannada* = 0x0000004B
  LangKashmiri* = 0x00000060
  LangKazak* = 0x0000003F
  LangKonkani* = 0x00000057
  LangKorean* = 0x00000012
  LangKyrgyz* = 0x00000040
  LangLatvian* = 0x00000026
  LangLithuanian* = 0x00000027
  LangMacedonian* = 0x0000002F # the Former Yugoslav Republic of Macedonia
  LangMalay* = 0x0000003E
  LangMalayalam* = 0x0000004C
  LangManipuri* = 0x00000058
  LangMarathi* = 0x0000004E
  LangMongolian* = 0x00000050
  LangNepali* = 0x00000061
  LangNorwegian* = 0x00000014
  LangOriya* = 0x00000048
  LangPolish* = 0x00000015
  LangPortuguese* = 0x00000016
  LangPunjabi* = 0x00000046
  LangRomanian* = 0x00000018
  LangRussian* = 0x00000019
  LangSanskrit* = 0x0000004F
  LangSerbian* = 0x0000001A
  LangSindhi* = 0x00000059
  LangSlovak* = 0x0000001B
  LangSlovenian* = 0x00000024
  LangSpanish* = 0x0000000A
  LangSwahili* = 0x00000041
  LangSwedish* = 0x0000001D
  LangSyriac* = 0x0000005A
  LangTamil* = 0x00000049
  LangTatar* = 0x00000044
  LangTelugu* = 0x0000004A
  LangThai* = 0x0000001E
  LangTurkish* = 0x0000001F
  LangUkrainian* = 0x00000022
  LangUrdu* = 0x00000020
  LangUzbek* = 0x00000043
  LangVietnamese* = 0x0000002A
  #
  #  Sublanguage IDs.
  #
  #  The name immediately following SUBLANG_ dictates which primary
  #  language ID that sublanguage ID can be combined with to form a
  #  valid language ID.
  #
  SublangNeutral* = 0x00000000 # language neutral
  SublangDefault* = 0x00000001 # user default
  SublangSysDefault* = 0x00000002 # system default
  SublangArabicSaudiArabia* = 0x00000001 # Arabic (Saudi Arabia)
  SublangArabicIraq* = 0x00000002 # Arabic (Iraq)
  SublangArabicEgypt* = 0x00000003 # Arabic (Egypt)
  SublangArabicLibya* = 0x00000004 # Arabic (Libya)
  SublangArabicAlgeria* = 0x00000005 # Arabic (Algeria)
  SublangArabicMorocco* = 0x00000006 # Arabic (Morocco)
  SublangArabicTunisia* = 0x00000007 # Arabic (Tunisia)
  SublangArabicOman* = 0x00000008 # Arabic (Oman)
  SublangArabicYemen* = 0x00000009 # Arabic (Yemen)
  SublangArabicSyria* = 0x0000000A # Arabic (Syria)
  SublangArabicJordan* = 0x0000000B # Arabic (Jordan)
  SublangArabicLebanon* = 0x0000000C # Arabic (Lebanon)
  SublangArabicKuwait* = 0x0000000D # Arabic (Kuwait)
  SublangArabicUae* = 0x0000000E # Arabic (U.A.E)
  SublangArabicBahrain* = 0x0000000F # Arabic (Bahrain)
  SublangArabicQatar* = 0x00000010 # Arabic (Qatar)
  SublangAzeriLatin* = 0x00000001 # Azeri (Latin)
  SublangAzeriCyrillic* = 0x00000002 # Azeri (Cyrillic)
  SublangChineseTraditional* = 0x00000001 # Chinese (Taiwan)
  SublangChineseSimplified* = 0x00000002 # Chinese (PR China)
  SublangChineseHongkong* = 0x00000003 # Chinese (Hong Kong S.A.R., P.R.C.)
  SublangChineseSingapore* = 0x00000004 # Chinese (Singapore)
  SublangChineseMacau* = 0x00000005 # Chinese (Macau S.A.R.)
  SublangDutch* = 0x00000001 # Dutch
  SublangDutchBelgian* = 0x00000002 # Dutch (Belgian)
  SublangEnglishUs* = 0x00000001 # English (USA)
  SublangEnglishUk* = 0x00000002 # English (UK)
  SublangEnglishAus* = 0x00000003 # English (Australian)
  SublangEnglishCan* = 0x00000004 # English (Canadian)
  SublangEnglishNz* = 0x00000005 # English (New Zealand)
  SublangEnglishEire* = 0x00000006 # English (Irish)
  SublangEnglishSouthAfrica* = 0x00000007 # English (South Africa)
  SublangEnglishJamaica* = 0x00000008 # English (Jamaica)
  SublangEnglishCaribbean* = 0x00000009 # English (Caribbean)
  SublangEnglishBelize* = 0x0000000A # English (Belize)
  SublangEnglishTrinidad* = 0x0000000B # English (Trinidad)
  SublangEnglishZimbabwe* = 0x0000000C # English (Zimbabwe)
  SublangEnglishPhilippines* = 0x0000000D # English (Philippines)
  SublangFrench* = 0x00000001 # French
  SublangFrenchBelgian* = 0x00000002 # French (Belgian)
  SublangFrenchCanadian* = 0x00000003 # French (Canadian)
  SublangFrenchSwiss* = 0x00000004 # French (Swiss)
  SublangFrenchLuxembourg* = 0x00000005 # French (Luxembourg)
  SublangFrenchMonaco* = 0x00000006 # French (Monaco)
  SublangGerman* = 0x00000001 # German
  SublangGermanSwiss* = 0x00000002 # German (Swiss)
  SublangGermanAustrian* = 0x00000003 # German (Austrian)
  SublangGermanLuxembourg* = 0x00000004 # German (Luxembourg)
  SublangGermanLiechtenstein* = 0x00000005 # German (Liechtenstein)
  SublangItalian* = 0x00000001 # Italian
  SublangItalianSwiss* = 0x00000002 # Italian (Swiss)
  SublangKashmiriSasia* = 0x00000002 # Kashmiri (South Asia)
  SublangKashmiriIndia* = 0x00000002 # For app compatibility only
  SublangKorean* = 0x00000001 # Korean (Extended Wansung)
  SublangLithuanian* = 0x00000001 # Lithuanian
  SublangMalayMalaysia* = 0x00000001 # Malay (Malaysia)
  SublangMalayBruneiDarussalam* = 0x00000002 # Malay (Brunei Darussalam)
  SublangNepaliIndia* = 0x00000002 # Nepali (India)
  SublangNorwegianBokmal* = 0x00000001 # Norwegian (Bokmal)
  SublangNorwegianNynorsk* = 0x00000002 # Norwegian (Nynorsk)
  SublangPortuguese* = 0x00000002 # Portuguese
  SublangPortugueseBrazilian* = 0x00000001 # Portuguese (Brazilian)
  SublangSerbianLatin* = 0x00000002 # Serbian (Latin)
  SublangSerbianCyrillic* = 0x00000003 # Serbian (Cyrillic)
  SublangSpanish* = 0x00000001 # Spanish (Castilian)
  SublangSpanishMexican* = 0x00000002 # Spanish (Mexican)
  SublangSpanishModern* = 0x00000003 # Spanish (Spain)
  SublangSpanishGuatemala* = 0x00000004 # Spanish (Guatemala)
  SublangSpanishCostaRica* = 0x00000005 # Spanish (Costa Rica)
  SublangSpanishPanama* = 0x00000006 # Spanish (Panama)
  SublangSpanishDominicanRepublic* = 0x00000007 # Spanish (Dominican Republic)
  SublangSpanishVenezuela* = 0x00000008 # Spanish (Venezuela)
  SublangSpanishColombia* = 0x00000009 # Spanish (Colombia)
  SublangSpanishPeru* = 0x0000000A # Spanish (Peru)
  SublangSpanishArgentina* = 0x0000000B # Spanish (Argentina)
  SublangSpanishEcuador* = 0x0000000C # Spanish (Ecuador)
  SublangSpanishChile* = 0x0000000D # Spanish (Chile)
  SublangSpanishUruguay* = 0x0000000E # Spanish (Uruguay)
  SublangSpanishParaguay* = 0x0000000F # Spanish (Paraguay)
  SublangSpanishBolivia* = 0x00000010 # Spanish (Bolivia)
  SublangSpanishElSalvador* = 0x00000011 # Spanish (El Salvador)
  SublangSpanishHonduras* = 0x00000012 # Spanish (Honduras)
  SublangSpanishNicaragua* = 0x00000013 # Spanish (Nicaragua)
  SublangSpanishPuertoRico* = 0x00000014 # Spanish (Puerto Rico)
  SublangSwedish* = 0x00000001 # Swedish
  SublangSwedishFinland* = 0x00000002 # Swedish (Finland)
  SublangUrduPakistan* = 0x00000001 # Urdu (Pakistan)
  SublangUrduIndia* = 0x00000002 # Urdu (India)
  SublangUzbekLatin* = 0x00000001 # Uzbek (Latin)
  SublangUzbekCyrillic* = 0x00000002 # Uzbek (Cyrillic)
                                       #
                                       #  Sorting IDs.
                                       #
  SortDefault* = 0x00000000  # sorting default
  SortJapaneseXjis* = 0x00000000 # Japanese XJIS order
  SortJapaneseUnicode* = 0x00000001 # Japanese Unicode order
  SortChineseBig5* = 0x00000000 # Chinese BIG5 order
  SortChinesePrcp* = 0x00000000 # PRC Chinese Phonetic order
  SortChineseUnicode* = 0x00000001 # Chinese Unicode order
  SortChinesePrc* = 0x00000002 # PRC Chinese Stroke Count order
  SortChineseBopomofo* = 0x00000003 # Traditional Chinese Bopomofo order
  SortKoreanKsc* = 0x00000000 # Korean KSC order
  SortKoreanUnicode* = 0x00000001 # Korean Unicode order
  SortGermanPhoneBook* = 0x00000001 # German Phone Book order
  SortHungarianDefault* = 0x00000000 # Hungarian Default order
  SortHungarianTechnical* = 0x00000001 # Hungarian Technical order
  SortGeorgianTraditional* = 0x00000000 # Georgian Traditional order
  SortGeorgianModern* = 0x00000001 # Georgian Modern order
                                     # SYSTEM_INFO structure
  ProcessorIntel386* = 386
  ProcessorIntel486* = 486
  ProcessorIntelPentium* = 586
  ProcessorMipsR4000* = 4000
  ProcessorAlpha21064* = 21064
  # FSCTL_SET_COMPRESSION
  CompressionFormatNone* = 0
  CompressionFormatDefault* = 1
  CompressionFormatLznt1* = 2
  # TAPE_GET_DRIVE_PARAMETERS structure
  TapeDriveCompression* = 131072
  TapeDriveEcc* = 65536
  TapeDriveEraseBopOnly* = 64
  TapeDriveEraseLong* = 32
  TapeDriveEraseImmediate* = 128
  TapeDriveEraseShort* = 16
  TapeDriveFixed* = 1
  TapeDriveFixedBlock* = 1024
  TapeDriveInitiator* = 4
  TapeDrivePadding* = 262144
  TapeDriveGetAbsoluteBlk* = 1048576
  TapeDriveGetLogicalBlk* = 2097152
  TapeDriveReportSmks* = 524288
  TapeDriveSelect* = 2
  TapeDriveSetEotWzSize* = 4194304
  TapeDriveTapeCapacity* = 256
  TapeDriveTapeRemaining* = 512
  TapeDriveVariableBlock* = 2048
  TapeDriveWriteProtect* = 4096
  TapeDriveAbsBlkImmed* = -2147475456
  TapeDriveAbsoluteBlk* = -2147479552
  TapeDriveEndOfData* = -2147418112
  TapeDriveFilemarks* = -2147221504
  TapeDriveLoadUnload* = -2147483647
  TapeDriveLoadUnldImmed* = -2147483616
  TapeDriveLockUnlock* = -2147483644
  TapeDriveLockUnlkImmed* = -2147483520
  TapeDriveLogBlkImmed* = -2147450880
  TapeDriveLogicalBlk* = -2147467264
  TapeDriveRelativeBlks* = -2147352576
  TapeDriveReversePosition* = -2143289344
  TapeDriveRewindImmediate* = -2147483640
  TapeDriveSequentialFmks* = -2146959360
  TapeDriveSequentialSmks* = -2145386496
  TapeDriveSetBlockSize* = -2147483632
  TapeDriveSetCompression* = -2147483136
  TapeDriveSetEcc* = -2147483392
  TapeDriveSetPadding* = -2147482624
  TapeDriveSetReportSmks* = -2147481600
  TapeDriveSetmarks* = -2146435072
  TapeDriveSpaceImmediate* = -2139095040
  TapeDriveTension* = -2147483646
  TapeDriveTensionImmed* = -2147483584
  TapeDriveWriteFilemarks* = -2113929216
  TapeDriveWriteLongFmks* = -2013265920
  TapeDriveWriteMarkImmed* = -1879048192
  TapeDriveWriteSetmarks* = -2130706432
  TapeDriveWriteShortFmks* = -2080374784
  # Standard rights
  StandardRightsRequired* = 0x000F0000
  StandardRightsWrite* = 0x00020000
  StandardRightsRead* = 0x00020000
  StandardRightsExecute* = 0x00020000
  StandardRightsAll* = 0x001F0000
  SpecificRightsAll* = 0x0000FFFF

  FileGenericRead* = STANDARD_RIGHTS_READ or
      FILE_READ_DATA or
      FILE_READ_ATTRIBUTES or
      FILE_READ_EA or
      SYNCHRONIZE
  FileGenericWrite* = STANDARD_RIGHTS_WRITE or
      FILE_WRITE_DATA or
      FILE_WRITE_ATTRIBUTES or
      FILE_WRITE_EA or
      FILE_APPEND_DATA or
      SYNCHRONIZE
  FileGenericExecute* = STANDARD_RIGHTS_EXECUTE or
      FILE_READ_ATTRIBUTES or
      FILE_EXECUTE or
      SYNCHRONIZE
  FileAllAccess* = STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or 0x1FF

  # ACCESS_MASK
  MaximumAllowed* = 0x02000000
  GenericAll* = 0x10000000
  # SID
  SecurityNullRid* = 0
  SecurityWorldRid* = 0
  SecurityLocalRid* = 0
  SecurityCreatorOwnerRid* = 0
  SecurityCreatorGroupRid* = 0x00000001
  SecurityDialupRid* = 0x00000001
  SecurityNetworkRid* = 0x00000002
  SecurityBatchRid* = 0x00000003
  SecurityInteractiveRid* = 0x00000004
  SecurityLogonIdsRid* = 0x00000005
  SecurityLogonIdsRidCount* = 0x00000003
  SecurityServiceRid* = 0x00000006
  SecurityLocalSystemRid* = 0x00000012
  SecurityBuiltinDomainRid* = 0x00000020
  DomainUserRidAdmin* = 0x000001F4
  DomainUserRidGuest* = 0x000001F5
  DomainGroupRidAdmins* = 0x00000200
  DomainGroupRidUsers* = 0x00000201
  DomainAliasRidAdmins* = 0x00000220
  DomainAliasRidUsers* = 0x00000221
  DomainAliasRidGuests* = 0x00000222
  DomainAliasRidPowerUsers* = 0x00000223
  DomainAliasRidAccountOps* = 0x00000224
  DomainAliasRidSystemOps* = 0x00000225
  DomainAliasRidPrintOps* = 0x00000226
  DomainAliasRidBackupOps* = 0x00000227
  DomainAliasRidReplicator* = 0x00000228
  # TOKEN_GROUPS structure
  SeGroupMandatory* = 0x00000001
  SeGroupEnabledByDefault* = 0x00000002
  SeGroupEnabled* = 0x00000004
  SeGroupOwner* = 0x00000008
  SeGroupLogonId* = 0xC0000000
  # ACL Defines
  AclRevision* = 2
  # ACE_HEADER structure
  AccessAllowedAceType* = 0x00000000
  AccessDeniedAceType* = 0x00000001
  SystemAuditAceType* = 0x00000002
  SystemAlarmAceType* = 0x00000003
  # ACE flags in the ACE_HEADER structure
  ObjectInheritAce* = 0x00000001
  ContainerInheritAce* = 0x00000002
  NoPropagateInheritAce* = 0x00000004
  InheritOnlyAce* = 0x00000008
  SuccessfulAccessAceFlag* = 0x00000040
  FailedAccessAceFlag* = 0x00000080
  # SECURITY_DESCRIPTOR_CONTROL
  #SECURITY_DESCRIPTOR_REVISION = 1;already defined above
  SecurityDescriptorMinLength* = 20
  SeOwnerDefaulted* = 1
  SeGroupDefaulted* = 2
  SeDaclPresent* = 4
  SeDaclDefaulted* = 8
  SeSaclPresent* = 16
  SeSaclDefaulted* = 32
  SeSelfRelative* = 32768
  # PRIVILEGE_SET
  SePrivilegeEnabledByDefault* = 0x00000001
  SePrivilegeEnabled* = 0x00000002
  SePrivilegeUsedForAccess* = 0x80000000
  PrivilegeSetAllNecessary* = 0x00000001
  # OPENFILENAME structure
  OfnAllowmultiselect* = 0x00000200
  OfnCreateprompt* = 0x00002000
  OfnEnablehook* = 0x00000020
  OfnEnabletemplate* = 0x00000040
  OfnEnabletemplatehandle* = 0x00000080
  OfnExplorer* = 0x00080000
  OfnExtensiondifferent* = 0x00000400
  OfnFilemustexist* = 0x00001000
  OfnHidereadonly* = 0x00000004
  OfnLongnames* = 0x00200000
  OfnNochangedir* = 0x00000008
  OfnNodereferencelinks* = 0x00100000
  OfnNolongnames* = 0x00040000
  OfnNonetworkbutton* = 0x00020000
  OfnNoreadonlyreturn* = 0x00008000
  OfnNotestfilecreate* = 0x00010000
  OfnNovalidate* = 0x00000100
  OfnOverwriteprompt* = 0x00000002
  OfnPathmustexist* = 0x00000800
  OfnReadonly* = 0x00000001
  OfnShareaware* = 0x00004000
  OfnShowhelp* = 0x00000010
  # SHAREVISTRING message
  OfnSharefallthrough* = 0x00000002
  OfnSharenowarn* = 0x00000001
  OfnSharewarn* = 0
  # Open/Save notifications
  CdnInitdone* = 0xFFFFFDA7
  CdnSelchange* = 0xFFFFFDA6
  CdnFolderchange* = 0xFFFFFDA5
  CdnShareviolation* = 0xFFFFFDA4
  CdnHelp* = 0xFFFFFDA3
  CdnFileok* = 0xFFFFFDA2
  CdnTypechange* = 0xFFFFFDA1
  # Open/Save messages
  CdmGetfilepath* = 0x00000465
  CdmGetfolderidlist* = 0x00000467
  CdmGetfolderpath* = 0x00000466
  CdmGetspec* = 0x00000464
  CdmHidecontrol* = 0x00000469
  CdmSetcontroltext* = 0x00000468
  CdmSetdefext* = 0x0000046A
  # CHOOSECOLOR structure
  CcEnablehook* = 0x00000010
  CcEnabletemplate* = 0x00000020
  CcEnabletemplatehandle* = 0x00000040
  CcFullopen* = 0x00000002
  CcPreventfullopen* = 0x00000004
  CcRgbinit* = 0x00000001
  CcShowhelp* = 0x00000008
  CcSolidcolor* = 0x00000080
  # FINDREPLACE structure
  FrDialogterm* = 0x00000040
  FrDown* = 0x00000001
  FrEnablehook* = 0x00000100
  FrEnabletemplate* = 0x00000200
  FrEnabletemplatehandle* = 0x00002000
  FrFindnext* = 0x00000008
  FrHideupdown* = 0x00004000
  FrHidematchcase* = 0x00008000
  FrHidewholeword* = 0x00010000
  FrMatchcase* = 0x00000004
  FrNomatchcase* = 0x00000800
  FrNoupdown* = 0x00000400
  FrNowholeword* = 0x00001000
  FrReplace* = 0x00000010
  FrReplaceall* = 0x00000020
  FrShowhelp* = 0x00000080
  FrWholeword* = 0x00000002
  # CHOOSEFONT structure
  CfApply* = 0x00000200
  CfAnsionly* = 0x00000400
  CfBoth* = 0x00000003
  CfTtonly* = 0x00040000
  CfEffects* = 0x00000100
  CfEnablehook* = 0x00000008
  CfEnabletemplate* = 0x00000010
  CfEnabletemplatehandle* = 0x00000020
  CfFixedpitchonly* = 0x00004000
  CfForcefontexist* = 0x00010000
  CfInittologfontstruct* = 0x00000040
  CfLimitsize* = 0x00002000
  CfNooemfonts* = 0x00000800
  CfNofacesel* = 0x00080000
  CfNoscriptsel* = 0x00800000
  CfNostylesel* = 0x00100000
  CfNosizesel* = 0x00200000
  CfNosimulations* = 0x00001000
  CfNovectorfonts* = 0x00000800
  CfNovertfonts* = 0x01000000
  CfPrinterfonts* = 0x00000002
  CfScalableonly* = 0x00020000
  CfScreenfonts* = 0x00000001
  CfScriptsonly* = 0x00000400
  CfSelectscript* = 0x00400000
  CfShowhelp* = 0x00000004
  CfUsestyle* = 0x00000080
  CfWysiwyg* = 0x00008000
  BoldFonttype* = 0x00000100
  ItalicFonttype* = 0x00000200
  PrinterFonttype* = 0x00004000
  RegularFonttype* = 0x00000400
  ScreenFonttype* = 0x00002000
  SimulatedFonttype* = 0x00008000
  # Common dialog messages
  Colorokstringw* = "commdlg_ColorOK"
  Fileokstringw* = "commdlg_FileNameOK"
  Findmsgstringw* = "commdlg_FindReplace"
  Helpmsgstringw* = "commdlg_help"
  Lbselchstringw* = "commdlg_LBSelChangedNotify"
  Setrgbstringw* = "commdlg_SetRGBColor"
  Sharevistringw* = "commdlg_ShareViolation"
  Colorokstringa* = "commdlg_ColorOK"
  Fileokstringa* = "commdlg_FileNameOK"
  Findmsgstringa* = "commdlg_FindReplace"
  Helpmsgstringa* = "commdlg_help"
  Lbselchstringa* = "commdlg_LBSelChangedNotify"
  Setrgbstringa* = "commdlg_SetRGBColor"
  Sharevistringa* = "commdlg_ShareViolation"

when defined(winUnicode):
  const
    COLOROKSTRING* = COLOROKSTRINGW
    FILEOKSTRING* = FILEOKSTRINGW
    FINDMSGSTRING* = FINDMSGSTRINGW
    HELPMSGSTRING* = HELPMSGSTRINGW
    LBSELCHSTRING* = LBSELCHSTRINGW
    SETRGBSTRING* = SETRGBSTRINGW
    SHAREVISTRING* = SHAREVISTRINGW
else:
  const
    Colorokstring* = COLOROKSTRINGA
    Fileokstring* = FILEOKSTRINGA
    Findmsgstring* = FINDMSGSTRINGA
    Helpmsgstring* = HELPMSGSTRINGA
    Lbselchstring* = LBSELCHSTRINGA
    Setrgbstring* = SETRGBSTRINGA
    Sharevistring* = SHAREVISTRINGA

const
  # LBSELCHSTRING message
  CdLbselchange* = 0
  CdLbseladd* = 2
  CdLbselsub* = 1
  CdLbselnoitems* = -1
  # DEVNAMES structure
  DnDefaultprn* = 1
  # PRINTDLG structure
  PdAllpages* = 0
  PdCollate* = 16
  PdDisableprinttofile* = 524288
  PdEnableprinthook* = 4096
  PdEnableprinttemplate* = 16384
  PdEnableprinttemplatehandle* = 65536
  PdEnablesetuphook* = 8192
  PdEnablesetuptemplate* = 32768
  PdEnablesetuptemplatehandle* = 131072
  PdHideprinttofile* = 1048576
  PdNopagenums* = 8
  PdNoselection* = 4
  PdNowarning* = 128
  PdPagenums* = 2
  PdPrintsetup* = 64
  PdPrinttofile* = 32
  PdReturndc* = 256
  PdReturndefault* = 1024
  PdReturnic* = 512
  PdSelection* = 1
  PdShowhelp* = 2048
  PdUsedevmodecopies* = 262144
  PdUsedevmodecopiesandcollate* = 262144
  # PAGESETUPDLG structure
  PsdDefaultminmargins* = 0
  PsdDisablemargins* = 16
  PsdDisableorientation* = 256
  PsdDisablepagepainting* = 524288
  PsdDisablepaper* = 512
  PsdDisableprinter* = 32
  PsdEnablepagepainthook* = 262144
  PsdEnablepagesetuphook* = 8192
  PsdEnablepagesetuptemplate* = 32768
  PsdEnablepagesetuptemplatehandle* = 131072
  PsdInhundredthsofmillimeters* = 8
  PsdInthousandthsofinches* = 4
  PsdInwininiintlmeasure* = 0
  PsdMargins* = 2
  PsdMinmargins* = 1
  PsdNowarning* = 128
  PsdReturndefault* = 1024
  PsdShowhelp* = 2048
  # WM_SHOWWINDOW message
  SwOtherunzoom* = 4
  SwOtherzoom* = 2
  SwParentclosing* = 1
  SwParentopening* = 3
  # Virtual Key codes
  VkLbutton* = 1
  VkRbutton* = 2
  VkCancel* = 3
  VkMbutton* = 4
  VkBack* = 8
  VkTab* = 9
  VkClear* = 12
  VkReturn* = 13
  VkShift* = 16
  VkControl* = 17
  VkMenu* = 18
  VkPause* = 19
  VkCapital* = 20
  VkEscape* = 27
  VkSpace* = 32
  VkPrior* = 33
  VkNext* = 34
  VkEnd* = 35
  VkHome* = 36
  VkLeft* = 37
  VkUp* = 38
  VkRight* = 39
  VkDown* = 40
  VkSelect* = 41
  VkPrint* = 42
  VkExecute* = 43
  VkSnapshot* = 44
  VkInsert* = 45
  VkDelete* = 46
  VkHelp* = 47
  Vk0* = 48
  Vk1* = 49
  Vk2* = 50
  Vk3* = 51
  Vk4* = 52
  Vk5* = 53
  Vk6* = 54
  Vk7* = 55
  Vk8* = 56
  Vk9* = 57
  VkA* = 65
  VkB* = 66
  VkC* = 67
  VkD* = 68
  VkE* = 69
  VkF* = 70
  VkG* = 71
  VkH* = 72
  VkI* = 73
  VkJ* = 74
  VkK* = 75
  VkL* = 76
  VkM* = 77
  VkN* = 78
  VkO* = 79
  VkP* = 80
  VkQ* = 81
  VkR* = 82
  VkS* = 83
  VkT* = 84
  VkU* = 85
  VkV* = 86
  VkW* = 87
  VkX* = 88
  VkY* = 89
  VkZ* = 90
  VkLwin* = 91
  VkRwin* = 92
  VkApps* = 93
  VkNumpad0* = 96
  VkNumpad1* = 97
  VkNumpad2* = 98
  VkNumpad3* = 99
  VkNumpad4* = 100
  VkNumpad5* = 101
  VkNumpad6* = 102
  VkNumpad7* = 103
  VkNumpad8* = 104
  VkNumpad9* = 105
  VkMultiply* = 106
  VkAdd* = 107
  VkSeparator* = 108
  VkSubtract* = 109
  VkDecimal* = 110
  VkDivide* = 111
  VkF1* = 112
  VkF2* = 113
  VkF3* = 114
  VkF4* = 115
  VkF5* = 116
  VkF6* = 117
  VkF7* = 118
  VkF8* = 119
  VkF9* = 120
  VkF10* = 121
  VkF11* = 122
  VkF12* = 123
  VkF13* = 124
  VkF14* = 125
  VkF15* = 126
  VkF16* = 127
  VkF17* = 128
  VkF18* = 129
  VkF19* = 130
  VkF20* = 131
  VkF21* = 132
  VkF22* = 133
  VkF23* = 134
  VkF24* = 135
  # GetAsyncKeyState
  VkNumlock* = 144
  VkScroll* = 145
  VkLshift* = 160
  VkLcontrol* = 162
  VkLmenu* = 164
  VkRshift* = 161
  VkRcontrol* = 163
  VkRmenu* = 165
  # ImmGetVirtualKey
  VkProcesskey* = 229
  # Keystroke Message Flags
  KfAltdown* = 8192
  KfDlgmode* = 2048
  KfExtended* = 256
  KfMenumode* = 4096
  KfRepeat* = 16384
  KfUp* = 32768
  # GetKeyboardLayoutName
  KlNamelength* = 9
  # WM_ACTIVATE message
  WaActive* = 1
  WaClickactive* = 2
  WaInactive* = 0
  # WM_ACTIVATE message
  PwrCriticalresume* = 3
  PwrSuspendrequest* = 1
  PwrSuspendresume* = 2
  PwrFail* = -1
  PwrOk* = 1
  # WM_NOTIFYFORMAT message
  NfQuery* = 3
  NfRequery* = 4
  NfrAnsi* = 1
  NfrUnicode* = 2
  # WM_SIZING message
  WmszBottom* = 6
  WmszBottomleft* = 7
  WmszBottomright* = 8
  WmszLeft* = 1
  WmszRight* = 2
  WmszTop* = 3
  WmszTopleft* = 4
  WmszTopright* = 5
  # WM_MOUSEACTIVATE message
  MaActivate* = 1
  MaActivateandeat* = 2
  MaNoactivate* = 3
  MaNoactivateandeat* = 4
  # WM_SIZE message
  SizeMaxhide* = 4
  SizeMaximized* = 2
  SizeMaxshow* = 3
  SizeMinimized* = 1
  SizeRestored* = 0
  # WM_NCCALCSIZE message
  WvrAligntop* = 16
  WvrAlignleft* = 32
  WvrAlignbottom* = 64
  WvrAlignright* = 128
  WvrHredraw* = 256
  WvrVredraw* = 512
  WvrRedraw* = 768
  WvrValidrects* = 1024
  # WM_NCHITTEST message
  Htbottom* = 15
  Htbottomleft* = 16
  Htbottomright* = 17
  Htcaption* = 2
  Htclient* = 1
  Hterror* = -2
  Htgrowbox* = 4
  Hthscroll* = 6
  Htleft* = 10
  Htmenu* = 5
  Htnowhere* = 0
  Htreduce* = 8

  Htright* = 11
  Htsize* = 4
  Htsysmenu* = 3
  Httop* = 12
  Httopleft* = 13
  Httopright* = 14
  Httransparent* = -1
  Htvscroll* = 7
  Htzoom* = 9
  # Mouse messages
  MkControl* = 8
  MkLbutton* = 1
  MkMbutton* = 16
  MkRbutton* = 2
  MkShift* = 4
  # WNDCLASS structure
  CsBytealignclient* = 4096
  CsBytealignwindow* = 8192
  CsClassdc* = 64
  CsDblclks* = 8
  CsGlobalclass* = 16384
  CsHredraw* = 2
  CsKeycvtwindow* = 4
  CsNoclose* = 512
  CsNokeycvt* = 256
  CsOwndc* = 32
  CsParentdc* = 128
  CsSavebits* = 2048
  CsVredraw* = 1
  Dlgwindowextra* = 30
  # ACCEL structure
  Falt* = 16
  Fcontrol* = 8
  Fnoinvert* = 2
  Fshift* = 4
  Fvirtkey* = 1
  # WM_MENUCHAR return constants
  MncIgnore* = 0
  MncClose* = 1
  MncExecute* = 2
  MncSelect* = 3
  # MENUINFO structure
  MimMaxheight* = 1
  MimBackground* = 2
  MimHelpid* = 4
  MimMenudata* = 8
  MimStyle* = 16
  MimApplytosubmenus* = 0x80000000
  MnsCheckorbmp* = 0x04000000
  MnsNotifybypos* = 0x08000000
  MnsAutodismiss* = 0x10000000
  MnsDragdrop* = 0x20000000
  MnsModeless* = 0x40000000
  MnsNocheck* = 0x80000000
  # MENUITEMINFO structure
  MiimCheckmarks* = 8
  MiimData* = 32
  MiimId* = 2
  MiimState* = 1
  MiimSubmenu* = 4
  MiimType* = 16
  MiimString* = 64
  MiimBitmap* = 128
  MiimFtype* = 256
  MftBitmap* = 0x00000004
  MftMenubarbreak* = 0x00000020
  MftMenubreak* = 0x00000040
  MftOwnerdraw* = 0x00000100
  MftRadiocheck* = 0x00000200
  MftRightjustify* = 0x00004000
  MftSeparator* = 0x00000800
  MftRightorder* = 0x00002000
  MftString* = 0
  MfsChecked* = 0x00000008
  MfsDefault* = 0x00001000
  MfsDisabled* = 0x00000003
  MfsEnabled* = 0
  MfsGrayed* = 0x00000003
  MfsHilite* = 0x00000080
  MfsUnchecked* = 0
  MfsUnhilite* = 0
  HbmmenuCallback* = - 1
  HbmmenuSystem* = 1
  HbmmenuMbarRestore* = 2
  HbmmenuMbarMinimize* = 3
  HbmmenuMbarClose* = 5
  HbmmenuMbarCloseD* = 6
  HbmmenuMbarMinimizeD* = 7
  HbmmenuPopupClose* = 8
  HbmmenuPopupRestore* = 9
  HbmmenuPopupMaximize* = 10
  HbmmenuPopupMinimize* = 11
  # SERIALKEYS structure
  SerkfAvailable* = 2
  SerkfIndicator* = 4
  SerkfSerialkeyson* = 1
  # FILTERKEYS structure
  FkfAvailable* = 2
  FkfClickon* = 64
  FkfFilterkeyson* = 1
  FkfHotkeyactive* = 4
  FkfHotkeysound* = 16
  FkfConfirmhotkey* = 8
  FkfIndicator* = 32
  # HELPINFO structure
  HelpinfoMenuitem* = 2
  HelpinfoWindow* = 1
  # WM_PRINT message
  PrfCheckvisible* = 0x00000001
  PrfChildren* = 0x00000010
  PrfClient* = 0x00000004
  PrfErasebkgnd* = 0x00000008
  PrfNonclient* = 0x00000002
  PrfOwned* = 0x00000020

  # MapWindowPoints
  HwndDesktop* = HWND(0)

const
  # WM_SYSCOMMAND message
  ScClose* = 61536
  ScContexthelp* = 61824
  ScDefault* = 61792
  ScHotkey* = 61776
  ScHscroll* = 61568
  ScKeymenu* = 61696
  ScMaximize* = 61488
  ScZoom* = 61488
  ScMinimize* = 61472
  ScIcon* = 61472
  ScMonitorpower* = 61808
  ScMousemenu* = 61584
  ScMove* = 61456
  ScNextwindow* = 61504
  ScPrevwindow* = 61520
  ScRestore* = 61728
  ScScreensave* = 61760
  ScSize* = 61440
  ScTasklist* = 61744
  ScVscroll* = 61552
  # DM_GETDEFID message
  DcHasdefid* = 21323
  # WM_GETDLGCODE message
  DlgcButton* = 8192
  DlgcDefpushbutton* = 16
  DlgcHassetsel* = 8
  DlgcRadiobutton* = 64
  DlgcStatic* = 256
  DlgcUndefpushbutton* = 32
  DlgcWantallkeys* = 4
  DlgcWantarrows* = 1
  DlgcWantchars* = 128
  DlgcWantmessage* = 4
  DlgcWanttab* = 2
  # EM_SETMARGINS message
  EcLeftmargin* = 1
  EcRightmargin* = 2
  EcUsefontinfo* = 65535
  # LB_SETCOUNT message
  LbErr* = -1
  LbErrspace* = -2
  LbOkay* = 0
  # CB_DIR message
  CbErr* = -1
  CbErrspace* = -2
  # WM_IME_CONTROL message
  ImcGetcandidatepos* = 7
  ImcGetcompositionfont* = 9
  ImcGetcompositionwindow* = 11
  ImcGetstatuswindowpos* = 15
  ImcClosestatuswindow* = 33
  ImcOpenstatuswindow* = 34
  ImcSetcandidatepos* = 8
  ImcSetcompositionfont* = 10
  ImcSetcompositionwindow* = 12
  ImcSetstatuswindowpos* = 16
  # WM_IME_CONTROL message
  ImnChangecandidate* = 3
  ImnClosecandidate* = 4
  ImnClosestatuswindow* = 1
  ImnGuideline* = 13
  ImnOpencandidate* = 5
  ImnOpenstatuswindow* = 2
  ImnSetcandidatepos* = 9
  ImnSetcompositionfont* = 10
  ImnSetcompositionwindow* = 11
  ImnSetconversionmode* = 6
  ImnSetopenstatus* = 8
  ImnSetsentencemode* = 7
  ImnSetstatuswindowpos* = 12
  ImnPrivate* = 14
  # STICKYKEYS structure
  SkfAudiblefeedback* = 64
  SkfAvailable* = 2
  SkfConfirmhotkey* = 8
  SkfHotkeyactive* = 4
  SkfHotkeysound* = 16
  SkfIndicator* = 32
  SkfStickykeyson* = 1
  SkfTristate* = 128
  SkfTwokeysoff* = 256
  # MOUSEKEYS structure
  MkfAvailable* = 2
  MkfConfirmhotkey* = 8
  MkfHotkeyactive* = 4
  MkfHotkeysound* = 16
  MkfIndicator* = 32
  MkfMousekeyson* = 1
  MkfModifiers* = 64
  MkfReplacenumbers* = 128
  # SOUNDSENTRY structure
  SsfAvailable* = 2
  SsfSoundsentryon* = 1
  SstfBorder* = 2
  SstfChars* = 1
  SstfDisplay* = 3
  SstfNone* = 0
  SsgfDisplay* = 3
  SsgfNone* = 0
  SswfCustom* = 4
  SswfDisplay* = 3
  SswfNone* = 0
  SswfTitle* = 1
  SswfWindow* = 2
  # ACCESSTIMEOUT structure
  AtfOnofffeedback* = 2
  AtfTimeouton* = 1
  # HIGHCONTRAST structure
  HcfAvailable* = 2
  HcfConfirmhotkey* = 8
  HcfHighcontraston* = 1
  HcfHotkeyactive* = 4
  HcfHotkeyavailable* = 64
  HcfHotkeysound* = 16
  HcfIndicator* = 32
  # TOGGLEKEYS structure
  TkfAvailable* = 2
  TkfConfirmhotkey* = 8
  TkfHotkeyactive* = 4
  TkfHotkeysound* = 16
  TkfTogglekeyson* = 1
  # Installable Policy
  PpDisplayerrors* = 1
  # SERVICE_INFO structure
  ResourcedisplaytypeDomain* = 1
  ResourcedisplaytypeFile* = 4
  ResourcedisplaytypeGeneric* = 0
  ResourcedisplaytypeGroup* = 5
  ResourcedisplaytypeServer* = 2
  ResourcedisplaytypeShare* = 3
  # KEY_EVENT_RECORD structure
  CapslockOn* = 128
  EnhancedKey* = 256
  LeftAltPressed* = 2
  LeftCtrlPressed* = 8
  NumlockOn* = 32
  RightAltPressed* = 1
  RightCtrlPressed* = 4
  ScrolllockOn* = 64
  ShiftPressed* = 16
  # MOUSE_EVENT_RECORD structure
  FromLeft1stButtonPressed* = 1
  RightmostButtonPressed* = 2
  FromLeft2ndButtonPressed* = 4
  FromLeft3rdButtonPressed* = 8
  FromLeft4thButtonPressed* = 16
  DoubleClick* = 2
  MouseMoved* = 1
  # INPUT_RECORD structure
  KeyEvent* = 1
  cMOUSEEVENT* = 2
  WindowBufferSizeEvent* = 4
  MenuEvent* = 8
  FocusEvent* = 16
  # BITMAPINFOHEADER structure
  BiRgb* = 0
  BiRle8* = 1
  BiRle4* = 2
  BiBitfields* = 3
  # Extensions to OpenGL
  # ChoosePixelFormat
  PfdDoublebuffer* = 0x00000001
  PfdStereo* = 0x00000002
  PfdDrawToWindow* = 0x00000004
  PfdDrawToBitmap* = 0x00000008
  PfdSupportGdi* = 0x00000010
  PfdSupportOpengl* = 0x00000020
  PfdDepthDontcare* = 0x20000000
  PfdDoublebufferDontcare* = 0x40000000
  PfdStereoDontcare* = 0x80000000
  PfdTypeRgba* = 0
  PfdTypeColorindex* = 1
  PfdMainPlane* = 0
  PfdOverlayPlane* = 1
  PfdUnderlayPlane* = -1
  # wglUseFontOutlines
  WglFontLines* = 0
  WglFontPolygons* = 1
  PfdGenericFormat* = 0x00000040
  PfdNeedPalette* = 0x00000080
  PfdNeedSystemPalette* = 0x00000100
  PfdSwapExchange* = 0x00000200
  PfdSwapCopy* = 0x00000400
  PfdSwapLayerBuffers* = 0x00000800
  PfdGenericAccelerated* = 0x00001000
  PfdSupportDirectdraw* = 0x00002000
  TmpfFixedPitch* = 0x00000001
  TmpfVector* = 0x00000002
  TmpfTruetype* = 0x00000004
  TmpfDevice* = 0x00000008
  WmCtlcolor* = 25
  LwaColorkey* = 0x00000001
  LwaAlpha* = 0x00000002
  UlwColorkey* = 0x00000001
  UlwAlpha* = 0x00000002
  UlwOpaque* = 0x00000004
  WsExLayered* = 0x00080000
  WsExNoinheritlayout* = 0x00100000
  WsExLayoutrtl* = 0x00400000
  WsExComposited* = 0x02000000
  WsExNoactivate* = 0x08000000
  C3Lexical* = 1024

# --------------------- old stuff, need to organize! ---------------
# BEGINNING of windowsx.h stuff from old headers:

# was #define dname(params) def_expr
proc getFirstChild*(h: Hwnd): Hwnd
  # was #define dname(params) def_expr
proc getNextSibling*(h: Hwnd): Hwnd
  # was #define dname(params) def_expr
proc getWindowID*(h: Hwnd): Int32
  # was #define dname(params) def_expr
proc subclassWindow*(h: Hwnd, p: Long): Long
  # was #define dname(params) def_expr
  # argument types are unknown
  # return type might be wrong
proc getWmCommandCmd*(w, L: Int32): Int32
  # return type might be wrong
  # was #define dname(params) def_expr
  # argument types are unknown
  # return type might be wrong
proc getWmCommandId*(w, L: Int32): Int32
  # return type might be wrong
  # was #define dname(params) def_expr
  # argument types are unknown
proc getWmCtlcolorHdc*(w, L, msg: Int32): Hdc
  # was #define dname(params) def_expr
  # argument types are unknown
proc getWmCtlcolorHwnd*(w, L, msg: Int32): Hwnd
  # was #define dname(params) def_expr
  # argument types are unknown
  # return type might be wrong
proc getWmHscrollCode*(w, L: Int32): Int32
  # return type might be wrong
  # was #define dname(params) def_expr
  # argument types are unknown
proc getWmHscrollHwnd*(w, L: Int32): Hwnd
  # was #define dname(params) def_expr
  # argument types are unknown
  # return type might be wrong
proc getWmHscrollPos*(w, L: Int32): Int32
  # return type might be wrong
  # was #define dname(params) def_expr
  # argument types are unknown
  # return type might be wrong
proc getWmMdiactivateFactivate*(h, a, b: Int32): Int32
  # return type might be wrong
  # was #define dname(params) def_expr
  # argument types are unknown
proc getWmMdiactivateHwndactivate*(a, b: Int32): Hwnd
  # was #define dname(params) def_expr
  # argument types are unknown
proc getWmMdiactivateHwnddeact*(a, b: Int32): Hwnd
  # was #define dname(params) def_expr
  # argument types are unknown
  # return type might be wrong
proc getWmVscrollCode*(w, L: Int32): Int32
  # return type might be wrong
  # was #define dname(params) def_expr
  # argument types are unknown
proc getWmVscrollHwnd*(w, L: Int32): Hwnd
  # was #define dname(params) def_expr
  # argument types are unknown
  # return type might be wrong
proc getWmVscrollPos*(w, L: Int32): Int32
  # return type might be wrong
  #  Not convertable by H2PAS
  # END OF windowsx.h stuff from old headers
  # ------------------------------------------------------------------

const
  # BEGINNING of shellapi.h stuff from old headers
  SeErrShare* = 26
  SeErrAssocincomplete* = 27
  SeErrDdetimeout* = 28
  SeErrDdefail* = 29
  SeErrDdebusy* = 30
  SeErrNoassoc* = 31
  # END OF shellapi.h stuff from old headers
  #
  # ------------------------------------------------------------------
  # From ddeml.h in old Cygnus headers
  XclassBool* = 0x00001000
  XclassData* = 0x00002000
  XclassFlags* = 0x00004000
  XclassMask* = 0x0000FC00
  XclassNotification* = 0x00008000
  XtypfNoblock* = 0x00000002
  XtypAdvdata* = 0x00004010
  XtypAdvreq* = 0x00002022
  XtypAdvstart* = 0x00001030
  XtypAdvstop* = 0x00008040
  XtypConnect* = 0x00001062
  XtypConnectConfirm* = 0x00008072
  XtypDisconnect* = 0x000080C2
  XtypExecute* = 0x00004050
  XtypPoke* = 0x00004090
  XtypRequest* = 0x000020B0
  XtypWildconnect* = 0x000020E2
  XtypRegister* = 0x000080A2
  XtypError* = 0x00008002
  XtypXactComplete* = 0x00008080
  XtypUnregister* = 0x000080D2
  DmlerrDllUsage* = 0x00004004
  DmlerrInvalidparameter* = 0x00004006
  DmlerrNotprocessed* = 0x00004009
  DmlerrPostmsgFailed* = 0x0000400C
  DmlerrServerDied* = 0x0000400E
  DmlerrSysError* = 0x0000400F
  DmlerrBusy* = 0x00004001
  DmlerrDataacktimeout* = 0x00004002
  DmlerrAdvacktimeout* = 0x00004000
  DmlerrDllNotInitialized* = 0x00004003
  DmlerrLowMemory* = 0x00004007
  DmlerrMemoryError* = 0x00004008
  DmlerrPokeacktimeout* = 0x0000400B
  DmlerrNoConvEstablished* = 0x0000400A
  DmlerrReentrancy* = 0x0000400D
  DmlerrUnfoundQueueId* = 0x00004011
  DmlerrUnadvacktimeout* = 0x00004010
  DmlerrExecacktimeout* = 0x00004005
  DdeFack* = 0x00008000
  DdeFnotprocessed* = 0x00000000
  DnsRegister* = 0x00000001
  DnsUnregister* = 0x00000002
  CpWinansi* = 1004
  CpWinunicode* = 1200
  #  Not convertable by H2PAS
  #  #define EXPENTRY CALLBACK
  AppclassStandard* = 0x00000000
  # End of stuff from ddeml.h in old Cygnus headers

  BkmodeLast* = 2
  CtlcolorMsgbox* = 0
  CtlcolorEdit* = 1
  CtlcolorListbox* = 2
  CtlcolorBtn* = 3
  CtlcolorDlg* = 4
  CtlcolorScrollbar* = 5
  CtlcolorStatic* = 6
  CtlcolorMax* = 7
  MetaSetmapmode* = 0x00000103
  MetaSetwindoworg* = 0x0000020B
  MetaSetwindowext* = 0x0000020C
  PolyfillLast* = 2
  StatusWait0* = 0x00000000
  StatusAbandonedWait0* = 0x00000080
  StatusUserApc* = 0x000000C0
  StatusTimeout* = 0x00000102
  StatusPending* = 0x00000103
  StatusGuardPageViolation* = 0x80000001
  StatusDatatypeMisalignment* = 0x80000002
  StatusBreakpoint* = 0x80000003
  StatusSingleStep* = 0x80000004
  StatusInPageError* = 0xC0000006
  StatusInvalidHandle* = 0xC0000008
  StatusIllegalInstruction* = 0xC000001D
  StatusNoncontinuableException* = 0xC0000025
  StatusInvalidDisposition* = 0xC0000026
  StatusArrayBoundsExceeded* = 0xC000008C
  StatusFloatDenormalOperand* = 0xC000008D
  StatusFloatDivideByZero* = 0xC000008E
  StatusFloatInexactResult* = 0xC000008F
  StatusFloatInvalidOperation* = 0xC0000090
  StatusFloatOverflow* = 0xC0000091
  StatusFloatStackCheck* = 0xC0000092
  StatusFloatUnderflow* = 0xC0000093
  StatusIntegerDivideByZero* = 0xC0000094
  StatusIntegerOverflow* = 0xC0000095
  StatusPrivilegedInstruction* = 0xC0000096
  StatusStackOverflow* = 0xC00000FD
  StatusControlCExit* = 0xC000013A
  ProcessorArchitectureIntel* = 0
  ProcessorArchitectureMips* = 1
  ProcessorArchitectureAlpha* = 2
  ProcessorArchitecturePpc* = 3

const
  Sizefullscreen* = SIZE_MAXIMIZED
  Sizenormal* = SIZE_RESTORED
  Sizeiconic* = SIZE_MINIMIZED

const
  ExceptionReadFault* = 0   # Access violation was caused by a read
  ExceptionWriteFault* = 1  # Access violation was caused by a write

when defined(cpuia64):
  const
    EXCEPTION_EXECUTE_FAULT* = 2 # Access violation was caused by an instruction fetch
else:
  const
    ExceptionExecuteFault* = 8
when defined(cpupowerpc32):
  # ppc
  const
    CONTEXT_CONTROL* = 1
    CONTEXT_FLOATING_POINT* = 2
    CONTEXT_INTEGER* = 4
    CONTEXT_DEBUG_REGISTERS* = 8
    CONTEXT_FULL* = CONTEXT_CONTROL or CONTEXT_FLOATING_POINT or CONTEXT_INTEGER
    CONTEXT_DEBUGGER* = CONTEXT_FULL
when defined(cpui386):
  # x86
  # The doc refered me to winnt.h, so I had to look...
  const
    SIZE_OF_80387_REGISTERS* = 80 # Values for contextflags
    CONTEXT_i386* = 0x00010000 # this assumes that i386 and
    CONTEXT_i486* = 0x00010000 # i486 have identical context records
    CONTEXT_CONTROL* = CONTEXT_i386 or 1 # SS:SP, CS:IP, FLAGS, BP
    CONTEXT_INTEGER* = CONTEXT_i386 or 2 # AX, BX, CX, DX, SI, DI
    CONTEXT_SEGMENTS* = CONTEXT_i386 or 4 # DS, ES, FS, GS
    CONTEXT_FLOATING_POINT* = CONTEXT_i386 or 8 # 387 state
    CONTEXT_DEBUG_REGISTERS* = CONTEXT_i386 or 0x00000010 # DB 0-3,6,7
    CONTEXT_EXTENDED_REGISTERS* = CONTEXT_i386 or 0x00000020 # cpu specific extensions
    CONTEXT_FULL* = (CONTEXT_CONTROL or CONTEXT_INTEGER) or CONTEXT_SEGMENTS
    CONTEXT_ALL* = CONTEXT_FULL or CONTEXT_FLOATING_POINT or
        CONTEXT_DEBUG_REGISTERS or CONTEXT_EXTENDED_REGISTERS # our own invention
    FLAG_TRACE_BIT* = 0x00000100
    CONTEXT_DEBUGGER* = CONTEXT_FULL or CONTEXT_FLOATING_POINT
when defined(cpux86_64):
  const
    INITIAL_MXCSR* = 0x00001F80 # initial MXCSR value
    INITIAL_FPCSR* = 0x0000027F # initial FPCSR value
    CONTEXT_AMD64* = 0x00100000
    CONTEXT_CONTROL* = (CONTEXT_AMD64 or 0x00000001)
    CONTEXT_INTEGER* = (CONTEXT_AMD64 or 0x00000002)
    CONTEXT_SEGMENTS* = (CONTEXT_AMD64 or 0x00000004)
    CONTEXT_FLOATING_POINT* = (CONTEXT_AMD64 or 0x00000008)
    CONTEXT_DEBUG_REGISTERS* = (CONTEXT_AMD64 or 0x00000010)
    CONTEXT_FULL* = CONTEXT_CONTROL or CONTEXT_INTEGER or CONTEXT_FLOATING_POINT
    CONTEXT_ALL* = CONTEXT_CONTROL or CONTEXT_INTEGER or CONTEXT_SEGMENTS or
        CONTEXT_FLOATING_POINT or CONTEXT_DEBUG_REGISTERS
    CONTEXT_EXCEPTION_ACTIVE* = 0x08000000
    CONTEXT_SERVICE_ACTIVE* = 0x10000000
    CONTEXT_EXCEPTION_REQUEST* = 0x40000000
    CONTEXT_EXCEPTION_REPORTING* = 0x80000000

const
  FilterTempDuplicateAccount* = 0x00000001
  FilterNormalAccount* = 0x00000002
  FilterInterdomainTrustAccount* = 0x00000008
  FilterWorkstationTrustAccount* = 0x00000010
  FilterServerTrustAccount* = 0x00000020
  Logon32LogonInteractive* = 0x00000002
  Logon32LogonBatch* = 0x00000004
  Logon32LogonService* = 0x00000005
  Logon32ProviderDefault* = 0x00000000
  Logon32ProviderWinnt35* = 0x00000001
  QidSync* = 0xFFFFFFFF
  # Magic numbers in PE executable header. # e_magic field
  ImageDosSignature* = 0x00005A4D
  # nt_signature field
  ImageNtSignature* = 0x00004550
  # Severity values
  SeveritySuccess* = 0
  SeverityError* = 1
  # Variant type codes (wtypes.h).
  #    Some, not all though
  VtEmpty* = 0
  VtNull* = 1
  VtI2* = 2
  VtI4* = 3
  VtR4* = 4
  VtR8* = 5
  VtBstr* = 8
  VtError* = 10
  VtBool* = 11
  VtUi1* = 17
  VtByref* = 0x00004000
  VtReserved* = 0x00008000

const
  # Define the facility codes
  FacilityWindows* = 8
  FacilityStorage* = 3
  FacilityRpc* = 1
  FacilitySspi* = 9
  FacilityWin32* = 7
  FacilityControl* = 10
  FacilityNull* = 0
  FacilityInternet* = 12
  FacilityItf* = 4
  FacilityDispatch* = 2
  FacilityCert* = 11         # Manually added, bug 2672
  IconSmall* = 0
  IconBig* = 1
  # For the TrackMouseEvent
  TmeHover* = 0x00000001
  TmeLeave* = 0x00000002
  TmeQuery* = 0x40000000
  TmeCancel* = DWORD(0x80000000)
  HoverDefault* = DWORD(0xFFFFFFFF) # Manually added, bug 3270
  ColorHotlight* = 26
  ColorGradientactivecaption* = 27
  ColorGradientinactivecaption* = 28
  ColorMenuhilight* = 29
  ColorMenubar* = 30
  WmApp* = 0x00008000
  Sysrgn* = 4
  UisSet* = 1
  UisClear* = 2
  UisInitialize* = 3
  UisfHidefocus* = 0x00000001
  UisfHideaccel* = 0x00000002
  UisfActive* = 0x00000004

type
  # WARNING
  #      the variable argument list
  #      is not implemented for FPC
  #      va_list is just a dummy record
  #      MvdV: Nevertheless it should be a pointer type, not a record
  VaList* = Cstring
  TABC* {.final, pure.} = object
    abcA*: Int32
    abcB*: Uint
    abcC*: Int32

  Lpabc* = ptr TABC
  Pabc* = ptr TABC
  TABCFLOAT* {.final, pure.} = object
    abcfA*: Float32
    abcfB*: Float32
    abcfC*: Float32
  Lpabcfloat* = ptr TABCFLOAT
  Pabcfloat* = ptr TABCFLOAT

  TACCEL* {.final, pure.} = object
    fVirt*: Int8
    key*: Int16
    cmd*: Int16
  Lpaccel* = ptr TACCEL
  Paccel* = ptr TACCEL
  AceHeader* {.final, pure.} = object
    AceType*: Int8
    AceFlags*: Int8
    AceSize*: Int16

  TACE_HEADER* = AceHeader
  PaceHeader* = ptr AceHeader
  AccessMask* = Dword
  Regsam* = AccessMask
  AccessAllowedAce* {.final, pure.} = object
    Header*: AceHeader
    Mask*: AccessMask
    SidStart*: Dword

  TACCESS_ALLOWED_ACE* = AccessAllowedAce
  PaccessAllowedAce* = ptr AccessAllowedAce
  AccessDeniedAce* {.final, pure.} = object
    Header*: AceHeader
    Mask*: AccessMask
    SidStart*: Dword

  TACCESS_DENIED_ACE* = AccessDeniedAce
  Accesstimeout* {.final, pure.} = object
    cbSize*: Uint
    dwFlags*: Dword
    iTimeOutMSec*: Dword

  TACCESSTIMEOUT* = Accesstimeout
  Paccesstimeout* = ptr Accesstimeout
  Acl* {.final, pure.} = object
    AclRevision*: Int8
    Sbz1*: Int8
    AclSize*: Int16
    AceCount*: Int16
    Sbz2*: Int16

  Pacl* = ptr Acl
  TACL* = Acl
  TACL_REVISION_INFORMATION* {.final, pure.} = object
    AclRevision*: Dword
  Paclrevisioninformation* = ptr TACL_REVISION_INFORMATION

  TACL_SIZE_INFORMATION* {.final, pure.} = object
    AceCount*: Dword
    AclBytesInUse*: Dword
    AclBytesFree*: Dword
  Paclsizeinformation* = ptr TACL_SIZE_INFORMATION
  ActionHeader* {.final, pure.} = object
    transport_id*: Ulong
    action_code*: Ushort
    reserved*: Ushort

  TACTIONHEADER* = ActionHeader
  Pactionheader* = ptr ActionHeader
  AdapterStatus* {.final, pure.} = object
    adapter_address*: Array[0..5, Uchar]
    rev_major*: Uchar
    reserved0*: Uchar
    adapter_type*: Uchar
    rev_minor*: Uchar
    duration*: Int16
    frmr_recv*: Int16
    frmr_xmit*: Int16
    iframe_recv_err*: Int16
    xmit_aborts*: Int16
    xmit_success*: Dword
    recv_success*: Dword
    iframe_xmit_err*: Int16
    recv_buff_unavail*: Int16
    t1_timeouts*: Int16
    ti_timeouts*: Int16
    reserved1*: Dword
    free_ncbs*: Int16
    max_cfg_ncbs*: Int16
    max_ncbs*: Int16
    xmit_buf_unavail*: Int16
    max_dgram_size*: Int16
    pending_sess*: Int16
    max_cfg_sess*: Int16
    max_sess*: Int16
    max_sess_pkt_size*: Int16
    name_count*: Int16

  TADAPTERSTATUS* = AdapterStatus
  Padapterstatus* = ptr AdapterStatus
  AddjobInfo1* {.final, pure.} = object
    Path*: Lptstr
    JobId*: Dword

  TADDJOB_INFO_1* = AddjobInfo1
  PaddjobInfo1* = ptr AddjobInfo1
  Animationinfo* {.final, pure.} = object
    cbSize*: Uint
    iMinAnimate*: Int32

  Lpanimationinfo* = ptr Animationinfo
  TANIMATIONINFO* = Animationinfo
  Panimationinfo* = ptr Animationinfo

  Appbardata* {.final, pure.} = object
    cbSize*: Dword
    hWnd*: Hwnd
    uCallbackMessage*: Uint
    uEdge*: Uint
    rc*: Rect
    lParam*: Lparam

  TAppBarData* = Appbardata
  PAppBarData* = ptr Appbardata
  Bitmap* {.final, pure.} = object
    bmType*: Long
    bmWidth*: Long
    bmHeight*: Long
    bmWidthBytes*: Long
    bmPlanes*: Int16
    bmBitsPixel*: Int16
    bmBits*: Lpvoid

  Pbitmap* = ptr Bitmap
  Npbitmap* = ptr Bitmap
  Lpbitmap* = ptr Bitmap
  TBITMAP* = Bitmap
  Bitmapcoreheader* {.final, pure.} = object
    bcSize*: Dword
    bcWidth*: Int16
    bcHeight*: Int16
    bcPlanes*: Int16
    bcBitCount*: Int16

  TBITMAPCOREHEADER* = Bitmapcoreheader
  Pbitmapcoreheader* = ptr Bitmapcoreheader
  Rgbtriple* {.final, pure.} = object
    rgbtBlue*: Int8
    rgbtGreen*: Int8
    rgbtRed*: Int8

  TRGBTRIPLE* = Rgbtriple
  Prgbtriple* = ptr Rgbtriple
  Bitmapcoreinfo* {.final, pure.} = object
    bmciHeader*: Bitmapcoreheader
    bmciColors*: Array[0..0, Rgbtriple]

  Pbitmapcoreinfo* = ptr Bitmapcoreinfo
  Lpbitmapcoreinfo* = ptr Bitmapcoreinfo
  TBITMAPCOREINFO* = Bitmapcoreinfo # error
                                    #  WORD    bfReserved1;
                                    #  WORD    bfReserved2;
                                    # in declarator_list
  Bitmapinfoheader* {.final, pure.} = object
    biSize*: Dword
    biWidth*: Long
    biHeight*: Long
    biPlanes*: Int16
    biBitCount*: Int16
    biCompression*: Dword
    biSizeImage*: Dword
    biXPelsPerMeter*: Long
    biYPelsPerMeter*: Long
    biClrUsed*: Dword
    biClrImportant*: Dword

  Lpbitmapinfoheader* = ptr Bitmapinfoheader
  TBITMAPINFOHEADER* = Bitmapinfoheader
  Pbitmapinfoheader* = ptr Bitmapinfoheader
  Rgbquad* {.final, pure.} = object
    rgbBlue*: Int8
    rgbGreen*: Int8
    rgbRed*: Int8
    rgbReserved*: Int8

  TRGBQUAD* = Rgbquad
  Prgbquad* = ptr Rgbquad
  Bitmapinfo* {.final, pure.} = object
    bmiHeader*: Bitmapinfoheader
    bmiColors*: Array[0..0, Rgbquad]

  Lpbitmapinfo* = ptr Bitmapinfo
  Pbitmapinfo* = ptr Bitmapinfo
  TBITMAPINFO* = Bitmapinfo
  Fxpt2dot30* = Int32
  Lpfxpt2dot30* = ptr Fxpt2dot30
  TPFXPT2DOT30* = Fxpt2dot30
  Ppfxpt2dot30* = ptr Fxpt2dot30
  Ciexyz* {.final, pure.} = object
    ciexyzX*: Fxpt2dot30
    ciexyzY*: Fxpt2dot30
    ciexyzZ*: Fxpt2dot30

  Lpciexyz* = ptr Ciexyz
  TPCIEXYZ* = Ciexyz
  Pciexyz* = ptr Ciexyz
  Ciexyztriple* {.final, pure.} = object
    ciexyzRed*: Ciexyz
    ciexyzGreen*: Ciexyz
    ciexyzBlue*: Ciexyz

  Lpciexyztriple* = ptr Ciexyztriple
  TCIEXYZTRIPLE* = Ciexyztriple
  Pciexyztriple* = ptr Ciexyztriple
  Bitmapv4header* {.final, pure.} = object
    bV4Size*: Dword
    bV4Width*: Long
    bV4Height*: Long
    bV4Planes*: Int16
    bV4BitCount*: Int16
    bV4V4Compression*: Dword
    bV4SizeImage*: Dword
    bV4XPelsPerMeter*: Long
    bV4YPelsPerMeter*: Long
    bV4ClrUsed*: Dword
    bV4ClrImportant*: Dword
    bV4RedMask*: Dword
    bV4GreenMask*: Dword
    bV4BlueMask*: Dword
    bV4AlphaMask*: Dword
    bV4CSType*: Dword
    bV4Endpoints*: Ciexyztriple
    bV4GammaRed*: Dword
    bV4GammaGreen*: Dword
    bV4GammaBlue*: Dword

  Lpbitmapv4header* = ptr Bitmapv4header
  TBITMAPV4HEADER* = Bitmapv4header
  Pbitmapv4header* = ptr Bitmapv4header
  Bitmapfileheader* {.final, pure.} = object
    bfType*: Int16
    bfSize*: Dword
    bfReserved1*: Int16
    bfReserved2*: Int16
    bfOffBits*: Dword

  Blob* {.final, pure.} = object
    cbSize*: Ulong
    pBlobData*: ptr Int8

  TBLOB* = Blob
  Pblob* = ptr Blob
  Shitemid* {.final, pure.} = object
    cb*: Ushort
    abID*: Array[0..0, Int8]

  Lpshitemid* = ptr Shitemid
  Lpcshitemid* = ptr Shitemid
  TSHITEMID* = Shitemid
  Pshitemid* = ptr Shitemid
  Itemidlist* {.final, pure.} = object
    mkid*: Shitemid

  Lpitemidlist* = ptr Itemidlist
  Lpcitemidlist* = ptr Itemidlist
  TITEMIDLIST* = Itemidlist
  Pitemidlist* = ptr Itemidlist
  Browseinfo* {.final, pure.} = object
    hwndOwner*: Hwnd
    pidlRoot*: Lpcitemidlist
    pszDisplayName*: Lpstr
    lpszTitle*: Lpcstr
    ulFlags*: Uint
    lpfn*: Bffcallback
    lParam*: Lparam
    iImage*: Int32

  Lpbrowseinfo* = ptr Browseinfo
  Tbrowseinfo* = Browseinfo
  Pbrowseinfo* = ptr Browseinfo

  ByHandleFileInformation* {.final, pure.} = object
    dwFileAttributes*: Dword
    ftCreationTime*: Filetime
    ftLastAccessTime*: Filetime
    ftLastWriteTime*: Filetime
    dwVolumeSerialNumber*: Dword
    nFileSizeHigh*: Dword
    nFileSizeLow*: Dword
    nNumberOfLinks*: Dword
    nFileIndexHigh*: Dword
    nFileIndexLow*: Dword

  LpbyHandleFileInformation* = ptr ByHandleFileInformation
  TBYHANDLEFILEINFORMATION* = ByHandleFileInformation
  Pbyhandlefileinformation* = ptr ByHandleFileInformation
  Fixed* {.final, pure.} = object
    fract*: Int16
    value*: Short

  TFIXED* = Fixed
  Pfixed* = ptr Fixed
  Pointfx* {.final, pure.} = object
    x*: Fixed
    y*: Fixed

  TPOINTFX* = Pointfx
  Ppointfx* = ptr Pointfx

  TSmallPoint* {.final, pure.} = object
    X*, Y*: Short

  Candidateform* {.final, pure.} = object
    dwIndex*: Dword
    dwStyle*: Dword
    ptCurrentPos*: Point
    rcArea*: Rect

  Lpcandidateform* = ptr Candidateform
  TCANDIDATEFORM* = Candidateform
  Pcandidateform* = ptr Candidateform
  Candidatelist* {.final, pure.} = object
    dwSize*: Dword
    dwStyle*: Dword
    dwCount*: Dword
    dwSelection*: Dword
    dwPageStart*: Dword
    dwPageSize*: Dword
    dwOffset*: Array[0..0, Dword]

  Lpcandidatelist* = ptr Candidatelist
  TCANDIDATELIST* = Candidatelist
  Pcandidatelist* = ptr Candidatelist
  Createstruct* {.final, pure.} = object
    lpCreateParams*: Lpvoid
    hInstance*: Hinst
    hMenu*: Hmenu
    hwndParent*: Hwnd
    cy*: Int32
    cx*: Int32
    y*: Int32
    x*: Int32
    style*: Long
    lpszName*: Lpctstr
    lpszClass*: Lpctstr
    dwExStyle*: Dword

  Lpcreatestruct* = ptr Createstruct
  TCREATESTRUCT* = Createstruct
  Pcreatestruct* = ptr Createstruct
  CbtCreatewnd* {.final, pure.} = object
    lpcs*: Lpcreatestruct
    hwndInsertAfter*: Hwnd

  TCBT_CREATEWND* = CbtCreatewnd
  PcbtCreatewnd* = ptr CbtCreatewnd
  Cbtactivatestruct* {.final, pure.} = object
    fMouse*: Winbool
    hWndActive*: Hwnd

  TCBTACTIVATESTRUCT* = Cbtactivatestruct
  Pcbtactivatestruct* = ptr Cbtactivatestruct
  CharInfo* {.final, pure.} = object
    UnicodeChar*: Wchar
    Attributes*: Int16        # other union part: AsciiChar : CHAR

  TCHAR_INFO* = CharInfo
  PcharInfo* = ptr CharInfo
  Charformat* {.final, pure.} = object
    cbSize*: Uint
    dwMask*: Dword
    dwEffects*: Dword
    yHeight*: Long
    yOffset*: Long
    crTextColor*: Colorref
    bCharSet*: Int8
    bPitchAndFamily*: Int8
    szFaceName*: Array[0..(LF_FACESIZE) - 1, TCHAR]

  Tcharformat* = Charformat
  Pcharformat* = ptr Charformat
  Charrange* {.final, pure.} = object
    cpMin*: Long
    cpMax*: Long

  Tcharrange* = Charrange
  Pcharrange* = ptr Charrange
  Charset* {.final, pure.} = object
    aflBlock*: Array[0..2, Dword]
    flLang*: Dword

  TCHARSET* = Charset
  Pcharset* = ptr Charset
  Fontsignature* {.final, pure.} = object
    fsUsb*: Array[0..3, Dword]
    fsCsb*: Array[0..1, Dword]

  Lpfontsignature* = ptr Fontsignature
  TFONTSIGNATURE* = Fontsignature
  Pfontsignature* = ptr Fontsignature
  Charsetinfo* {.final, pure.} = object
    ciCharset*: Uint
    ciACP*: Uint
    fs*: Fontsignature

  Lpcharsetinfo* = ptr Charsetinfo
  TCHARSETINFO* = Charsetinfo
  Pcharsetinfo* = ptr Charsetinfo
  #CHOOSECOLOR = record confilcts with function ChooseColor
  TCHOOSECOLOR* {.final, pure.} = object
    lStructSize*: Dword
    hwndOwner*: Hwnd
    hInstance*: Hwnd
    rgbResult*: Colorref
    lpCustColors*: ptr Colorref
    Flags*: Dword
    lCustData*: Lparam
    lpfnHook*: Lpcchookproc
    lpTemplateName*: Lpctstr

  Lpchoosecolor* = ptr TCHOOSECOLOR
  Pchoosecolor* = ptr TCHOOSECOLOR
  Logfont* {.final, pure.} = object
    lfHeight*: Long
    lfWidth*: Long
    lfEscapement*: Long
    lfOrientation*: Long
    lfWeight*: Long
    lfItalic*: Int8
    lfUnderline*: Int8
    lfStrikeOut*: Int8
    lfCharSet*: Int8
    lfOutPrecision*: Int8
    lfClipPrecision*: Int8
    lfQuality*: Int8
    lfPitchAndFamily*: Int8
    lfFaceName*: Array[0..(LF_FACESIZE) - 1, TCHAR]

  Lplogfont* = ptr Logfont
  TLOGFONT* = Logfont
  TLOGFONTA* = Logfont
  Plogfont* = ptr Logfont
  Plogfonta* = Plogfont
  Logfontw* {.final, pure.} = object
    lfHeight*: Long
    lfWidth*: Long
    lfEscapement*: Long
    lfOrientation*: Long
    lfWeight*: Long
    lfItalic*: Int8
    lfUnderline*: Int8
    lfStrikeOut*: Int8
    lfCharSet*: Int8
    lfOutPrecision*: Int8
    lfClipPrecision*: Int8
    lfQuality*: Int8
    lfPitchAndFamily*: Int8
    lfFaceName*: Array[0..LF_FACESIZE - 1, Wchar]

  Lplogfontw* = ptr Logfontw
  Nplogfontw* = ptr Logfontw
  TLogFontW* = Logfontw
  PLogFontW* = ptr TLogFontW
  TCHOOSEFONT* {.final, pure.} = object
    lStructSize*: Dword
    hwndOwner*: Hwnd
    hDC*: Hdc
    lpLogFont*: Lplogfont
    iPointSize*: Wint
    Flags*: Dword
    rgbColors*: Dword
    lCustData*: Lparam
    lpfnHook*: Lpcfhookproc
    lpTemplateName*: Lpctstr
    hInstance*: Hinst
    lpszStyle*: Lptstr
    nFontType*: Int16
    MISSING_ALIGNMENT*: Int16
    nSizeMin*: Wint
    nSizeMax*: Wint

  Lpchoosefont* = ptr TCHOOSEFONT
  Pchoosefont* = ptr TCHOOSEFONT
  Cida* {.final, pure.} = object
    cidl*: Uint
    aoffset*: Array[0..0, Uint]

  Lpida* = ptr Cida
  TIDA* = Cida
  Pida* = ptr Cida
  Clientcreatestruct* {.final, pure.} = object
    hWindowMenu*: Handle
    idFirstChild*: Uint

  Lpclientcreatestruct* = ptr Clientcreatestruct
  TCLIENTCREATESTRUCT* = Clientcreatestruct
  Pclientcreatestruct* = ptr Clientcreatestruct
  Cminvokecommandinfo* {.final, pure.} = object
    cbSize*: Dword
    fMask*: Dword
    hwnd*: Hwnd
    lpVerb*: Lpcstr
    lpParameters*: Lpcstr
    lpDirectory*: Lpcstr
    nShow*: Int32
    dwHotKey*: Dword
    hIcon*: Handle

  Lpcminvokecommandinfo* = ptr Cminvokecommandinfo
  TCMInvokeCommandInfo* = Cminvokecommandinfo
  PCMInvokeCommandInfo* = ptr Cminvokecommandinfo
  Coloradjustment* {.final, pure.} = object
    caSize*: Int16
    caFlags*: Int16
    caIlluminantIndex*: Int16
    caRedGamma*: Int16
    caGreenGamma*: Int16
    caBlueGamma*: Int16
    caReferenceBlack*: Int16
    caReferenceWhite*: Int16
    caContrast*: Short
    caBrightness*: Short
    caColorfulness*: Short
    caRedGreenTint*: Short

  Lpcoloradjustment* = ptr Coloradjustment
  TCOLORADJUSTMENT* = Coloradjustment
  Pcoloradjustment* = ptr Coloradjustment
  Colormap* {.final, pure.} = object
    `from`*: Colorref
    `to`*: Colorref          # XXX!

  Lpcolormap* = ptr Colormap
  TCOLORMAP* = Colormap
  Pcolormap* = ptr Colormap
  Dcb* {.final, pure.} = object
    DCBlength*: Dword
    BaudRate*: Dword
    flags*: Dword
    wReserved*: Int16
    XonLim*: Int16
    XoffLim*: Int16
    ByteSize*: Int8
    Parity*: Int8
    StopBits*: Int8
    XonChar*: Char
    XoffChar*: Char
    ErrorChar*: Char
    EofChar*: Char
    EvtChar*: Char
    wReserved1*: Int16

  Lpdcb* = ptr Dcb
  TDCB* = Dcb
  Pdcb* = ptr Dcb

const
  bmDCBFBinary* = 1
  bpDCBFBinary* = 0'i32
  bmDCBFParity* = 0x00000002
  bpDCBFParity* = 1'i32
  bmDCBFOutxCtsFlow* = 0x00000004
  bpDCBFOutxCtsFlow* = 2'i32
  bmDCBFOutxDsrFlow* = 0x00000008
  bpDCBFOutxDsrFlow* = 3'i32
  bmDCBFDtrControl* = 0x00000030
  bpDCBFDtrControl* = 4'i32
  bmDCBFDsrSensitivity* = 0x00000040
  bpDCBFDsrSensitivity* = 6'i32
  bmDCBFTXContinueOnXoff* = 0x00000080
  bpDCBFTXContinueOnXoff* = 7'i32
  bmDCBFOutX* = 0x00000100
  bpDCBFOutX* = 8'i32
  bmDCBFInX* = 0x00000200
  bpDCBFInX* = 9'i32
  bmDCBFErrorChar* = 0x00000400
  bpDCBFErrorChar* = 10'i32
  bmDCBFNull* = 0x00000800
  bpDCBFNull* = 11'i32
  bmDCBFRtsControl* = 0x00003000
  bpDCBFRtsControl* = 12'i32
  bmDCBFAbortOnError* = 0x00004000
  bpDCBFAbortOnError* = 14'i32
  bmDCBFDummy2* = 0xFFFF8000'i32
  bpDCBFDummy2* = 15'i32

proc fBinary*(a: var Dcb): Dword
proc setFBinary*(a: var Dcb, fBinary: Dword)
proc fParity*(a: var Dcb): Dword
proc setFParity*(a: var Dcb, fParity: Dword)
proc fOutxCtsFlow*(a: var Dcb): Dword
proc setFOutxCtsFlow*(a: var Dcb, fOutxCtsFlow: Dword)
proc fOutxDsrFlow*(a: var Dcb): Dword
proc setFOutxDsrFlow*(a: var Dcb, fOutxDsrFlow: Dword)
proc fDtrControl*(a: var Dcb): Dword
proc setFDtrControl*(a: var Dcb, fDtrControl: Dword)
proc fDsrSensitivity*(a: var Dcb): Dword
proc setFDsrSensitivity*(a: var Dcb, fDsrSensitivity: Dword)
proc fTXContinueOnXoff*(a: var Dcb): Dword
proc setFTXContinueOnXoff*(a: var Dcb, fTXContinueOnXoff: Dword)
proc fOutX*(a: var Dcb): Dword
proc setFOutX*(a: var Dcb, fOutX: Dword)
proc fInX*(a: var Dcb): Dword
proc setFInX*(a: var Dcb, fInX: Dword)
proc fErrorChar*(a: var Dcb): Dword
proc setFErrorChar*(a: var Dcb, fErrorChar: Dword)
proc fNull*(a: var Dcb): Dword
proc setFNull*(a: var Dcb, fNull: Dword)
proc fRtsControl*(a: var Dcb): Dword
proc setFRtsControl*(a: var Dcb, fRtsControl: Dword)
proc fAbortOnError*(a: var Dcb): Dword
proc setFAbortOnError*(a: var Dcb, fAbortOnError: Dword)
proc fDummy2*(a: var Dcb): Dword
proc setFDummy2*(a: var Dcb, fDummy2: Dword)
type
  Commconfig* {.final, pure.} = object
    dwSize*: Dword
    wVersion*: Int16
    wReserved*: Int16
    dcb*: Dcb
    dwProviderSubType*: Dword
    dwProviderOffset*: Dword
    dwProviderSize*: Dword
    wcProviderData*: Array[0..0, Wchar]

  Lpcommconfig* = ptr Commconfig
  TCOMMCONFIG* = Commconfig
  Pcommconfig* = ptr Commconfig
  Commprop* {.final, pure.} = object
    wPacketLength*: Int16
    wPacketVersion*: Int16
    dwServiceMask*: Dword
    dwReserved1*: Dword
    dwMaxTxQueue*: Dword
    dwMaxRxQueue*: Dword
    dwMaxBaud*: Dword
    dwProvSubType*: Dword
    dwProvCapabilities*: Dword
    dwSettableParams*: Dword
    dwSettableBaud*: Dword
    wSettableData*: Int16
    wSettableStopParity*: Int16
    dwCurrentTxQueue*: Dword
    dwCurrentRxQueue*: Dword
    dwProvSpec1*: Dword
    dwProvSpec2*: Dword
    wcProvChar*: Array[0..0, Wchar]

  Lpcommprop* = ptr Commprop
  TCOMMPROP* = Commprop
  Pcommprop* = ptr Commprop
  Commtimeouts* {.final, pure.} = object
    ReadIntervalTimeout*: Dword
    ReadTotalTimeoutMultiplier*: Dword
    ReadTotalTimeoutConstant*: Dword
    WriteTotalTimeoutMultiplier*: Dword
    WriteTotalTimeoutConstant*: Dword

  Lpcommtimeouts* = ptr Commtimeouts
  TCOMMTIMEOUTS* = Commtimeouts
  Pcommtimeouts* = ptr Commtimeouts
  Compareitemstruct* {.final, pure.} = object
    CtlType*: Uint
    CtlID*: Uint
    hwndItem*: Hwnd
    itemID1*: Uint
    itemData1*: UlongPtr
    itemID2*: Uint
    itemData2*: UlongPtr

  TCOMPAREITEMSTRUCT* = Compareitemstruct
  Pcompareitemstruct* = ptr Compareitemstruct
  Compcolor* {.final, pure.} = object
    crText*: Colorref
    crBackground*: Colorref
    dwEffects*: Dword

  TCOMPCOLOR* = Compcolor
  Pcompcolor* = ptr Compcolor
  Compositionform* {.final, pure.} = object
    dwStyle*: Dword
    ptCurrentPos*: Point
    rcArea*: Rect

  Lpcompositionform* = ptr Compositionform
  TCOMPOSITIONFORM* = Compositionform
  Pcompositionform* = ptr Compositionform #     TComStatFlags = set of (fCtsHold, fDsrHold, fRlsdHold , fXoffHold ,
                                          #                    fXoffSent , fEof ,  fTxim  , fReserved);
  Comstat* {.final, pure.} = object
    flag0*: Dword             # can't use tcomstatflags, set packing issues
                              # and conflicts with macro's
    cbInQue*: Dword
    cbOutQue*: Dword

  Lpcomstat* = ptr Comstat
  TCOMSTAT* = Comstat
  Pcomstat* = ptr Comstat

const
  bmCOMSTATFCtsHold* = 0x00000001
  bpCOMSTATFCtsHold* = 0'i32
  bmCOMSTATFDsrHold* = 0x00000002
  bpCOMSTATFDsrHold* = 1'i32
  bmCOMSTATFRlsdHold* = 0x00000004
  bpCOMSTATFRlsdHold* = 2'i32
  bmCOMSTATFXoffHold* = 0x00000008
  bpCOMSTATFXoffHold* = 3'i32
  bmCOMSTATFXoffSent* = 0x00000010
  bpCOMSTATFXoffSent* = 4'i32
  bmCOMSTATFEof* = 0x00000020
  bpCOMSTATFEof* = 5'i32
  bmCOMSTATFTxim* = 0x00000040
  bpCOMSTATFTxim* = 6'i32
  bmCOMSTATFReserved* = 0xFFFFFF80'i32
  bpCOMSTATFReserved* = 7'i32

proc fCtsHold*(a: var Comstat): Dword
  # should be renamed to get_<x>?
proc setFCtsHold*(a: var Comstat, fCtsHold: Dword)
proc fDsrHold*(a: var Comstat): Dword
proc setFDsrHold*(a: var Comstat, fDsrHold: Dword)
proc fRlsdHold*(a: var Comstat): Dword
proc setFRlsdHold*(a: var Comstat, fRlsdHold: Dword)
proc fXoffHold*(a: var Comstat): Dword
proc setFXoffHold*(a: var Comstat, fXoffHold: Dword)
proc fXoffSent*(a: var Comstat): Dword
proc setFXoffSent*(a: var Comstat, fXoffSent: Dword)
proc fEof*(a: var Comstat): Dword
proc setFEof*(a: var Comstat, fEof: Dword)
proc fTxim*(a: var Comstat): Dword
proc setFTxim*(a: var Comstat, fTxim: Dword)
proc fReserved*(a: var Comstat): Dword
proc setFReserved*(a: var Comstat, fReserved: Dword)
type
  ConsoleCursorInfo* {.final, pure.} = object
    dwSize*: Dword
    bVisible*: Winbool

  PconsoleCursorInfo* = ptr ConsoleCursorInfo
  TCONSOLECURSORINFO* = ConsoleCursorInfo
  TCURSORINFO* = ConsoleCursorInfo
  Coord* {.final, pure.} = object
    x*: Short
    y*: Short

  TCOORD* = Coord
  Pcoord* = ptr Coord
  SmallRect* {.final, pure.} = object
    Left*: Short
    Top*: Short
    Right*: Short
    Bottom*: Short

  TSMALL_RECT* = SmallRect
  PsmallRect* = ptr SmallRect
  ConsoleScreenBufferInfo* {.final, pure.} = object
    dwSize*: Coord
    dwCursorPosition*: Coord
    wAttributes*: Int16
    srWindow*: SmallRect
    dwMaximumWindowSize*: Coord

  PconsoleScreenBufferInfo* = ptr ConsoleScreenBufferInfo
  TCONSOLESCREENBUFFERINFO* = ConsoleScreenBufferInfo

when defined(i386):
  type
    FLOATING_SAVE_AREA* {.final, pure.} = object
      ControlWord*: DWORD
      StatusWord*: DWORD
      TagWord*: DWORD
      ErrorOffset*: DWORD
      ErrorSelector*: DWORD
      DataOffset*: DWORD
      DataSelector*: DWORD
      RegisterArea*: array[0..79, int8]
      Cr0NpxState*: DWORD

    TFLOATINGSAVEAREA* = FLOATING_SAVE_AREA
    PFLOATINGSAVEAREA* = ptr FLOATING_SAVE_AREA
    CONTEXT* {.final, pure.} = object
      ContextFlags*: DWORD
      Dr0*: DWORD
      Dr1*: DWORD
      Dr2*: DWORD
      Dr3*: DWORD
      Dr6*: DWORD
      Dr7*: DWORD
      FloatSave*: FLOATING_SAVE_AREA
      SegGs*: DWORD
      SegFs*: DWORD
      SegEs*: DWORD
      SegDs*: DWORD
      Edi*: DWORD
      Esi*: DWORD
      Ebx*: DWORD
      Edx*: DWORD
      Ecx*: DWORD
      Eax*: DWORD
      Ebp*: DWORD
      Eip*: DWORD
      SegCs*: DWORD
      EFlags*: DWORD
      Esp*: DWORD
      SegSs*: DWORD

elif defined(x86_64):
  #
  # Define 128-bit 16-byte aligned xmm register type.
  #
  type
    M128a* {.final, pure.} = object
      Low*: Ulonglong
      High*: Longlong

    TM128A* = M128a
    Pm128a* = TM128A #typedef struct _XMM_SAVE_AREA32 {
    XmmSaveArea32* {.final, pure.} = object
      ControlWord*: Int16
      StatusWord*: Int16
      TagWord*: Int8
      Reserved1*: Int8
      ErrorOpcode*: Int16
      ErrorOffset*: Dword
      ErrorSelector*: Int16
      Reserved2*: Int16
      DataOffset*: Dword
      DataSelector*: Int16
      Reserved3*: Int16
      MxCsr*: Dword
      MxCsr_Mask*: Dword
      FloatRegisters*: Array[0..7, M128a]
      XmmRegisters*: Array[0..16, M128a]
      Reserved4*: Array[0..95, Int8]

    TXmmSaveArea* = XmmSaveArea32
    PXmmSaveArea* = ptr TXmmSaveArea
  type
    Context* {.final, pure.} = object
      P1Home*: Dword64
      P2Home*: Dword64
      P3Home*: Dword64
      P4Home*: Dword64
      P5Home*: Dword64
      P6Home*: Dword64        #
                              # Control flags.
                              #
      ContextFlags*: Dword
      MxCsr*: Dword           #
                              # Segment Registers and processor flags.
                              #
      SegCs*: Int16
      SegDs*: Int16
      SegEs*: Int16
      SegFs*: Int16
      SegGs*: Int16
      SegSs*: Int16
      EFlags*: Dword          #
                              # Debug registers
                              #
      Dr0*: Dword64
      Dr1*: Dword64
      Dr2*: Dword64
      Dr3*: Dword64
      Dr6*: Dword64
      Dr7*: Dword64           #
                              # Integer registers.
                              #
      Rax*: Dword64
      Rcx*: Dword64
      Rdx*: Dword64
      Rbx*: Dword64
      Rsp*: Dword64
      Rbp*: Dword64
      Rsi*: Dword64
      Rdi*: Dword64
      R8*: Dword64
      R9*: Dword64
      R10*: Dword64
      R11*: Dword64
      R12*: Dword64
      R13*: Dword64
      R14*: Dword64
      R15*: Dword64           #
                              # Program counter.
                              #
      Rip*: Dword64           #
                              # Floating point state.
                              #
      FltSave*: XmmSaveArea32 # MWE: only translated the FltSave part of the union
                                #
                                # Vector registers.
                                #
      VectorRegister*: Array[0..25, M128a]
      VectorControl*: Dword64 #
                              # Special debug control registers.
                              #
      DebugControl*: Dword64
      LastBranchToRip*: Dword64
      LastBranchFromRip*: Dword64
      LastExceptionToRip*: Dword64
      LastExceptionFromRip*: Dword64

elif defined(powerpc32):
  # ppc
  # Floating point registers returned when CONTEXT_FLOATING_POINT is set
  # Integer registers returned when CONTEXT_INTEGER is set.
  # Condition register
  # Fixed point exception register
  # The following are set when CONTEXT_CONTROL is set.
  # Machine status register
  # Instruction address register
  # Link register
  # Control register
  # Control which context values are returned
  # Registers returned if CONTEXT_DEBUG_REGISTERS is set.
  # Breakpoint Register 1
  # Breakpoint Register 2
  # Breakpoint Register 3
  # Breakpoint Register 4
  # Breakpoint Register 5
  # Breakpoint Register 6
  # Debug Status Register
  # Debug Control Register
  type
    CONTEXT* {.final, pure.} = object
      Fpr0*: float64
      Fpr1*: float64
      Fpr2*: float64
      Fpr3*: float64
      Fpr4*: float64
      Fpr5*: float64
      Fpr6*: float64
      Fpr7*: float64
      Fpr8*: float64
      Fpr9*: float64
      Fpr10*: float64
      Fpr11*: float64
      Fpr12*: float64
      Fpr13*: float64
      Fpr14*: float64
      Fpr15*: float64
      Fpr16*: float64
      Fpr17*: float64
      Fpr18*: float64
      Fpr19*: float64
      Fpr20*: float64
      Fpr21*: float64
      Fpr22*: float64
      Fpr23*: float64
      Fpr24*: float64
      Fpr25*: float64
      Fpr26*: float64
      Fpr27*: float64
      Fpr28*: float64
      Fpr29*: float64
      Fpr30*: float64
      Fpr31*: float64
      Fpscr*: float64
      Gpr0*: DWORD
      Gpr1*: DWORD
      Gpr2*: DWORD
      Gpr3*: DWORD
      Gpr4*: DWORD
      Gpr5*: DWORD
      Gpr6*: DWORD
      Gpr7*: DWORD
      Gpr8*: DWORD
      Gpr9*: DWORD
      Gpr10*: DWORD
      Gpr11*: DWORD
      Gpr12*: DWORD
      Gpr13*: DWORD
      Gpr14*: DWORD
      Gpr15*: DWORD
      Gpr16*: DWORD
      Gpr17*: DWORD
      Gpr18*: DWORD
      Gpr19*: DWORD
      Gpr20*: DWORD
      Gpr21*: DWORD
      Gpr22*: DWORD
      Gpr23*: DWORD
      Gpr24*: DWORD
      Gpr25*: DWORD
      Gpr26*: DWORD
      Gpr27*: DWORD
      Gpr28*: DWORD
      Gpr29*: DWORD
      Gpr30*: DWORD
      Gpr31*: DWORD
      Cr*: DWORD
      Xer*: DWORD
      Msr*: DWORD
      Iar*: DWORD
      Lr*: DWORD
      Ctr*: DWORD
      ContextFlags*: DWORD
      Fill*: array[0..2, DWORD]
      Dr0*: DWORD
      Dr1*: DWORD
      Dr2*: DWORD
      Dr3*: DWORD
      Dr4*: DWORD
      Dr5*: DWORD
      Dr6*: DWORD
      Dr7*: DWORD

else:
  # dummy CONTEXT so that it compiles:
  type
    CONTEXT* {.final, pure.} = object
      data: array [0..255, float64]

type
  Lpcontext* = ptr Context
  TCONTEXT* = Context
  Pcontext* = ptr Context

type
  ListEntry* {.final, pure.} = object
    Flink*: ptr ListEntry
    Blink*: ptr ListEntry

  TLISTENTRY* = ListEntry
  Plistentry* = ptr ListEntry
  CriticalSectionDebug* {.final, pure.} = object
    `type`*: Int16
    CreatorBackTraceIndex*: Int16
    CriticalSection*: ptr TCRITICAL_SECTION
    ProcessLocksList*: ListEntry
    EntryCount*: Dword
    ContentionCount*: Dword
    Depth*: Dword
    OwnerBackTrace*: Array[0..4, Pvoid]

  TRTL_CRITICAL_SECTION* {.final, pure.} = object
    DebugInfo*: ptr CriticalSectionDebug
    LockCount*: Int32
    RecursionCount*: Int32
    OwningThread*: Handle
    LockSemaphore*: Handle
    Reserved*: Dword

  PRTLCriticalSection* = ptr TRTLCriticalSection

  LpcriticalSectionDebug* = ptr CriticalSectionDebug
  PcriticalSectionDebug* = ptr CriticalSectionDebug
  TCRITICALSECTIONDEBUG* = CriticalSectionDebug
  TCRITICAL_SECTION* = TRTLCriticalSection
  PcriticalSection* = PRTLCriticalSection
  LpcriticalSection* = PRTLCriticalSection
  SecurityQualityOfService* {.final, pure.} = object
    len*: Dword
    ImpersonationLevel*: SecurityImpersonationLevel
    ContextTrackingMode*: Winbool
    EffectiveOnly*: Bool

  PsecurityQualityOfService* = ptr SecurityQualityOfService
  TSECURITYQUALITYOFSERVICE* = SecurityQualityOfService
  Convcontext* {.final, pure.} = object
    cb*: Uint
    wFlags*: Uint
    wCountryID*: Uint
    iCodePage*: Int32
    dwLangID*: Dword
    dwSecurity*: Dword
    qos*: SecurityQualityOfService

  TCONVCONTEXT* = Convcontext
  Pconvcontext* = ptr Convcontext
  Convinfo* {.final, pure.} = object
    cb*: Dword
    hUser*: Dword
    hConvPartner*: Hconv
    hszSvcPartner*: Hsz
    hszServiceReq*: Hsz
    hszTopic*: Hsz
    hszItem*: Hsz
    wFmt*: Uint
    wType*: Uint
    wStatus*: Uint
    wConvst*: Uint
    wLastError*: Uint
    hConvList*: Hconvlist
    ConvCtxt*: Convcontext
    hwnd*: Hwnd
    hwndPartner*: Hwnd

  TCONVINFO* = Convinfo
  Pconvinfo* = ptr Convinfo
  Copydatastruct* {.final, pure.} = object
    dwData*: Dword
    cbData*: Dword
    lpData*: Pvoid

  TCOPYDATASTRUCT* = Copydatastruct
  Pcopydatastruct* = ptr Copydatastruct
  Cpinfo* {.final, pure.} = object
    MaxCharSize*: Uint
    DefaultChar*: Array[0..(MAX_DEFAULTCHAR) - 1, Int8]
    LeadByte*: Array[0..(MAX_LEADBYTES) - 1, Int8]

  Lpcpinfo* = ptr Cpinfo
  Tcpinfo* = Cpinfo
  Pcpinfo* = ptr Cpinfo
  Cplinfo* {.final, pure.} = object
    idIcon*: Int32
    idName*: Int32
    idInfo*: Int32
    lData*: Long

  TCPLINFO* = Cplinfo
  Pcplinfo* = ptr Cplinfo
  CreateProcessDebugInfo* {.final, pure.} = object
    hFile*: Handle
    hProcess*: Handle
    hThread*: Handle
    lpBaseOfImage*: Lpvoid
    dwDebugInfoFileOffset*: Dword
    nDebugInfoSize*: Dword
    lpThreadLocalBase*: Lpvoid
    lpStartAddress*: LpthreadStartRoutine
    lpImageName*: Lpvoid
    fUnicode*: Int16

  TCREATEPROCESSDEBUGINFO* = CreateProcessDebugInfo
  Pcreateprocessdebuginfo* = ptr CreateProcessDebugInfo
  CreateThreadDebugInfo* {.final, pure.} = object
    hThread*: Handle
    lpThreadLocalBase*: Lpvoid
    lpStartAddress*: LpthreadStartRoutine

  TCREATETHREADDEBUGINFO* = CreateThreadDebugInfo
  Pcreatethreaddebuginfo* = ptr CreateThreadDebugInfo

  Currencyfmt* {.final, pure.} = object
    NumDigits*: Uint
    LeadingZero*: Uint
    Grouping*: Uint
    lpDecimalSep*: Lptstr
    lpThousandSep*: Lptstr
    NegativeOrder*: Uint
    PositiveOrder*: Uint
    lpCurrencySymbol*: Lptstr

  Tcurrencyfmt* = Currencyfmt
  Pcurrencyfmt* = ptr Currencyfmt
  Cursorshape* {.final, pure.} = object
    xHotSpot*: Int32
    yHotSpot*: Int32
    cx*: Int32
    cy*: Int32
    cbWidth*: Int32
    Planes*: Int8
    BitsPixel*: Int8

  Lpcursorshape* = ptr Cursorshape
  TCURSORSHAPE* = Cursorshape
  Pcursorshape* = ptr Cursorshape
  Cwpretstruct* {.final, pure.} = object
    lResult*: Lresult
    lParam*: Lparam
    wParam*: Wparam
    message*: Dword
    hwnd*: Hwnd

  TCWPRETSTRUCT* = Cwpretstruct
  Pcwpretstruct* = ptr Cwpretstruct
  Cwpstruct* {.final, pure.} = object
    lParam*: Lparam
    wParam*: Wparam
    message*: Uint
    hwnd*: Hwnd

  TCWPSTRUCT* = Cwpstruct
  Pcwpstruct* = ptr Cwpstruct
  DatatypesInfo1* {.final, pure.} = object
    pName*: Lptstr

  TDATATYPESINFO1* = DatatypesInfo1
  Pdatatypesinfo1* = ptr DatatypesInfo1
  Ddeack* {.final, pure.} = object
    flag0*: Int16

  TDDEACK* = Ddeack
  Pddeack* = ptr Ddeack

const
  bmDDEACKBAppReturnCode* = 0x000000FF'i16
  bpDDEACKBAppReturnCode* = 0'i16
  bmDDEACKReserved* = 0x00003F00'i16
  bpDDEACKReserved* = 8'i16
  bmDDEACKFBusy* = 0x00004000'i16
  bpDDEACKFBusy* = 14'i16
  bmDDEACKFAck* = 0x00008000'i16
  bpDDEACKFAck* = 15'i16

proc bAppReturnCode*(a: var Ddeack): Int16
proc setBAppReturnCode*(a: var Ddeack, bAppReturnCode: Int16)
proc reserved*(a: var Ddeack): Int16
proc setReserved*(a: var Ddeack, reserved: Int16)
proc fBusy*(a: var Ddeack): Int16
proc setFBusy*(a: var Ddeack, fBusy: Int16)
proc fAck*(a: var Ddeack): Int16
proc setFAck*(a: var Ddeack, fAck: Int16)
type
  Ddeadvise* {.final, pure.} = object
    flag0*: Int16
    cfFormat*: Short

  TDDEADVISE* = Ddeadvise
  Pddeadvise* = ptr Ddeadvise

const
  bmDDEADVISEReserved* = 0x00003FFF'i16
  bpDDEADVISEReserved* = 0'i16
  bmDDEADVISEFDeferUpd* = 0x00004000'i16
  bpDDEADVISEFDeferUpd* = 14'i16
  bmDDEADVISEFAckReq* = 0x00008000'i16
  bpDDEADVISEFAckReq* = 15'i16

proc reserved*(a: var Ddeadvise): Int16
proc setReserved*(a: var Ddeadvise, reserved: Int16)
proc fDeferUpd*(a: var Ddeadvise): Int16
proc setFDeferUpd*(a: var Ddeadvise, fDeferUpd: Int16)
proc fAckReq*(a: var Ddeadvise): Int16
proc setFAckReq*(a: var Ddeadvise, fAckReq: Int16)
type
  Ddedata* {.final, pure.} = object
    flag0*: Int16
    cfFormat*: Short
    Value*: Array[0..0, Int8]

  Pddedata* = ptr Ddedata

const
  bmDDEDATAUnused* = 0x00000FFF'i16
  bpDDEDATAUnused* = 0'i16
  bmDDEDATAFResponse* = 0x00001000'i16
  bpDDEDATAFResponse* = 12'i16
  bmDDEDATAFRelease* = 0x00002000'i16
  bpDDEDATAFRelease* = 13'i16
  bmDDEDATAReserved* = 0x00004000'i16
  bpDDEDATAReserved* = 14'i16
  bmDDEDATAFAckReq* = 0x00008000'i16
  bpDDEDATAFAckReq* = 15'i16

proc unused*(a: var Ddedata): Int16
proc setUnused*(a: var Ddedata, unused: Int16)
proc fResponse*(a: var Ddedata): Int16
proc setFResponse*(a: var Ddedata, fResponse: Int16)
proc fRelease*(a: var Ddedata): Int16
proc setFRelease*(a: var Ddedata, fRelease: Int16)
proc reserved*(a: var Ddedata): Int16
proc setReserved*(a: var Ddedata, reserved: Int16)
proc fAckReq*(a: var Ddedata): Int16
proc setFAckReq*(a: var Ddedata, fAckReq: Int16)
type
  Ddeln* {.final, pure.} = object
    flag0*: Int16
    cfFormat*: Short

  TDDELN* = Ddeln
  Pddeln* = ptr Ddeln

const
  bmDDELNUnused* = 0x00001FFF'i16
  bpDDELNUnused* = 0'i16
  bmDDELNFRelease* = 0x00002000'i16
  bpDDELNFRelease* = 13'i16
  bmDDELNFDeferUpd* = 0x00004000'i16
  bpDDELNFDeferUpd* = 14'i16
  bmDDELNFAckReq* = 0x00008000'i16
  bpDDELNFAckReq* = 15'i16

proc unused*(a: var Ddeln): Int16
proc setUnused*(a: var Ddeln, unused: Int16)
proc fRelease*(a: var Ddeln): Int16
proc setFRelease*(a: var Ddeln, fRelease: Int16)
proc fDeferUpd*(a: var Ddeln): Int16
proc setFDeferUpd*(a: var Ddeln, fDeferUpd: Int16)
proc fAckReq*(a: var Ddeln): Int16
proc setFAckReq*(a: var Ddeln, fAckReq: Int16)
type
  DdemlMsgHookData* {.final, pure.} = object
    uiLo*: Uint
    uiHi*: Uint
    cbData*: Dword
    Data*: Array[0..7, Dword]

  TDDEMLMSGHOOKDATA* = DdemlMsgHookData
  Pddemlmsghookdata* = ptr DdemlMsgHookData
  Ddepoke* {.final, pure.} = object
    flag0*: Int16
    cfFormat*: Short
    Value*: Array[0..0, Int8]

  TDDEPOKE* = Ddepoke
  Pddepoke* = ptr Ddepoke

const
  bmDDEPOKEUnused* = 0x00001FFF'i16
  bpDDEPOKEUnused* = 0'i16
  bmDDEPOKEFRelease* = 0x00002000'i16
  bpDDEPOKEFRelease* = 13'i16
  bmDDEPOKEFReserved* = 0x0000C000'i16
  bpDDEPOKEFReserved* = 14'i16

proc unused*(a: var Ddepoke): Int16
proc setUnused*(a: var Ddepoke, unused: Int16)
proc fRelease*(a: var Ddepoke): Int16
proc setFRelease*(a: var Ddepoke, fRelease: Int16)
proc fReserved*(a: var Ddepoke): Int16
proc setFReserved*(a: var Ddepoke, fReserved: Int16)
type
  Ddeup* {.final, pure.} = object
    flag0*: Int16
    cfFormat*: Short
    rgb*: Array[0..0, Int8]

  TDDEUP* = Ddeup
  Pddeup* = ptr Ddeup

const
  bmDDEUPUnused* = 0x00000FFF'i16
  bpDDEUPUnused* = 0'i16
  bmDDEUPFAck* = 0x00001000'i16
  bpDDEUPFAck* = 12'i16
  bmDDEUPFRelease* = 0x00002000'i16
  bpDDEUPFRelease* = 13'i16
  bmDDEUPFReserved* = 0x00004000'i16
  bpDDEUPFReserved* = 14'i16
  bmDDEUPFAckReq* = 0x00008000'i16
  bpDDEUPFAckReq* = 15'i16

proc unused*(a: var Ddeup): Int16
proc setUnused*(a: var Ddeup, unused: Int16)
proc fAck*(a: var Ddeup): Int16
proc setFAck*(a: var Ddeup, fAck: Int16)
proc fRelease*(a: var Ddeup): Int16
proc setFRelease*(a: var Ddeup, fRelease: Int16)
proc fReserved*(a: var Ddeup): Int16
proc setFReserved*(a: var Ddeup, fReserved: Int16)
proc fAckReq*(a: var Ddeup): Int16
proc setFAckReq*(a: var Ddeup, fAckReq: Int16)
type
  ExceptionRecord* {.final, pure.} = object
    ExceptionCode*: Dword
    ExceptionFlags*: Dword
    ExceptionRecord*: ptr ExceptionRecord
    ExceptionAddress*: Pvoid
    NumberParameters*: Dword
    ExceptionInformation*: Array[0..(EXCEPTION_MAXIMUM_PARAMETERS) - 1,
                                 UlongPtr]

  PexceptionRecord* = ptr ExceptionRecord
  TEXCEPTIONRECORD* = ExceptionRecord
  ExceptionDebugInfo* {.final, pure.} = object
    ExceptionRecord*: ExceptionRecord
    dwFirstChance*: Dword

  PexceptionDebugInfo* = ptr ExceptionDebugInfo
  TEXCEPTIONDEBUGINFO* = ExceptionDebugInfo
  ExceptionRecord32* {.final, pure.} = object
    ExceptionCode*: Dword
    ExceptionFlags*: Dword
    ExceptionRecord*: Dword
    ExceptionAddress*: Dword
    NumberParameters*: Dword
    ExceptionInformation*: Array[0..(EXCEPTION_MAXIMUM_PARAMETERS) - 1, Dword]

  PexceptionRecord32* = ptr ExceptionRecord32
  TExceptionRecord32* = ExceptionRecord32
  ExceptionDebugInfo32* {.final, pure.} = object
    ExceptionRecord*: ExceptionRecord32
    dwFirstChance*: Dword

  PexceptionDebugInfo32* = ptr ExceptionDebugInfo32
  TExceptionDebugInfo32* = ExceptionDebugInfo32
  ExceptionRecord64* {.final, pure.} = object
    ExceptionCode*: Dword
    ExceptionFlags*: Dword
    ExceptionRecord*: Dword64
    ExceptionAddress*: Dword64
    NumberParameters*: Dword
    unusedAlignment*: Dword
    ExceptionInformation*: Array[0..(EXCEPTION_MAXIMUM_PARAMETERS) - 1, Dword64]

  PexceptionRecord64* = ptr ExceptionRecord64
  TExceptionRecord64* = ExceptionRecord64
  ExceptionDebugInfo64* {.final, pure.} = object
    ExceptionRecord*: ExceptionRecord64
    dwFirstChance*: Dword

  PexceptionDebugInfo64* = ptr ExceptionDebugInfo64
  TExceptionDebugInfo64* = ExceptionDebugInfo64
  ExitProcessDebugInfo* {.final, pure.} = object
    dwExitCode*: Dword

  TEXITPROCESSDEBUGINFO* = ExitProcessDebugInfo
  Pexitprocessdebuginfo* = ptr ExitProcessDebugInfo
  ExitThreadDebugInfo* {.final, pure.} = object
    dwExitCode*: Dword

  TEXITTHREADDEBUGINFO* = ExitThreadDebugInfo
  Pexitthreaddebuginfo* = ptr ExitThreadDebugInfo
  LoadDllDebugInfo* {.final, pure.} = object
    hFile*: Handle
    lpBaseOfDll*: Lpvoid
    dwDebugInfoFileOffset*: Dword
    nDebugInfoSize*: Dword
    lpImageName*: Lpvoid
    fUnicode*: Int16

  TLOADDLLDEBUGINFO* = LoadDllDebugInfo
  Ploaddlldebuginfo* = ptr LoadDllDebugInfo
  UnloadDllDebugInfo* {.final, pure.} = object
    lpBaseOfDll*: Lpvoid

  TUNLOADDLLDEBUGINFO* = UnloadDllDebugInfo
  Punloaddlldebuginfo* = ptr UnloadDllDebugInfo
  OutputDebugStringInfo* {.final, pure.} = object
    lpDebugStringData*: Lpstr
    fUnicode*: Int16
    nDebugStringLength*: Int16

  TOUTPUTDEBUGSTRINGINFO* = OutputDebugStringInfo
  Poutputdebugstringinfo* = ptr OutputDebugStringInfo
  RipInfo* {.final, pure.} = object
    dwError*: Dword
    dwType*: Dword

  TRIPINFO* = RipInfo
  Pripinfo* = ptr RipInfo
  DebugEvent* {.final, pure.} = object
    dwDebugEventCode*: Dword
    dwProcessId*: Dword
    dwThreadId*: Dword
    data*: Array[0..15, Dword]

  LpdebugEvent* = ptr DebugEvent
  TDEBUGEVENT* = DebugEvent
  Pdebugevent* = ptr DebugEvent
  Debughookinfo* {.final, pure.} = object
    idThread*: Dword
    idThreadInstaller*: Dword
    lParam*: Lparam
    wParam*: Wparam
    code*: Int32

  TDEBUGHOOKINFO* = Debughookinfo
  Pdebughookinfo* = ptr Debughookinfo
  Deleteitemstruct* {.final, pure.} = object
    CtlType*: Uint
    CtlID*: Uint
    itemID*: Uint
    hwndItem*: Hwnd
    itemData*: UlongPtr

  TDELETEITEMSTRUCT* = Deleteitemstruct
  Pdeleteitemstruct* = ptr Deleteitemstruct
  DevBroadcastHdr* {.final, pure.} = object
    dbch_size*: Ulong
    dbch_devicetype*: Ulong
    dbch_reserved*: Ulong

  PdevBroadcastHdr* = ptr DevBroadcastHdr
  TDEVBROADCASTHDR* = DevBroadcastHdr
  DevBroadcastOem* {.final, pure.} = object
    dbco_size*: Ulong
    dbco_devicetype*: Ulong
    dbco_reserved*: Ulong
    dbco_identifier*: Ulong
    dbco_suppfunc*: Ulong

  PdevBroadcastOem* = ptr DevBroadcastOem
  TDEVBROADCASTOEM* = DevBroadcastOem
  DevBroadcastPort* {.final, pure.} = object
    dbcp_size*: Ulong
    dbcp_devicetype*: Ulong
    dbcp_reserved*: Ulong
    dbcp_name*: Array[0..0, Char]

  PdevBroadcastPort* = ptr DevBroadcastPort
  TDEVBROADCASTPORT* = DevBroadcastPort
  DevBroadcastUserdefined* {.final, pure.} = object
    dbud_dbh*: DevBroadcastHdr
    dbud_szName*: Array[0..0, Char]
    dbud_rgbUserDefined*: Array[0..0, Int8]

  TDEVBROADCASTUSERDEFINED* = DevBroadcastUserdefined
  Pdevbroadcastuserdefined* = ptr DevBroadcastUserdefined
  DevBroadcastVolume* {.final, pure.} = object
    dbcv_size*: Ulong
    dbcv_devicetype*: Ulong
    dbcv_reserved*: Ulong
    dbcv_unitmask*: Ulong
    dbcv_flags*: Ushort

  PdevBroadcastVolume* = ptr DevBroadcastVolume
  TDEVBROADCASTVOLUME* = DevBroadcastVolume
  Devmode* {.final, pure.} = object
    dmDeviceName*: Array[0..(CCHDEVICENAME) - 1, Bchar]
    dmSpecVersion*: Int16
    dmDriverVersion*: Int16
    dmSize*: Int16
    dmDriverExtra*: Int16
    dmFields*: Dword
    dmOrientation*: Int16
    dmPaperSize*: Int16
    dmPaperLength*: Int16
    dmPaperWidth*: Int16
    dmScale*: Int16
    dmCopies*: Int16
    dmDefaultSource*: Int16
    dmPrintQuality*: Int16
    dmColor*: Int16
    dmDuplex*: Int16
    dmYResolution*: Int16
    dmTTOption*: Int16
    dmCollate*: Int16
    dmFormName*: Array[0..(CCHFORMNAME) - 1, Bchar]
    dmLogPixels*: Int16
    dmBitsPerPel*: Dword
    dmPelsWidth*: Dword
    dmPelsHeight*: Dword
    dmDisplayFlags*: Dword
    dmDisplayFrequency*: Dword
    dmICMMethod*: Dword
    dmICMIntent*: Dword
    dmMediaType*: Dword
    dmDitherType*: Dword
    dmICCManufacturer*: Dword
    dmICCModel*: Dword        # other union part:
                              # dmPosition: POINTL;
                              # dmDisplayOrientation: DWORD;
                              # dmDisplayFixedOutput: DWORD;

  Lpdevmode* = ptr Devmode
  Devicemode* = Devmode
  Tdevicemode* = Devmode
  TdevicemodeA* = Devmode
  PDeviceModeA* = Lpdevmode
  PDeviceMode* = Lpdevmode
  TDEVMODE* = Devmode
  Pdevmode* = Lpdevmode
  DevmodeW* {.final, pure.} = object
    dmDeviceName*: Array[0..CCHDEVICENAME - 1, Wchar]
    dmSpecVersion*: Int16
    dmDriverVersion*: Int16
    dmSize*: Int16
    dmDriverExtra*: Int16
    dmFields*: Dword
    dmOrientation*: Short
    dmPaperSize*: Short
    dmPaperLength*: Short
    dmPaperWidth*: Short
    dmScale*: Short
    dmCopies*: Short
    dmDefaultSource*: Short
    dmPrintQuality*: Short
    dmColor*: Short
    dmDuplex*: Short
    dmYResolution*: Short
    dmTTOption*: Short
    dmCollate*: Short
    dmFormName*: Array[0..CCHFORMNAME - 1, Wchar]
    dmLogPixels*: Int16
    dmBitsPerPel*: Dword
    dmPelsWidth*: Dword
    dmPelsHeight*: Dword
    dmDisplayFlags*: Dword
    dmDisplayFrequency*: Dword
    dmICMMethod*: Dword
    dmICMIntent*: Dword
    dmMediaType*: Dword
    dmDitherType*: Dword
    dmReserved1*: Dword
    dmReserved2*: Dword
    dmPanningWidth*: Dword
    dmPanningHeight*: Dword

  Lpdevmodew* = ptr DevmodeW
  DevicemodeW* = DevmodeW
  TDeviceModeW* = DevmodeW
  PDeviceModeW* = Lpdevmodew
  TDEVMODEW* = DevmodeW
  Pdevmodew* = Lpdevmodew
  Devnames* {.final, pure.} = object
    wDriverOffset*: Int16
    wDeviceOffset*: Int16
    wOutputOffset*: Int16
    wDefault*: Int16

  Lpdevnames* = ptr Devnames
  TDEVNAMES* = Devnames
  Pdevnames* = ptr Devnames
  Dibsection* {.final, pure.} = object
    dsBm*: Bitmap
    dsBmih*: Bitmapinfoheader
    dsBitfields*: Array[0..2, Dword]
    dshSection*: Handle
    dsOffset*: Dword

  TDIBSECTION* = Dibsection
  Pdibsection* = ptr Dibsection #
                                #     LARGE_INTEGER = record
                                #        case byte of
                                #          0: (LowPart : DWORD;
                                #              HighPart : LONG);
                                #          1: (QuadPart : LONGLONG);
                                #       end;     ULARGE_INTEGER = record
                                #        case byte of
                                #          0: (LowPart : DWORD;
                                #              HighPart : DWORD);
                                #          1: (QuadPart : LONGLONG);
                                #       end;
                                #
  LargeInteger* = Int64
  UlargeInteger* = Int64
  PlargeInteger* = ptr LargeInteger
  TLargeInteger* = Int64
  PulargeInteger* = ptr UlargeInteger
  TULargeInteger* = Int64
  DiskGeometry* {.final, pure.} = object
    Cylinders*: LargeInteger
    MediaType*: MediaType
    TracksPerCylinder*: Dword
    SectorsPerTrack*: Dword
    BytesPerSector*: Dword

  TDISKGEOMETRY* = DiskGeometry
  Pdiskgeometry* = ptr DiskGeometry
  DiskPerformance* {.final, pure.} = object
    BytesRead*: LargeInteger
    BytesWritten*: LargeInteger
    ReadTime*: LargeInteger
    WriteTime*: LargeInteger
    ReadCount*: Dword
    WriteCount*: Dword
    QueueDepth*: Dword

  TDISKPERFORMANCE* = DiskPerformance
  Pdiskperformance* = ptr DiskPerformance
  Dlgitemtemplate* {.final, pure.} = object
    style*: Dword
    dwExtendedStyle*: Dword
    x*: Int16
    y*: Int16
    cx*: Int16
    cy*: Int16
    id*: Int16

  Lpdlgitemtemplate* = ptr Dlgitemtemplate
  TDLGITEMTEMPLATE* = Dlgitemtemplate
  Pdlgitemtemplate* = ptr Dlgitemtemplate
  Dlgtemplate* {.final, pure.} = object
    style*: Dword
    dwExtendedStyle*: Dword
    cdit*: Int16
    x*: Int16
    y*: Int16
    cx*: Int16
    cy*: Int16

  Lpdlgtemplate* = ptr Dlgtemplate
  Lpcdlgtemplate* = ptr Dlgtemplate
  TDLGTEMPLATE* = Dlgtemplate
  Pdlgtemplate* = ptr Dlgtemplate
  DocInfo1* {.final, pure.} = object
    pDocName*: Lptstr
    pOutputFile*: Lptstr
    pDatatype*: Lptstr

  TDOCINFO1* = DocInfo1
  Pdocinfo1* = ptr DocInfo1
  DocInfo2* {.final, pure.} = object
    pDocName*: Lptstr
    pOutputFile*: Lptstr
    pDatatype*: Lptstr
    dwMode*: Dword
    JobId*: Dword

  TDOCINFO2* = DocInfo2
  Pdocinfo2* = ptr DocInfo2
  Docinfo* {.final, pure.} = object
    cbSize*: Int32
    lpszDocName*: Lpctstr
    lpszOutput*: Lpctstr
    lpszDatatype*: Lpctstr
    fwType*: Dword

  TDOCINFO* = Docinfo
  TDOCINFOA* = Docinfo
  Pdocinfo* = ptr Docinfo
  Draglistinfo* {.final, pure.} = object
    uNotification*: Uint
    hWnd*: Hwnd
    ptCursor*: Point

  Lpdraglistinfo* = ptr Draglistinfo
  TDRAGLISTINFO* = Draglistinfo
  Pdraglistinfo* = ptr Draglistinfo
  Drawitemstruct* {.final, pure.} = object
    CtlType*: Uint
    CtlID*: Uint
    itemID*: Uint
    itemAction*: Uint
    itemState*: Uint
    hwndItem*: Hwnd
    hDC*: Hdc
    rcItem*: Rect
    itemData*: UlongPtr

  Lpdrawitemstruct* = ptr Drawitemstruct
  TDRAWITEMSTRUCT* = Drawitemstruct
  Pdrawitemstruct* = ptr Drawitemstruct
  Drawtextparams* {.final, pure.} = object
    cbSize*: Uint
    iTabLength*: Int32
    iLeftMargin*: Int32
    iRightMargin*: Int32
    uiLengthDrawn*: Uint

  Lpdrawtextparams* = ptr Drawtextparams
  TDRAWTEXTPARAMS* = Drawtextparams
  Pdrawtextparams* = ptr Drawtextparams
  PartitionInformation* {.final, pure.} = object
    PartitionType*: Int8
    BootIndicator*: Bool
    RecognizedPartition*: Bool
    RewritePartition*: Bool
    StartingOffset*: LargeInteger
    PartitionLength*: LargeInteger
    HiddenSectors*: LargeInteger

  TPARTITIONINFORMATION* = PartitionInformation
  Ppartitioninformation* = ptr PartitionInformation
  DriveLayoutInformation* {.final, pure.} = object
    PartitionCount*: Dword
    Signature*: Dword
    PartitionEntry*: Array[0..0, PartitionInformation]

  TDRIVELAYOUTINFORMATION* = DriveLayoutInformation
  Pdrivelayoutinformation* = ptr DriveLayoutInformation
  DriverInfo1* {.final, pure.} = object
    pName*: Lptstr

  TDRIVERINFO1* = DriverInfo1
  Pdriverinfo1* = ptr DriverInfo1
  DriverInfo2* {.final, pure.} = object
    cVersion*: Dword
    pName*: Lptstr
    pEnvironment*: Lptstr
    pDriverPath*: Lptstr
    pDataFile*: Lptstr
    pConfigFile*: Lptstr

  TDRIVERINFO2* = DriverInfo2
  Pdriverinfo2* = ptr DriverInfo2
  DriverInfo3* {.final, pure.} = object
    cVersion*: Dword
    pName*: Lptstr
    pEnvironment*: Lptstr
    pDriverPath*: Lptstr
    pDataFile*: Lptstr
    pConfigFile*: Lptstr
    pHelpFile*: Lptstr
    pDependentFiles*: Lptstr
    pMonitorName*: Lptstr
    pDefaultDataType*: Lptstr

  TDRIVERINFO3* = DriverInfo3
  Pdriverinfo3* = ptr DriverInfo3
  Editstream* {.final, pure.} = object
    dwCookie*: Dword
    dwError*: Dword
    pfnCallback*: Editstreamcallback

  Teditstream* = Editstream
  Peditstream* = ptr Editstream
  Emr* {.final, pure.} = object
    iType*: Dword
    nSize*: Dword

  TEMR* = Emr
  Pemr* = ptr Emr
  Emranglearc* {.final, pure.} = object
    emr*: Emr
    ptlCenter*: Pointl
    nRadius*: Dword
    eStartAngle*: Float32
    eSweepAngle*: Float32

  TEMRANGLEARC* = Emranglearc
  Pemranglearc* = ptr Emranglearc
  Emrarc* {.final, pure.} = object
    emr*: Emr
    rclBox*: Rectl
    ptlStart*: Pointl
    ptlEnd*: Pointl

  TEMRARC* = Emrarc
  Pemrarc* = ptr Emrarc
  Emrarcto* = Emrarc
  TEMRARCTO* = Emrarc
  Pemrarcto* = ptr Emrarc
  Emrchord* = Emrarc
  TEMRCHORD* = Emrarc
  Pemrchord* = ptr Emrarc
  Emrpie* = Emrarc
  TEMRPIE* = Emrarc
  Pemrpie* = ptr Emrarc
  Xform* {.final, pure.} = object
    eM11*: Float32
    eM12*: Float32
    eM21*: Float32
    eM22*: Float32
    eDx*: Float32
    eDy*: Float32

  Lpxform* = ptr Xform
  TXFORM* = Xform
  Pxform* = ptr Xform
  Emrbitblt* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    xDest*: Long
    yDest*: Long
    cxDest*: Long
    cyDest*: Long
    dwRop*: Dword
    xSrc*: Long
    ySrc*: Long
    xformSrc*: Xform
    crBkColorSrc*: Colorref
    iUsageSrc*: Dword
    offBmiSrc*: Dword
    offBitsSrc*: Dword
    cbBitsSrc*: Dword

  TEMRBITBLT* = Emrbitblt
  Pemrbitblt* = ptr Emrbitblt
  Logbrush* {.final, pure.} = object
    lbStyle*: Uint
    lbColor*: Colorref
    lbHatch*: Long

  TLOGBRUSH* = Logbrush
  Plogbrush* = ptr Logbrush
  Emrcreatebrushindirect* {.final, pure.} = object
    emr*: Emr
    ihBrush*: Dword
    lb*: Logbrush

  TEMRCREATEBRUSHINDIRECT* = Emrcreatebrushindirect
  Pemrcreatebrushindirect* = ptr Emrcreatebrushindirect
  Lcscstype* = Long
  Lcsgamutmatch* = Long
  Logcolorspace* {.final, pure.} = object
    lcsSignature*: Dword
    lcsVersion*: Dword
    lcsSize*: Dword
    lcsCSType*: Lcscstype
    lcsIntent*: Lcsgamutmatch
    lcsEndpoints*: Ciexyztriple
    lcsGammaRed*: Dword
    lcsGammaGreen*: Dword
    lcsGammaBlue*: Dword
    lcsFilename*: Array[0..(MAX_PATH) - 1, TCHAR]

  Lplogcolorspace* = ptr Logcolorspace
  TLOGCOLORSPACE* = Logcolorspace
  TLOGCOLORSPACEA* = Logcolorspace
  Plogcolorspace* = ptr Logcolorspace
  Emrcreatecolorspace* {.final, pure.} = object
    emr*: Emr
    ihCS*: Dword
    lcs*: Logcolorspace

  TEMRCREATECOLORSPACE* = Emrcreatecolorspace
  Pemrcreatecolorspace* = ptr Emrcreatecolorspace
  Emrcreatedibpatternbrushpt* {.final, pure.} = object
    emr*: Emr
    ihBrush*: Dword
    iUsage*: Dword
    offBmi*: Dword
    cbBmi*: Dword
    offBits*: Dword
    cbBits*: Dword

  TEMRCREATEDIBPATTERNBRUSHPT* = Emrcreatedibpatternbrushpt
  Pemrcreatedibpatternbrushpt* = Emrcreatedibpatternbrushpt
  Emrcreatemonobrush* {.final, pure.} = object
    emr*: Emr
    ihBrush*: Dword
    iUsage*: Dword
    offBmi*: Dword
    cbBmi*: Dword
    offBits*: Dword
    cbBits*: Dword

  TEMRCREATEMONOBRUSH* = Emrcreatemonobrush
  Pemrcreatemonobrush* = ptr Emrcreatemonobrush
  Paletteentry* {.final, pure.} = object
    peRed*: Int8
    peGreen*: Int8
    peBlue*: Int8
    peFlags*: Int8

  Lppaletteentry* = ptr Paletteentry
  TPALETTEENTRY* = Paletteentry
  Ppaletteentry* = ptr Paletteentry
  Logpalette* {.final, pure.} = object
    palVersion*: Int16
    palNumEntries*: Int16
    palPalEntry*: Array[0..0, Paletteentry]

  Lplogpalette* = ptr Logpalette
  Nplogpalette* = ptr Logpalette
  TLOGPALETTE* = Logpalette
  Plogpalette* = ptr Logpalette
  Emrcreatepalette* {.final, pure.} = object
    emr*: Emr
    ihPal*: Dword
    lgpl*: Logpalette

  TEMRCREATEPALETTE* = Emrcreatepalette
  Pemrcreatepalette* = ptr Emrcreatepalette
  Logpen* {.final, pure.} = object
    lopnStyle*: Uint
    lopnWidth*: Point
    lopnColor*: Colorref

  TLOGPEN* = Logpen
  Plogpen* = ptr Logpen
  Emrcreatepen* {.final, pure.} = object
    emr*: Emr
    ihPen*: Dword
    lopn*: Logpen

  TEMRCREATEPEN* = Emrcreatepen
  Pemrcreatepen* = ptr Emrcreatepen
  Emrellipse* {.final, pure.} = object
    emr*: Emr
    rclBox*: Rectl

  TEMRELLIPSE* = Emrellipse
  Pemrellipse* = ptr Emrellipse
  Emrrectangle* = Emrellipse
  TEMRRECTANGLE* = Emrellipse
  Pemrrectangle* = ptr Emrellipse
  Emreof* {.final, pure.} = object
    emr*: Emr
    nPalEntries*: Dword
    offPalEntries*: Dword
    nSizeLast*: Dword

  TEMREOF* = Emreof
  Pemreof* = ptr Emreof
  Emrexcludecliprect* {.final, pure.} = object
    emr*: Emr
    rclClip*: Rectl

  TEMREXCLUDECLIPRECT* = Emrexcludecliprect
  Pemrexcludecliprect* = ptr Emrexcludecliprect
  Emrintersectcliprect* = Emrexcludecliprect
  TEMRINTERSECTCLIPRECT* = Emrexcludecliprect
  Pemrintersectcliprect* = ptr Emrexcludecliprect
  Panose* {.final, pure.} = object
    bFamilyType*: Int8
    bSerifStyle*: Int8
    bWeight*: Int8
    bProportion*: Int8
    bContrast*: Int8
    bStrokeVariation*: Int8
    bArmStyle*: Int8
    bLetterform*: Int8
    bMidline*: Int8
    bXHeight*: Int8

  TPANOSE* = Panose
  Ppanose* = ptr Panose
  Extlogfont* {.final, pure.} = object
    elfLogFont*: Logfont
    elfFullName*: Array[0..(LF_FULLFACESIZE) - 1, Bchar]
    elfStyle*: Array[0..(LF_FACESIZE) - 1, Bchar]
    elfVersion*: Dword
    elfStyleSize*: Dword
    elfMatch*: Dword
    elfReserved*: Dword
    elfVendorId*: Array[0..(ELF_VENDOR_SIZE) - 1, Int8]
    elfCulture*: Dword
    elfPanose*: Panose

  TEXTLOGFONT* = Extlogfont
  Pextlogfont* = ptr Extlogfont
  Emrextcreatefontindirectw* {.final, pure.} = object
    emr*: Emr
    ihFont*: Dword
    elfw*: Extlogfont

  TEMREXTCREATEFONTINDIRECTW* = Emrextcreatefontindirectw
  Pemrextcreatefontindirectw* = ptr Emrextcreatefontindirectw
  Extlogpen* {.final, pure.} = object
    elpPenStyle*: Uint
    elpWidth*: Uint
    elpBrushStyle*: Uint
    elpColor*: Colorref
    elpHatch*: Long
    elpNumEntries*: Dword
    elpStyleEntry*: Array[0..0, Dword]

  TEXTLOGPEN* = Extlogpen
  Pextlogpen* = ptr Extlogpen
  Emrextcreatepen* {.final, pure.} = object
    emr*: Emr
    ihPen*: Dword
    offBmi*: Dword
    cbBmi*: Dword
    offBits*: Dword
    cbBits*: Dword
    elp*: Extlogpen

  TEMREXTCREATEPEN* = Emrextcreatepen
  Pemrextcreatepen* = ptr Emrextcreatepen
  Emrextfloodfill* {.final, pure.} = object
    emr*: Emr
    ptlStart*: Pointl
    crColor*: Colorref
    iMode*: Dword

  TEMREXTFLOODFILL* = Emrextfloodfill
  Pemrextfloodfill* = ptr Emrextfloodfill
  Emrextselectcliprgn* {.final, pure.} = object
    emr*: Emr
    cbRgnData*: Dword
    iMode*: Dword
    RgnData*: Array[0..0, Int8]

  TEMREXTSELECTCLIPRGN* = Emrextselectcliprgn
  Pemrextselectcliprgn* = ptr Emrextselectcliprgn
  Emrtext* {.final, pure.} = object
    ptlReference*: Pointl
    nChars*: Dword
    offString*: Dword
    fOptions*: Dword
    rcl*: Rectl
    offDx*: Dword

  TEMRTEXT* = Emrtext
  Pemrtext* = ptr Emrtext
  Emrexttextouta* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    iGraphicsMode*: Dword
    exScale*: Float32
    eyScale*: Float32
    emrtext*: Emrtext

  TEMREXTTEXTOUTA* = Emrexttextouta
  Pemrexttextouta* = ptr Emrexttextouta
  Emrexttextoutw* = Emrexttextouta
  TEMREXTTEXTOUTW* = Emrexttextouta
  Pemrexttextoutw* = ptr Emrexttextouta
  Emrfillpath* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl

  TEMRFILLPATH* = Emrfillpath
  Pemrfillpath* = ptr Emrfillpath
  Emrstrokeandfillpath* = Emrfillpath
  TEMRSTROKEANDFILLPATH* = Emrfillpath
  Pemrstrokeandfillpath* = ptr Emrfillpath
  Emrstrokepath* = Emrfillpath
  TEMRSTROKEPATH* = Emrfillpath
  Pemrstrokepath* = ptr Emrfillpath
  Emrfillrgn* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    cbRgnData*: Dword
    ihBrush*: Dword
    RgnData*: Array[0..0, Int8]

  TEMRFILLRGN* = Emrfillrgn
  Pemrfillrgn* = ptr Emrfillrgn
  Emrformat* {.final, pure.} = object
    dSignature*: Dword
    nVersion*: Dword
    cbData*: Dword
    offData*: Dword

  TEMRFORMAT* = Emrformat
  Pemrformat* = ptr Emrformat

  Emrframergn* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    cbRgnData*: Dword
    ihBrush*: Dword
    szlStroke*: Sizel
    RgnData*: Array[0..0, Int8]

  TEMRFRAMERGN* = Emrframergn
  Pemrframergn* = ptr Emrframergn
  Emrgdicomment* {.final, pure.} = object
    emr*: Emr
    cbData*: Dword
    Data*: Array[0..0, Int8]

  TEMRGDICOMMENT* = Emrgdicomment
  Pemrgdicomment* = ptr Emrgdicomment
  Emrinvertrgn* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    cbRgnData*: Dword
    RgnData*: Array[0..0, Int8]

  TEMRINVERTRGN* = Emrinvertrgn
  Pemrinvertrgn* = ptr Emrinvertrgn
  Emrpaintrgn* = Emrinvertrgn
  TEMRPAINTRGN* = Emrinvertrgn
  Pemrpaintrgn* = ptr Emrinvertrgn
  Emrlineto* {.final, pure.} = object
    emr*: Emr
    ptl*: Pointl

  TEMRLINETO* = Emrlineto
  Pemrlineto* = ptr Emrlineto
  Emrmovetoex* = Emrlineto
  TEMRMOVETOEX* = Emrlineto
  Pemrmovetoex* = ptr Emrlineto
  Emrmaskblt* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    xDest*: Long
    yDest*: Long
    cxDest*: Long
    cyDest*: Long
    dwRop*: Dword
    xSrc*: Long
    ySrc*: Long
    xformSrc*: Xform
    crBkColorSrc*: Colorref
    iUsageSrc*: Dword
    offBmiSrc*: Dword
    cbBmiSrc*: Dword
    offBitsSrc*: Dword
    cbBitsSrc*: Dword
    xMask*: Long
    yMask*: Long
    iUsageMask*: Dword
    offBmiMask*: Dword
    cbBmiMask*: Dword
    offBitsMask*: Dword
    cbBitsMask*: Dword

  TEMRMASKBLT* = Emrmaskblt
  Pemrmaskblt* = ptr Emrmaskblt
  Emrmodifyworldtransform* {.final, pure.} = object
    emr*: Emr
    xform*: Xform
    iMode*: Dword

  TEMRMODIFYWORLDTRANSFORM* = Emrmodifyworldtransform
  Pemrmodifyworldtransform* = Emrmodifyworldtransform
  Emroffsetcliprgn* {.final, pure.} = object
    emr*: Emr
    ptlOffset*: Pointl

  TEMROFFSETCLIPRGN* = Emroffsetcliprgn
  Pemroffsetcliprgn* = ptr Emroffsetcliprgn
  Emrplgblt* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    aptlDest*: Array[0..2, Pointl]
    xSrc*: Long
    ySrc*: Long
    cxSrc*: Long
    cySrc*: Long
    xformSrc*: Xform
    crBkColorSrc*: Colorref
    iUsageSrc*: Dword
    offBmiSrc*: Dword
    cbBmiSrc*: Dword
    offBitsSrc*: Dword
    cbBitsSrc*: Dword
    xMask*: Long
    yMask*: Long
    iUsageMask*: Dword
    offBmiMask*: Dword
    cbBmiMask*: Dword
    offBitsMask*: Dword
    cbBitsMask*: Dword

  TEMRPLGBLT* = Emrplgblt
  Pemrplgblt* = ptr Emrplgblt
  Emrpolydraw* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    cptl*: Dword
    aptl*: Array[0..0, Pointl]
    abTypes*: Array[0..0, Int8]

  TEMRPOLYDRAW* = Emrpolydraw
  Pemrpolydraw* = ptr Emrpolydraw
  Emrpolydraw16* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    cpts*: Dword
    apts*: Array[0..0, Points]
    abTypes*: Array[0..0, Int8]

  TEMRPOLYDRAW16* = Emrpolydraw16
  Pemrpolydraw16* = ptr Emrpolydraw16
  Emrpolyline* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    cptl*: Dword
    aptl*: Array[0..0, Pointl]

  TEMRPOLYLINE* = Emrpolyline
  Pemrpolyline* = ptr Emrpolyline
  Emrpolybezier* = Emrpolyline
  TEMRPOLYBEZIER* = Emrpolyline
  Pemrpolybezier* = ptr Emrpolyline
  Emrpolygon* = Emrpolyline
  TEMRPOLYGON* = Emrpolyline
  Pemrpolygon* = ptr Emrpolyline
  Emrpolybezierto* = Emrpolyline
  TEMRPOLYBEZIERTO* = Emrpolyline
  Pemrpolybezierto* = ptr Emrpolyline
  Emrpolylineto* = Emrpolyline
  TEMRPOLYLINETO* = Emrpolyline
  Pemrpolylineto* = ptr Emrpolyline
  Emrpolyline16* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    cpts*: Dword
    apts*: Array[0..0, Pointl]

  TEMRPOLYLINE16* = Emrpolyline16
  Pemrpolyline16* = ptr Emrpolyline16
  Emrpolybezier16* = Emrpolyline16
  TEMRPOLYBEZIER16* = Emrpolyline16
  Pemrpolybezier16* = ptr Emrpolyline16
  Emrpolygon16* = Emrpolyline16
  TEMRPOLYGON16* = Emrpolyline16
  Pemrpolygon16* = ptr Emrpolyline16
  Emrpolybezierto16* = Emrpolyline16
  TEMRPOLYBEZIERTO16* = Emrpolyline16
  Pemrpolybezierto16* = ptr Emrpolyline16
  Emrpolylineto16* = Emrpolyline16
  TEMRPOLYLINETO16* = Emrpolyline16
  Pemrpolylineto16* = ptr Emrpolyline16
  Emrpolypolyline* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    nPolys*: Dword
    cptl*: Dword
    aPolyCounts*: Array[0..0, Dword]
    aptl*: Array[0..0, Pointl]

  TEMRPOLYPOLYLINE* = Emrpolypolyline
  Pemrpolypolyline* = ptr Emrpolypolyline
  Emrpolypolygon* = Emrpolypolyline
  TEMRPOLYPOLYGON* = Emrpolypolyline
  Pemrpolypolygon* = ptr Emrpolypolyline
  Emrpolypolyline16* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    nPolys*: Dword
    cpts*: Dword
    aPolyCounts*: Array[0..0, Dword]
    apts*: Array[0..0, Points]

  TEMRPOLYPOLYLINE16* = Emrpolypolyline16
  Pemrpolypolyline16* = ptr Emrpolypolyline16
  Emrpolypolygon16* = Emrpolypolyline16
  TEMRPOLYPOLYGON16* = Emrpolypolyline16
  Pemrpolypolygon16* = ptr Emrpolypolyline16
  Emrpolytextouta* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    iGraphicsMode*: Dword
    exScale*: Float32
    eyScale*: Float32
    cStrings*: Long
    aemrtext*: Array[0..0, Emrtext]

  TEMRPOLYTEXTOUTA* = Emrpolytextouta
  Pemrpolytextouta* = ptr Emrpolytextouta
  Emrpolytextoutw* = Emrpolytextouta
  TEMRPOLYTEXTOUTW* = Emrpolytextouta
  Pemrpolytextoutw* = ptr Emrpolytextouta
  Emrresizepalette* {.final, pure.} = object
    emr*: Emr
    ihPal*: Dword
    cEntries*: Dword

  TEMRRESIZEPALETTE* = Emrresizepalette
  Pemrresizepalette* = ptr Emrresizepalette
  Emrrestoredc* {.final, pure.} = object
    emr*: Emr
    iRelative*: Long

  TEMRRESTOREDC* = Emrrestoredc
  Pemrrestoredc* = ptr Emrrestoredc
  Emrroundrect* {.final, pure.} = object
    emr*: Emr
    rclBox*: Rectl
    szlCorner*: Sizel

  TEMRROUNDRECT* = Emrroundrect
  Pemrroundrect* = ptr Emrroundrect
  Emrscaleviewportextex* {.final, pure.} = object
    emr*: Emr
    xNum*: Long
    xDenom*: Long
    yNum*: Long
    yDenom*: Long

  TEMRSCALEVIEWPORTEXTEX* = Emrscaleviewportextex
  Pemrscaleviewportextex* = ptr Emrscaleviewportextex
  Emrscalewindowextex* = Emrscaleviewportextex
  TEMRSCALEWINDOWEXTEX* = Emrscaleviewportextex
  Pemrscalewindowextex* = ptr Emrscaleviewportextex
  Emrselectcolorspace* {.final, pure.} = object
    emr*: Emr

    ihCS*: Dword

  TEMRSELECTCOLORSPACE* = Emrselectcolorspace
  Pemrselectcolorspace* = ptr Emrselectcolorspace
  Emrdeletecolorspace* = Emrselectcolorspace
  TEMRDELETECOLORSPACE* = Emrselectcolorspace
  Pemrdeletecolorspace* = ptr Emrselectcolorspace
  Emrselectobject* {.final, pure.} = object
    emr*: Emr
    ihObject*: Dword

  TEMRSELECTOBJECT* = Emrselectobject
  Pemrselectobject* = ptr Emrselectobject
  Emrdeleteobject* = Emrselectobject
  TEMRDELETEOBJECT* = Emrselectobject
  Pemrdeleteobject* = ptr Emrselectobject
  Emrselectpalette* {.final, pure.} = object
    emr*: Emr
    ihPal*: Dword

  TEMRSELECTPALETTE* = Emrselectpalette
  Pemrselectpalette* = ptr Emrselectpalette
  Emrsetarcdirection* {.final, pure.} = object
    emr*: Emr
    iArcDirection*: Dword

  TEMRSETARCDIRECTION* = Emrsetarcdirection
  Pemrsetarcdirection* = ptr Emrsetarcdirection
  Emrsetbkcolor* {.final, pure.} = object
    emr*: Emr
    crColor*: Colorref

  TEMRSETBKCOLOR* = Emrsetbkcolor
  Pemrsetbkcolor* = ptr Emrsetbkcolor
  Emrsettextcolor* = Emrsetbkcolor
  TEMRSETTEXTCOLOR* = Emrsetbkcolor
  Pemrsettextcolor* = ptr Emrsetbkcolor
  Emrsetcoloradjustment* {.final, pure.} = object
    emr*: Emr
    ColorAdjustment*: Coloradjustment

  TEMRSETCOLORADJUSTMENT* = Emrsetcoloradjustment
  Pemrsetcoloradjustment* = ptr Emrsetcoloradjustment
  Emrsetdibitstodevice* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    xDest*: Long
    yDest*: Long
    xSrc*: Long
    ySrc*: Long
    cxSrc*: Long
    cySrc*: Long
    offBmiSrc*: Dword
    cbBmiSrc*: Dword
    offBitsSrc*: Dword
    cbBitsSrc*: Dword
    iUsageSrc*: Dword
    iStartScan*: Dword
    cScans*: Dword

  TEMRSETDIBITSTODEVICE* = Emrsetdibitstodevice
  Pemrsetdibitstodevice* = ptr Emrsetdibitstodevice
  Emrsetmapperflags* {.final, pure.} = object
    emr*: Emr
    dwFlags*: Dword

  TEMRSETMAPPERFLAGS* = Emrsetmapperflags
  Pemrsetmapperflags* = ptr Emrsetmapperflags
  Emrsetmiterlimit* {.final, pure.} = object
    emr*: Emr
    eMiterLimit*: Float32

  TEMRSETMITERLIMIT* = Emrsetmiterlimit
  Pemrsetmiterlimit* = ptr Emrsetmiterlimit
  Emrsetpaletteentries* {.final, pure.} = object
    emr*: Emr
    ihPal*: Dword
    iStart*: Dword
    cEntries*: Dword
    aPalEntries*: Array[0..0, Paletteentry]

  TEMRSETPALETTEENTRIES* = Emrsetpaletteentries
  Pemrsetpaletteentries* = ptr Emrsetpaletteentries
  Emrsetpixelv* {.final, pure.} = object
    emr*: Emr
    ptlPixel*: Pointl
    crColor*: Colorref

  TEMRSETPIXELV* = Emrsetpixelv
  Pemrsetpixelv* = ptr Emrsetpixelv
  Emrsetviewportextex* {.final, pure.} = object
    emr*: Emr
    szlExtent*: Sizel

  TEMRSETVIEWPORTEXTEX* = Emrsetviewportextex
  Pemrsetviewportextex* = ptr Emrsetviewportextex
  Emrsetwindowextex* = Emrsetviewportextex
  TEMRSETWINDOWEXTEX* = Emrsetviewportextex
  Pemrsetwindowextex* = ptr Emrsetviewportextex
  Emrsetviewportorgex* {.final, pure.} = object
    emr*: Emr
    ptlOrigin*: Pointl

  TEMRSETVIEWPORTORGEX* = Emrsetviewportorgex
  Pemrsetviewportorgex* = ptr Emrsetviewportorgex
  Emrsetwindoworgex* = Emrsetviewportorgex
  TEMRSETWINDOWORGEX* = Emrsetviewportorgex
  Pemrsetwindoworgex* = ptr Emrsetviewportorgex
  Emrsetbrushorgex* = Emrsetviewportorgex
  TEMRSETBRUSHORGEX* = Emrsetviewportorgex
  Pemrsetbrushorgex* = ptr Emrsetviewportorgex
  Emrsetworldtransform* {.final, pure.} = object
    emr*: Emr
    xform*: Xform

  TEMRSETWORLDTRANSFORM* = Emrsetworldtransform
  Pemrsetworldtransform* = ptr Emrsetworldtransform
  Emrstretchblt* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    xDest*: Long
    yDest*: Long
    cxDest*: Long
    cyDest*: Long
    dwRop*: Dword
    xSrc*: Long
    ySrc*: Long
    xformSrc*: Xform
    crBkColorSrc*: Colorref
    iUsageSrc*: Dword
    offBmiSrc*: Dword
    cbBmiSrc*: Dword
    offBitsSrc*: Dword
    cbBitsSrc*: Dword
    cxSrc*: Long
    cySrc*: Long

  TEMRSTRETCHBLT* = Emrstretchblt
  Pemrstretchblt* = ptr Emrstretchblt
  Emrstretchdibits* {.final, pure.} = object
    emr*: Emr
    rclBounds*: Rectl
    xDest*: Long
    yDest*: Long
    xSrc*: Long
    ySrc*: Long
    cxSrc*: Long
    cySrc*: Long
    offBmiSrc*: Dword
    cbBmiSrc*: Dword
    offBitsSrc*: Dword
    cbBitsSrc*: Dword
    iUsageSrc*: Dword
    dwRop*: Dword
    cxDest*: Long
    cyDest*: Long

  TEMRSTRETCHDIBITS* = Emrstretchdibits
  Pemrstretchdibits* = ptr Emrstretchdibits
  Emrabortpath* {.final, pure.} = object
    emr*: Emr

  TEMRABORTPATH* = Emrabortpath
  Pemrabortpath* = ptr Emrabortpath
  TABORTPATH* = Emrabortpath
  Emrbeginpath* = Emrabortpath
  TEMRBEGINPATH* = Emrabortpath
  Pemrbeginpath* = ptr Emrabortpath
  Emrendpath* = Emrabortpath
  TEMRENDPATH* = Emrabortpath
  Pemrendpath* = ptr Emrabortpath
  Emrclosefigure* = Emrabortpath
  TEMRCLOSEFIGURE* = Emrabortpath
  Pemrclosefigure* = ptr Emrabortpath
  Emrflattenpath* = Emrabortpath
  TEMRFLATTENPATH* = Emrabortpath
  Pemrflattenpath* = ptr Emrabortpath
  Emrwidenpath* = Emrabortpath
  TEMRWIDENPATH* = Emrabortpath
  Pemrwidenpath* = ptr Emrabortpath
  Emrsetmetargn* = Emrabortpath
  TEMRSETMETARGN* = Emrabortpath
  Pemrsetmetargn* = ptr Emrabortpath
  Emrsavedc* = Emrabortpath
  TEMRSAVEDC* = Emrabortpath
  Pemrsavedc* = ptr Emrabortpath
  Emrrealizepalette* = Emrabortpath
  TEMRREALIZEPALETTE* = Emrabortpath
  Pemrrealizepalette* = ptr Emrabortpath
  Emrselectclippath* {.final, pure.} = object
    emr*: Emr
    iMode*: Dword

  TEMRSELECTCLIPPATH* = Emrselectclippath
  Pemrselectclippath* = ptr Emrselectclippath
  Emrsetbkmode* = Emrselectclippath
  TEMRSETBKMODE* = Emrselectclippath
  Pemrsetbkmode* = ptr Emrselectclippath
  Emrsetmapmode* = Emrselectclippath
  TEMRSETMAPMODE* = Emrselectclippath
  Pemrsetmapmode* = ptr Emrselectclippath
  Emrsetpolyfillmode* = Emrselectclippath
  TEMRSETPOLYFILLMODE* = Emrselectclippath
  Pemrsetpolyfillmode* = ptr Emrselectclippath
  Emrsetrop2* = Emrselectclippath
  TEMRSETROP2* = Emrselectclippath
  Pemrsetrop2* = ptr Emrselectclippath
  Emrsetstretchbltmode* = Emrselectclippath
  TEMRSETSTRETCHBLTMODE* = Emrselectclippath
  Pemrsetstretchbltmode* = ptr Emrselectclippath
  Emrsettextalign* = Emrselectclippath
  TEMRSETTEXTALIGN* = Emrselectclippath
  Pemrsettextalign* = ptr Emrselectclippath
  Emrenableicm* = Emrselectclippath
  TEMRENABLEICM* = Emrselectclippath
  Pemrenableicm* = ptr Emrselectclippath
  Nmhdr* {.final, pure.} = object
    hwndFrom*: Hwnd
    idFrom*: Uint
    code*: Uint

  TNMHDR* = Nmhdr
  Pnmhdr* = ptr Nmhdr
  TENCORRECTTEXT* {.final, pure.} = object
    nmhdr*: Nmhdr
    chrg*: Charrange
    seltyp*: Int16

  Pencorrecttext* = ptr TENCORRECTTEXT
  TENDROPFILES* {.final, pure.} = object
    nmhdr*: Nmhdr
    hDrop*: Handle
    cp*: Long
    fProtected*: Winbool

  Pendropfiles* = ptr TENDROPFILES
  TENSAVECLIPBOARD* {.final, pure.} = object
    nmhdr*: Nmhdr
    cObjectCount*: Long
    cch*: Long

  Pensaveclipboard* = ptr TENSAVECLIPBOARD
  TENOLEOPFAILED* {.final, pure.} = object
    nmhdr*: Nmhdr
    iob*: Long
    lOper*: Long
    hr*: Hresult

  Penoleopfailed* = ptr TENOLEOPFAILED
  TENHMETAHEADER* {.final, pure.} = object
    iType*: Dword
    nSize*: Dword
    rclBounds*: Rectl
    rclFrame*: Rectl
    dSignature*: Dword
    nVersion*: Dword
    nBytes*: Dword
    nRecords*: Dword
    nHandles*: Int16
    sReserved*: Int16
    nDescription*: Dword
    offDescription*: Dword
    nPalEntries*: Dword
    szlDevice*: Sizel
    szlMillimeters*: Sizel

  Lpenhmetaheader* = ptr TENHMETAHEADER
  Penhmetaheader* = ptr TENHMETAHEADER
  TENHMETARECORD* {.final, pure.} = object
    iType*: Dword
    nSize*: Dword
    dParm*: Array[0..0, Dword]

  Lpenhmetarecord* = ptr TENHMETARECORD
  Penhmetarecord* = ptr TENHMETARECORD
  TENPROTECTED* {.final, pure.} = object
    nmhdr*: Nmhdr
    msg*: Uint
    wParam*: Wparam
    lParam*: Lparam
    chrg*: Charrange

  Penprotected* = ptr TENPROTECTED
  ServiceStatus* {.final, pure.} = object
    dwServiceType*: Dword
    dwCurrentState*: Dword
    dwControlsAccepted*: Dword
    dwWin32ExitCode*: Dword
    dwServiceSpecificExitCode*: Dword
    dwCheckPoint*: Dword
    dwWaitHint*: Dword

  LpserviceStatus* = ptr ServiceStatus
  TSERVICESTATUS* = ServiceStatus
  Pservicestatus* = ptr ServiceStatus
  EnumServiceStatus* {.final, pure.} = object
    lpServiceName*: Lptstr
    lpDisplayName*: Lptstr
    ServiceStatus*: ServiceStatus

  LpenumServiceStatus* = ptr EnumServiceStatus
  TENUMSERVICESTATUS* = EnumServiceStatus
  Penumservicestatus* = ptr EnumServiceStatus
  Enumlogfont* {.final, pure.} = object
    elfLogFont*: Logfont
    elfFullName*: Array[0..(LF_FULLFACESIZE) - 1, Bchar]
    elfStyle*: Array[0..(LF_FACESIZE) - 1, Bchar]

  TENUMLOGFONT* = Enumlogfont
  Penumlogfont* = ptr Enumlogfont
  Enumlogfontex* {.final, pure.} = object
    elfLogFont*: Logfont
    elfFullName*: Array[0..(LF_FULLFACESIZE) - 1, Bchar]
    elfStyle*: Array[0..(LF_FACESIZE) - 1, Bchar]
    elfScript*: Array[0..(LF_FACESIZE) - 1, Bchar]

  TENUMLOGFONTEX* = Enumlogfontex
  Penumlogfontex* = ptr Enumlogfontex

  Eventlogrecord* {.final, pure.} = object
    Length*: Dword
    Reserved*: Dword
    RecordNumber*: Dword
    TimeGenerated*: Dword
    TimeWritten*: Dword
    EventID*: Dword
    EventType*: Int16
    NumStrings*: Int16
    EventCategory*: Int16
    ReservedFlags*: Int16
    ClosingRecordNumber*: Dword
    StringOffset*: Dword
    UserSidLength*: Dword
    UserSidOffset*: Dword
    DataLength*: Dword
    DataOffset*: Dword

  TEVENTLOGRECORD* = Eventlogrecord
  Peventlogrecord* = ptr Eventlogrecord
  Eventmsg* {.final, pure.} = object
    message*: Uint
    paramL*: Uint
    paramH*: Uint
    time*: Dword
    hwnd*: Hwnd

  TEVENTMSG* = Eventmsg
  Peventmsg* = ptr Eventmsg
  ExceptionPointers* {.final, pure.} = object
    ExceptionRecord*: PexceptionRecord
    ContextRecord*: Pcontext

  LpexceptionPointers* = ptr ExceptionPointers
  PexceptionPointers* = ptr ExceptionPointers
  TEXCEPTIONPOINTERS* = ExceptionPointers
  ExtButton* {.final, pure.} = object
    idCommand*: Int16
    idsHelp*: Int16
    fsStyle*: Int16

  LpextButton* = ptr ExtButton
  TEXTBUTTON* = ExtButton
  Pextbutton* = ptr ExtButton
  Filterkeys* {.final, pure.} = object
    cbSize*: Uint
    dwFlags*: Dword
    iWaitMSec*: Dword
    iDelayMSec*: Dword
    iRepeatMSec*: Dword
    iBounceMSec*: Dword

  TFILTERKEYS* = Filterkeys
  Pfilterkeys* = ptr Filterkeys
  FindNameBuffer* {.final, pure.} = object
    len*: Uchar
    access_control*: Uchar
    frame_control*: Uchar
    destination_addr*: Array[0..5, Uchar]
    source_addr*: Array[0..5, Uchar]
    routing_info*: Array[0..17, Uchar]

  TFINDNAMEBUFFER* = FindNameBuffer
  Pfindnamebuffer* = ptr FindNameBuffer
  FindNameHeader* {.final, pure.} = object
    node_count*: Int16
    reserved*: Uchar
    unique_group*: Uchar

  TFINDNAMEHEADER* = FindNameHeader
  Pfindnameheader* = ptr FindNameHeader
  Findreplace* {.final, pure.} = object
    lStructSize*: Dword
    hwndOwner*: Hwnd
    hInstance*: Hinst
    Flags*: Dword
    lpstrFindWhat*: Lptstr
    lpstrReplaceWith*: Lptstr
    wFindWhatLen*: Int16
    wReplaceWithLen*: Int16
    lCustData*: Lparam
    lpfnHook*: Lpfrhookproc
    lpTemplateName*: Lpctstr

  Lpfindreplace* = ptr Findreplace
  TFINDREPLACE* = Findreplace
  Pfindreplace* = ptr Findreplace
  #FINDTEXT = record conflicts with FindText function
  TFINDTEXT* {.final, pure.} = object
    chrg*: Charrange
    lpstrText*: Lpstr

  Pfindtext* = ptr TFINDTEXT
  Findtextex* {.final, pure.} = object
    chrg*: Charrange
    lpstrText*: Lpstr
    chrgText*: Charrange

  Tfindtextex* = Findtextex
  Pfindtextex* = ptr Findtextex
  FmsGetdriveinfo* {.final, pure.} = object
    dwTotalSpace*: Dword
    dwFreeSpace*: Dword
    szPath*: Array[0..259, TCHAR]
    szVolume*: Array[0..13, TCHAR]
    szShare*: Array[0..127, TCHAR]

  TFMSGETDRIVEINFO* = FmsGetdriveinfo
  Pfmsgetdriveinfo* = ptr FmsGetdriveinfo
  FmsGetfilesel* {.final, pure.} = object
    ftTime*: Filetime
    dwSize*: Dword
    bAttr*: Int8
    szName*: Array[0..259, TCHAR]

  TFMSGETFILESEL* = FmsGetfilesel
  Pfmsgetfilesel* = ptr FmsGetfilesel
  FmsLoad* {.final, pure.} = object
    dwSize*: Dword
    szMenuName*: Array[0..(MENU_TEXT_LEN) - 1, TCHAR]
    hMenu*: Hmenu
    wMenuDelta*: Uint

  TFMSLOAD* = FmsLoad
  Pfmsload* = ptr FmsLoad
  FmsToolbarload* {.final, pure.} = object
    dwSize*: Dword
    lpButtons*: LpextButton
    cButtons*: Int16
    cBitmaps*: Int16
    idBitmap*: Int16
    hBitmap*: Hbitmap

  TFMSTOOLBARLOAD* = FmsToolbarload
  Pfmstoolbarload* = ptr FmsToolbarload
  FocusEventRecord* {.final, pure.} = object
    bSetFocus*: Winbool

  TFOCUSEVENTRECORD* = FocusEventRecord
  Pfocuseventrecord* = ptr FocusEventRecord
  FormInfo1* {.final, pure.} = object
    Flags*: Dword
    pName*: Lptstr
    Size*: Sizel
    ImageableArea*: Rectl

  TFORMINFO1* = FormInfo1
  Pforminfo1* = ptr FormInfo1
  FormatParameters* {.final, pure.} = object
    MediaType*: MediaType
    StartCylinderNumber*: Dword
    EndCylinderNumber*: Dword
    StartHeadNumber*: Dword
    EndHeadNumber*: Dword

  TFORMATPARAMETERS* = FormatParameters
  Pformatparameters* = ptr FormatParameters
  Formatrange* {.final, pure.} = object
    hdc*: Hdc
    hdcTarget*: Hdc
    rc*: Rect
    rcPage*: Rect
    chrg*: Charrange

  Tformatrange* = Formatrange
  Pformatrange* = ptr Formatrange
  GcpResults* {.final, pure.} = object
    lStructSize*: Dword
    lpOutString*: Lptstr
    lpOrder*: ptr Uint
    lpDx*: ptr Wint
    lpCaretPos*: ptr Wint
    lpClass*: Lptstr
    lpGlyphs*: ptr Uint
    nGlyphs*: Uint
    nMaxFit*: Uint

  LpgcpResults* = ptr GcpResults
  TGCPRESULTS* = GcpResults
  Pgcpresults* = ptr GcpResults
  GenericMapping* {.final, pure.} = object
    GenericRead*: AccessMask
    GenericWrite*: AccessMask
    GenericExecute*: AccessMask
    GenericAll*: AccessMask

  PgenericMapping* = ptr GenericMapping
  TGENERICMAPPING* = GenericMapping
  Glyphmetrics* {.final, pure.} = object
    gmBlackBoxX*: Uint
    gmBlackBoxY*: Uint
    gmptGlyphOrigin*: Point
    gmCellIncX*: Short
    gmCellIncY*: Short

  Lpglyphmetrics* = ptr Glyphmetrics
  TGLYPHMETRICS* = Glyphmetrics
  Pglyphmetrics* = ptr Glyphmetrics
  Handletable* {.final, pure.} = object
    objectHandle*: Array[0..0, Hgdiobj]

  THANDLETABLE* = Handletable
  Lphandletable* = ptr Handletable
  HdHittestinfo* {.final, pure.} = object
    pt*: Point
    flags*: Uint
    iItem*: Int32

  THDHITTESTINFO* = HdHittestinfo
  Phdhittestinfo* = ptr HdHittestinfo
  HdItem* {.final, pure.} = object
    mask*: Uint
    cxy*: Int32
    pszText*: Lptstr
    hbm*: Hbitmap
    cchTextMax*: Int32
    fmt*: Int32
    lParam*: Lparam

  THDITEM* = HdItem
  Phditem* = ptr HdItem
  Windowpos* {.final, pure.} = object
    hwnd*: Hwnd
    hwndInsertAfter*: Hwnd
    x*: Int32
    y*: Int32
    cx*: Int32
    cy*: Int32
    flags*: Uint

  Lpwindowpos* = ptr Windowpos
  TWINDOWPOS* = Windowpos
  Pwindowpos* = ptr Windowpos
  HdLayout* {.final, pure.} = object
    prc*: ptr Rect
    pwpos*: ptr Windowpos

  THDLAYOUT* = HdLayout
  Phdlayout* = ptr HdLayout
  HdNotify* {.final, pure.} = object
    hdr*: Nmhdr
    iItem*: Int32
    iButton*: Int32
    pitem*: ptr HdItem

  THDNOTIFY* = HdNotify
  Phdnotify* = ptr HdNotify
  Helpinfo* {.final, pure.} = object
    cbSize*: Uint
    iContextType*: Int32
    iCtrlId*: Int32
    hItemHandle*: Handle
    dwContextId*: Dword
    MousePos*: Point

  Lphelpinfo* = ptr Helpinfo
  THELPINFO* = Helpinfo
  Phelpinfo* = ptr Helpinfo
  Helpwininfo* {.final, pure.} = object
    wStructSize*: Int32
    x*: Int32
    y*: Int32
    dx*: Int32
    dy*: Int32
    wMax*: Int32
    rgchMember*: Array[0..1, TCHAR]

  THELPWININFO* = Helpwininfo
  Phelpwininfo* = ptr Helpwininfo
  Highcontrast* {.final, pure.} = object
    cbSize*: Uint
    dwFlags*: Dword
    lpszDefaultScheme*: Lptstr

  Lphighcontrast* = ptr Highcontrast
  THIGHCONTRAST* = Highcontrast
  Phighcontrast* = ptr Highcontrast
  Hszpair* {.final, pure.} = object
    hszSvc*: Hsz
    hszTopic*: Hsz

  THSZPAIR* = Hszpair
  Phszpair* = ptr Hszpair
  Iconinfo* {.final, pure.} = object
    fIcon*: Winbool
    xHotspot*: Dword
    yHotspot*: Dword
    hbmMask*: Hbitmap
    hbmColor*: Hbitmap

  TICONINFO* = Iconinfo
  Piconinfo* = ptr Iconinfo
  Iconmetrics* {.final, pure.} = object
    cbSize*: Uint
    iHorzSpacing*: Int32
    iVertSpacing*: Int32
    iTitleWrap*: Int32
    lfFont*: Logfont

  Lpiconmetrics* = ptr Iconmetrics
  TICONMETRICS* = Iconmetrics
  Piconmetrics* = ptr Iconmetrics
  Imageinfo* {.final, pure.} = object
    hbmImage*: Hbitmap
    hbmMask*: Hbitmap
    Unused1*: Int32
    Unused2*: Int32
    rcImage*: Rect

  TIMAGEINFO* = Imageinfo
  Pimageinfo* = ptr Imageinfo
  KeyEventRecord* {.final, pure.} = object
    bKeyDown*: Winbool
    wRepeatCount*: Int16
    wVirtualKeyCode*: Int16
    wVirtualScanCode*: Int16
    UnicodeChar*: Wchar
    dwControlKeyState*: Dword # other union part: AsciiChar: CHAR

  TKEYEVENTRECORD* = KeyEventRecord
  Pkeyeventrecord* = ptr KeyEventRecord
  MouseEventRecord* {.final, pure.} = object
    dwMousePosition*: Coord
    dwButtonState*: Dword
    dwControlKeyState*: Dword
    dwEventFlags*: Dword

  TMOUSEEVENTRECORD* = MouseEventRecord
  Pmouseeventrecord* = ptr MouseEventRecord
  WindowBufferSizeRecord* {.final, pure.} = object
    dwSize*: Coord

  TWINDOWBUFFERSIZERECORD* = WindowBufferSizeRecord
  Pwindowbuffersizerecord* = ptr WindowBufferSizeRecord
  MenuEventRecord* {.final, pure.} = object
    dwCommandId*: Uint

  PmenuEventRecord* = ptr MenuEventRecord
  TMENUEVENTRECORD* = MenuEventRecord
  InputRecord* {.final, pure.} = object
    EventType*: Int16
    Reserved*: Int16
    event*: Array[0..5, Dword]

  PinputRecord* = ptr InputRecord
  TINPUTRECORD* = InputRecord
  Systemtime* {.final, pure.} = object
    wYear*: Int16
    wMonth*: Int16
    wDayOfWeek*: Int16
    wDay*: Int16
    wHour*: Int16
    wMinute*: Int16
    wSecond*: Int16
    wMilliseconds*: Int16

  Lpsystemtime* = ptr Systemtime
  TSYSTEMTIME* = Systemtime
  Psystemtime* = ptr Systemtime
  JobInfo1* {.final, pure.} = object
    JobId*: Dword
    pPrinterName*: Lptstr
    pMachineName*: Lptstr
    pUserName*: Lptstr
    pDocument*: Lptstr
    pDatatype*: Lptstr
    pStatus*: Lptstr
    Status*: Dword
    Priority*: Dword
    Position*: Dword
    TotalPages*: Dword
    PagesPrinted*: Dword
    Submitted*: Systemtime

  TJOBINFO1* = JobInfo1
  Pjobinfo1* = ptr JobInfo1
  SidIdentifierAuthority* {.final, pure.} = object
    Value*: Array[0..5, Int8]

  LpsidIdentifierAuthority* = ptr SidIdentifierAuthority
  PsidIdentifierAuthority* = ptr SidIdentifierAuthority
  TSIDIDENTIFIERAUTHORITY* = SidIdentifierAuthority
  Sid* {.final, pure.} = object
    Revision*: Int8
    SubAuthorityCount*: Int8
    IdentifierAuthority*: SidIdentifierAuthority
    SubAuthority*: Array[0..(ANYSIZE_ARRAY) - 1, Dword]

  TSID* = Sid
  Psid* = ptr Sid
  SecurityDescriptorControl* = Int16
  PsecurityDescriptorControl* = ptr SecurityDescriptorControl
  TSECURITYDESCRIPTORCONTROL* = SecurityDescriptorControl
  SecurityDescriptor* {.final, pure.} = object
    Revision*: Int8
    Sbz1*: Int8
    Control*: SecurityDescriptorControl
    Owner*: Psid
    Group*: Psid
    Sacl*: Pacl
    Dacl*: Pacl

  PsecurityDescriptor* = ptr SecurityDescriptor
  TSECURITYDESCRIPTOR* = SecurityDescriptor
  JobInfo2* {.final, pure.} = object
    JobId*: Dword
    pPrinterName*: Lptstr
    pMachineName*: Lptstr
    pUserName*: Lptstr
    pDocument*: Lptstr
    pNotifyName*: Lptstr
    pDatatype*: Lptstr
    pPrintProcessor*: Lptstr
    pParameters*: Lptstr
    pDriverName*: Lptstr
    pDevMode*: Lpdevmode
    pStatus*: Lptstr
    pSecurityDescriptor*: PsecurityDescriptor
    Status*: Dword
    Priority*: Dword
    Position*: Dword
    StartTime*: Dword
    UntilTime*: Dword
    TotalPages*: Dword
    Size*: Dword
    Submitted*: Systemtime
    Time*: Dword
    PagesPrinted*: Dword

  TJOBINFO2* = JobInfo2
  Pjobinfo2* = ptr JobInfo2
  Kerningpair* {.final, pure.} = object
    wFirst*: Int16
    wSecond*: Int16
    iKernAmount*: Int32

  Lpkerningpair* = ptr Kerningpair
  TKERNINGPAIR* = Kerningpair
  Pkerningpair* = ptr Kerningpair
  LanaEnum* {.final, pure.} = object
    len*: Uchar
    lana*: Array[0..(MAX_LANA) - 1, Uchar]

  TLANAENUM* = LanaEnum
  Planaenum* = ptr LanaEnum
  LdtEntry* {.final, pure.} = object
    LimitLow*: Int16
    BaseLow*: Int16
    BaseMid*: Int8
    Flags1*: Int8
    Flags2*: Int8
    BaseHi*: Int8

  LpldtEntry* = ptr LdtEntry
  PldtEntry* = ptr LdtEntry
  TLDTENTRY* = LdtEntry

const
  bmLDTENTRYBaseMid* = 0x000000FF
  bpLDTENTRYBaseMid* = 0'i32
  bmLDTENTRYType* = 0x00001F00
  bpLDTENTRYType* = 8'i32
  bmLDTENTRYDpl* = 0x00006000
  bpLDTENTRYDpl* = 13'i32
  bmLDTENTRYPres* = 0x00008000
  bpLDTENTRYPres* = 15'i32
  bmLDTENTRYLimitHi* = 0x000F0000
  bpLDTENTRYLimitHi* = 16'i32
  bmLDTENTRYSys* = 0x00100000
  bpLDTENTRYSys* = 20'i32
  bmLDTENTRYReserved0* = 0x00200000
  bpLDTENTRYReserved0* = 21'i32
  bmLDTENTRYDefaultBig* = 0x00400000
  bpLDTENTRYDefaultBig* = 22'i32
  bmLDTENTRYGranularity* = 0x00800000
  bpLDTENTRYGranularity* = 23'i32
  bmLDTENTRYBaseHi* = 0xFF000000
  bpLDTENTRYBaseHi* = 24'i32

type
  Localesignature* {.final, pure.} = object
    lsUsb*: Array[0..3, Dword]
    lsCsbDefault*: Array[0..1, Dword]
    lsCsbSupported*: Array[0..1, Dword]

  TLOCALESIGNATURE* = Localesignature
  Plocalesignature* = ptr Localesignature
  LocalgroupMembersInfo0* {.final, pure.} = object
    lgrmi0_sid*: Psid

  TLOCALGROUPMEMBERSINFO0* = LocalgroupMembersInfo0
  Plocalgroupmembersinfo0* = ptr LocalgroupMembersInfo0
  LocalgroupMembersInfo3* {.final, pure.} = object
    lgrmi3_domainandname*: Lpwstr

  TLOCALGROUPMEMBERSINFO3* = LocalgroupMembersInfo3
  Plocalgroupmembersinfo3* = ptr LocalgroupMembersInfo3
  Fxpt16dot16* = Int32
  Lpfxpt16dot16* = ptr Fxpt16dot16
  TFXPT16DOT16* = Fxpt16dot16
  Pfxpt16dot16* = ptr Fxpt16dot16
  Luid* = TlargeInteger
  TLUID* = Luid
  Pluid* = ptr Luid
  LuidAndAttributes* {.final, pure.} = object
    Luid*: Luid
    Attributes*: Dword

  TLUIDANDATTRIBUTES* = LuidAndAttributes
  Pluidandattributes* = ptr LuidAndAttributes
  LuidAndAttributesArray* = Array[0..(ANYSIZE_ARRAY) - 1, LuidAndAttributes]
  PluidAndAttributesArray* = ptr LuidAndAttributesArray
  TLUIDANDATTRIBUTESARRAY* = LuidAndAttributesArray
  LvColumn* {.final, pure.} = object
    mask*: Uint
    fmt*: Int32
    cx*: Int32
    pszText*: Lptstr
    cchTextMax*: Int32
    iSubItem*: Int32

  TLVCOLUMN* = LvColumn
  Plvcolumn* = ptr LvColumn
  LvItem* {.final, pure.} = object
    mask*: Uint
    iItem*: Int32
    iSubItem*: Int32
    state*: Uint
    stateMask*: Uint
    pszText*: Lptstr
    cchTextMax*: Int32
    iImage*: Int32
    lParam*: Lparam

  TLVITEM* = LvItem
  Plvitem* = ptr LvItem
  LvDispinfo* {.final, pure.} = object
    hdr*: Nmhdr
    item*: LvItem

  TLVDISPINFO* = LvDispinfo
  Plvdispinfo* = ptr LvDispinfo
  LvFindinfo* {.final, pure.} = object
    flags*: Uint
    psz*: Lpctstr
    lParam*: Lparam
    pt*: Point
    vkDirection*: Uint

  TLVFINDINFO* = LvFindinfo
  Plvfindinfo* = ptr LvFindinfo
  LvHittestinfo* {.final, pure.} = object
    pt*: Point
    flags*: Uint
    iItem*: Int32

  TLVHITTESTINFO* = LvHittestinfo
  Plvhittestinfo* = ptr LvHittestinfo
  LvKeydown* {.final, pure.} = object
    hdr*: Nmhdr
    wVKey*: Int16
    flags*: Uint

  TLVKEYDOWN* = LvKeydown
  Plvkeydown* = ptr LvKeydown
  Mat2* {.final, pure.} = object
    eM11*: Fixed
    eM12*: Fixed
    eM21*: Fixed
    eM22*: Fixed

  TMAT2* = Mat2
  Pmat2* = ptr Mat2
  Mdicreatestruct* {.final, pure.} = object
    szClass*: Lpctstr
    szTitle*: Lpctstr
    hOwner*: Handle
    x*: Int32
    y*: Int32
    cx*: Int32
    cy*: Int32
    style*: Dword
    lParam*: Lparam

  Lpmdicreatestruct* = ptr Mdicreatestruct
  TMDICREATESTRUCT* = Mdicreatestruct
  Pmdicreatestruct* = ptr Mdicreatestruct
  Measureitemstruct* {.final, pure.} = object
    CtlType*: Uint
    CtlID*: Uint
    itemID*: Uint
    itemWidth*: Uint
    itemHeight*: Uint
    itemData*: UlongPtr

  Lpmeasureitemstruct* = ptr Measureitemstruct
  TMEASUREITEMSTRUCT* = Measureitemstruct
  Pmeasureitemstruct* = ptr Measureitemstruct
  MemoryBasicInformation* {.final, pure.} = object
    BaseAddress*: Pvoid
    AllocationBase*: Pvoid
    AllocationProtect*: Dword
    RegionSize*: Dword
    State*: Dword
    Protect*: Dword
    `type`*: Dword

  PmemoryBasicInformation* = ptr MemoryBasicInformation
  TMEMORYBASICINFORMATION* = MemoryBasicInformation
  Memorystatus* {.final, pure.} = object
    dwLength*: Dword
    dwMemoryLoad*: Dword
    dwTotalPhys*: Int
    dwAvailPhys*: Int
    dwTotalPageFile*: Int
    dwAvailPageFile*: Int
    dwTotalVirtual*: Int
    dwAvailVirtual*: Int

  TGUID* {.final, pure.} = object
    D1*: Int32
    D2*: Int16
    D3*: Int16
    D4*: Array [0..7, Int8]

  Lpmemorystatus* = ptr Memorystatus
  TMEMORYSTATUS* = Memorystatus
  Pmemorystatus* = ptr Memorystatus
  MenuexTemplateHeader* {.final, pure.} = object
    wVersion*: Int16
    wOffset*: Int16
    dwHelpId*: Dword

  TMENUXTEMPLATEHEADER* = MenuexTemplateHeader
  Pmenuxtemplateheader* = ptr MenuexTemplateHeader
  MenuexTemplateItem* {.final, pure.} = object
    dwType*: Dword
    dwState*: Dword
    uId*: Uint
    bResInfo*: Int8
    szText*: Array[0..0, Wchar]
    dwHelpId*: Dword

  TMENUEXTEMPLATEITEM* = MenuexTemplateItem
  Pmenuextemplateitem* = ptr MenuexTemplateItem
  Menuinfo* {.final, pure.} = object
    cbSize*: Dword
    fMask*: Dword
    dwStyle*: Dword
    cyMax*: Uint
    hbrBack*: Hbrush
    dwContextHelpID*: Dword
    dwMenuData*: UlongPtr

  Lpmenuinfo* = ptr Menuinfo
  Lpcmenuinfo* = ptr Menuinfo
  TMENUINFO* = Menuinfo
  Pmenuinfo* = ptr Menuinfo
  Menuiteminfo* {.final, pure.} = object
    cbSize*: Uint
    fMask*: Uint
    fType*: Uint
    fState*: Uint
    wID*: Uint
    hSubMenu*: Hmenu
    hbmpChecked*: Hbitmap
    hbmpUnchecked*: Hbitmap
    dwItemData*: UlongPtr
    dwTypeData*: Lptstr
    cch*: Uint
    hbmpItem*: Hbitmap

  Lpmenuiteminfo* = ptr Menuiteminfo
  Lpcmenuiteminfo* = ptr Menuiteminfo
  TMENUITEMINFO* = Menuiteminfo
  TMENUITEMINFOA* = Menuiteminfo
  Pmenuiteminfo* = ptr Menuiteminfo
  Menuitemtemplate* {.final, pure.} = object
    mtOption*: Int16
    mtID*: Int16
    mtString*: Array[0..0, Wchar]

  TMENUITEMTEMPLATE* = Menuitemtemplate
  Pmenuitemtemplate* = ptr Menuitemtemplate
  Menuitemtemplateheader* {.final, pure.} = object
    versionNumber*: Int16
    offset*: Int16

  TMENUITEMTEMPLATEHEADER* = Menuitemtemplateheader
  Pmenuitemtemplateheader* = ptr Menuitemtemplateheader
  Menutemplate* {.final, pure.} = object
  Lpmenutemplate* = ptr Menutemplate
  TMENUTEMPLATE* = Menutemplate
  Pmenutemplate* = ptr Menutemplate
  Metafilepict* {.final, pure.} = object
    mm*: Long
    xExt*: Long
    yExt*: Long
    hMF*: Hmetafile

  Lpmetafilepict* = ptr Metafilepict
  TMETAFILEPICT* = Metafilepict
  Pmetafilepict* = ptr Metafilepict
  Metaheader* {.final, pure.} = object
    mtType*: Int16
    mtHeaderSize*: Int16
    mtVersion*: Int16
    mtSize*: Dword
    mtNoObjects*: Int16
    mtMaxRecord*: Dword
    mtNoParameters*: Int16

  TMETAHEADER* = Metaheader
  Pmetaheader* = ptr Metaheader
  Metarecord* {.final, pure.} = object
    rdSize*: Dword
    rdFunction*: Int16
    rdParm*: Array[0..0, Int16]

  Lpmetarecord* = ptr Metarecord
  TMETARECORD* = Metarecord
  Pmetarecord* = ptr Metarecord
  Minimizedmetrics* {.final, pure.} = object
    cbSize*: Uint
    iWidth*: Int32
    iHorzGap*: Int32
    iVertGap*: Int32
    iArrange*: Int32

  Lpminimizedmetrics* = ptr Minimizedmetrics
  TMINIMIZEDMETRICS* = Minimizedmetrics
  Pminimizedmetrics* = ptr Minimizedmetrics
  Minmaxinfo* {.final, pure.} = object
    ptReserved*: Point
    ptMaxSize*: Point
    ptMaxPosition*: Point
    ptMinTrackSize*: Point
    ptMaxTrackSize*: Point

  TMINMAXINFO* = Minmaxinfo
  Pminmaxinfo* = ptr Minmaxinfo
  Modemdevcaps* {.final, pure.} = object
    dwActualSize*: Dword
    dwRequiredSize*: Dword
    dwDevSpecificOffset*: Dword
    dwDevSpecificSize*: Dword
    dwModemProviderVersion*: Dword
    dwModemManufacturerOffset*: Dword
    dwModemManufacturerSize*: Dword
    dwModemModelOffset*: Dword
    dwModemModelSize*: Dword
    dwModemVersionOffset*: Dword
    dwModemVersionSize*: Dword
    dwDialOptions*: Dword
    dwCallSetupFailTimer*: Dword
    dwInactivityTimeout*: Dword
    dwSpeakerVolume*: Dword
    dwSpeakerMode*: Dword
    dwModemOptions*: Dword
    dwMaxDTERate*: Dword
    dwMaxDCERate*: Dword
    abVariablePortion*: Array[0..0, Int8]

  Lpmodemdevcaps* = ptr Modemdevcaps
  TMODEMDEVCAPS* = Modemdevcaps
  Pmodemdevcaps* = ptr Modemdevcaps
  Modemsettings* {.final, pure.} = object
    dwActualSize*: Dword
    dwRequiredSize*: Dword
    dwDevSpecificOffset*: Dword
    dwDevSpecificSize*: Dword
    dwCallSetupFailTimer*: Dword
    dwInactivityTimeout*: Dword
    dwSpeakerVolume*: Dword
    dwSpeakerMode*: Dword
    dwPreferredModemOptions*: Dword
    dwNegotiatedModemOptions*: Dword
    dwNegotiatedDCERate*: Dword
    abVariablePortion*: Array[0..0, Int8]

  Lpmodemsettings* = ptr Modemsettings
  TMODEMSETTINGS* = Modemsettings
  Pmodemsettings* = ptr Modemsettings
  Moncbstruct* {.final, pure.} = object
    cb*: Uint
    dwTime*: Dword
    hTask*: Handle
    dwRet*: Dword
    wType*: Uint
    wFmt*: Uint
    hConv*: Hconv
    hsz1*: Hsz
    hsz2*: Hsz
    hData*: Hddedata
    dwData1*: Dword
    dwData2*: Dword
    cc*: Convcontext
    cbData*: Dword
    Data*: Array[0..7, Dword]

  TMONCBSTRUCT* = Moncbstruct
  Pmoncbstruct* = ptr Moncbstruct
  Monconvstruct* {.final, pure.} = object
    cb*: Uint
    fConnect*: Winbool
    dwTime*: Dword
    hTask*: Handle
    hszSvc*: Hsz
    hszTopic*: Hsz
    hConvClient*: Hconv
    hConvServer*: Hconv

  TMONCONVSTRUCT* = Monconvstruct
  Pmonconvstruct* = ptr Monconvstruct
  Monerrstruct* {.final, pure.} = object
    cb*: Uint
    wLastError*: Uint
    dwTime*: Dword
    hTask*: Handle

  TMONERRSTRUCT* = Monerrstruct
  Pmonerrstruct* = ptr Monerrstruct
  Monhszstruct* {.final, pure.} = object
    cb*: Uint
    fsAction*: Winbool
    dwTime*: Dword
    hsz*: Hsz
    hTask*: Handle
    str*: Array[0..0, TCHAR]

  TMONHSZSTRUCT* = Monhszstruct
  Pmonhszstruct* = ptr Monhszstruct
  MonitorInfo1* {.final, pure.} = object
    pName*: Lptstr

  TMONITORINFO1* = MonitorInfo1
  Pmonitorinfo1* = ptr MonitorInfo1
  MonitorInfo2* {.final, pure.} = object
    pName*: Lptstr
    pEnvironment*: Lptstr
    pDLLName*: Lptstr

  TMONITORINFO2* = MonitorInfo2
  Pmonitorinfo2* = ptr MonitorInfo2
  Monlinkstruct* {.final, pure.} = object
    cb*: Uint
    dwTime*: Dword
    hTask*: Handle
    fEstablished*: Winbool
    fNoData*: Winbool
    hszSvc*: Hsz
    hszTopic*: Hsz
    hszItem*: Hsz
    wFmt*: Uint
    fServer*: Winbool
    hConvServer*: Hconv
    hConvClient*: Hconv

  TMONLINKSTRUCT* = Monlinkstruct
  Pmonlinkstruct* = ptr Monlinkstruct
  Monmsgstruct* {.final, pure.} = object
    cb*: Uint
    hwndTo*: Hwnd
    dwTime*: Dword
    hTask*: Handle
    wMsg*: Uint
    wParam*: Wparam
    lParam*: Lparam
    dmhd*: DdemlMsgHookData

  TMONMSGSTRUCT* = Monmsgstruct
  Pmonmsgstruct* = ptr Monmsgstruct
  Mousehookstruct* {.final, pure.} = object
    pt*: Point
    hwnd*: Hwnd
    wHitTestCode*: Uint
    dwExtraInfo*: Dword

  Lpmousehookstruct* = ptr Mousehookstruct
  TMOUSEHOOKSTRUCT* = Mousehookstruct
  Pmousehookstruct* = ptr Mousehookstruct
  Mousekeys* {.final, pure.} = object
    cbSize*: Dword
    dwFlags*: Dword
    iMaxSpeed*: Dword
    iTimeToMaxSpeed*: Dword
    iCtrlSpeed*: Dword
    dwReserved1*: Dword
    dwReserved2*: Dword

  TMOUSEKEYS* = Mousekeys
  Pmousekeys* = ptr Mousekeys
  Msgboxcallback* = proc (lpHelpInfo: Lphelpinfo){.stdcall.}
  TMSGBOXCALLBACK* = Msgboxcallback
  Msgboxparams* {.final, pure.} = object
    cbSize*: Uint
    hwndOwner*: Hwnd
    hInstance*: Hinst
    lpszText*: Lpcstr
    lpszCaption*: Lpcstr
    dwStyle*: Dword
    lpszIcon*: Lpcstr
    dwContextHelpId*: Dword
    lpfnMsgBoxCallback*: Msgboxcallback
    dwLanguageId*: Dword

  Lpmsgboxparams* = ptr Msgboxparams
  TMSGBOXPARAMS* = Msgboxparams
  TMSGBOXPARAMSA* = Msgboxparams
  Pmsgboxparams* = ptr Msgboxparams
  Msgfilter* {.final, pure.} = object
    nmhdr*: Nmhdr
    msg*: Uint
    wParam*: Wparam
    lParam*: Lparam

  Tmsgfilter* = Msgfilter
  Pmsgfilter* = ptr Msgfilter
  Multikeyhelp* {.final, pure.} = object
    mkSize*: Dword
    mkKeylist*: TCHAR
    szKeyphrase*: Array[0..0, TCHAR]

  TMULTIKEYHELP* = Multikeyhelp
  Pmultikeyhelp* = ptr Multikeyhelp
  NameBuffer* {.final, pure.} = object
    name*: Array[0..(NCBNAMSZ) - 1, Uchar]
    name_num*: Uchar
    name_flags*: Uchar

  TNAMEBUFFER* = NameBuffer
  Pnamebuffer* = ptr NameBuffer
  PNCB* = ptr Ncb
  Ncb* {.final, pure.} = object
    ncb_command*: Uchar
    ncb_retcode*: Uchar
    ncb_lsn*: Uchar
    ncb_num*: Uchar
    ncb_buffer*: Puchar
    ncb_length*: Int16
    ncb_callname*: Array[0..(NCBNAMSZ) - 1, Uchar]
    ncb_name*: Array[0..(NCBNAMSZ) - 1, Uchar]
    ncb_rto*: Uchar
    ncb_sto*: Uchar
    ncb_post*: proc (para1: PNCB){.CDECL.}
    ncb_lana_num*: Uchar
    ncb_cmd_cplt*: Uchar
    ncb_reserve*: Array[0..9, Uchar]
    ncb_event*: Handle

  TNCB* = Ncb
  NccalcsizeParams* {.final, pure.} = object
    rgrc*: Array[0..2, Rect]
    lppos*: Pwindowpos

  TNCCALCSIZEPARAMS* = NccalcsizeParams
  Pnccalcsizeparams* = ptr NccalcsizeParams
  Nddeshareinfo* {.final, pure.} = object
    lRevision*: Long
    lpszShareName*: Lptstr
    lShareType*: Long
    lpszAppTopicList*: Lptstr
    fSharedFlag*: Long
    fService*: Long
    fStartAppFlag*: Long
    nCmdShow*: Long
    qModifyId*: Array[0..1, Long]
    cNumItems*: Long
    lpszItemList*: Lptstr

  TNDDESHAREINFO* = Nddeshareinfo
  Pnddeshareinfo* = ptr Nddeshareinfo
  Netresource* {.final, pure.} = object
    dwScope*: Dword
    dwType*: Dword
    dwDisplayType*: Dword
    dwUsage*: Dword
    lpLocalName*: Lptstr
    lpRemoteName*: Lptstr
    lpComment*: Lptstr
    lpProvider*: Lptstr

  Lpnetresource* = ptr Netresource
  TNETRESOURCE* = Netresource
  TNETRESOURCEA* = Netresource
  Pnetresource* = ptr Netresource
  Pnetresourcea* = ptr Netresource
  Newcplinfo* {.final, pure.} = object
    dwSize*: Dword
    dwFlags*: Dword
    dwHelpContext*: Dword
    lData*: Long
    hIcon*: Hicon
    szName*: Array[0..31, TCHAR]
    szInfo*: Array[0..63, TCHAR]
    szHelpFile*: Array[0..127, TCHAR]

  TNEWCPLINFO* = Newcplinfo
  Pnewcplinfo* = ptr Newcplinfo
  Newtextmetric* {.final, pure.} = object
    tmHeight*: Long
    tmAscent*: Long
    tmDescent*: Long
    tmInternalLeading*: Long
    tmExternalLeading*: Long
    tmAveCharWidth*: Long
    tmMaxCharWidth*: Long
    tmWeight*: Long
    tmOverhang*: Long
    tmDigitizedAspectX*: Long
    tmDigitizedAspectY*: Long
    tmFirstChar*: Bchar
    tmLastChar*: Bchar
    tmDefaultChar*: Bchar
    tmBreakChar*: Bchar
    tmItalic*: Int8
    tmUnderlined*: Int8
    tmStruckOut*: Int8
    tmPitchAndFamily*: Int8
    tmCharSet*: Int8
    ntmFlags*: Dword
    ntmSizeEM*: Uint
    ntmCellHeight*: Uint
    ntmAvgWidth*: Uint

  TNEWTEXTMETRIC* = Newtextmetric
  Pnewtextmetric* = ptr Newtextmetric
  Newtextmetricex* {.final, pure.} = object
    ntmentm*: Newtextmetric
    ntmeFontSignature*: Fontsignature

  TNEWTEXTMETRICEX* = Newtextmetricex
  Pnewtextmetricex* = ptr Newtextmetricex
  NmListview* {.final, pure.} = object
    hdr*: Nmhdr
    iItem*: Int32
    iSubItem*: Int32
    uNewState*: Uint
    uOldState*: Uint
    uChanged*: Uint
    ptAction*: Point
    lParam*: Lparam

  TNMLISTVIEW* = NmListview
  Pnmlistview* = ptr NmListview
  TV_ITEM* {.final, pure.} = object
    mask*: Uint
    hItem*: Htreeitem
    state*: Uint
    stateMask*: Uint
    pszText*: Lptstr
    cchTextMax*: Int32
    iImage*: Int32
    iSelectedImage*: Int32
    cChildren*: Int32
    lParam*: Lparam

  LptvItem* = ptr TV_ITEM
  TTVITEM* = TV_ITEM
  Ptvitem* = ptr TV_ITEM
  NmTreeview* {.final, pure.} = object
    hdr*: Nmhdr
    action*: Uint
    itemOld*: TV_ITEM
    itemNew*: TV_ITEM
    ptDrag*: Point

  LpnmTreeview* = ptr NmTreeview
  TNMTREEVIEW* = NmTreeview
  Pnmtreeview* = ptr NmTreeview
  NmUpdownw* {.final, pure.} = object
    hdr*: Nmhdr
    iPos*: Int32
    iDelta*: Int32

  TNMUPDOWN* = NmUpdownw
  Pnmupdown* = ptr NmUpdownw
  Nonclientmetrics* {.final, pure.} = object
    cbSize*: Uint
    iBorderWidth*: Int32
    iScrollWidth*: Int32
    iScrollHeight*: Int32
    iCaptionWidth*: Int32
    iCaptionHeight*: Int32
    lfCaptionFont*: Logfont
    iSmCaptionWidth*: Int32
    iSmCaptionHeight*: Int32
    lfSmCaptionFont*: Logfont
    iMenuWidth*: Int32
    iMenuHeight*: Int32
    lfMenuFont*: Logfont
    lfStatusFont*: Logfont
    lfMessageFont*: Logfont

  Lpnonclientmetrics* = ptr Nonclientmetrics
  TNONCLIENTMETRICS* = Nonclientmetrics
  Pnonclientmetrics* = ptr Nonclientmetrics
  ServiceAddress* {.final, pure.} = object
    dwAddressType*: Dword
    dwAddressFlags*: Dword
    dwAddressLength*: Dword
    dwPrincipalLength*: Dword
    lpAddress*: ptr Int8
    lpPrincipal*: ptr Int8

  TSERVICEADDRESS* = ServiceAddress
  Pserviceaddress* = ptr ServiceAddress
  ServiceAddresses* {.final, pure.} = object
    dwAddressCount*: Dword
    Addresses*: Array[0..0, ServiceAddress]

  LpserviceAddresses* = ptr ServiceAddresses
  TSERVICEADDRESSES* = ServiceAddresses
  Pserviceaddresses* = ptr ServiceAddresses
  Lpguid* = ptr TGUID
  Pguid* = ptr TGUID
  Clsid* = TGUID
  Lpclsid* = ptr Clsid
  TCLSID* = Clsid
  Pclsid* = ptr Clsid
  ServiceInfo* {.final, pure.} = object
    lpServiceType*: Lpguid
    lpServiceName*: Lptstr
    lpComment*: Lptstr
    lpLocale*: Lptstr
    dwDisplayHint*: Dword
    dwVersion*: Dword
    dwTime*: Dword
    lpMachineName*: Lptstr
    lpServiceAddress*: LpserviceAddresses
    ServiceSpecificInfo*: Blob

  TSERVICEINFO* = ServiceInfo
  Pserviceinfo* = ptr ServiceInfo
  NsServiceInfo* {.final, pure.} = object
    dwNameSpace*: Dword
    ServiceInfo*: ServiceInfo

  TNSSERVICEINFO* = NsServiceInfo
  Pnsserviceinfo* = ptr NsServiceInfo
  Numberfmt* {.final, pure.} = object
    NumDigits*: Uint
    LeadingZero*: Uint
    Grouping*: Uint
    lpDecimalSep*: Lptstr
    lpThousandSep*: Lptstr
    NegativeOrder*: Uint

  Tnumberfmt* = Numberfmt
  Pnumberfmt* = ptr Numberfmt
  Ofstruct* {.final, pure.} = object
    cBytes*: Int8
    fFixedDisk*: Int8
    nErrCode*: Int16
    Reserved1*: Int16
    Reserved2*: Int16
    szPathName*: Array[0..(OFS_MAXPATHNAME) - 1, Char]

  Lpofstruct* = ptr Ofstruct
  TOFSTRUCT* = Ofstruct
  Pofstruct* = ptr Ofstruct
  OpenfilenameNt4* {.final, pure.} = object
    lStructSize*: Dword
    hwndOwner*: Hwnd
    hInstance*: Hinst
    lpstrFilter*: Lpctstr
    lpstrCustomFilter*: Lptstr
    nMaxCustFilter*: Dword
    nFilterIndex*: Dword
    lpstrFile*: Lptstr
    nMaxFile*: Dword
    lpstrFileTitle*: Lptstr
    nMaxFileTitle*: Dword
    lpstrInitialDir*: Lpctstr
    lpstrTitle*: Lpctstr
    Flags*: Dword
    nFileOffset*: Int16
    nFileExtension*: Int16
    lpstrDefExt*: Lpctstr
    lCustData*: Lparam
    lpfnHook*: Lpofnhookproc
    lpTemplateName*: Lpctstr

  LpopenfilenameNt4* = ptr OpenfilenameNt4
  TOPENFILENAME_NT4* = OpenfilenameNt4
  PopenfilenameNt4* = ptr OpenfilenameNt4
  TOPENFILENAME* {.final, pure.} = object
    lStructSize*: Dword
    hwndOwner*: Hwnd
    hInstance*: Hinst
    lpstrFilter*: Lpctstr
    lpstrCustomFilter*: Lptstr
    nMaxCustFilter*: Dword
    nFilterIndex*: Dword
    lpstrFile*: Lptstr
    nMaxFile*: Dword
    lpstrFileTitle*: Lptstr
    nMaxFileTitle*: Dword
    lpstrInitialDir*: Lpctstr
    lpstrTitle*: Lpctstr
    Flags*: Dword
    nFileOffset*: Int16
    nFileExtension*: Int16
    lpstrDefExt*: Lpctstr
    lCustData*: Lparam
    lpfnHook*: Lpofnhookproc
    lpTemplateName*: Lpctstr
    pvReserved*: Pointer
    dwreserved*: Dword
    FlagsEx*: Dword

  Lpopenfilename* = ptr TOPENFILENAME
  Popenfilename* = ptr TOPENFILENAME
  Ofn* = TOPENFILENAME
  Pofn* = ptr TOPENFILENAME
  Ofnotify* {.final, pure.} = object
    hdr*: Nmhdr
    lpOFN*: Lpopenfilename
    pszFile*: Lptstr

  Lpofnotify* = ptr Ofnotify
  TOFNOTIFY* = Ofnotify
  Pofnotify* = ptr Ofnotify
  Osversioninfo* {.final, pure.} = object
    dwOSVersionInfoSize*: Dword
    dwMajorVersion*: Dword
    dwMinorVersion*: Dword
    dwBuildNumber*: Dword
    dwPlatformId*: Dword
    szCSDVersion*: Array[0..127, TCHAR]

  Lposversioninfo* = ptr Osversioninfo
  TOSVERSIONINFO* = Osversioninfo
  Posversioninfo* = ptr Osversioninfo
  Osversioninfow* {.final, pure.} = object
    dwOSVersionInfoSize*: Dword
    dwMajorVersion*: Dword
    dwMinorVersion*: Dword
    dwBuildNumber*: Dword
    dwPlatformId*: Dword
    szCSDVersion*: Array[0..127, Wchar]

  Lposversioninfow* = ptr Osversioninfow
  TOSVERSIONINFOW* = Osversioninfow
  Posversioninfow* = ptr Osversioninfow
  TEXTMETRIC* {.final, pure.} = object
    tmHeight*: Long
    tmAscent*: Long
    tmDescent*: Long
    tmInternalLeading*: Long
    tmExternalLeading*: Long
    tmAveCharWidth*: Long
    tmMaxCharWidth*: Long
    tmWeight*: Long
    tmOverhang*: Long
    tmDigitizedAspectX*: Long
    tmDigitizedAspectY*: Long
    tmFirstChar*: Bchar
    tmLastChar*: Bchar
    tmDefaultChar*: Bchar
    tmBreakChar*: Bchar
    tmItalic*: Int8
    tmUnderlined*: Int8
    tmStruckOut*: Int8
    tmPitchAndFamily*: Int8
    tmCharSet*: Int8

  Lptextmetric* = ptr TEXTMETRIC
  TTEXTMETRIC* = TEXTMETRIC
  Ptextmetric* = ptr TEXTMETRIC
  TEXTMETRICW* {.final, pure.} = object
    tmHeight*: Long
    tmAscent*: Long
    tmDescent*: Long
    tmInternalLeading*: Long
    tmExternalLeading*: Long
    tmAveCharWidth*: Long
    tmMaxCharWidth*: Long
    tmWeight*: Long
    tmOverhang*: Long
    tmDigitizedAspectX*: Long
    tmDigitizedAspectY*: Long
    tmFirstChar*: Wchar
    tmLastChar*: Wchar
    tmDefaultChar*: Wchar
    tmBreakChar*: Wchar
    tmItalic*: Int8
    tmUnderlined*: Int8
    tmStruckOut*: Int8
    tmPitchAndFamily*: Int8
    tmCharSet*: Int8

  Lptextmetricw* = ptr TEXTMETRICW
  TTEXTMETRICW* = TEXTMETRICW
  Ptextmetricw* = ptr TEXTMETRICW
  Outlinetextmetric* {.final, pure.} = object
    otmSize*: Uint
    otmTextMetrics*: TEXTMETRIC
    otmFiller*: Int8
    otmPanoseNumber*: Panose
    otmfsSelection*: Uint
    otmfsType*: Uint
    otmsCharSlopeRise*: Int32
    otmsCharSlopeRun*: Int32
    otmItalicAngle*: Int32
    otmEMSquare*: Uint
    otmAscent*: Int32
    otmDescent*: Int32
    otmLineGap*: Uint
    otmsCapEmHeight*: Uint
    otmsXHeight*: Uint
    otmrcFontBox*: Rect
    otmMacAscent*: Int32
    otmMacDescent*: Int32
    otmMacLineGap*: Uint
    otmusMinimumPPEM*: Uint
    otmptSubscriptSize*: Point
    otmptSubscriptOffset*: Point
    otmptSuperscriptSize*: Point
    otmptSuperscriptOffset*: Point
    otmsStrikeoutSize*: Uint
    otmsStrikeoutPosition*: Int32
    otmsUnderscoreSize*: Int32
    otmsUnderscorePosition*: Int32
    otmpFamilyName*: Pstr
    otmpFaceName*: Pstr
    otmpStyleName*: Pstr
    otmpFullName*: Pstr

  Lpoutlinetextmetric* = ptr Outlinetextmetric
  TOUTLINETEXTMETRIC* = Outlinetextmetric
  Poutlinetextmetric* = ptr Outlinetextmetric
  Overlapped* {.final, pure.} = object
    Internal*: Dword
    InternalHigh*: Dword
    Offset*: Dword
    OffsetHigh*: Dword
    hEvent*: Handle

  Lpoverlapped* = ptr Overlapped
  TOVERLAPPED* = Overlapped
  Poverlapped* = ptr Overlapped
  #PAGESETUPDLG = record conflicts with function PageSetupDlg
  TPAGESETUPDLG* {.final, pure.} = object
    lStructSize*: Dword
    hwndOwner*: Hwnd
    hDevMode*: Hglobal
    hDevNames*: Hglobal
    Flags*: Dword
    ptPaperSize*: Point
    rtMinMargin*: Rect
    rtMargin*: Rect
    hInstance*: Hinst
    lCustData*: Lparam
    lpfnPageSetupHook*: Lppagesetuphook
    lpfnPagePaintHook*: Lppagepainthook
    lpPageSetupTemplateName*: Lpctstr
    hPageSetupTemplate*: Hglobal

  Lppagesetupdlg* = ptr TPAGESETUPDLG
  Ppagesetupdlg* = ptr TPAGESETUPDLG
  TPSD* = TPAGESETUPDLG
  Ppsd* = ptr TPAGESETUPDLG
  Paintstruct* {.final, pure.} = object
    hdc*: Hdc
    fErase*: Winbool
    rcPaint*: Rect
    fRestore*: Winbool
    fIncUpdate*: Winbool
    rgbReserved*: Array[0..31, Int8]

  Lppaintstruct* = ptr Paintstruct
  TPAINTSTRUCT* = Paintstruct
  Ppaintstruct* = ptr Paintstruct
  Paraformat* {.final, pure.} = object
    cbSize*: Uint
    dwMask*: Dword
    wNumbering*: Int16
    wReserved*: Int16
    dxStartIndent*: Long
    dxRightIndent*: Long
    dxOffset*: Long
    wAlignment*: Int16
    cTabCount*: Short
    rgxTabs*: Array[0..(MAX_TAB_STOPS) - 1, Long]

  Tparaformat* = Paraformat
  Pparaformat* = ptr Paraformat
  PerfCounterBlock* {.final, pure.} = object
    ByteLength*: Dword

  TPERFCOUNTERBLOCK* = PerfCounterBlock
  Pperfcounterblock* = ptr PerfCounterBlock
  PerfCounterDefinition* {.final, pure.} = object
    ByteLength*: Dword
    CounterNameTitleIndex*: Dword
    CounterNameTitle*: Lpwstr
    CounterHelpTitleIndex*: Dword
    CounterHelpTitle*: Lpwstr
    DefaultScale*: Dword
    DetailLevel*: Dword
    CounterType*: Dword
    CounterSize*: Dword
    CounterOffset*: Dword

  TPERFCOUNTERDEFINITION* = PerfCounterDefinition
  Pperfcounterdefinition* = ptr PerfCounterDefinition
  PerfDataBlock* {.final, pure.} = object
    Signature*: Array[0..3, Wchar]
    LittleEndian*: Dword
    Version*: Dword
    Revision*: Dword
    TotalByteLength*: Dword
    HeaderLength*: Dword
    NumObjectTypes*: Dword
    DefaultObject*: Dword
    SystemTime*: Systemtime
    PerfTime*: LargeInteger
    PerfFreq*: LargeInteger
    PerfTime100nSec*: LargeInteger
    SystemNameLength*: Dword
    SystemNameOffset*: Dword

  TPERFDATABLOCK* = PerfDataBlock
  Pperfdatablock* = ptr PerfDataBlock
  PerfInstanceDefinition* {.final, pure.} = object
    ByteLength*: Dword
    ParentObjectTitleIndex*: Dword
    ParentObjectInstance*: Dword
    UniqueID*: Dword
    NameOffset*: Dword
    NameLength*: Dword

  TPERFINSTANCEDEFINITION* = PerfInstanceDefinition
  Pperfinstancedefinition* = PerfInstanceDefinition
  PerfObjectType* {.final, pure.} = object
    TotalByteLength*: Dword
    DefinitionLength*: Dword
    HeaderLength*: Dword
    ObjectNameTitleIndex*: Dword
    ObjectNameTitle*: Lpwstr
    ObjectHelpTitleIndex*: Dword
    ObjectHelpTitle*: Lpwstr
    DetailLevel*: Dword
    NumCounters*: Dword
    DefaultCounter*: Dword
    NumInstances*: Dword
    CodePage*: Dword
    PerfTime*: LargeInteger
    PerfFreq*: LargeInteger

  TPERFOBJECTTYPE* = PerfObjectType
  Pperfobjecttype* = ptr PerfObjectType
  Polytext* {.final, pure.} = object
    x*: Int32
    y*: Int32
    n*: Uint
    lpstr*: Lpctstr
    uiFlags*: Uint
    rcl*: Rect
    pdx*: ptr Int32

  TPOLYTEXT* = Polytext
  Ppolytext* = ptr Polytext
  PortInfo1* {.final, pure.} = object
    pName*: Lptstr

  TPORTINFO1* = PortInfo1
  Pportinfo1* = ptr PortInfo1
  PortInfo2* {.final, pure.} = object
    pPortName*: Lpstr
    pMonitorName*: Lpstr
    pDescription*: Lpstr
    fPortType*: Dword
    Reserved*: Dword

  TPORTINFO2* = PortInfo2
  Pportinfo2* = ptr PortInfo2
  PreventMediaRemoval* {.final, pure.} = object
    PreventMediaRemoval*: Bool

  TPREVENTMEDIAREMOVAL* = PreventMediaRemoval
  Ppreventmediaremoval* = ptr PreventMediaRemoval
  #PRINTDLG = record conflicts with PrintDlg function
  TPRINTDLG* {.final, pure.} = object
    lStructSize*: Dword
    hwndOwner*: Hwnd
    hDevMode*: Handle
    hDevNames*: Handle
    hDC*: Hdc
    Flags*: Dword
    nFromPage*: Int16
    nToPage*: Int16
    nMinPage*: Int16
    nMaxPage*: Int16
    nCopies*: Int16
    hInstance*: Hinst
    lCustData*: Dword
    lpfnPrintHook*: Lpprinthookproc
    lpfnSetupHook*: Lpsetuphookproc
    lpPrintTemplateName*: Lpctstr
    lpSetupTemplateName*: Lpctstr
    hPrintTemplate*: Handle
    hSetupTemplate*: Handle

  Lpprintdlg* = ptr TPRINTDLG
  Pprintdlg* = ptr TPRINTDLG
  TPD* = TPRINTDLG
  Ppd* = ptr TPRINTDLG
  PrinterDefaults* {.final, pure.} = object
    pDatatype*: Lptstr
    pDevMode*: Lpdevmode
    DesiredAccess*: AccessMask

  TPRINTERDEFAULTS* = PrinterDefaults
  Pprinterdefaults* = ptr PrinterDefaults
  PrinterInfo1* {.final, pure.} = object
    Flags*: Dword
    pDescription*: Lptstr
    pName*: Lptstr
    pComment*: Lptstr

  LpprinterInfo1* = ptr PrinterInfo1
  PprinterInfo1* = ptr PrinterInfo1
  TPRINTERINFO1* = PrinterInfo1
  PrinterInfo2* {.final, pure.} = object
    pServerName*: Lptstr
    pPrinterName*: Lptstr
    pShareName*: Lptstr
    pPortName*: Lptstr
    pDriverName*: Lptstr
    pComment*: Lptstr
    pLocation*: Lptstr
    pDevMode*: Lpdevmode
    pSepFile*: Lptstr
    pPrintProcessor*: Lptstr
    pDatatype*: Lptstr
    pParameters*: Lptstr
    pSecurityDescriptor*: PsecurityDescriptor
    Attributes*: Dword
    Priority*: Dword
    DefaultPriority*: Dword
    StartTime*: Dword
    UntilTime*: Dword
    Status*: Dword
    cJobs*: Dword
    AveragePPM*: Dword

  TPRINTERINFO2* = PrinterInfo2
  Pprinterinfo2* = ptr PrinterInfo2
  PrinterInfo3* {.final, pure.} = object
    pSecurityDescriptor*: PsecurityDescriptor

  TPRINTERINFO3* = PrinterInfo3
  Pprinterinfo3* = ptr PrinterInfo3
  PrinterInfo4* {.final, pure.} = object
    pPrinterName*: Lptstr
    pServerName*: Lptstr
    Attributes*: Dword

  TPRINTERINFO4* = PrinterInfo4
  Pprinterinfo4* = ptr PrinterInfo4
  PrinterInfo5* {.final, pure.} = object
    pPrinterName*: Lptstr
    pPortName*: Lptstr
    Attributes*: Dword
    DeviceNotSelectedTimeout*: Dword
    TransmissionRetryTimeout*: Dword

  TPRINTERINFO5* = PrinterInfo5
  Pprinterinfo5* = ptr PrinterInfo5
  PrinterNotifyInfoData* {.final, pure.} = object
    `type`*: Int16
    Field*: Int16
    Reserved*: Dword
    Id*: Dword
    cbBuf*: Dword
    pBuf*: Lpvoid

  TPRINTERNOTIFYINFODATA* = PrinterNotifyInfoData
  Pprinternotifyinfodata* = ptr PrinterNotifyInfoData
  PrinterNotifyInfo* {.final, pure.} = object
    Version*: Dword
    Flags*: Dword
    Count*: Dword
    aData*: Array[0..0, PrinterNotifyInfoData]

  TPRINTERNOTIFYINFO* = PrinterNotifyInfo
  Pprinternotifyinfo* = ptr PrinterNotifyInfo
  PrinterNotifyOptionsType* {.final, pure.} = object
    `type`*: Int16
    Reserved0*: Int16
    Reserved1*: Dword
    Reserved2*: Dword
    Count*: Dword
    pFields*: Pword

  PprinterNotifyOptionsType* = ptr PrinterNotifyOptionsType
  TPRINTERNOTIFYOPTIONSTYPE* = PrinterNotifyOptionsType
  PrinterNotifyOptions* {.final, pure.} = object
    Version*: Dword
    Flags*: Dword
    Count*: Dword
    pTypes*: PprinterNotifyOptionsType

  TPRINTERNOTIFYOPTIONS* = PrinterNotifyOptions
  Pprinternotifyoptions* = ptr PrinterNotifyOptions
  PrintprocessorInfo1* {.final, pure.} = object
    pName*: Lptstr

  TPRINTPROCESSORINFO1* = PrintprocessorInfo1
  Pprintprocessorinfo1* = ptr PrintprocessorInfo1
  PrivilegeSet* {.final, pure.} = object
    PrivilegeCount*: Dword
    Control*: Dword
    Privilege*: Array[0..(ANYSIZE_ARRAY) - 1, LuidAndAttributes]

  LpprivilegeSet* = ptr PrivilegeSet
  PprivilegeSet* = ptr PrivilegeSet
  TPRIVILEGESET* = PrivilegeSet
  ProcessHeapentry* {.final, pure.} = object
    lpData*: Pvoid
    cbData*: Dword
    cbOverhead*: Int8
    iRegionIndex*: Int8
    wFlags*: Int16
    dwCommittedSize*: Dword
    dwUnCommittedSize*: Dword
    lpFirstBlock*: Lpvoid
    lpLastBlock*: Lpvoid
    hMem*: Handle

  LpprocessHeapEntry* = ptr ProcessHeapentry
  TPROCESSHEAPENTRY* = ProcessHeapentry
  Pprocessheapentry* = ptr ProcessHeapentry
  ProcessInformation* {.final, pure.} = object
    hProcess*: Handle
    hThread*: Handle
    dwProcessId*: Dword
    dwThreadId*: Dword

  LpprocessInformation* = ptr ProcessInformation
  TPROCESSINFORMATION* = ProcessInformation
  Pprocessinformation* = ptr ProcessInformation
  Lpfnpspcallback* = proc (para1: Hwnd, para2: Uint, para3: Lpvoid): Uint{.
      stdcall.}
  TFNPSPCALLBACK* = Lpfnpspcallback
  Propsheetpage* {.final, pure.} = object
    dwSize*: Dword
    dwFlags*: Dword
    hInstance*: Hinst
    pszIcon*: Lpctstr
    pszTitle*: Lpctstr
    pfnDlgProc*: Dlgproc
    lParam*: Lparam
    pfnCallback*: Lpfnpspcallback
    pcRefParent*: ptr Uint

  Lppropsheetpage* = ptr Propsheetpage
  Lpcpropsheetpage* = ptr Propsheetpage
  TPROPSHEETPAGE* = Propsheetpage
  Ppropsheetpage* = ptr Propsheetpage
  Emptyrecord* {.final, pure.} = object
  Lpemptyrecord* = ptr Emptyrecord
  Hpropsheetpage* = ptr Emptyrecord
  Propsheetheader* {.final, pure.} = object
    dwSize*: Dword
    dwFlags*: Dword
    hwndParent*: Hwnd
    hInstance*: Hinst
    pszIcon*: Lpctstr
    pszCaption*: Lpctstr
    nPages*: Uint
    pStartPage*: Lpctstr
    phpage*: ptr Hpropsheetpage
    pfnCallback*: Pfnpropsheetcallback
    pszbmWatermark*: Lpctstr
    hplWatermark*: Hpalette
    pszbmHeader*: Cstring

  Lppropsheetheader* = ptr Propsheetheader
  Lpcpropsheetheader* = ptr Propsheetheader
  TPROPSHEETHEADER* = Propsheetheader
  Ppropsheetheader* = ptr Propsheetheader
  # PropertySheet callbacks
  Lpfnaddpropsheetpage* = proc (para1: Hpropsheetpage, para2: Lparam): Winbool{.
      stdcall.}
  TFNADDPROPSHEETPAGE* = Lpfnaddpropsheetpage
  Lpfnaddpropsheetpages* = proc (para1: Lpvoid, para2: Lpfnaddpropsheetpage,
                                 para3: Lparam): Winbool{.stdcall.}
  TFNADDPROPSHEETPAGES* = Lpfnaddpropsheetpages
  ProtocolInfo* {.final, pure.} = object
    dwServiceFlags*: Dword
    iAddressFamily*: Wint
    iMaxSockAddr*: Wint
    iMinSockAddr*: Wint
    iSocketType*: Wint
    iProtocol*: Wint
    dwMessageSize*: Dword
    lpProtocol*: Lptstr

  TPROTOCOLINFO* = ProtocolInfo
  Pprotocolinfo* = ptr ProtocolInfo
  ProvidorInfo1* {.final, pure.} = object
    pName*: Lptstr
    pEnvironment*: Lptstr
    pDLLName*: Lptstr

  TPROVIDORINFO1* = ProvidorInfo1
  Pprovidorinfo1* = ptr ProvidorInfo1
  Pshnotify* {.final, pure.} = object
    hdr*: Nmhdr
    lParam*: Lparam

  Lppshnotify* = ptr Pshnotify
  TPSHNOTIFY* = Pshnotify
  Ppshnotify* = ptr Pshnotify
  Punctuation* {.final, pure.} = object
    iSize*: Uint
    szPunctuation*: Lpstr

  Tpunctuation* = Punctuation
  Ppunctuation* = ptr Punctuation
  TQUERY_SERVICE_CONFIG* {.final, pure.} = object
    dwServiceType*: Dword
    dwStartType*: Dword
    dwErrorControl*: Dword
    lpBinaryPathName*: Lptstr
    lpLoadOrderGroup*: Lptstr
    dwTagId*: Dword
    lpDependencies*: Lptstr
    lpServiceStartName*: Lptstr
    lpDisplayName*: Lptstr

  LpqueryServiceConfig* = ptr TQUERY_SERVICE_CONFIG
  Pqueryserviceconfig* = ptr TQUERY_SERVICE_CONFIG
  TQUERY_SERVICE_LOCK_STATUS* {.final, pure.} = object
    fIsLocked*: Dword
    lpLockOwner*: Lptstr
    dwLockDuration*: Dword

  LpqueryServiceLockStatus* = ptr TQUERY_SERVICE_LOCK_STATUS
  Pqueryservicelockstatus* = ptr TQUERY_SERVICE_LOCK_STATUS
  Rasamb* {.final, pure.} = object
    dwSize*: Dword
    dwError*: Dword
    szNetBiosError*: Array[0..(NETBIOS_NAME_LEN + 1) - 1, TCHAR]
    bLana*: Int8

  TRASAMB* = Rasamb
  Prasamb* = ptr Rasamb
  Rasconn* {.final, pure.} = object
    dwSize*: Dword
    hrasconn*: Hrasconn
    szEntryName*: Array[0..(RAS_MaxEntryName + 1) - 1, TCHAR]
    szDeviceType*: Array[0..(RAS_MaxDeviceType + 1) - 1, Char]
    szDeviceName*: Array[0..(RAS_MaxDeviceName + 1) - 1, Char]

  TRASCONN* = Rasconn
  Prasconn* = ptr Rasconn
  Rasconnstatus* {.final, pure.} = object
    dwSize*: Dword
    rasconnstate*: Rasconnstate
    dwError*: Dword
    szDeviceType*: Array[0..(RAS_MaxDeviceType + 1) - 1, TCHAR]
    szDeviceName*: Array[0..(RAS_MaxDeviceName + 1) - 1, TCHAR]

  TRASCONNSTATUS* = Rasconnstatus
  Prasconnstatus* = ptr Rasconnstatus
  Rasdialextensions* {.final, pure.} = object
    dwSize*: Dword
    dwfOptions*: Dword
    hwndParent*: Hwnd
    reserved*: Dword

  TRASDIALEXTENSIONS* = Rasdialextensions
  Prasdialextensions* = ptr Rasdialextensions
  Rasdialparams* {.final, pure.} = object
    dwSize*: Dword
    szEntryName*: Array[0..(RAS_MaxEntryName + 1) - 1, TCHAR]
    szPhoneNumber*: Array[0..(RAS_MaxPhoneNumber + 1) - 1, TCHAR]
    szCallbackNumber*: Array[0..(RAS_MaxCallbackNumber + 1) - 1, TCHAR]
    szUserName*: Array[0..(UNLEN + 1) - 1, TCHAR]
    szPassword*: Array[0..(PWLEN + 1) - 1, TCHAR]
    szDomain*: Array[0..(DNLEN + 1) - 1, TCHAR]

  TRASDIALPARAMS* = Rasdialparams
  Prasdialparams* = ptr Rasdialparams
  Rasentryname* {.final, pure.} = object
    dwSize*: Dword
    szEntryName*: Array[0..(RAS_MaxEntryName + 1) - 1, TCHAR]

  TRASENTRYNAME* = Rasentryname
  Prasentryname* = ptr Rasentryname
  Raspppip* {.final, pure.} = object
    dwSize*: Dword
    dwError*: Dword
    szIpAddress*: Array[0..(RAS_MaxIpAddress + 1) - 1, TCHAR]

  TRASPPPIP* = Raspppip
  Praspppip* = ptr Raspppip
  Raspppipx* {.final, pure.} = object
    dwSize*: Dword
    dwError*: Dword
    szIpxAddress*: Array[0..(RAS_MaxIpxAddress + 1) - 1, TCHAR]

  TRASPPPIPX* = Raspppipx
  Praspppipx* = ptr Raspppipx
  Raspppnbf* {.final, pure.} = object
    dwSize*: Dword
    dwError*: Dword
    dwNetBiosError*: Dword
    szNetBiosError*: Array[0..(NETBIOS_NAME_LEN + 1) - 1, TCHAR]
    szWorkstationName*: Array[0..(NETBIOS_NAME_LEN + 1) - 1, TCHAR]
    bLana*: Int8

  TRASPPPNBF* = Raspppnbf
  Praspppnbf* = ptr Raspppnbf
  RasterizerStatus* {.final, pure.} = object
    nSize*: Short
    wFlags*: Short
    nLanguageID*: Short

  LprasterizerStatus* = ptr RasterizerStatus
  TRASTERIZERSTATUS* = RasterizerStatus
  Prasterizerstatus* = ptr RasterizerStatus
  ReassignBlocks* {.final, pure.} = object
    Reserved*: Int16
    Count*: Int16
    BlockNumber*: Array[0..0, Dword]

  TREASSIGNBLOCKS* = ReassignBlocks
  Preassignblocks* = ptr ReassignBlocks
  RemoteNameInfo* {.final, pure.} = object
    lpUniversalName*: Lptstr
    lpConnectionName*: Lptstr
    lpRemainingPath*: Lptstr

  TREMOTENAMEINFO* = RemoteNameInfo
  Premotenameinfo* = ptr RemoteNameInfo

  Repastespecial* {.final, pure.} = object
    dwAspect*: Dword
    dwParam*: Dword

  Trepastespecial* = Repastespecial
  Prepastespecial* = ptr Repastespecial
  Reqresize* {.final, pure.} = object
    nmhdr*: Nmhdr
    rc*: Rect

  Treqresize* = Reqresize
  Preqresize* = ptr Reqresize
  Rgndataheader* {.final, pure.} = object
    dwSize*: Dword
    iType*: Dword
    nCount*: Dword
    nRgnSize*: Dword
    rcBound*: Rect

  TRGNDATAHEADER* = Rgndataheader
  Prgndataheader* = ptr Rgndataheader
  Rgndata* {.final, pure.} = object
    rdh*: Rgndataheader
    Buffer*: Array[0..0, Char]

  Lprgndata* = ptr Rgndata
  TRGNDATA* = Rgndata
  Prgndata* = ptr Rgndata
  Scrollinfo* {.final, pure.} = object
    cbSize*: Uint
    fMask*: Uint
    nMin*: Int32
    nMax*: Int32
    nPage*: Uint
    nPos*: Int32
    nTrackPos*: Int32

  Lpscrollinfo* = ptr Scrollinfo
  Lpcscrollinfo* = ptr Scrollinfo
  TSCROLLINFO* = Scrollinfo
  Pscrollinfo* = ptr Scrollinfo
  SecurityAttributes* {.final, pure.} = object
    nLength*: Dword
    lpSecurityDescriptor*: Lpvoid
    bInheritHandle*: Winbool

  LpsecurityAttributes* = ptr SecurityAttributes
  TSECURITYATTRIBUTES* = SecurityAttributes
  Psecurityattributes* = ptr SecurityAttributes
  SecurityInformation* = Dword
  PsecurityInformation* = ptr SecurityInformation
  TSECURITYINFORMATION* = SecurityInformation
  Selchange* {.final, pure.} = object
    nmhdr*: Nmhdr
    chrg*: Charrange
    seltyp*: Int16

  Tselchange* = Selchange
  Pselchange* = ptr Selchange
  Serialkeys* {.final, pure.} = object
    cbSize*: Dword
    dwFlags*: Dword
    lpszActivePort*: Lpstr
    lpszPort*: Lpstr
    iBaudRate*: Dword
    iPortState*: Dword

  Lpserialkeys* = ptr Serialkeys
  TSERIALKEYS* = Serialkeys
  Pserialkeys* = ptr Serialkeys
  ServiceTableEntry* {.final, pure.} = object
    lpServiceName*: Lptstr
    lpServiceProc*: LpserviceMainFunction

  LpserviceTableEntry* = ptr ServiceTableEntry
  TSERVICETABLEENTRY* = ServiceTableEntry
  Pservicetableentry* = ptr ServiceTableEntry
  ServiceTypeValueAbs* {.final, pure.} = object
    dwNameSpace*: Dword
    dwValueType*: Dword
    dwValueSize*: Dword
    lpValueName*: Lptstr
    lpValue*: Pvoid

  TSERVICETYPEVALUEABS* = ServiceTypeValueAbs
  Pservicetypevalueabs* = ptr ServiceTypeValueAbs
  ServiceTypeInfoAbs* {.final, pure.} = object
    lpTypeName*: Lptstr
    dwValueCount*: Dword
    Values*: Array[0..0, ServiceTypeValueAbs]

  TSERVICETYPEINFOABS* = ServiceTypeInfoAbs
  Pservicetypeinfoabs* = ptr ServiceTypeInfoAbs
  SessionBuffer* {.final, pure.} = object
    lsn*: Uchar
    state*: Uchar
    local_name*: Array[0..(NCBNAMSZ) - 1, Uchar]
    remote_name*: Array[0..(NCBNAMSZ) - 1, Uchar]
    rcvs_outstanding*: Uchar
    sends_outstanding*: Uchar

  TSESSIONBUFFER* = SessionBuffer
  Psessionbuffer* = ptr SessionBuffer
  SessionHeader* {.final, pure.} = object
    sess_name*: Uchar
    num_sess*: Uchar
    rcv_dg_outstanding*: Uchar
    rcv_any_outstanding*: Uchar

  TSESSIONHEADER* = SessionHeader
  Psessionheader* = ptr SessionHeader
  SetPartitionInformation* {.final, pure.} = object
    PartitionType*: Int8

  TSETPARTITIONINFORMATION* = SetPartitionInformation
  Psetpartitioninformation* = ptr SetPartitionInformation
  Shcontf* = enum
    SHCONTF_FOLDERS = 32, SHCONTF_NONFOLDERS = 64, SHCONTF_INCLUDEHIDDEN = 128
  TSHCONTF* = Shcontf
  Shfileinfo* {.final, pure.} = object
    hIcon*: Hicon
    iIcon*: Int32
    dwAttributes*: Dword
    szDisplayName*: Array[0..(MAX_PATH) - 1, Char]
    szTypeName*: Array[0..79, Char]

  TSHFILEINFO* = Shfileinfo
  Pshfileinfo* = ptr Shfileinfo
  FileopFlags* = Int16
  TFILEOPFLAGS* = FileopFlags
  Pfileopflags* = ptr FileopFlags
  Shfileopstruct* {.final, pure.} = object
    hwnd*: Hwnd
    wFunc*: Uint
    pFrom*: Lpcstr
    pTo*: Lpcstr
    fFlags*: FileopFlags
    fAnyOperationsAborted*: Winbool
    hNameMappings*: Lpvoid
    lpszProgressTitle*: Lpcstr

  Lpshfileopstruct* = ptr Shfileopstruct
  TSHFILEOPSTRUCT* = Shfileopstruct
  Pshfileopstruct* = ptr Shfileopstruct
  Shgno* = enum
    SHGDN_NORMAL = 0, SHGDN_INFOLDER = 1, SHGDN_FORPARSING = 0x00008000
  TSHGDN* = Shgno
  Shnamemapping* {.final, pure.} = object
    pszOldPath*: Lpstr
    pszNewPath*: Lpstr
    cchOldPath*: Int32
    cchNewPath*: Int32

  Lpshnamemapping* = ptr Shnamemapping
  TSHNAMEMAPPING* = Shnamemapping
  Pshnamemapping* = ptr Shnamemapping
  SidAndAttributes* {.final, pure.} = object
    Sid*: Psid
    Attributes*: Dword

  TSIDANDATTRIBUTES* = SidAndAttributes
  Psidandattributes* = ptr SidAndAttributes
  SidAndAttributesArray* = Array[0..(ANYSIZE_ARRAY) - 1, SidAndAttributes]
  PsidAndAttributesArray* = ptr SidAndAttributesArray
  TSIDANDATTRIBUTESARRAY* = SidAndAttributesArray
  SingleListEntry* {.final, pure.} = object
    Next*: ptr SingleListEntry

  TSINGLELISTENTRY* = SingleListEntry
  Psinglelistentry* = ptr SingleListEntry
  Soundsentry* {.final, pure.} = object
    cbSize*: Uint
    dwFlags*: Dword
    iFSTextEffect*: Dword
    iFSTextEffectMSec*: Dword
    iFSTextEffectColorBits*: Dword
    iFSGrafEffect*: Dword
    iFSGrafEffectMSec*: Dword
    iFSGrafEffectColor*: Dword
    iWindowsEffect*: Dword
    iWindowsEffectMSec*: Dword
    lpszWindowsEffectDLL*: Lptstr
    iWindowsEffectOrdinal*: Dword

  Lpsoundsentry* = ptr Soundsentry
  TSOUNDSENTRY* = Soundsentry
  Psoundsentry* = ptr Soundsentry
  Startupinfo* {.final, pure.} = object
    cb*: Dword
    lpReserved*: Lptstr
    lpDesktop*: Lptstr
    lpTitle*: Lptstr
    dwX*: Dword
    dwY*: Dword
    dwXSize*: Dword
    dwYSize*: Dword
    dwXCountChars*: Dword
    dwYCountChars*: Dword
    dwFillAttribute*: Dword
    dwFlags*: Dword
    wShowWindow*: Int16
    cbReserved2*: Int16
    lpReserved2*: Lpbyte
    hStdInput*: Handle
    hStdOutput*: Handle
    hStdError*: Handle

  Lpstartupinfo* = ptr Startupinfo
  TSTARTUPINFO* = Startupinfo
  Pstartupinfo* = ptr Startupinfo
  Stickykeys* {.final, pure.} = object
    cbSize*: Dword
    dwFlags*: Dword

  Lpstickykeys* = ptr Stickykeys
  TSTICKYKEYS* = Stickykeys
  Pstickykeys* = ptr Stickykeys
  Strret* {.final, pure.} = object
    uType*: Uint
    cStr*: Array[0..(MAX_PATH) - 1, Char]

  Lpstrret* = ptr Strret
  TSTRRET* = Strret
  Pstrret* = ptr Strret
  Stylebuf* {.final, pure.} = object
    dwStyle*: Dword
    szDescription*: Array[0..31, Char]

  Lpstylebuf* = ptr Stylebuf
  TSTYLEBUF* = Stylebuf
  Pstylebuf* = ptr Stylebuf
  Stylestruct* {.final, pure.} = object
    styleOld*: Dword
    styleNew*: Dword

  Lpstylestruct* = ptr Stylestruct
  TSTYLESTRUCT* = Stylestruct
  Pstylestruct* = ptr Stylestruct
  SystemAuditAce* {.final, pure.} = object
    Header*: AceHeader
    Mask*: AccessMask
    SidStart*: Dword

  TSYSTEMAUDITACE* = SystemAuditAce
  Psystemauditace* = ptr SystemAuditAce
  SystemInfo* {.final, pure.} = object
    dwOemId*: Dword
    dwPageSize*: Dword
    lpMinimumApplicationAddress*: Lpvoid
    lpMaximumApplicationAddress*: Lpvoid
    dwActiveProcessorMask*: Dword
    dwNumberOfProcessors*: Dword
    dwProcessorType*: Dword
    dwAllocationGranularity*: Dword
    wProcessorLevel*: Int16
    wProcessorRevision*: Int16

  LpsystemInfo* = ptr SystemInfo
  TSYSTEMINFO* = SystemInfo
  Psysteminfo* = ptr SystemInfo
  SystemPowerStatus* {.final, pure.} = object
    ACLineStatus*: Int8
    BatteryFlag*: Int8
    BatteryLifePercent*: Int8
    Reserved1*: Int8
    BatteryLifeTime*: Dword
    BatteryFullLifeTime*: Dword

  TSYSTEMPOWERSTATUS* = SystemPowerStatus
  Psystempowerstatus* = ptr SystemPowerStatus
  LpsystemPowerStatus* = ptr Emptyrecord
  TAPE_ERASE* {.final, pure.} = object
    `type`*: Ulong

  TTAPEERASE* = TAPE_ERASE
  Ptapeerase* = ptr TAPE_ERASE
  TAPE_GET_DRIVE_PARAMETERS* {.final, pure.} = object
    ECC*: Bool
    Compression*: Bool
    DataPadding*: Bool
    ReportSetmarks*: Bool
    DefaultBlockSize*: Ulong
    MaximumBlockSize*: Ulong
    MinimumBlockSize*: Ulong
    MaximumPartitionCount*: Ulong
    FeaturesLow*: Ulong
    FeaturesHigh*: Ulong
    EOTWarningZoneSize*: Ulong

  TTAPEGETDRIVEPARAMETERS* = TAPE_GET_DRIVE_PARAMETERS
  Ptapegetdriveparameters* = ptr TAPE_GET_DRIVE_PARAMETERS
  TAPE_GET_MEDIA_PARAMETERS* {.final, pure.} = object
    Capacity*: LargeInteger
    Remaining*: LargeInteger
    BlockSize*: Dword
    PartitionCount*: Dword
    WriteProtected*: Bool

  TTAPEGETMEDIAPARAMETERS* = TAPE_GET_MEDIA_PARAMETERS
  Ptapegetmediaparameters* = ptr TAPE_GET_MEDIA_PARAMETERS
  TAPE_GET_POSITION* {.final, pure.} = object
    `type`*: Ulong
    Partition*: Ulong
    OffsetLow*: Ulong
    OffsetHigh*: Ulong

  TTAPEGETPOSITION* = TAPE_GET_POSITION
  Ptapegetposition* = ptr TAPE_GET_POSITION
  TAPE_PREPARE* {.final, pure.} = object
    Operation*: Ulong

  TTAPEPREPARE* = TAPE_PREPARE
  Ptapeprepare* = ptr TAPE_PREPARE
  TAPE_SET_DRIVE_PARAMETERS* {.final, pure.} = object
    ECC*: Bool
    Compression*: Bool
    DataPadding*: Bool
    ReportSetmarks*: Bool
    EOTWarningZoneSize*: Ulong

  TTAPESETDRIVEPARAMETERS* = TAPE_SET_DRIVE_PARAMETERS
  Ptapesetdriveparameters* = ptr TAPE_SET_DRIVE_PARAMETERS
  TAPE_SET_MEDIA_PARAMETERS* {.final, pure.} = object
    BlockSize*: Ulong

  TTAPESETMEDIAPARAMETERS* = TAPE_SET_MEDIA_PARAMETERS
  Ptapesetmediaparameters* = ptr TAPE_SET_MEDIA_PARAMETERS
  TAPE_SET_POSITION* {.final, pure.} = object
    `Method`*: Ulong
    Partition*: Ulong
    OffsetLow*: Ulong
    OffsetHigh*: Ulong

  TTAPESETPOSITION* = TAPE_SET_POSITION
  Ptapesetposition* = ptr TAPE_SET_POSITION
  TAPE_WRITE_MARKS* {.final, pure.} = object
    `type`*: Ulong
    Count*: Ulong

  TTAPEWRITEMARKS* = TAPE_WRITE_MARKS
  Ptapewritemarks* = ptr TAPE_WRITE_MARKS
  TTBADDBITMAP* {.final, pure.} = object
    hInst*: Hinst
    nID*: Uint

  Lptbaddbitmap* = ptr TTBADDBITMAP
  Ptbaddbitmap* = ptr TTBADDBITMAP
  TBBUTTON* {.final, pure.} = object
    iBitmap*: Int32
    idCommand*: Int32
    fsState*: Int8
    fsStyle*: Int8
    dwData*: Dword
    iString*: Int32

  Lptbbutton* = ptr TBBUTTON
  Lpctbbutton* = ptr TBBUTTON
  TTBBUTTON* = TBBUTTON
  Ptbbutton* = ptr TBBUTTON
  TBNOTIFY* {.final, pure.} = object
    hdr*: Nmhdr
    iItem*: Int32
    tbButton*: TBBUTTON
    cchText*: Int32
    pszText*: Lptstr

  Lptbnotify* = ptr TBNOTIFY
  TTBNOTIFY* = TBNOTIFY
  Ptbnotify* = ptr TBNOTIFY
  TBSAVEPARAMS* {.final, pure.} = object
    hkr*: Hkey
    pszSubKey*: Lpctstr
    pszValueName*: Lpctstr

  TTBSAVEPARAMS* = TBSAVEPARAMS
  Ptbsaveparams* = ptr TBSAVEPARAMS
  TC_HITTESTINFO* {.final, pure.} = object
    pt*: Point
    flags*: Uint

  TTCHITTESTINFO* = TC_HITTESTINFO
  Ptchittestinfo* = ptr TC_HITTESTINFO
  TC_ITEM* {.final, pure.} = object
    mask*: Uint
    lpReserved1*: Uint
    lpReserved2*: Uint
    pszText*: Lptstr
    cchTextMax*: Int32
    iImage*: Int32
    lParam*: Lparam

  TTCITEM* = TC_ITEM
  Ptcitem* = ptr TC_ITEM
  TC_ITEMHEADER* {.final, pure.} = object
    mask*: Uint
    lpReserved1*: Uint
    lpReserved2*: Uint
    pszText*: Lptstr
    cchTextMax*: Int32
    iImage*: Int32

  TTCITEMHEADER* = TC_ITEMHEADER
  Ptcitemheader* = ptr TC_ITEMHEADER
  TC_KEYDOWN* {.final, pure.} = object
    hdr*: Nmhdr
    wVKey*: Int16
    flags*: Uint

  TTCKEYDOWN* = TC_KEYDOWN
  Ptckeydown* = ptr TC_KEYDOWN
  TEXTRANGE* {.final, pure.} = object
    chrg*: Charrange
    lpstrText*: Lpstr

  Ttextrange* = TEXTRANGE
  Ptextrange* = ptr TEXTRANGE
  TIME_ZONE_INFORMATION* {.final, pure.} = object
    Bias*: Long
    StandardName*: Array[0..31, Wchar]
    StandardDate*: Systemtime
    StandardBias*: Long
    DaylightName*: Array[0..31, Wchar]
    DaylightDate*: Systemtime
    DaylightBias*: Long

  LptimeZoneInformation* = ptr TIME_ZONE_INFORMATION
  TTIMEZONEINFORMATION* = TIME_ZONE_INFORMATION
  Ptimezoneinformation* = ptr TIME_ZONE_INFORMATION
  TOGGLEKEYS* {.final, pure.} = object
    cbSize*: Dword
    dwFlags*: Dword

  TTOGGLEKEYS* = TOGGLEKEYS
  Ptogglekeys* = ptr TOGGLEKEYS
  TTOKEN_SOURCE* {.final, pure.} = object
    SourceName*: Array[0..7, Char]
    SourceIdentifier*: Luid

  Ptokensource* = ptr TTOKEN_SOURCE
  TOKEN_CONTROL* {.final, pure.} = object
    TokenId*: Luid
    AuthenticationId*: Luid
    ModifiedId*: Luid
    TokenSource*: TTOKEN_SOURCE

  TTOKENCONTROL* = TOKEN_CONTROL
  Ptokencontrol* = ptr TOKEN_CONTROL
  TTOKEN_DEFAULT_DACL* {.final, pure.} = object
    DefaultDacl*: Pacl

  Ptokendefaultdacl* = ptr TTOKEN_DEFAULT_DACL
  TTOKEN_GROUPS* {.final, pure.} = object
    GroupCount*: Dword
    Groups*: Array[0..(ANYSIZE_ARRAY) - 1, SidAndAttributes]

  LptokenGroups* = ptr TTOKEN_GROUPS
  Ptokengroups* = ptr TTOKEN_GROUPS
  TTOKEN_OWNER* {.final, pure.} = object
    Owner*: Psid

  Ptokenowner* = ptr TTOKEN_OWNER
  TTOKEN_PRIMARY_GROUP* {.final, pure.} = object
    PrimaryGroup*: Psid

  Ptokenprimarygroup* = ptr TTOKEN_PRIMARY_GROUP
  TTOKEN_PRIVILEGES* {.final, pure.} = object
    PrivilegeCount*: Dword
    Privileges*: Array[0..(ANYSIZE_ARRAY) - 1, LuidAndAttributes]

  PtokenPrivileges* = ptr TTOKEN_PRIVILEGES
  LptokenPrivileges* = ptr TTOKEN_PRIVILEGES
  TTOKEN_STATISTICS* {.final, pure.} = object
    TokenId*: Luid
    AuthenticationId*: Luid
    ExpirationTime*: LargeInteger
    TokenType*: TTOKEN_TYPE
    ImpersonationLevel*: SecurityImpersonationLevel
    DynamicCharged*: Dword
    DynamicAvailable*: Dword
    GroupCount*: Dword
    PrivilegeCount*: Dword
    ModifiedId*: Luid

  Ptokenstatistics* = ptr TTOKEN_STATISTICS
  TTOKEN_USER* {.final, pure.} = object
    User*: SidAndAttributes

  Ptokenuser* = ptr TTOKEN_USER
  TOOLINFO* {.final, pure.} = object
    cbSize*: Uint
    uFlags*: Uint
    hwnd*: Hwnd
    uId*: Uint
    rect*: Rect
    hinst*: Hinst
    lpszText*: Lptstr

  Lptoolinfo* = ptr TOOLINFO
  TTOOLINFO* = TOOLINFO
  Ptoolinfo* = ptr TOOLINFO
  TOOLTIPTEXT* {.final, pure.} = object
    hdr*: Nmhdr
    lpszText*: Lptstr
    szText*: Array[0..79, Char]
    hinst*: Hinst
    uFlags*: Uint

  Lptooltiptext* = ptr TOOLTIPTEXT
  TTOOLTIPTEXT* = TOOLTIPTEXT
  Ptooltiptext* = ptr TOOLTIPTEXT
  TPMPARAMS* {.final, pure.} = object
    cbSize*: Uint
    rcExclude*: Rect

  Lptpmparams* = ptr TPMPARAMS
  TTPMPARAMS* = TPMPARAMS
  Ptpmparams* = ptr TPMPARAMS
  TRANSMIT_FILE_BUFFERS* {.final, pure.} = object
    Head*: Pvoid
    HeadLength*: Dword
    Tail*: Pvoid
    TailLength*: Dword

  TTRANSMITFILEBUFFERS* = TRANSMIT_FILE_BUFFERS
  Ptransmitfilebuffers* = ptr TRANSMIT_FILE_BUFFERS
  TTHITTESTINFO* {.final, pure.} = object
    hwnd*: Hwnd
    pt*: Point
    ti*: TOOLINFO

  Lphittestinfo* = ptr TTHITTESTINFO
  TTTHITTESTINFO* = TTHITTESTINFO
  Ptthittestinfo* = ptr TTHITTESTINFO
  TTPOLYCURVE* {.final, pure.} = object
    wType*: Int16
    cpfx*: Int16
    apfx*: Array[0..0, Pointfx]

  Lpttpolycurve* = ptr TTPOLYCURVE
  TTTPOLYCURVE* = TTPOLYCURVE
  Pttpolycurve* = ptr TTPOLYCURVE
  TTPOLYGONHEADER* {.final, pure.} = object
    cb*: Dword
    dwType*: Dword
    pfxStart*: Pointfx

  Lpttpolygonheader* = ptr TTPOLYGONHEADER
  TTTPOLYGONHEADER* = TTPOLYGONHEADER
  Pttpolygonheader* = ptr TTPOLYGONHEADER
  TV_DISPINFO* {.final, pure.} = object
    hdr*: Nmhdr
    item*: TV_ITEM

  TTVDISPINFO* = TV_DISPINFO
  Ptvdispinfo* = ptr TV_DISPINFO
  TV_HITTESTINFO* {.final, pure.} = object
    pt*: Point
    flags*: Uint
    hItem*: Htreeitem

  LptvHittestinfo* = ptr TV_HITTESTINFO
  TTVHITTESTINFO* = TV_HITTESTINFO
  Ptvhittestinfo* = ptr TV_HITTESTINFO
  TV_INSERTSTRUCT* {.final, pure.} = object
    hParent*: Htreeitem
    hInsertAfter*: Htreeitem
    item*: TV_ITEM

  LptvInsertstruct* = ptr TV_INSERTSTRUCT
  TTVINSERTSTRUCT* = TV_INSERTSTRUCT
  Ptvinsertstruct* = ptr TV_INSERTSTRUCT
  TV_KEYDOWN* {.final, pure.} = object
    hdr*: Nmhdr
    wVKey*: Int16
    flags*: Uint

  TTVKEYDOWN* = TV_KEYDOWN
  Ptvkeydown* = ptr TV_KEYDOWN
  TV_SORTCB* {.final, pure.} = object
    hParent*: Htreeitem
    lpfnCompare*: Pfntvcompare
    lParam*: Lparam

  LptvSortcb* = ptr TV_SORTCB
  TTVSORTCB* = TV_SORTCB
  Ptvsortcb* = ptr TV_SORTCB
  Udaccel* {.final, pure.} = object
    nSec*: Uint
    nInc*: Uint

  TUDACCEL* = Udaccel
  Pudaccel* = ptr Udaccel
  UniversalNameInfo* {.final, pure.} = object
    lpUniversalName*: Lptstr

  TUNIVERSALNAMEINFO* = UniversalNameInfo
  Puniversalnameinfo* = ptr UniversalNameInfo
  Userobjectflags* {.final, pure.} = object
    fInherit*: Winbool
    fReserved*: Winbool
    dwFlags*: Dword

  TUSEROBJECTFLAGS* = Userobjectflags
  Puserobjectflags* = ptr Userobjectflags
  Valent* {.final, pure.} = object
    ve_valuename*: Lptstr
    ve_valuelen*: Dword
    ve_valueptr*: Dword
    ve_type*: Dword

  TVALENT* = Valent
  Pvalent* = ptr Valent
  ValueEnt* = Valent
  TvalueEnt* = Valent
  PvalueEnt* = ptr Valent
  VerifyInformation* {.final, pure.} = object
    StartingOffset*: LargeInteger
    len*: Dword

  TVERIFYINFORMATION* = VerifyInformation
  Pverifyinformation* = ptr VerifyInformation
  VsFixedfileinfo* {.final, pure.} = object
    dwSignature*: Dword
    dwStrucVersion*: Dword
    dwFileVersionMS*: Dword
    dwFileVersionLS*: Dword
    dwProductVersionMS*: Dword
    dwProductVersionLS*: Dword
    dwFileFlagsMask*: Dword
    dwFileFlags*: Dword
    dwFileOS*: Dword
    dwFileType*: Dword
    dwFileSubtype*: Dword
    dwFileDateMS*: Dword
    dwFileDateLS*: Dword

  TVSFIXEDFILEINFO* = VsFixedfileinfo
  Pvsfixedfileinfo* = ptr VsFixedfileinfo
  Win32FindData* {.final, pure.} = object
    dwFileAttributes*: Dword
    ftCreationTime*: Filetime
    ftLastAccessTime*: Filetime
    ftLastWriteTime*: Filetime
    nFileSizeHigh*: Dword
    nFileSizeLow*: Dword
    dwReserved0*: Dword
    dwReserved1*: Dword
    cFileName*: Array[0..(MAX_PATH) - 1, TCHAR]
    cAlternateFileName*: Array[0..13, TCHAR]

  Lpwin32FindData* = ptr Win32FindData
  Pwin32FindData* = ptr Win32FindData
  TWIN32FINDDATA* = Win32FindData
  TWIN32FINDDATAA* = Win32FindData
  Win32FindDataw* {.final, pure.} = object
    dwFileAttributes*: Dword
    ftCreationTime*: Filetime
    ftLastAccessTime*: Filetime
    ftLastWriteTime*: Filetime
    nFileSizeHigh*: Dword
    nFileSizeLow*: Dword
    dwReserved0*: Dword
    dwReserved1*: Dword
    cFileName*: Array[0..(MAX_PATH) - 1, Wchar]
    cAlternateFileName*: Array[0..13, Wchar]

  Lpwin32FindDataw* = ptr Win32FindDataw
  Pwin32FindDataw* = ptr Win32FindDataw
  TWIN32FINDDATAW* = Win32FindDataw
  Win32StreamId* {.final, pure.} = object
    dwStreamId*: Dword
    dwStreamAttributes*: Dword
    Size*: LargeInteger
    dwStreamNameSize*: Dword
    cStreamName*: ptr Wchar

  TWIN32STREAMID* = Win32StreamId
  Pwin32streamid* = ptr Win32StreamId
  Windowplacement* {.final, pure.} = object
    len*: Uint
    flags*: Uint
    showCmd*: Uint
    ptMinPosition*: Point
    ptMaxPosition*: Point
    rcNormalPosition*: Rect

  TWINDOWPLACEMENT* = Windowplacement
  Pwindowplacement* = ptr Windowplacement
  Wndclass* {.final, pure.} = object
    style*: Uint
    lpfnWndProc*: Wndproc
    cbClsExtra*: Int32
    cbWndExtra*: Int32
    hInstance*: Handle
    hIcon*: Hicon
    hCursor*: Hcursor
    hbrBackground*: Hbrush
    lpszMenuName*: Lpctstr
    lpszClassName*: Lpctstr

  Lpwndclass* = ptr Wndclass
  TWNDCLASS* = Wndclass
  TWNDCLASSA* = Wndclass
  Pwndclass* = ptr Wndclass
  Wndclassw* {.final, pure.} = object
    style*: Uint
    lpfnWndProc*: Wndproc
    cbClsExtra*: Int32
    cbWndExtra*: Int32
    hInstance*: Handle
    hIcon*: Hicon
    hCursor*: Hcursor
    hbrBackground*: Hbrush
    lpszMenuName*: Lpcwstr
    lpszClassName*: Lpcwstr

  Lpwndclassw* = ptr Wndclassw
  TWNDCLASSW* = Wndclassw
  Pwndclassw* = ptr Wndclassw
  Wndclassex* {.final, pure.} = object
    cbSize*: Uint
    style*: Uint
    lpfnWndProc*: Wndproc
    cbClsExtra*: Int32
    cbWndExtra*: Int32
    hInstance*: Handle
    hIcon*: Hicon
    hCursor*: Hcursor
    hbrBackground*: Hbrush
    lpszMenuName*: Lpctstr
    lpszClassName*: Lpctstr
    hIconSm*: Handle

  Lpwndclassex* = ptr Wndclassex
  TWNDCLASSEX* = Wndclassex
  TWNDCLASSEXA* = Wndclassex
  Pwndclassex* = ptr Wndclassex
  Wndclassexw* {.final, pure.} = object
    cbSize*: Uint
    style*: Uint
    lpfnWndProc*: Wndproc
    cbClsExtra*: Int32
    cbWndExtra*: Int32
    hInstance*: Handle
    hIcon*: Hicon
    hCursor*: Hcursor
    hbrBackground*: Hbrush
    lpszMenuName*: Lpcwstr
    lpszClassName*: Lpcwstr
    hIconSm*: Handle

  Lpwndclassexw* = ptr Wndclassexw
  TWNDCLASSEXW* = Wndclassexw
  Pwndclassexw* = ptr Wndclassexw
  Connectdlgstruct* {.final, pure.} = object
    cbStructure*: Dword
    hwndOwner*: Hwnd
    lpConnRes*: Lpnetresource
    dwFlags*: Dword
    dwDevNum*: Dword

  Lpconnectdlgstruct* = ptr Connectdlgstruct
  TCONNECTDLGSTRUCT* = Connectdlgstruct
  Pconnectdlgstruct* = ptr Connectdlgstruct
  Discdlgstruct* {.final, pure.} = object
    cbStructure*: Dword
    hwndOwner*: Hwnd
    lpLocalName*: Lptstr
    lpRemoteName*: Lptstr
    dwFlags*: Dword

  Lpdiscdlgstruct* = ptr Discdlgstruct
  TDISCDLGSTRUCT* = Discdlgstruct
  TDISCDLGSTRUCTA* = Discdlgstruct
  Pdiscdlgstruct* = ptr Discdlgstruct
  Netinfostruct* {.final, pure.} = object
    cbStructure*: Dword
    dwProviderVersion*: Dword
    dwStatus*: Dword
    dwCharacteristics*: Dword
    dwHandle*: Dword
    wNetType*: Int16
    dwPrinters*: Dword
    dwDrives*: Dword

  Lpnetinfostruct* = ptr Netinfostruct
  TNETINFOSTRUCT* = Netinfostruct
  Pnetinfostruct* = ptr Netinfostruct
  Netconnectinfostruct* {.final, pure.} = object
    cbStructure*: Dword
    dwFlags*: Dword
    dwSpeed*: Dword
    dwDelay*: Dword
    dwOptDataSize*: Dword

  Lpnetconnectinfostruct* = ptr Netconnectinfostruct
  TNETCONNECTINFOSTRUCT* = Netconnectinfostruct
  Pnetconnectinfostruct* = ptr Netconnectinfostruct
  Enummetafileproc* = proc (para1: Hdc, para2: Handletable, para3: Metarecord,
                            para4: Int32, para5: Lparam): Int32{.stdcall.}
  Enhmetafileproc* = proc (para1: Hdc, para2: Handletable, para3: TENHMETARECORD,
                           para4: Int32, para5: Lparam): Int32{.stdcall.}
  Enumfontsproc* = proc (para1: Lplogfont, para2: Lptextmetric, para3: Dword,
                         para4: Lparam): Int32{.stdcall.}
  Fontenumproc* = proc (para1: var Enumlogfont, para2: var Newtextmetric,
                        para3: Int32, para4: Lparam): Int32{.stdcall.}
  Fontenumexproc* = proc (para1: var Enumlogfontex, para2: var Newtextmetricex,
                          para3: Int32, para4: Lparam): Int32{.stdcall.}
  LpoverlappedCompletionRoutine* = proc (para1: Dword, para2: Dword,
      para3: Lpoverlapped){.stdcall.}
  # Structures for the extensions to OpenGL
  Pointfloat* {.final, pure.} = object
    x*: Float32
    y*: Float32

  TPOINTFLOAT* = Pointfloat
  Ppointfloat* = ptr Pointfloat
  Glyphmetricsfloat* {.final, pure.} = object
    gmfBlackBoxX*: Float32
    gmfBlackBoxY*: Float32
    gmfptGlyphOrigin*: Pointfloat
    gmfCellIncX*: Float32
    gmfCellIncY*: Float32

  Lpglyphmetricsfloat* = ptr Glyphmetricsfloat
  TGLYPHMETRICSFLOAT* = Glyphmetricsfloat
  Pglyphmetricsfloat* = ptr Glyphmetricsfloat
  Layerplanedescriptor* {.final, pure.} = object
    nSize*: Int16
    nVersion*: Int16
    dwFlags*: Dword
    iPixelType*: Int8
    cColorBits*: Int8
    cRedBits*: Int8
    cRedShift*: Int8
    cGreenBits*: Int8
    cGreenShift*: Int8
    cBlueBits*: Int8
    cBlueShift*: Int8
    cAlphaBits*: Int8
    cAlphaShift*: Int8
    cAccumBits*: Int8
    cAccumRedBits*: Int8
    cAccumGreenBits*: Int8
    cAccumBlueBits*: Int8
    cAccumAlphaBits*: Int8
    cDepthBits*: Int8
    cStencilBits*: Int8
    cAuxBuffers*: Int8
    iLayerPlane*: Int8
    bReserved*: Int8
    crTransparent*: Colorref

  Lplayerplanedescriptor* = ptr Layerplanedescriptor
  TLAYERPLANEDESCRIPTOR* = Layerplanedescriptor
  Playerplanedescriptor* = ptr Layerplanedescriptor
  Pixelformatdescriptor* {.final, pure.} = object
    nSize*: Int16
    nVersion*: Int16
    dwFlags*: Dword
    iPixelType*: Int8
    cColorBits*: Int8
    cRedBits*: Int8
    cRedShift*: Int8
    cGreenBits*: Int8
    cGreenShift*: Int8
    cBlueBits*: Int8
    cBlueShift*: Int8
    cAlphaBits*: Int8
    cAlphaShift*: Int8
    cAccumBits*: Int8
    cAccumRedBits*: Int8
    cAccumGreenBits*: Int8
    cAccumBlueBits*: Int8
    cAccumAlphaBits*: Int8
    cDepthBits*: Int8
    cStencilBits*: Int8
    cAuxBuffers*: Int8
    iLayerType*: Int8
    bReserved*: Int8
    dwLayerMask*: Dword
    dwVisibleMask*: Dword
    dwDamageMask*: Dword

  Lppixelformatdescriptor* = ptr Pixelformatdescriptor
  TPIXELFORMATDESCRIPTOR* = Pixelformatdescriptor
  Ppixelformatdescriptor* = ptr Pixelformatdescriptor
  UserInfo2* {.final, pure.} = object
    usri2_name*: Lpwstr
    usri2_password*: Lpwstr
    usri2_password_age*: Dword
    usri2_priv*: Dword
    usri2_home_dir*: Lpwstr
    usri2_comment*: Lpwstr
    usri2_flags*: Dword
    usri2_script_path*: Lpwstr
    usri2_auth_flags*: Dword
    usri2_full_name*: Lpwstr
    usri2_usr_comment*: Lpwstr
    usri2_parms*: Lpwstr
    usri2_workstations*: Lpwstr
    usri2_last_logon*: Dword
    usri2_last_logoff*: Dword
    usri2_acct_expires*: Dword
    usri2_max_storage*: Dword
    usri2_units_per_week*: Dword
    usri2_logon_hours*: Pbyte
    usri2_bad_pw_count*: Dword
    usri2_num_logons*: Dword
    usri2_logon_server*: Lpwstr
    usri2_country_code*: Dword
    usri2_code_page*: Dword

  PuserInfo2* = ptr UserInfo2
  LpuserInfo2* = ptr UserInfo2
  TUSERINFO2* = UserInfo2
  UserInfo0* {.final, pure.} = object
    usri0_name*: Lpwstr

  PuserInfo0* = ptr UserInfo0
  LpuserInfo0* = ptr UserInfo0
  TUSERINFO0* = UserInfo0
  UserInfo3* {.final, pure.} = object
    usri3_name*: Lpwstr
    usri3_password*: Lpwstr
    usri3_password_age*: Dword
    usri3_priv*: Dword
    usri3_home_dir*: Lpwstr
    usri3_comment*: Lpwstr
    usri3_flags*: Dword
    usri3_script_path*: Lpwstr
    usri3_auth_flags*: Dword
    usri3_full_name*: Lpwstr
    usri3_usr_comment*: Lpwstr
    usri3_parms*: Lpwstr
    usri3_workstations*: Lpwstr
    usri3_last_logon*: Dword
    usri3_last_logoff*: Dword
    usri3_acct_expires*: Dword
    usri3_max_storage*: Dword
    usri3_units_per_week*: Dword
    usri3_logon_hours*: Pbyte
    usri3_bad_pw_count*: Dword
    usri3_num_logons*: Dword
    usri3_logon_server*: Lpwstr
    usri3_country_code*: Dword
    usri3_code_page*: Dword
    usri3_user_id*: Dword
    usri3_primary_group_id*: Dword
    usri3_profile*: Lpwstr
    usri3_home_dir_drive*: Lpwstr
    usri3_password_expired*: Dword

  PuserInfo3* = ptr UserInfo3
  LpuserInfo3* = ptr UserInfo3
  TUSERINFO3* = UserInfo3
  GroupInfo2* {.final, pure.} = object
    grpi2_name*: Lpwstr
    grpi2_comment*: Lpwstr
    grpi2_group_id*: Dword
    grpi2_attributes*: Dword

  PgroupInfo2* = ptr GroupInfo2
  TGROUPINFO2* = GroupInfo2
  LocalgroupInfo0* {.final, pure.} = object
    lgrpi0_name*: Lpwstr

  PlocalgroupInfo0* = ptr LocalgroupInfo0
  LplocalgroupInfo0* = ptr LocalgroupInfo0
  TLOCALGROUPINFO0* = LocalgroupInfo0
  ImageDosHeader* {.final, pure.} = object
    e_magic*: Int16
    e_cblp*: Int16
    e_cp*: Int16
    e_crlc*: Int16
    e_cparhdr*: Int16
    e_minalloc*: Int16
    e_maxalloc*: Int16
    e_ss*: Int16
    e_sp*: Int16
    e_csum*: Int16
    e_ip*: Int16
    e_cs*: Int16
    e_lfarlc*: Int16
    e_ovno*: Int16
    e_res*: Array[0..3, Int16]
    e_oemid*: Int16
    e_oeminfo*: Int16
    e_res2*: Array[0..9, Int16]
    e_lfanew*: Long

  PimageDosHeader* = ptr ImageDosHeader
  TIMAGEDOSHEADER* = ImageDosHeader
  Notifyicondataa* {.final, pure.} = object
    cbSize*: Dword
    Wnd*: Hwnd
    uID*: Uint
    uFlags*: Uint
    uCallbackMessage*: Uint
    hIcon*: Hicon
    szTip*: Array[0..63, Char]

  Notifyicondata* = Notifyicondataa
  Notifyicondataw* {.final, pure.} = object
    cbSize*: Dword
    Wnd*: Hwnd
    uID*: Uint
    uFlags*: Uint
    uCallbackMessage*: Uint
    hIcon*: Hicon
    szTip*: Array[0..63, Int16]

  TNotifyIconDataA* = Notifyicondataa
  TNotifyIconDataW* = Notifyicondataw
  TNotifyIconData* = TNotifyIconDataA
  PNotifyIconDataA* = ptr TNotifyIconDataA
  PNotifyIconDataW* = ptr TNotifyIconDataW
  PNotifyIconData* = PNotifyIconDataA
  TWOHandleArray* = Array[0..MAXIMUM_WAIT_OBJECTS - 1, Handle]
  PWOHandleArray* = ptr TWOHandleArray
  Mmresult* = Int32

type
  PWaveFormatEx* = ptr TWaveFormatEx
  TWaveFormatEx* {.final, pure.} = object
    wFormatTag*: Int16        # format type
    nChannels*: Int16         # number of channels (i.e. mono, stereo, etc.)
    nSamplesPerSec*: Dword    # sample rate
    nAvgBytesPerSec*: Dword   # for buffer estimation
    nBlockAlign*: Int16       # block size of data
    wBitsPerSample*: Int16    # number of bits per sample of mono data
    cbSize*: Int16            # the count in bytes of the size of

  Win32FileAttributeData* {.final, pure.} = object
    dwFileAttributes*: Dword
    ftCreationTime*: Filetime
    ftLastAccessTime*: Filetime
    ftLastWriteTime*: Filetime
    nFileSizeHigh*: Dword
    nFileSizeLow*: Dword

  Lpwin32FileAttributeData* = ptr Win32FileAttributeData
  TWIN32FILEATTRIBUTEDATA* = Win32FileAttributeData
  Pwin32fileattributedata* = ptr Win32FileAttributeData
  # TrackMouseEvent. NT or higher only.
  TTrackMouseEvent* {.final, pure.} = object
    cbSize*: Dword
    dwFlags*: Dword
    hwndTrack*: Hwnd
    dwHoverTime*: Dword

  PTrackMouseEvent* = ptr TTrackMouseEvent

const
  AcmOpenw* = 1127
  AcmOpena* = 1124

when defined(winUnicode):
  const
    ACM_OPEN* = ACM_OPENW
else:
  const
    AcmOpen* = ACM_OPENA
# UNICODE

const
  AcmPlay* = 1125
  AcmStop* = 1126
  AcnStart* = 1
  AcnStop* = 2
  # Buttons
  BmClick* = 245
  BmGetcheck* = 240
  BmGetimage* = 246
  BmGetstate* = 242
  BmSetcheck* = 241
  BmSetimage* = 247
  BmSetstate* = 243
  BmSetstyle* = 244
  BnClicked* = 0
  BnDblclk* = 5
  BnDisable* = 4
  BnDoubleclicked* = 5
  BnHilite* = 2
  BnKillfocus* = 7
  BnPaint* = 1
  BnPushed* = 2
  BnSetfocus* = 6
  BnUnhilite* = 3
  BnUnpushed* = 3
  # Combo Box
  CbAddstring* = 323
  CbDeletestring* = 324
  CbDir* = 325
  CbFindstring* = 332
  CbFindstringexact* = 344
  CbGetcount* = 326
  CbGetcursel* = 327
  CbGetdroppedcontrolrect* = 338
  CbGetdroppedstate* = 343
  CbGetdroppedwidth* = 351
  CbGeteditsel* = 320
  CbGetextendedui* = 342
  CbGethorizontalextent* = 349
  CbGetitemdata* = 336
  CbGetitemheight* = 340
  CbGetlbtext* = 328
  CbGetlbtextlen* = 329
  CbGetlocale* = 346
  CbGettopindex* = 347
  CbInitstorage* = 353
  CbInsertstring* = 330
  CbLimittext* = 321
  CbResetcontent* = 331
  CbSelectstring* = 333
  CbSetcursel* = 334
  CbSetdroppedwidth* = 352
  CbSeteditsel* = 322
  CbSetextendedui* = 341
  CbSethorizontalextent* = 350
  CbSetitemdata* = 337
  CbSetitemheight* = 339
  CbSetlocale* = 345
  CbSettopindex* = 348
  CbShowdropdown* = 335
  # Combo Box notifications
  CbnCloseup* = 8
  CbnDblclk* = 2
  CbnDropdown* = 7
  CbnEditchange* = 5
  CbnEditupdate* = 6
  CbnErrspace* = -1
  CbnKillfocus* = 4
  CbnSelchange* = 1
  CbnSelendcancel* = 10
  CbnSelendok* = 9
  CbnSetfocus* = 3
  # Control Panel
  # Device messages
  # Drag list box
  DlBegindrag* = 1157
  DlCanceldrag* = 1160
  DlDragging* = 1158
  DlDropped* = 1159
  # Default push button
  DmGetdefid* = 1024
  DmReposition* = 1026
  DmSetdefid* = 1025
  # RTF control
  EmCanpaste* = 1074
  EmCanundo* = 198
  EmCharfrompos* = 215
  EmDisplayband* = 1075
  EmEmptyundobuffer* = 205
  EmExgetsel* = 1076
  EmExlimittext* = 1077
  EmExlinefromchar* = 1078
  EmExsetsel* = 1079
  EmFindtext* = 1080
  EmFindtextex* = 1103
  EmFindwordbreak* = 1100
  EmFmtlines* = 200
  EmFormatrange* = 1081
  EmGetcharformat* = 1082
  EmGeteventmask* = 1083
  EmGetfirstvisibleline* = 206
  EmGethandle* = 189
  EmGetlimittext* = 213
  EmGetline* = 196
  EmGetlinecount* = 186
  EmGetmargins* = 212
  EmGetmodify* = 184
  EmGetimecolor* = 1129
  EmGetimeoptions* = 1131
  EmGetoptions* = 1102
  EmGetoleinterface* = 1084
  EmGetparaformat* = 1085
  EmGetpasswordchar* = 210
  EmGetpunctuation* = 1125
  EmGetrect* = 178
  EmGetsel* = 176
  EmGetseltext* = 1086
  EmGettextrange* = 1099
  EmGetthumb* = 190
  EmGetwordbreakproc* = 209
  EmGetwordbreakprocex* = 1104
  EmGetwordwrapmode* = 1127
  EmHideselection* = 1087
  EmLimittext* = 197
  EmLinefromchar* = 201
  EmLineindex* = 187
  EmLinelength* = 193
  EmLinescroll* = 182
  EmPastespecial* = 1088
  EmPosfromchar* = 214
  EmReplacesel* = 194
  EmRequestresize* = 1089
  EmScroll* = 181
  EmScrollcaret* = 183
  EmSelectiontype* = 1090
  EmSetbkgndcolor* = 1091
  EmSetcharformat* = 1092
  EmSeteventmask* = 1093
  EmSethandle* = 188
  EmSetimecolor* = 1128
  EmSetimeoptions* = 1130
  EmSetlimittext* = 197
  EmSetmargins* = 211
  EmSetmodify* = 185
  EmSetolecallback* = 1094
  EmSetoptions* = 1101
  EmSetparaformat* = 1095
  EmSetpasswordchar* = 204
  EmSetpunctuation* = 1124
  EmSetreadonly* = 207
  EmSetrect* = 179
  EmSetrectnp* = 180
  EmSetsel* = 177
  EmSettabstops* = 203
  EmSettargetdevice* = 1096
  EmSetwordbreakproc* = 208
  EmSetwordbreakprocex* = 1105
  EmSetwordwrapmode* = 1126
  EmStreamin* = 1097
  EmStreamout* = 1098
  EmUndo* = 199
  # Edit control
  EnChange* = 768
  EnCorrecttext* = 1797
  EnDropfiles* = 1795
  EnErrspace* = 1280
  EnHscroll* = 1537
  EnImechange* = 1799
  EnKillfocus* = 512
  EnMaxtext* = 1281
  EnMsgfilter* = 1792
  EnOleopfailed* = 1801
  EnProtected* = 1796
  EnRequestresize* = 1793
  EnSaveclipboard* = 1800
  EnSelchange* = 1794
  EnSetfocus* = 256
  EnStopnoundo* = 1798
  EnUpdate* = 1024
  EnVscroll* = 1538
  # File Manager extensions
  # File Manager extensions DLL events
  # Header control
  HdmDeleteitem* = 4610
  HdmGetitemw* = 4619
  HdmInsertitemw* = 4618
  HdmSetitemw* = 4620
  HdmGetitema* = 4611
  HdmInsertitema* = 4609
  HdmSetitema* = 4612

when defined(winUnicode):
  const
    HDM_GETITEM* = HDM_GETITEMW
    HDM_INSERTITEM* = HDM_INSERTITEMW
    HDM_SETITEM* = HDM_SETITEMW
else:
  const
    HdmGetitem* = HDM_GETITEMA
    HdmInsertitem* = HDM_INSERTITEMA
    HdmSetitem* = HDM_SETITEMA
# UNICODE

const
  HdmGetitemcount* = 4608
  HdmHittest* = 4614
  HdmLayout* = 4613
  # Header control notifications
  HdnBegintrackw* = -326
  HdnDividerdblclickw* = -325
  HdnEndtrackw* = -327
  HdnItemchangedw* = -321
  HdnItemchangingw* = -320
  HdnItemclickw* = -322
  HdnItemdblclickw* = -323
  HdnTrackw* = -328
  HdnBegintracka* = -306
  HdnDividerdblclicka* = -305
  HdnEndtracka* = -307
  HdnItemchangeda* = -301
  HdnItemchanginga* = -300
  HdnItemclicka* = -302
  HdnItemdblclicka* = -303
  HdnTracka* = -308

when defined(winUnicode):
  const
    HDN_BEGINTRACK* = HDN_BEGINTRACKW
    HDN_DIVIDERDBLCLICK* = HDN_DIVIDERDBLCLICKW
    HDN_ENDTRACK* = HDN_ENDTRACKW
    HDN_ITEMCHANGED* = HDN_ITEMCHANGEDW
    HDN_ITEMCHANGING* = HDN_ITEMCHANGINGW
    HDN_ITEMCLICK* = HDN_ITEMCLICKW
    HDN_ITEMDBLCLICK* = HDN_ITEMDBLCLICKW
    HDN_TRACK* = HDN_TRACKW
else:
  const
    HdnBegintrack* = HDN_BEGINTRACKA
    HdnDividerdblclick* = HDN_DIVIDERDBLCLICKA
    HdnEndtrack* = HDN_ENDTRACKA
    HdnItemchanged* = HDN_ITEMCHANGEDA
    HdnItemchanging* = HDN_ITEMCHANGINGA
    HdnItemclick* = HDN_ITEMCLICKA
    HdnItemdblclick* = HDN_ITEMDBLCLICKA
    HdnTrack* = HDN_TRACKA
# UNICODE

const
  # Hot key control
  HkmGethotkey* = 1026
  HkmSethotkey* = 1025
  HkmSetrules* = 1027
  # List box
  LbAddfile* = 406
  LbAddstring* = 384
  LbDeletestring* = 386
  LbDir* = 397
  LbFindstring* = 399
  LbFindstringexact* = 418
  LbGetanchorindex* = 413
  LbGetcaretindex* = 415
  LbGetcount* = 395
  LbGetcursel* = 392
  LbGethorizontalextent* = 403
  LbGetitemdata* = 409
  LbGetitemheight* = 417
  LbGetitemrect* = 408
  LbGetlocale* = 422
  LbGetsel* = 391
  LbGetselcount* = 400
  LbGetselitems* = 401
  LbGettext* = 393
  LbGettextlen* = 394
  LbGettopindex* = 398
  LbInitstorage* = 424
  LbInsertstring* = 385
  LbItemfrompoint* = 425
  LbResetcontent* = 388
  LbSelectstring* = 396
  LbSelitemrange* = 411
  LbSelitemrangeex* = 387
  LbSetanchorindex* = 412
  LbSetcaretindex* = 414
  LbSetcolumnwidth* = 405
  LbSetcount* = 423
  LbSetcursel* = 390
  LbSethorizontalextent* = 404
  LbSetitemdata* = 410
  LbSetitemheight* = 416
  LbSetlocale* = 421
  LbSetsel* = 389
  LbSettabstops* = 402
  LbSettopindex* = 407
  # List box notifications
  LbnDblclk* = 2
  LbnErrspace* = -2
  LbnKillfocus* = 5
  LbnSelcancel* = 3
  LbnSelchange* = 1
  LbnSetfocus* = 4
  # List view control
  LvmArrange* = 4118
  LvmCreatedragimage* = 4129
  LvmDeleteallitems* = 4105
  LvmDeletecolumn* = 4124
  LvmDeleteitem* = 4104
  LvmEnsurevisible* = 4115
  LvmGetbkcolor* = 4096
  LvmGetcallbackmask* = 4106
  LvmGetcolumnwidth* = 4125
  LvmGetcountperpage* = 4136
  LvmGeteditcontrol* = 4120
  LvmGetimagelist* = 4098
  LvmEditlabelw* = 4214
  LvmFinditemw* = 4179
  LvmGetcolumnw* = 4191
  LvmGetisearchstringw* = 4213
  LvmGetitemw* = 4171
  LvmGetitemtextw* = 4211
  LvmGetstringwidthw* = 4183
  LvmInsertcolumnw* = 4193
  LvmInsertitemw* = 4173
  LvmSetcolumnw* = 4192
  LvmSetitemw* = 4172
  LvmSetitemtextw* = 4212
  LvmEditlabela* = 4119
  LvmFinditema* = 4109
  LvmGetcolumna* = 4121
  LvmGetisearchstringa* = 4148
  LvmGetitema* = 4101
  LvmGetitemtexta* = 4141
  LvmGetstringwidtha* = 4113
  LvmInsertcolumna* = 4123
  LvmInsertitema* = 4103
  LvmSetcolumna* = 4122
  LvmSetitema* = 4102
  LvmSetitemtexta* = 4142

when defined(winUnicode):
  const
    LVM_EDITLABEL* = LVM_EDITLABELW
    LVM_FINDITEM* = LVM_FINDITEMW
    LVM_GETCOLUMN* = LVM_GETCOLUMNW
    LVM_GETISEARCHSTRING* = LVM_GETISEARCHSTRINGW
    LVM_GETITEM* = LVM_GETITEMW
    LVM_GETITEMTEXT* = LVM_GETITEMTEXTW
    LVM_GETSTRINGWIDTH* = LVM_GETSTRINGWIDTHW
    LVM_INSERTCOLUMN* = LVM_INSERTCOLUMNW
    LVM_INSERTITEM* = LVM_INSERTITEMW
    LVM_SETCOLUMN* = LVM_SETCOLUMNW
    LVM_SETITEM* = LVM_SETITEMW
    LVM_SETITEMTEXT* = LVM_SETITEMTEXTW
else:
  const
    LvmEditlabel* = LVM_EDITLABELA
    LvmFinditem* = LVM_FINDITEMA
    LvmGetcolumn* = LVM_GETCOLUMNA
    LvmGetisearchstring* = LVM_GETISEARCHSTRINGA
    LvmGetitem* = LVM_GETITEMA
    LvmGetitemtext* = LVM_GETITEMTEXTA
    LvmGetstringwidth* = LVM_GETSTRINGWIDTHA
    LvmInsertcolumn* = LVM_INSERTCOLUMNA
    LvmInsertitem* = LVM_INSERTITEMA
    LvmSetcolumn* = LVM_SETCOLUMNA
    LvmSetitem* = LVM_SETITEMA
    LvmSetitemtext* = LVM_SETITEMTEXTA
# UNICODE

const
  LvmGetitemcount* = 4100
  LvmGetitemposition* = 4112
  LvmGetitemrect* = 4110
  LvmGetitemspacing* = 4147
  LvmGetitemstate* = 4140
  LvmGetnextitem* = 4108
  LvmGetorigin* = 4137
  LvmGetselectedcount* = 4146
  LvmGettextbkcolor* = 4133
  LvmGettextcolor* = 4131
  LvmGettopindex* = 4135
  LvmGetviewrect* = 4130
  LvmHittest* = 4114
  LvmRedrawitems* = 4117
  LvmScroll* = 4116
  LvmSetbkcolor* = 4097
  LvmSetcallbackmask* = 4107
  LvmSetcolumnwidth* = 4126
  LvmSetimagelist* = 4099
  LvmSetitemcount* = 4143
  LvmSetitemposition* = 4111
  LvmSetitemposition32* = 4145
  LvmSetitemstate* = 4139
  LvmSettextbkcolor* = 4134
  LvmSettextcolor* = 4132
  LvmSortitems* = 4144
  LvmUpdate* = 4138
  # List view control notifications
  LvnBegindrag* = -109
  LvnBeginrdrag* = -111
  LvnColumnclick* = -108
  LvnDeleteallitems* = -104
  LvnDeleteitem* = -103
  LvnBeginlabeleditw* = -175
  LvnEndlabeleditw* = -176
  LvnGetdispinfow* = -177
  LvnSetdispinfow* = -178
  LvnBeginlabeledita* = -105
  LvnEndlabeledita* = -106
  LvnGetdispinfoa* = -150
  LvnSetdispinfoa* = -151

when defined(winUnicode):
  const
    LVN_BEGINLABELEDIT* = LVN_BEGINLABELEDITW
    LVN_ENDLABELEDIT* = LVN_ENDLABELEDITW
    LVN_GETDISPINFO* = LVN_GETDISPINFOW
    LVN_SETDISPINFO* = LVN_SETDISPINFOW
else:
  const
    LvnBeginlabeledit* = LVN_BEGINLABELEDITA
    LvnEndlabeledit* = LVN_ENDLABELEDITA
    LvnGetdispinfo* = LVN_GETDISPINFOA
    LvnSetdispinfo* = LVN_SETDISPINFOA
# UNICODE

const
  LvnInsertitem* = -102
  LvnItemchanged* = -101
  LvnItemchanging* = -100
  LvnKeydown* = -155
  # Control notification
  NmClick* = -2
  NmDblclk* = -3
  NmKillfocus* = -8
  NmOutofmemory* = -1
  NmRclick* = -5
  NmRdblclk* = -6
  NmReturn* = -4
  NmSetfocus* = -7
  # Power status
  # Progress bar control
  PbmDeltapos* = 1027
  PbmSetpos* = 1026
  PbmSetrange* = 1025
  PbmSetrange32* = 1030
  PbmSetstep* = 1028
  PbmStepit* = 1029
  # Property sheets
  PsmAddpage* = 1127
  PsmApply* = 1134
  PsmCanceltoclose* = 1131
  PsmChanged* = 1128
  PsmGettabcontrol* = 1140
  PsmGetcurrentpagehwnd* = 1142
  PsmIsdialogmessage* = 1141
  PsmPressbutton* = 1137
  PsmQuerysiblings* = 1132
  PsmRebootsystem* = 1130
  PsmRemovepage* = 1126
  PsmRestartwindows* = 1129
  PsmSetcursel* = 1125
  PsmSetcurselid* = 1138
  PsmSetfinishtextw* = 1145
  PsmSettitlew* = 1144
  PsmSetfinishtexta* = 1139
  PsmSettitlea* = 1135

when defined(winUnicode):
  const
    PSM_SETFINISHTEXT* = PSM_SETFINISHTEXTW
    PSM_SETTITLE* = PSM_SETTITLEW
else:
  const
    PsmSetfinishtext* = PSM_SETFINISHTEXTA
    PsmSettitle* = PSM_SETTITLEA
# UNICODE

const
  PsmSetwizbuttons* = 1136
  PsmUnchanged* = 1133
  # Property sheet notifications
  PsnApply* = -202
  PsnHelp* = -205
  PsnKillactive* = -201
  PsnQuerycancel* = -209
  PsnReset* = -203
  PsnSetactive* = -200
  PsnWizback* = -206
  PsnWizfinish* = -208
  PsnWiznext* = -207
  # Status window
  SbGetborders* = 1031
  SbGetparts* = 1030
  SbGetrect* = 1034
  SbGettextw* = 1037
  SbGettextlengthw* = 1036
  SbSettextw* = 1035
  SbGettexta* = 1026
  SbGettextlengtha* = 1027
  SbSettexta* = 1025

when defined(winUnicode):
  const
    SB_GETTEXT* = SB_GETTEXTW
    SB_GETTEXTLENGTH* = SB_GETTEXTLENGTHW
    SB_SETTEXT* = SB_SETTEXTW
else:
  const
    SbGettext* = SB_GETTEXTA
    SbGettextlength* = SB_GETTEXTLENGTHA
    SbSettext* = SB_SETTEXTA
# UNICODE

const
  SbSetminheight* = 1032
  SbSetparts* = 1028
  SbSimple* = 1033
  # Scroll bar control
  SbmEnableArrows* = 228
  SbmGetpos* = 225
  SbmGetrange* = 227
  SbmGetscrollinfo* = 234
  SbmSetpos* = 224
  SbmSetrange* = 226
  SbmSetrangeredraw* = 230
  SbmSetscrollinfo* = 233
  # Static control
  StmGeticon* = 369
  StmGetimage* = 371
  StmSeticon* = 368
  StmSetimage* = 370
  # Static control notifications
  StnClicked* = 0
  StnDblclk* = 1
  StnDisable* = 3
  StnEnable* = 2
  # Toolbar control
  TbAddbitmap* = 1043
  TbAddbuttons* = 1044
  TbAutosize* = 1057
  TbButtoncount* = 1048
  TbButtonstructsize* = 1054
  TbChangebitmap* = 1067
  TbCheckbutton* = 1026
  TbCommandtoindex* = 1049
  TbCustomize* = 1051
  TbDeletebutton* = 1046
  TbEnablebutton* = 1025
  TbGetbitmap* = 1068
  TbGetbitmapflags* = 1065
  TbGetbutton* = 1047
  TbAddstringw* = 1101
  TbGetbuttontextw* = 1099
  TbSaverestorew* = 1100
  TbAddstringa* = 1052
  TbGetbuttontexta* = 1069
  TbSaverestorea* = 1050

when defined(winUnicode):
  const
    TB_ADDSTRING* = TB_ADDSTRINGW
    TB_GETBUTTONTEXT* = TB_GETBUTTONTEXTW
    TB_SAVERESTORE* = TB_SAVERESTOREW
else:
  const
    TbAddstring* = TB_ADDSTRINGA
    TbGetbuttontext* = TB_GETBUTTONTEXTA
    TbSaverestore* = TB_SAVERESTOREA
# UNICODE

const
  TbGetitemrect* = 1053
  TbGetrows* = 1064
  TbGetstate* = 1042
  TbGettooltips* = 1059
  TbHidebutton* = 1028
  TbIndeterminate* = 1029
  TbInsertbutton* = 1045
  TbIsbuttonchecked* = 1034
  TbIsbuttonenabled* = 1033
  TbIsbuttonhidden* = 1036
  TbIsbuttonindeterminate* = 1037
  TbIsbuttonpressed* = 1035
  TbPressbutton* = 1027
  TbSetbitmapsize* = 1056
  TbSetbuttonsize* = 1055
  TbSetcmdid* = 1066
  TbSetparent* = 1061
  TbSetrows* = 1063
  TbSetstate* = 1041
  TbSettooltips* = 1060
  # Track bar control
  TbmClearsel* = 1043
  TbmCleartics* = 1033
  TbmGetchannelrect* = 1050
  TbmGetlinesize* = 1048
  TbmGetnumtics* = 1040
  TbmGetpagesize* = 1046
  TbmGetpos* = 1024
  TbmGetptics* = 1038
  TbmGetrangemax* = 1026
  TbmGetrangemin* = 1025
  TbmGetselend* = 1042
  TbmGetselstart* = 1041
  TbmGetthumblength* = 1052
  TbmGetthumbrect* = 1049
  TbmGettic* = 1027
  TbmGetticpos* = 1039
  TbmSetlinesize* = 1047
  TbmSetpagesize* = 1045
  TbmSetpos* = 1029
  TbmSetrange* = 1030
  TbmSetrangemax* = 1032
  TbmSetrangemin* = 1031
  TbmSetsel* = 1034
  TbmSetselend* = 1036
  TbmSetselstart* = 1035
  TbmSetthumblength* = 1051
  TbmSettic* = 1028
  TbmSetticfreq* = 1044
  # Tool bar control notifications
  TbnBeginadjust* = -703
  TbnBegindrag* = -701
  TbnCusthelp* = -709
  TbnEndadjust* = -704
  TbnEnddrag* = -702
  TbnGetbuttoninfow* = -720
  TbnGetbuttoninfoa* = -700

when defined(winUnicode):
  const
    TBN_GETBUTTONINFO* = TBN_GETBUTTONINFOW
else:
  const
    TbnGetbuttoninfo* = TBN_GETBUTTONINFOA
# UNICODE

const
  TbnQuerydelete* = -707
  TbnQueryinsert* = -706
  TbnReset* = -705
  TbnToolbarchange* = -708
  # Tab control
  TcmAdjustrect* = 4904
  TcmDeleteallitems* = 4873
  TcmDeleteitem* = 4872
  TcmGetcurfocus* = 4911
  TcmGetcursel* = 4875
  TcmGetimagelist* = 4866
  TcmGetitemw* = 4924
  TcmInsertitemw* = 4926
  TcmSetitemw* = 4925
  TcmGetitema* = 4869
  TcmInsertitema* = 4871
  TcmSetitema* = 4870

when defined(winUnicode):
  const
    TCM_GETITEM* = TCM_GETITEM
    TCM_INSERTITEM* = TCM_INSERTITEMW
    TCM_SETITEM* = TCM_SETITEMW
else:
  const
    TcmGetitem* = TCM_GETITEMA
    TcmInsertitem* = TCM_INSERTITEMA
    TcmSetitem* = TCM_SETITEMA
# UNICODE

const
  TcmGetitemcount* = 4868
  TcmGetitemrect* = 4874
  TcmGetrowcount* = 4908
  TcmGettooltips* = 4909
  TcmHittest* = 4877
  TcmRemoveimage* = 4906
  TcmSetcurfocus* = 4912
  TcmSetcursel* = 4876
  TcmSetimagelist* = 4867
  TcmSetitemextra* = 4878
  TcmSetitemsize* = 4905
  TcmSetpadding* = 4907
  TcmSettooltips* = 4910
  # Tab control notifications
  TcnKeydown* = -550
  TcnSelchange* = -551
  TcnSelchanging* = -552
  # Tool tip control
  TtmActivate* = 1025
  TtmAddtoolw* = 1074
  TtmDeltoolw* = 1075
  TtmEnumtoolsw* = 1082
  TtmGetcurrenttoolw* = 1083
  TtmGettextw* = 1080
  TtmGettoolinfow* = 1077
  TtmHittestw* = 1079
  TtmNewtoolrectw* = 1076
  TtmSettoolinfow* = 1078
  TtmUpdatetiptextw* = 1081
  TtmAddtoola* = 1028
  TtmDeltoola* = 1029
  TtmEnumtoolsa* = 1038
  TtmGetcurrenttoola* = 1039
  TtmGettexta* = 1035
  TtmGettoolinfoa* = 1032
  TtmHittesta* = 1034
  TtmNewtoolrecta* = 1030
  TtmSettoolinfoa* = 1033
  TtmUpdatetiptexta* = 1036

when defined(winUnicode):
  const
    TTM_ADDTOOL* = TTM_ADDTOOLW
    TTM_DELTOOL* = TTM_DELTOOLW
    TTM_ENUMTOOLS* = TTM_ENUMTOOLSW
    TTM_GETCURRENTTOOL* = TTM_GETCURRENTTOOLW
    TTM_GETTEXT* = TTM_GETTEXTW
    TTM_GETTOOLINFO* = TTM_GETTOOLINFOW
    TTM_HITTEST* = TTM_HITTESTW
    TTM_NEWTOOLRECT* = TTM_NEWTOOLRECTW
    TTM_SETTOOLINFO* = TTM_SETTOOLINFOW
    TTM_UPDATETIPTEXT* = TTM_UPDATETIPTEXTW
else:
  const
    TtmAddtool* = TTM_ADDTOOLA
    TtmDeltool* = TTM_DELTOOLA
    TtmEnumtools* = TTM_ENUMTOOLSA
    TtmGetcurrenttool* = TTM_GETCURRENTTOOLA
    TtmGettext* = TTM_GETTEXTA
    TtmGettoolinfo* = TTM_GETTOOLINFOA
    TtmHittest* = TTM_HITTESTA
    TtmNewtoolrect* = TTM_NEWTOOLRECTA
    TtmSettoolinfo* = TTM_SETTOOLINFOA
    TtmUpdatetiptext* = TTM_UPDATETIPTEXTA
# UNICODE

const
  TtmGettoolcount* = 1037
  TtmRelayevent* = 1031
  TtmSetdelaytime* = 1027
  TtmWindowfrompoint* = 1040
  # Tool tip control notification
  TtnNeedtextw* = -530
  TtnNeedtexta* = -520

when defined(winUnicode):
  const
    TTN_NEEDTEXT* = TTN_NEEDTEXTW
else:
  const
    TtnNeedtext* = TTN_NEEDTEXTA
# UNICODE

const
  TtnPop* = -522
  TtnShow* = -521
  # Tree view control
  TvmCreatedragimage* = 4370
  TvmDeleteitem* = 4353
  TvmEndeditlabelnow* = 4374
  TvmEnsurevisible* = 4372
  TvmExpand* = 4354
  TvmGetcount* = 4357
  TvmGeteditcontrol* = 4367
  TvmGetimagelist* = 4360
  TvmGetindent* = 4358
  TvmGetitemrect* = 4356
  TvmGetnextitem* = 4362
  TvmGetvisiblecount* = 4368
  TvmHittest* = 4369
  TvmEditlabelw* = 4417
  TvmGetisearchstringw* = 4416
  TvmGetitemw* = 4414
  TvmInsertitemw* = 4402
  TvmSetitemw* = 4415
  TvmEditlabela* = 4366
  TvmGetisearchstringa* = 4375
  TvmGetitema* = 4364
  TvmInsertitema* = 4352
  TvmSetitema* = 4365

when defined(winUnicode):
  const
    TVM_EDITLABEL* = TVM_EDITLABELW
    TVM_GETISEARCHSTRING* = TVM_GETISEARCHSTRINGW
    TVM_GETITEM* = TVM_GETITEMW
    TVM_INSERTITEM* = TVM_INSERTITEMW
    TVM_SETITEM* = TVM_SETITEMW
else:
  const
    TvmEditlabel* = TVM_EDITLABELA
    TvmGetisearchstring* = TVM_GETISEARCHSTRINGA
    TvmGetitem* = TVM_GETITEMA
    TvmInsertitem* = TVM_INSERTITEMA
    TvmSetitem* = TVM_SETITEMA
# UNICODE

const
  TvmSelectitem* = 4363
  TvmSetimagelist* = 4361
  TvmSetindent* = 4359
  TvmSortchildren* = 4371
  TvmSortchildrencb* = 4373
  # Tree view control notification
  TvnKeydown* = -412
  TvnBegindragw* = -456
  TvnBeginlabeleditw* = -459
  TvnBeginrdragw* = -457
  TvnDeleteitemw* = -458
  TvnEndlabeleditw* = -460
  TvnGetdispinfow* = -452
  TvnItemexpandedw* = -455
  TvnItemexpandingw* = -454
  TvnSelchangedw* = -451
  TvnSelchangingw* = -450
  TvnSetdispinfow* = -453
  TvnBegindraga* = -407
  TvnBeginlabeledita* = -410
  TvnBeginrdraga* = -408
  TvnDeleteitema* = -409
  TvnEndlabeledita* = -411
  TvnGetdispinfoa* = -403
  TvnItemexpandeda* = -406
  TvnItemexpandinga* = -405
  TvnSelchangeda* = -402
  TvnSelchanginga* = -401
  TvnSetdispinfoa* = -404

when defined(winUnicode):
  const
    TVN_BEGINDRAG* = TVN_BEGINDRAGW
    TVN_BEGINLABELEDIT* = TVN_BEGINLABELEDITW
    TVN_BEGINRDRAG* = TVN_BEGINRDRAGW
    TVN_DELETEITEM* = TVN_DELETEITEMW
    TVN_ENDLABELEDIT* = TVN_ENDLABELEDITW
    TVN_GETDISPINFO* = TVN_GETDISPINFOW
    TVN_ITEMEXPANDED* = TVN_ITEMEXPANDEDW
    TVN_ITEMEXPANDING* = TVN_ITEMEXPANDINGW
    TVN_SELCHANGED* = TVN_SELCHANGEDW
    TVN_SELCHANGING* = TVN_SELCHANGINGW
    TVN_SETDISPINFO* = TVN_SETDISPINFOW
else:
  const
    TvnBegindrag* = TVN_BEGINDRAGA
    TvnBeginlabeledit* = TVN_BEGINLABELEDITA
    TvnBeginrdrag* = TVN_BEGINRDRAGA
    TvnDeleteitem* = TVN_DELETEITEMA
    TvnEndlabeledit* = TVN_ENDLABELEDITA
    TvnGetdispinfo* = TVN_GETDISPINFOA
    TvnItemexpanded* = TVN_ITEMEXPANDEDA
    TvnItemexpanding* = TVN_ITEMEXPANDINGA
    TvnSelchanged* = TVN_SELCHANGEDA
    TvnSelchanging* = TVN_SELCHANGINGA
    TvnSetdispinfo* = TVN_SETDISPINFOA
# UNICODE

const
  # Up/down control
  UdmGetaccel* = 1132
  UdmGetbase* = 1134
  UdmGetbuddy* = 1130
  UdmGetpos* = 1128
  UdmGetpos32* = 1138
  UdmGetrange* = 1126
  UdmGetrange32* = 1136
  UdmSetaccel* = 1131
  UdmSetbase* = 1133
  UdmSetbuddy* = 1129
  UdmSetpos* = 1127
  UdmSetpos32* = 1137
  UdmSetrange* = 1125
  UdmSetrange32* = 1135
  # Up/down control notification
  UdnDeltapos* = -722
  # Window messages
  WmActivate* = 6
  WmActivateapp* = 28
  WmAskcbformatname* = 780
  WmCanceljournal* = 75
  WmCancelmode* = 31
  WmCapturechanged* = 533
  WmChangecbchain* = 781
  WmChar* = 258
  WmChartoitem* = 47
  WmChildactivate* = 34
  WmChoosefontGetlogfont* = 1025
  WmChoosefontSetlogfont* = 1125
  WmChoosefontSetflags* = 1126
  WmClear* = 771
  WmClose* = 16
  WmCommand* = 273
  WmCompacting* = 65
  WmCompareitem* = 57
  WmContextmenu* = 123
  WmCopy* = 769
  WmCopydata* = 74
  WmCreate* = 1
  WmCtlcolorbtn* = 309
  WmCtlcolordlg* = 310
  WmCtlcoloredit* = 307
  WmCtlcolorlistbox* = 308
  WmCtlcolormsgbox* = 306
  WmCtlcolorscrollbar* = 311
  WmCtlcolorstatic* = 312
  WmCut* = 768
  WmDeadchar* = 259
  WmDeleteitem* = 45
  WmDestroy* = 2
  WmDestroyclipboard* = 775
  WmDevicechange* = 537
  WmDevmodechange* = 27
  WmDisplaychange* = 126
  WmDrawclipboard* = 776
  WmDrawitem* = 43
  WmDropfiles* = 563
  WmEnable* = 10
  WmEndsession* = 22
  WmEnteridle* = 289
  WmEntermenuloop* = 529
  WmEntersizemove* = 561
  WmErasebkgnd* = 20
  WmExitmenuloop* = 530
  WmExitsizemove* = 562
  WmFontchange* = 29
  WmGetdlgcode* = 135
  WmGetfont* = 49
  WmGethotkey* = 51
  WmGeticon* = 127
  WmGetminmaxinfo* = 36
  WmGettext* = 13
  WmGettextlength* = 14
  WmHelp* = 83
  WmHotkey* = 786
  WmHscroll* = 276
  WmHscrollclipboard* = 782
  WmIconerasebkgnd* = 39
  WmImeChar* = 646
  WmImeComposition* = 271
  WmImeCompositionfull* = 644
  WmImeControl* = 643
  WmImeEndcomposition* = 270
  WmImeKeydown* = 656
  WmImeKeyup* = 657
  WmImeNotify* = 642
  WmImeSelect* = 645
  WmImeSetcontext* = 641
  WmImeStartcomposition* = 269
  WmInitdialog* = 272
  WmInitmenu* = 278
  WmInitmenupopup* = 279
  WmInputlangchange* = 81
  WmInputlangchangerequest* = 80
  WmKeydown* = 256
  WmKeyup* = 257
  WmKillfocus* = 8
  WmLbuttondblclk* = 515
  WmLbuttondown* = 513
  WmLbuttonup* = 514
  WmMbuttondblclk* = 521
  WmMbuttondown* = 519
  WmMbuttonup* = 520
  WmMdiactivate* = 546
  WmMdicascade* = 551
  WmMdicreate* = 544
  WmMdidestroy* = 545
  WmMdigetactive* = 553
  WmMdiiconarrange* = 552
  WmMdimaximize* = 549
  WmMdinext* = 548
  WmMdirefreshmenu* = 564
  WmMdirestore* = 547
  WmMdisetmenu* = 560
  WmMditile* = 550
  WmMeasureitem* = 44
  WmMenuchar* = 288
  WmMenuselect* = 287
  WmMouseactivate* = 33
  WmMousemove* = 512
  WmMousewheel* = 522
  WmMousehover* = 673
  WmMouseleave* = 675
  WmMove* = 3
  WmMoving* = 534
  WmNcactivate* = 134
  WmNccalcsize* = 131
  WmNccreate* = 129
  WmNcdestroy* = 130
  WmNchittest* = 132
  WmNclbuttondblclk* = 163
  WmNclbuttondown* = 161
  WmNclbuttonup* = 162
  WmNcmbuttondblclk* = 169
  WmNcmbuttondown* = 167
  WmNcmbuttonup* = 168
  WmNcmousemove* = 160
  WmNcpaint* = 133
  WmNcrbuttondblclk* = 166
  WmNcrbuttondown* = 164
  WmNcrbuttonup* = 165
  WmNextdlgctl* = 40
  WmNotify* = 78
  WmNotifyformat* = 85
  WmNull* = 0
  WmPaint* = 15
  WmPaintclipboard* = 777
  WmPainticon* = 38
  WmPalettechanged* = 785
  WmPaletteischanging* = 784
  WmParentnotify* = 528
  WmPaste* = 770
  WmPenwinfirst* = 896
  WmPenwinlast* = 911
  WmPower* = 72
  WmPowerbroadcast* = 536
  WmPrint* = 791
  WmPrintclient* = 792
  WmPsdEnvstamprect* = 1029
  WmPsdFullpagerect* = 1025
  WmPsdGreektextrect* = 1028
  WmPsdMarginrect* = 1027
  WmPsdMinmarginrect* = 1026
  WmPsdPagesetupdlg* = 1024
  WmPsdYafullpagerect* = 1030
  WmQuerydragicon* = 55
  WmQueryendsession* = 17
  WmQuerynewpalette* = 783
  WmQueryopen* = 19
  WmQueuesync* = 35
  WmQuit* = 18
  WmRbuttondblclk* = 518
  WmRbuttondown* = 516
  WmRbuttonup* = 517
  WmRenderallformats* = 774
  WmRenderformat* = 773
  WmSetcursor* = 32
  WmSetfocus* = 7
  WmSetfont* = 48
  WmSethotkey* = 50
  WmSeticon* = 128
  WmSetredraw* = 11
  WmSettext* = 12
  WmSettingchange* = 26
  WmShowwindow* = 24
  WmSize* = 5
  WmSizeclipboard* = 779
  WmSizing* = 532
  WmSpoolerstatus* = 42
  WmStylechanged* = 125
  WmStylechanging* = 124
  WmSyschar* = 262
  WmSyscolorchange* = 21
  WmSyscommand* = 274
  WmSysdeadchar* = 263
  WmSyskeydown* = 260
  WmSyskeyup* = 261
  WmTcard* = 82
  WmTimechange* = 30
  WmTimer* = 275
  WmUndo* = 772
  WmUser* = 1024
  WmUserchanged* = 84
  WmVkeytoitem* = 46
  WmVscroll* = 277
  WmVscrollclipboard* = 778
  WmWindowposchanged* = 71
  WmWindowposchanging* = 70
  WmWininichange* = 26
  # Window message ranges
  WmKeyfirst* = 256
  WmKeylast* = 264
  WmMousefirst* = 512
  WmMouselast* = 525
  WmXbuttondown* = 523
  WmXbuttonup* = 524
  WmXbuttondblclk* = 525

when defined(cpu64):
  type
    Halflresult* = Dword
    Halfparam* = Dword
    Halfparambool* = Winbool
else:
  type
    HALFLRESULT* = int16
    HALFPARAM* = int16
    HALFPARAMBOOL* = WORDBOOL
type
  Msg* {.final, pure.} = object
    hwnd*: Hwnd
    message*: Uint
    wParam*: Wparam
    lParam*: Lparam
    time*: Dword
    pt*: Point

  Lpmsg* = ptr Msg
  TMSG* = Msg
  Pmsg* = ptr Msg
  PMessage* = ptr TMessage
  TMessage* {.final, pure.} = object          #fields according to ICS
    msg*: Uint
    wParam*: Wparam
    lParam*: Lparam
    Result*: Lresult

  TWMSize* {.final, pure.} = object
    Msg*: Uint
    SizeType*: Wparam
    Width*: Halfparam
    Height*: Halfparam
    Result*: Lresult

  TWMNoParams* {.final, pure.} = object
    Msg*: Uint
    Unused*: Array[0..3, Halfparam]
    Result*: Lresult

  TWMCancelMode* = TWMNoParams
  TWMNCDestroy* = TWMNoParams
  TWMDestroy* = TWMNoParams
  TWMClose* = TWMNoParams
  TWMQueryUIState* = TWMNoParams
  TWMUIState* {.final, pure.} = object
    Msg*: Uint
    Action*: Int16
    Flags*: Int16
    Unused*: Hresult

  TWMChangeUIState* = TWMUIState
  TWMUpdateUIState* = TWMUIState
  TWMKey* {.final, pure.} = object
    Msg*: Uint
    CharCode*: Int16
    Unused*: Int16
    KeyData*: Int32
    Result*: Lresult

  TWMKeyDown* = TWMKey
  TWMKeyUp* = TWMKey
  TWMChar* = TWMKey
  TWMSysChar* = TWMKey
  TWMSysKeyDown* = TWMKey
  TWMSysKeyUp* = TWMKey
  TWMMenuChar* {.final, pure.} = object
    Msg*: Uint
    User*: Char
    MenuFlag*: Int16
    Menu*: Hmenu
    Result*: Lresult

  TWMGetDlgCode* = TWMNoParams
  TWMFontChange* = TWMNoParams
  TWMGetFont* = TWMNoParams
  TWMSysColorChange* = TWMNoParams
  TWMQueryDragIcon* = TWMNoParams
  TWMScroll* {.final, pure.} = object
    Msg*: Uint
    ScrollCode*: Halfparam
    Pos*: Halfparam
    ScrollBar*: Hwnd
    Result*: Lresult

  TWMHScroll* = TWMScroll
  TWMVScroll* = TWMScroll
  TWMGetText* {.final, pure.} = object
    Msg*: Uint
    TextMax*: Lparam
    Text*: Cstring
    Result*: Lresult

  TWMGetTextLength* = TWMNoParams
  TWMKillFocus* {.final, pure.} = object
    Msg*: Uint
    FocusedWnd*: Hwnd
    UnUsed*: Wparam
    Result*: Lresult

  TWMSetCursor* {.final, pure.} = object
    Msg*: Uint
    CursorWnd*: Hwnd
    HitTest*: Halfparam
    MouseMsg*: Halfparam
    Result*: Lresult

  TWMSetFocus* {.final, pure.} = object
    Msg*: Uint
    FocusedWnd*: Hwnd
    Unused*: Wparam
    Result*: Lresult

  TWMSetFont* {.final, pure.} = object
    Msg*: Uint
    Font*: Hfont
    Redraw*: Halfparambool
    Unused*: Halfparam
    Result*: Lresult

  TWMShowWindow* {.final, pure.} = object
    Msg*: Uint
    Show*: Halfparambool
    Unused*: Halfparam
    Status*: Wparam
    Result*: Lresult

  TWMEraseBkgnd* {.final, pure.} = object
    Msg*: Uint
    DC*: Hdc
    Unused*: Lparam
    Result*: Lresult

  TWMNCHitTest* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int32
    Pos*: TSmallPoint
    Result*: Lresult

  TWMMouse* {.final, pure.} = object
    Msg*: Uint
    Keys*: Int32
    Pos*: TSmallPoint
    Result*: Lresult

  TWMLButtonDblClk* = TWMMouse
  TWMLButtonDown* = TWMMouse
  TWMLButtonUp* = TWMMouse
  TWMMButtonDblClk* = TWMMouse
  TWMMButtonDown* = TWMMouse
  TWMMButtonUp* = TWMMouse
  TWMMouseWheel* {.final, pure.} = object
    Msg*: Uint
    Keys*: Int16
    WheelDelta*: Int16
    Pos*: TSmallPoint
    Result*: Lresult

  TWMNCHitMessage* {.final, pure.} = object
    Msg*: Uint
    HitTest*: Int32
    XCursor*: Int16
    YCursor*: Int16
    Result*: Lresult

  TWMNCLButtonDblClk* = TWMNCHitMessage
  TWMNCLButtonDown* = TWMNCHitMessage
  TWMNCLButtonUp* = TWMNCHitMessage
  TWMNCMButtonDblClk* = TWMNCHitMessage
  TWMNCMButtonDown* = TWMNCHitMessage
  TWMNCMButtonUp* = TWMNCHitMessage
  TWMNCMouseMove* = TWMNCHitMessage
  TWMRButtonDblClk* = TWMMouse
  TWMRButtonDown* = TWMMouse
  TWMRButtonUp* = TWMMouse
  TWMMouseMove* = TWMMouse
  TWMPaint* {.final, pure.} = object
    Msg*: Uint
    DC*: Hdc
    Unused*: Int32
    Result*: Lresult

  TWMCommand* {.final, pure.} = object
    Msg*: Uint
    ItemID*: Int16
    NotifyCode*: Int16
    Ctl*: Hwnd
    Result*: Lresult

  TWMNotify* {.final, pure.} = object
    Msg*: Uint
    IDCtrl*: Int32
    NMHdr*: Pnmhdr
    Result*: Lresult

  TWMPrint* {.final, pure.} = object
    Msg*: Uint
    DC*: Hdc
    Flags*: Int
    Result*: Lresult

  TWMPrintClient* = TWMPrint
  TWMWinIniChange* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int
    Section*: Cstring
    Result*: Lresult

  TWMContextMenu* {.final, pure.} = object
    Msg*: Uint
    hWnd*: Hwnd
    Pos*: TSmallPoint
    Result*: Lresult

  TWMNCCalcSize* {.final, pure.} = object
    Msg*: Uint
    CalcValidRects*: Winbool
    CalcSize_Params*: Pnccalcsizeparams
    Result*: Lresult

  TWMCharToItem* {.final, pure.} = object
    Msg*: Uint
    Key*: Int16
    CaretPos*: Int16
    ListBox*: Hwnd
    Result*: Lresult

  TWMVKeyToItem* = TWMCharToItem
  TMyEventRange = Range[0'i16..16000'i16]
  TWMParentNotify* {.final, pure.} = object
    Msg*: Uint
    case Event*: TMyEventRange
    of TMyEventRange(WM_CREATE), TMyEventRange(WM_DESTROY):
        ChildID*: Int16
        ChildWnd*: Hwnd

    of TMyEventRange(WM_LBUTTONDOWN),
      TMyEventRange(WM_MBUTTONDOWN),
      TMyEventRange(WM_RBUTTONDOWN):
        Value*: Int16
        XPos*: Int16
        YPos*: Int16

    else:
        Value1*: Int16
        Value2*: Int32
        Result*: Lresult

  TWMSysCommand* {.final, pure.} = object
    Msg*: Uint
    CmdType*: Int32
    XPos*: Int16
    YPos*: Int16
    Result*: Lresult
  #  case CmdType*: int32
  #  of SC_HOTKEY:
  #      ActivateWnd*: HWND
  #  of SC_CLOSE, SC_HSCROLL, SC_MAXIMIZE, SC_MINIMIZE, SC_MOUSEMENU, SC_MOVE,
  #     SC_NEXTWINDOW, SC_PREVWINDOW, SC_RESTORE, SC_SCREENSAVE, SC_SIZE,
  #     SC_TASKLIST, SC_VSCROLL:
  #      XPos*: int16
  #      YPos*: int16
  #      Result*: LRESULT
  #  else: # of SC_KEYMENU:
  #      Key*: int16

  TWMMove* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int
    Pos*: TSmallPoint
    Result*: Lresult

  TWMWindowPosMsg* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int
    WindowPos*: Pwindowpos
    Result*: Lresult

  TWMWindowPosChanged* = TWMWindowPosMsg
  TWMWindowPosChanging* = TWMWindowPosMsg
  TWMCompareItem* {.final, pure.} = object
    Msg*: Uint
    Ctl*: Hwnd
    CompareItemStruct*: Pcompareitemstruct
    Result*: Lresult

  TWMDeleteItem* {.final, pure.} = object
    Msg*: Uint
    Ctl*: Hwnd
    DeleteItemStruct*: Pdeleteitemstruct
    Result*: Lresult

  TWMDrawItem* {.final, pure.} = object
    Msg*: Uint
    Ctl*: Hwnd
    DrawItemStruct*: Pdrawitemstruct
    Result*: Lresult

  TWMMeasureItem* {.final, pure.} = object
    Msg*: Uint
    IDCtl*: Hwnd
    MeasureItemStruct*: Pmeasureitemstruct
    Result*: Lresult

  TWMNCCreate* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int
    CreateStruct*: Pcreatestruct
    Result*: Lresult

  TWMInitMenuPopup* {.final, pure.} = object
    Msg*: Uint
    MenuPopup*: Hmenu
    Pos*: Int16
    SystemMenu*: Wordbool
    Result*: Lresult

  TWMMenuSelect* {.final, pure.} = object
    Msg*: Uint
    IDItem*: Int16
    MenuFlag*: Int16
    Menu*: Hmenu
    Result*: Lresult

  TWMActivate* {.final, pure.} = object
    Msg*: Uint
    Active*: Int16
    Minimized*: Wordbool
    ActiveWindow*: Hwnd
    Result*: Lresult

  TWMQueryEndSession* {.final, pure.} = object
    Msg*: Uint
    Source*: Int32
    Unused*: Int32
    Result*: Lresult

  TWMMDIActivate* {.final, pure.} = object
    Msg*: Uint
    DeactiveWnd*: Hwnd
    ActiveWnd*: Hwnd
    Result*: Lresult

  TWMNextDlgCtl* {.final, pure.} = object
    Msg*: Uint
    CtlFocus*: Int32
    Handle*: Wordbool
    Unused*: Int16
    Result*: Lresult

  TWMHelp* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int
    HelpInfo*: Phelpinfo
    Result*: Lresult

  TWMGetMinMaxInfo* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int
    MinMaxInfo*: Pminmaxinfo
    Result*: Lresult

  TWMSettingChange* {.final, pure.} = object
    Msg*: Uint
    Flag*: Int
    Section*: Cstring
    Result*: Lresult

  TWMCreate* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int
    CreateStruct*: Pcreatestruct
    Result*: Lresult

  TWMCtlColor* {.final, pure.} = object
    Msg*: Uint
    ChildDC*: Hdc
    ChildWnd*: Hwnd
    Result*: Lresult

  TWMCtlColorScrollbar* = TWMCtlColor
  TWMCtlColorStatic* = TWMCtlColor
  TWMCtlColorBtn* = TWMCtlColor
  TWMCtlColorListbox* = TWMCtlColor
  TWMCtlColorMsgbox* = TWMCtlColor
  TWMCtlColorDlg* = TWMCtlColor
  TWMCtlColorEdit* = TWMCtlColor
  TWMInitDialog* {.final, pure.} = object
    Msg*: Uint
    Focus*: Hwnd
    InitParam*: Int32
    Result*: Lresult

  TWMNCPaint* {.final, pure.} = object
    Msg*: Uint
    RGN*: Hrgn
    Unused*: Int32
    Result*: Lresult

  TWMSetText* {.final, pure.} = object
    Msg*: Uint
    Unused*: Int32
    Text*: Cstring
    Result*: Lresult

  TWMSizeClipboard* {.final, pure.} = object
    Msg*: Uint
    Viewer*: Hwnd
    RC*: THandle
    Result*: Lresult

  TWMSpoolerStatus* {.final, pure.} = object
    Msg*: Uint
    JobStatus*: Lparam
    JobsLeft*: Wparam
    Unused*: Wparam
    Result*: Lresult

  TWMStyleChange* {.final, pure.} = object
    Msg*: Uint
    StyleType*: Lparam
    StyleStruct*: Pstylestruct
    Result*: Lresult

  TWMStyleChanged* = TWMStyleChange
  TWMStyleChanging* = TWMStyleChange
  TWMSysDeadChar* {.final, pure.} = object
    Msg*: Uint
    CharCode*: Wparam
    Unused*: Wparam
    KeyData*: Lparam
    Result*: Lresult

  TWMSystemError* {.final, pure.} = object
    Msg*: Uint
    ErrSpec*: Wparam
    Unused*: Lparam
    Result*: Lresult

  TWMTimeChange* = TWMNoParams
  TWMTimer* {.final, pure.} = object
    Msg*: Uint
    TimerID*: Lparam
    TimerProc*: TFarProc
    Result*: Lresult

  TWMUndo* = TWMNoParams
  TWMVScrollClipboard* {.final, pure.} = object
    Msg*: Uint
    Viewer*: Hwnd
    ScollCode*: Wparam
    ThumbPos*: Wparam
    Result*: Lresult

  TWMDisplayChange* {.final, pure.} = object
    Msg*: Uint
    BitsPerPixel*: Int
    Width*: Wparam
    Height*: Wparam
    Result*: Lresult

  TWMDropFiles* {.final, pure.} = object
    Msg*: Uint
    Drop*: THANDLE
    Unused*: Lparam
    Result*: Lresult

  TWMEnable* {.final, pure.} = object
    Msg*: Int
    Enabled*: Winbool
    Unused*: Int32
    Result*: Int32

  TWMMouseActivate* {.final, pure.} = object
    Msg*: Int
    TopLevel*: Hwnd
    HitTestCode*: Int16
    MouseMsg*: Int16
    Result*: Int32


proc getBinaryTypeA*(lpApplicationName: Lpcstr, lpBinaryType: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetBinaryTypeA".}

proc GetShortPathNameA*(lpszLongPath: Lpcstr, lpszShortPath: Lpstr,
                        cchBuffer: Dword): Dword{.stdcall,
                        dynlib: "kernel32", importc.}
proc GetEnvironmentStringsA*(): Lpstr{.stdcall, dynlib: "kernel32", importc.}
proc FreeEnvironmentStringsA*(para1: Lpstr): Winbool{.stdcall, dynlib: "kernel32", importc.}
proc FormatMessageA*(dwFlags: Dword, lpSource: Lpcvoid, dwMessageId: Dword,
                     dwLanguageId: Dword, lpBuffer: Lpstr, nSize: Dword,
                     Arguments: VaList): Dword{.stdcall,dynlib: "kernel32", importc.}
proc CreateMailslotA*(lpName: Lpcstr, nMaxMessageSize: Dword,
                      lReadTimeout: Dword,
                      lpSecurityAttributes: LpsecurityAttributes): Handle{.
    stdcall, dynlib: "kernel32", importc.}
proc lstrcmpA*(lpString1: Lpcstr, lpString2: Lpcstr): Int32{.stdcall,
  dynlib: "kernel32", importc.}
proc lstrcmpiA*(lpString1: Lpcstr, lpString2: Lpcstr): Int32{.stdcall, dynlib: "kernel32", importc.}
proc lstrcpynA*(lpString1: Lpstr, lpString2: Lpcstr, iMaxLength: Int32): Lpstr{.
    stdcall, dynlib: "kernel32", importc.}
proc CreateMutexA*(lpMutexAttributes: LpsecurityAttributes,
                   bInitialOwner: Winbool, lpName: Lpcstr): Handle{.stdcall,
                   dynlib: "kernel32", importc.}
proc OpenMutexA*(dwDesiredAccess: Dword, bInheritHandle: Winbool, lpName: Lpcstr): Handle{.
    stdcall, dynlib: "kernel32", importc.}
proc CreateEventA*(lpEventAttributes: LpsecurityAttributes,
                   bManualReset: Winbool, bInitialState: Winbool, lpName: Lpcstr): Handle{.
    stdcall, dynlib: "kernel32", importc.}
proc OpenEventA*(dwDesiredAccess: Dword, bInheritHandle: Winbool, lpName: Lpcstr): Handle{.
    stdcall, dynlib: "kernel32", importc.}
proc CreateSemaphoreA*(lpSemaphoreAttributes: LpsecurityAttributes,
                       lInitialCount: Long, lMaximumCount: Long, lpName: Lpcstr): Handle{.
    stdcall, dynlib: "kernel32", importc.}
proc OpenSemaphoreA*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                     lpName: Lpcstr): Handle{.stdcall,
                     dynlib: "kernel32", importc.}
proc CreateFileMappingA*(hFile: Handle,
                         lpFileMappingAttributes: LpsecurityAttributes,
                         flProtect: Dword, dwMaximumSizeHigh: Dword,
                         dwMaximumSizeLow: Dword, lpName: Lpcstr): Handle{.
    stdcall, dynlib: "kernel32", importc.}
proc OpenFileMappingA*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                       lpName: Lpcstr): Handle{.stdcall,
                       dynlib: "kernel32", importc.}
proc GetLogicalDriveStringsA*(nBufferLength: Dword, lpBuffer: Lpstr): Dword{.
    stdcall, dynlib: "kernel32", importc.}
proc LoadLibraryA*(lpLibFileName: Lpcstr): Hinst{.stdcall,
  dynlib: "kernel32", importc.}
proc LoadLibraryExA*(lpLibFileName: Lpcstr, hFile: Handle, dwFlags: Dword): Hinst{.
    stdcall, dynlib: "kernel32", importc.}
proc GetModuleFileNameA*(hModule: Hinst, lpFilename: Lpstr, nSize: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc.}
proc GetModuleHandleA*(lpModuleName: Lpcstr): Hmodule{.stdcall,
     dynlib: "kernel32", importc.}
proc FatalAppExitA*(uAction: Uint, lpMessageText: Lpcstr){.stdcall,
     dynlib: "kernel32", importc.}
proc GetCommandLineA*(): Lpstr{.stdcall, dynlib: "kernel32", importc.}
proc GetEnvironmentVariableA*(lpName: Lpcstr, lpBuffer: Lpstr, nSize: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc.}
proc SetEnvironmentVariableA*(lpName: Lpcstr, lpValue: Lpcstr): Winbool{.stdcall,
  dynlib: "kernel32", importc.}
proc ExpandEnvironmentStringsA*(lpSrc: Lpcstr, lpDst: Lpstr, nSize: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc.}
proc OutputDebugStringA*(lpOutputString: Lpcstr){.stdcall,
   dynlib: "kernel32", importc.}
proc FindResourceA*(hModule: Hinst, lpName: Lpcstr, lpType: Lpcstr): Hrsrc{.
    stdcall, dynlib: "kernel32", importc.}
proc FindResourceExA*(hModule: Hinst, lpType: Lpcstr, lpName: Lpcstr,
                      wLanguage: Int16): Hrsrc{.stdcall,
                      dynlib: "kernel32", importc.}
proc EnumResourceTypesA*(hModule: Hinst, lpEnumFunc: Enumrestypeproc,
                         lParam: Long): Winbool{.stdcall,
                         dynlib: "kernel32", importc.}
proc EnumResourceNamesA*(hModule: Hinst, lpType: Lpcstr,
                         lpEnumFunc: Enumresnameproc, lParam: Long): Winbool{.
    stdcall, dynlib: "kernel32", importc.}
proc enumResourceLanguagesA*(hModule: Hinst, lpType: Lpcstr, lpName: Lpcstr,
                             lpEnumFunc: Enumreslangproc, lParam: Long): Winbool{.
    stdcall, dynlib: "kernel32", importc: "EnumResourceLanguagesA".}

proc beginUpdateResourceA*(pFileName: Lpcstr, bDeleteExistingResources: Winbool): Handle{.
    stdcall, dynlib: "kernel32", importc: "BeginUpdateResourceA".}

proc updateResourceA*(hUpdate: Handle, lpType: Lpcstr, lpName: Lpcstr,
                      wLanguage: Int16, lpData: Lpvoid, cbData: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "UpdateResourceA".}
proc endUpdateResourceA*(hUpdate: Handle, fDiscard: Winbool): Winbool{.stdcall,
    dynlib: "kernel32", importc: "EndUpdateResourceA".}
proc globalAddAtomA*(lpString: Lpcstr): Atom{.stdcall, dynlib: "kernel32",
    importc: "GlobalAddAtomA".}
proc globalFindAtomA*(lpString: Lpcstr): Atom{.stdcall, dynlib: "kernel32",
    importc: "GlobalFindAtomA".}
proc globalGetAtomNameA*(nAtom: Atom, lpBuffer: Lpstr, nSize: Int32): Uint{.
    stdcall, dynlib: "kernel32", importc: "GlobalGetAtomNameA".}
proc addAtomA*(lpString: Lpcstr): Atom{.stdcall, dynlib: "kernel32",
                                        importc: "AddAtomA".}
proc findAtomA*(lpString: Lpcstr): Atom{.stdcall, dynlib: "kernel32",
    importc: "FindAtomA".}
proc getAtomNameA*(nAtom: Atom, lpBuffer: Lpstr, nSize: Int32): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetAtomNameA".}
proc getProfileIntA*(lpAppName: Lpcstr, lpKeyName: Lpcstr, nDefault: Wint): Uint{.
    stdcall, dynlib: "kernel32", importc: "GetProfileIntA".}
proc getProfileStringA*(lpAppName: Lpcstr, lpKeyName: Lpcstr, lpDefault: Lpcstr,
                        lpReturnedString: Lpstr, nSize: Dword): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetProfileStringA".}
proc writeProfileStringA*(lpAppName: Lpcstr, lpKeyName: Lpcstr, lpString: Lpcstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteProfileStringA".}
proc getProfileSectionA*(lpAppName: Lpcstr, lpReturnedString: Lpstr,
                         nSize: Dword): Dword{.stdcall, dynlib: "kernel32",
    importc: "GetProfileSectionA".}
proc writeProfileSectionA*(lpAppName: Lpcstr, lpString: Lpcstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteProfileSectionA".}
proc getPrivateProfileIntA*(lpAppName: Lpcstr, lpKeyName: Lpcstr,
                            nDefault: Wint, lpFileName: Lpcstr): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetPrivateProfileIntA".}
proc getPrivateProfileStringA*(lpAppName: Lpcstr, lpKeyName: Lpcstr,
                               lpDefault: Lpcstr, lpReturnedString: Lpstr,
                               nSize: Dword, lpFileName: Lpcstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetPrivateProfileStringA".}

proc writePrivateProfileStringA*(lpAppName: Lpcstr, lpKeyName: Lpcstr,
                                 lpString: Lpcstr, lpFileName: Lpcstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WritePrivateProfileStringA".}
proc getPrivateProfileSectionA*(lpAppName: Lpcstr, lpReturnedString: Lpstr,
                                nSize: Dword, lpFileName: Lpcstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetPrivateProfileSectionA".}
proc writePrivateProfileSectionA*(lpAppName: Lpcstr, lpString: Lpcstr,
                                  lpFileName: Lpcstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WritePrivateProfileSectionA".}
proc getDriveTypeA*(lpRootPathName: Lpcstr): Uint{.stdcall, dynlib: "kernel32",
    importc: "GetDriveTypeA".}
proc getSystemDirectoryA*(lpBuffer: Lpstr, uSize: Uint): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetSystemDirectoryA".}
proc getTempPathA*(nBufferLength: Dword, lpBuffer: Lpstr): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetTempPathA".}
proc getTempFileNameA*(lpPathName: Lpcstr, lpPrefixString: Lpcstr,
                       uUnique: Uint, lpTempFileName: Lpstr): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetTempFileNameA".}
proc getWindowsDirectoryA*(lpBuffer: Lpstr, uSize: Uint): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetWindowsDirectoryA".}
proc setCurrentDirectoryA*(lpPathName: Lpcstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetCurrentDirectoryA".}
proc getCurrentDirectoryA*(nBufferLength: Dword, lpBuffer: Lpstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetCurrentDirectoryA".}
proc getDiskFreeSpaceA*(lpRootPathName: Lpcstr, lpSectorsPerCluster: Lpdword,
                        lpBytesPerSector: Lpdword,
                        lpNumberOfFreeClusters: Lpdword,
                        lpTotalNumberOfClusters: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetDiskFreeSpaceA".}
proc createDirectoryA*(lpPathName: Lpcstr,

                       lpSecurityAttributes: LpsecurityAttributes): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateDirectoryA".}
proc createDirectoryExA*(lpTemplateDirectory: Lpcstr, lpNewDirectory: Lpcstr,
                         lpSecurityAttributes: LpsecurityAttributes): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateDirectoryExA".}
proc removeDirectoryA*(lpPathName: Lpcstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "RemoveDirectoryA".}
proc getFullPathNameA*(lpFileName: Lpcstr, nBufferLength: Dword,
                       lpBuffer: Lpstr, lpFilePart: var Lpstr): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetFullPathNameA".}
proc defineDosDeviceA*(dwFlags: Dword, lpDeviceName: Lpcstr,
                       lpTargetPath: Lpcstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "DefineDosDeviceA".}
proc queryDosDeviceA*(lpDeviceName: Lpcstr, lpTargetPath: Lpstr, ucchMax: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "QueryDosDeviceA".}
proc createFileA*(lpFileName: Lpcstr, dwDesiredAccess: Dword,
                  dwShareMode: Dword,
                  lpSecurityAttributes: LpsecurityAttributes,
                  dwCreationDisposition: Dword, dwFlagsAndAttributes: Dword,
                  hTemplateFile: Handle): Handle{.stdcall, dynlib: "kernel32",
    importc: "CreateFileA".}
proc setFileAttributesA*(lpFileName: Lpcstr, dwFileAttributes: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetFileAttributesA".}
proc getFileAttributesA*(lpFileName: Lpcstr): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetFileAttributesA".}
proc getCompressedFileSizeA*(lpFileName: Lpcstr, lpFileSizeHigh: Lpdword): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetCompressedFileSizeA".}
proc deleteFileA*(lpFileName: Lpcstr): Winbool{.stdcall, dynlib: "kernel32",
    importc: "DeleteFileA".}
proc searchPathA*(lpPath: Lpcstr, lpFileName: Lpcstr, lpExtension: Lpcstr,
                  nBufferLength: Dword, lpBuffer: Lpstr, lpFilePart: Lpstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "SearchPathA".}
proc copyFileA*(lpExistingFileName: Lpcstr, lpNewFileName: Lpcstr,
                bFailIfExists: Winbool): Winbool{.stdcall, dynlib: "kernel32",
    importc: "CopyFileA".}
proc moveFileA*(lpExistingFileName: Lpcstr, lpNewFileName: Lpcstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "MoveFileA".}
proc moveFileExA*(lpExistingFileName: Lpcstr, lpNewFileName: Lpcstr,
                  dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "MoveFileExA".}
proc createNamedPipeA*(lpName: Lpcstr, dwOpenMode: Dword, dwPipeMode: Dword,
                       nMaxInstances: Dword, nOutBufferSize: Dword,
                       nInBufferSize: Dword, nDefaultTimeOut: Dword,
                       lpSecurityAttributes: LpsecurityAttributes): Handle{.
    stdcall, dynlib: "kernel32", importc: "CreateNamedPipeA".}
proc getNamedPipeHandleStateA*(hNamedPipe: Handle, lpState: Lpdword,
                               lpCurInstances: Lpdword,
                               lpMaxCollectionCount: Lpdword,
                               lpCollectDataTimeout: Lpdword, lpUserName: Lpstr,
                               nMaxUserNameSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetNamedPipeHandleStateA".}
proc callNamedPipeA*(lpNamedPipeName: Lpcstr, lpInBuffer: Lpvoid,
                     nInBufferSize: Dword, lpOutBuffer: Lpvoid,
                     nOutBufferSize: Dword, lpBytesRead: Lpdword,
                     nTimeOut: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "CallNamedPipeA".}
proc waitNamedPipeA*(lpNamedPipeName: Lpcstr, nTimeOut: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WaitNamedPipeA".}
proc setVolumeLabelA*(lpRootPathName: Lpcstr, lpVolumeName: Lpcstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetVolumeLabelA".}
proc getVolumeInformationA*(lpRootPathName: Lpcstr, lpVolumeNameBuffer: Lpstr,
                            nVolumeNameSize: Dword,
                            lpVolumeSerialNumber: Lpdword,
                            lpMaximumComponentLength: Lpdword,
                            lpFileSystemFlags: Lpdword,
                            lpFileSystemNameBuffer: Lpstr,
                            nFileSystemNameSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVolumeInformationA".}
proc clearEventLogA*(hEventLog: Handle, lpBackupFileName: Lpcstr): Winbool{.
    stdcall, dynlib: "advapi32", importc: "ClearEventLogA".}
proc backupEventLogA*(hEventLog: Handle, lpBackupFileName: Lpcstr): Winbool{.
    stdcall, dynlib: "advapi32", importc: "BackupEventLogA".}
proc openEventLogA*(lpUNCServerName: Lpcstr, lpSourceName: Lpcstr): Handle{.
    stdcall, dynlib: "advapi32", importc: "OpenEventLogA".}
proc registerEventSourceA*(lpUNCServerName: Lpcstr, lpSourceName: Lpcstr): Handle{.
    stdcall, dynlib: "advapi32", importc: "RegisterEventSourceA".}
proc openBackupEventLogA*(lpUNCServerName: Lpcstr, lpFileName: Lpcstr): Handle{.
    stdcall, dynlib: "advapi32", importc: "OpenBackupEventLogA".}
proc readEventLogA*(hEventLog: Handle, dwReadFlags: Dword,
                    dwRecordOffset: Dword, lpBuffer: Lpvoid,
                    nNumberOfBytesToRead: Dword, pnBytesRead: Lpdword,
                    pnMinNumberOfBytesNeeded: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ReadEventLogA".}
proc reportEventA*(hEventLog: Handle, wType: Int16, wCategory: Int16,
                   dwEventID: Dword, lpUserSid: Psid, wNumStrings: Int16,
                   dwDataSize: Dword, lpStrings: Lppcstr, lpRawData: Lpvoid): Winbool{.
    stdcall, dynlib: "advapi32", importc: "ReportEventA".}
proc accessCheckAndAuditAlarmA*(SubsystemName: Lpcstr, HandleId: Lpvoid,
                                ObjectTypeName: Lpstr, ObjectName: Lpstr,
                                SecurityDescriptor: PsecurityDescriptor,
                                DesiredAccess: Dword,
                                GenericMapping: PgenericMapping,
                                ObjectCreation: Winbool, GrantedAccess: Lpdword,
                                AccessStatus: Lpbool, pfGenerateOnClose: Lpbool): Winbool{.
    stdcall, dynlib: "advapi32", importc: "AccessCheckAndAuditAlarmA".}
proc objectOpenAuditAlarmA*(SubsystemName: Lpcstr, HandleId: Lpvoid,
                            ObjectTypeName: Lpstr, ObjectName: Lpstr,
                            pSecurityDescriptor: PsecurityDescriptor,
                            ClientToken: Handle, DesiredAccess: Dword,
                            GrantedAccess: Dword, Privileges: PprivilegeSet,
                            ObjectCreation: Winbool, AccessGranted: Winbool,
                            GenerateOnClose: Lpbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectOpenAuditAlarmA".}
proc objectPrivilegeAuditAlarmA*(SubsystemName: Lpcstr, HandleId: Lpvoid,
                                 ClientToken: Handle, DesiredAccess: Dword,
                                 Privileges: PprivilegeSet,
                                 AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmA".}
proc objectCloseAuditAlarmA*(SubsystemName: Lpcstr, HandleId: Lpvoid,
                             GenerateOnClose: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectCloseAuditAlarmA".}
proc privilegedServiceAuditAlarmA*(SubsystemName: Lpcstr, ServiceName: Lpcstr,
                                   ClientToken: Handle,
                                   Privileges: PprivilegeSet,
                                   AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmA".}
proc setFileSecurityA*(lpFileName: Lpcstr,
                       SecurityInformation: SecurityInformation,
                       pSecurityDescriptor: PsecurityDescriptor): Winbool{.
    stdcall, dynlib: "advapi32", importc: "SetFileSecurityA".}
proc getFileSecurityA*(lpFileName: Lpcstr,
                       RequestedInformation: SecurityInformation,
                       pSecurityDescriptor: PsecurityDescriptor,
                       nLength: Dword, lpnLengthNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetFileSecurityA".}
proc findFirstChangeNotificationA*(lpPathName: Lpcstr, bWatchSubtree: Winbool,
                                   dwNotifyFilter: Dword): Handle{.stdcall,
    dynlib: "kernel32", importc: "FindFirstChangeNotificationA".}
proc isBadStringPtrA*(lpsz: Lpcstr, ucchMax: Uint): Winbool{.stdcall,
    dynlib: "kernel32", importc: "IsBadStringPtrA".}
proc lookupAccountSidA*(lpSystemName: Lpcstr, Sid: Psid, Name: Lpstr,
                        cbName: Lpdword, ReferencedDomainName: Lpstr,
                        cbReferencedDomainName: Lpdword, peUse: PsidNameUse): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LookupAccountSidA".}
proc lookupAccountNameA*(lpSystemName: Lpcstr, lpAccountName: Lpcstr, Sid: Psid,
                         cbSid: Lpdword, ReferencedDomainName: Lpstr,
                         cbReferencedDomainName: Lpdword, peUse: PsidNameUse): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LookupAccountNameA".}
proc lookupPrivilegeValueA*(lpSystemName: Lpcstr, lpName: Lpcstr, lpLuid: Pluid): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LookupPrivilegeValueA".}
proc lookupPrivilegeNameA*(lpSystemName: Lpcstr, lpLuid: Pluid, lpName: Lpstr,
                           cbName: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeNameA".}
proc lookupPrivilegeDisplayNameA*(lpSystemName: Lpcstr, lpName: Lpcstr,
                                  lpDisplayName: Lpstr, cbDisplayName: Lpdword,
                                  lpLanguageId: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameA".}
proc buildCommDCBA*(lpDef: Lpcstr, lpDCB: Lpdcb): Winbool{.stdcall,
    dynlib: "kernel32", importc: "BuildCommDCBA".}
proc buildCommDCBAndTimeoutsA*(lpDef: Lpcstr, lpDCB: Lpdcb,
                               lpCommTimeouts: Lpcommtimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsA".}
proc commConfigDialogA*(lpszName: Lpcstr, wnd: Hwnd, lpCC: Lpcommconfig): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CommConfigDialogA".}
proc getDefaultCommConfigA*(lpszName: Lpcstr, lpCC: Lpcommconfig,
                            lpdwSize: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetDefaultCommConfigA".}
proc setDefaultCommConfigA*(lpszName: Lpcstr, lpCC: Lpcommconfig, dwSize: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetDefaultCommConfigA".}
proc getComputerNameA*(lpBuffer: Lpstr, nSize: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetComputerNameA".}
proc setComputerNameA*(lpComputerName: Lpcstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetComputerNameA".}
proc getUserNameA*(lpBuffer: Lpstr, nSize: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetUserNameA".}
proc loadKeyboardLayoutA*(pwszKLID: Lpcstr, Flags: Uint): Hkl{.stdcall,
    dynlib: "user32", importc: "LoadKeyboardLayoutA".}
proc getKeyboardLayoutNameA*(pwszKLID: Lpstr): Winbool{.stdcall,
    dynlib: "user32", importc: "GetKeyboardLayoutNameA".}
proc createDesktopA*(lpszDesktop: Lpstr, lpszDevice: Lpstr, pDevmode: Lpdevmode,
                     dwFlags: Dword, dwDesiredAccess: Dword,
                     lpsa: LpsecurityAttributes): Hdesk{.stdcall,
    dynlib: "user32", importc: "CreateDesktopA".}
proc openDesktopA*(lpszDesktop: Lpstr, dwFlags: Dword, fInherit: Winbool,
                   dwDesiredAccess: Dword): Hdesk{.stdcall, dynlib: "user32",
    importc: "OpenDesktopA".}
proc enumDesktopsA*(hwinsta: Hwinsta, lpEnumFunc: Desktopenumproc,
                    lp: Lparam): Winbool{.stdcall, dynlib: "user32",
    importc: "EnumDesktopsA".}
proc createWindowStationA*(lpwinsta: Lpstr, dwReserved: Dword,
                           dwDesiredAccess: Dword, lpsa: LpsecurityAttributes): Hwinsta{.
    stdcall, dynlib: "user32", importc: "CreateWindowStationA".}
proc openWindowStationA*(lpszWinSta: Lpstr, fInherit: Winbool,
                         dwDesiredAccess: Dword): Hwinsta{.stdcall,
    dynlib: "user32", importc: "OpenWindowStationA".}
proc enumWindowStationsA*(lpEnumFunc: Enumwindowstationproc, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "EnumWindowStationsA".}
proc getUserObjectInformationA*(hObj: Handle, nIndex: Int32, pvInfo: Pvoid,
                                nLength: Dword, lpnLengthNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "user32", importc: "GetUserObjectInformationA".}
proc setUserObjectInformationA*(hObj: Handle, nIndex: Int32, pvInfo: Pvoid,
                                nLength: Dword): Winbool{.stdcall,
    dynlib: "user32", importc: "SetUserObjectInformationA".}
proc registerWindowMessageA*(lpString: Lpcstr): Uint{.stdcall, dynlib: "user32",
    importc: "RegisterWindowMessageA".}
proc getMessageA*(lpMsg: Lpmsg, wnd: Hwnd, wMsgFilterMin: Uint,
                  wMsgFilterMax: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "GetMessageA".}
proc dispatchMessageA*(lpMsg: Lpmsg): Long{.stdcall, dynlib: "user32",
    importc: "DispatchMessageA".}
proc peekMessageA*(lpMsg: Lpmsg, wnd: Hwnd, wMsgFilterMin: Uint,
                   wMsgFilterMax: Uint, wRemoveMsg: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "PeekMessageA".}
proc sendMessageA*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "SendMessageA".}
proc sendMessageTimeoutA*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam,
                          fuFlags: Uint, uTimeout: Uint, lpdwResult: Lpdword): Lresult{.
    stdcall, dynlib: "user32", importc: "SendMessageTimeoutA".}
proc sendNotifyMessageA*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "SendNotifyMessageA".}
proc sendMessageCallbackA*(wnd: Hwnd, Msg: Uint, wp: Wparam,
                           lp: Lparam, lpResultCallBack: Sendasyncproc,
                           dwData: Dword): Winbool{.stdcall, dynlib: "user32",
    importc: "SendMessageCallbackA".}
proc postMessageA*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "PostMessageA".}
proc postThreadMessageA*(idThread: Dword, Msg: Uint, wp: Wparam,
                         lp: Lparam): Winbool{.stdcall, dynlib: "user32",
    importc: "PostThreadMessageA".}
proc defWindowProcA*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "DefWindowProcA".}
proc callWindowProcA*(lpPrevWndFunc: Wndproc, wnd: Hwnd, Msg: Uint,
                      wp: Wparam, lp: Lparam): Lresult{.stdcall,
    dynlib: "user32", importc: "CallWindowProcA".}
proc registerClassA*(lpWndClass: Lpwndclass): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassA".}
proc unregisterClassA*(lpClassName: Lpcstr, hInstance: Hinst): Winbool{.stdcall,
    dynlib: "user32", importc: "UnregisterClassA".}
proc getClassInfoA*(hInstance: Hinst, lpClassName: Lpcstr,
                    lpWndClass: Lpwndclass): Winbool{.stdcall, dynlib: "user32",
    importc: "GetClassInfoA".}
proc registerClassExA*(para1: Lpwndclassex): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassExA".}
proc getClassInfoExA*(para1: Hinst, para2: Lpcstr, para3: Lpwndclassex): Winbool{.
    stdcall, dynlib: "user32", importc: "GetClassInfoExA".}
proc createWindowExA*(dwExStyle: Dword, lpClassName: Lpcstr,
                      lpWindowName: Lpcstr, dwStyle: Dword, X: Int32, Y: Int32,
                      nWidth: Int32, nHeight: Int32, hWndParent: Hwnd,
                      menu: Hmenu, hInstance: Hinst, lpParam: Lpvoid): Hwnd{.
    stdcall, dynlib: "user32", importc: "CreateWindowExA".}
proc createDialogParamA*(hInstance: Hinst, lpTemplateName: Lpcstr,
                         hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                         dwInitParam: Lparam): Hwnd{.stdcall, dynlib: "user32",
    importc: "CreateDialogParamA".}
proc createDialogIndirectParamA*(hInstance: Hinst, lpTemplate: Lpcdlgtemplate,
                                 hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                                 dwInitParam: Lparam): Hwnd{.stdcall,
    dynlib: "user32", importc: "CreateDialogIndirectParamA".}
proc dialogBoxParamA*(hInstance: Hinst, lpTemplateName: Lpcstr,
                      hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                      dwInitParam: Lparam): Int32{.stdcall, dynlib: "user32",
    importc: "DialogBoxParamA".}
proc dialogBoxIndirectParamA*(hInstance: Hinst, hDialogTemplate: Lpcdlgtemplate,
                              hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                              dwInitParam: Lparam): Int32{.stdcall,
    dynlib: "user32", importc: "DialogBoxIndirectParamA".}
proc setDlgItemTextA*(hDlg: Hwnd, nIDDlgItem: Int32, lpString: Lpcstr): Winbool{.
    stdcall, dynlib: "user32", importc: "SetDlgItemTextA".}
proc getDlgItemTextA*(hDlg: Hwnd, nIDDlgItem: Int32, lpString: Lpstr,
                      nMaxCount: Int32): Uint{.stdcall, dynlib: "user32",
    importc: "GetDlgItemTextA".}
proc sendDlgItemMessageA*(hDlg: Hwnd, nIDDlgItem: Int32, Msg: Uint,
                          wp: Wparam, lp: Lparam): Long{.stdcall,
    dynlib: "user32", importc: "SendDlgItemMessageA".}
proc defDlgProcA*(hDlg: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "DefDlgProcA".}
proc callMsgFilterA*(lpMsg: Lpmsg, nCode: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "CallMsgFilterA".}
proc registerClipboardFormatA*(lpszFormat: Lpcstr): Uint{.stdcall,
    dynlib: "user32", importc: "RegisterClipboardFormatA".}
proc getClipboardFormatNameA*(format: Uint, lpszFormatName: Lpstr,
                              cchMaxCount: Int32): Int32{.stdcall,
    dynlib: "user32", importc: "GetClipboardFormatNameA".}
proc charToOemA*(lpszSrc: Lpcstr, lpszDst: Lpstr): Winbool{.stdcall,
    dynlib: "user32", importc: "CharToOemA".}
proc oemToCharA*(lpszSrc: Lpcstr, lpszDst: Lpstr): Winbool{.stdcall,
    dynlib: "user32", importc: "OemToCharA".}
proc charToOemBuffA*(lpszSrc: Lpcstr, lpszDst: Lpstr, cchDstLength: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "CharToOemBuffA".}
proc oemToCharBuffA*(lpszSrc: Lpcstr, lpszDst: Lpstr, cchDstLength: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "OemToCharBuffA".}
proc charUpperA*(lpsz: Lpstr): Lpstr{.stdcall, dynlib: "user32",
                                      importc: "CharUpperA".}
proc charUpperBuffA*(lpsz: Lpstr, cchLength: Dword): Dword{.stdcall,
    dynlib: "user32", importc: "CharUpperBuffA".}
proc charLowerA*(lpsz: Lpstr): Lpstr{.stdcall, dynlib: "user32",
                                      importc: "CharLowerA".}
proc charLowerBuffA*(lpsz: Lpstr, cchLength: Dword): Dword{.stdcall,
    dynlib: "user32", importc: "CharLowerBuffA".}
proc charNextA*(lpsz: Lpcstr): Lpstr{.stdcall, dynlib: "user32",
                                      importc: "CharNextA".}
proc charPrevA*(lpszStart: Lpcstr, lpszCurrent: Lpcstr): Lpstr{.stdcall,
    dynlib: "user32", importc: "CharPrevA".}
proc isCharAlphaA*(ch: Char): Winbool{.stdcall, dynlib: "user32",
                                       importc: "IsCharAlphaA".}
proc isCharAlphaNumericA*(ch: Char): Winbool{.stdcall, dynlib: "user32",
    importc: "IsCharAlphaNumericA".}
proc isCharUpperA*(ch: Char): Winbool{.stdcall, dynlib: "user32",
                                       importc: "IsCharUpperA".}
proc isCharLowerA*(ch: Char): Winbool{.stdcall, dynlib: "user32",
                                       importc: "IsCharLowerA".}
proc getKeyNameTextA*(lParam: Long, lpString: Lpstr, nSize: Int32): Int32{.
    stdcall, dynlib: "user32", importc: "GetKeyNameTextA".}
proc vkKeyScanA*(ch: Char): Short{.stdcall, dynlib: "user32",
                                   importc: "VkKeyScanA".}
proc vkKeyScanExA*(ch: Char, dwhkl: Hkl): Short{.stdcall, dynlib: "user32",
    importc: "VkKeyScanExA".}
proc mapVirtualKeyA*(uCode: Uint, uMapType: Uint): Uint{.stdcall,
    dynlib: "user32", importc: "MapVirtualKeyA".}
proc mapVirtualKeyExA*(uCode: Uint, uMapType: Uint, dwhkl: Hkl): Uint{.stdcall,
    dynlib: "user32", importc: "MapVirtualKeyExA".}
proc loadAcceleratorsA*(hInstance: Hinst, lpTableName: Lpcstr): Haccel{.stdcall,
    dynlib: "user32", importc: "LoadAcceleratorsA".}
proc createAcceleratorTableA*(para1: Lpaccel, para2: Int32): Haccel{.stdcall,
    dynlib: "user32", importc: "CreateAcceleratorTableA".}
proc copyAcceleratorTableA*(hAccelSrc: Haccel, lpAccelDst: Lpaccel,
                            cAccelEntries: Int32): Int32{.stdcall,
    dynlib: "user32", importc: "CopyAcceleratorTableA".}
proc translateAcceleratorA*(wnd: Hwnd, hAccTable: Haccel, lpMsg: Lpmsg): Int32{.
    stdcall, dynlib: "user32", importc: "TranslateAcceleratorA".}
proc loadMenuA*(hInstance: Hinst, lpMenuName: Lpcstr): Hmenu{.stdcall,
    dynlib: "user32", importc: "LoadMenuA".}
proc loadMenuIndirectA*(lpMenuTemplate: Lpmenutemplate): Hmenu{.stdcall,
    dynlib: "user32", importc: "LoadMenuIndirectA".}
proc changeMenuA*(menu: Hmenu, cmd: Uint, lpszNewItem: Lpcstr, cmdInsert: Uint,
                  flags: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "ChangeMenuA".}
proc getMenuStringA*(menu: Hmenu, uIDItem: Uint, lpString: Lpstr,
                     nMaxCount: Int32, uFlag: Uint): Int32{.stdcall,
    dynlib: "user32", importc: "GetMenuStringA".}
proc insertMenuA*(menu: Hmenu, uPosition: Uint, uFlags: Uint, uIDNewItem: Uint,
                  lpNewItem: Lpcstr): Winbool{.stdcall, dynlib: "user32",
    importc: "InsertMenuA".}
proc appendMenuA*(menu: Hmenu, uFlags: Uint, uIDNewItem: Uint,
                  lpNewItem: Lpcstr): Winbool{.stdcall, dynlib: "user32",
    importc: "AppendMenuA".}
proc modifyMenuA*(hMnu: Hmenu, uPosition: Uint, uFlags: Uint, uIDNewItem: Uint,
                  lpNewItem: Lpcstr): Winbool{.stdcall, dynlib: "user32",
    importc: "ModifyMenuA".}
proc insertMenuItemA*(para1: Hmenu, para2: Uint, para3: Winbool,
                      para4: Lpcmenuiteminfo): Winbool{.stdcall,
    dynlib: "user32", importc: "InsertMenuItemA".}
proc getMenuItemInfoA*(para1: Hmenu, para2: Uint, para3: Winbool,
                       para4: Lpmenuiteminfo): Winbool{.stdcall,
    dynlib: "user32", importc: "GetMenuItemInfoA".}
proc setMenuItemInfoA*(para1: Hmenu, para2: Uint, para3: Winbool,
                       para4: Lpcmenuiteminfo): Winbool{.stdcall,
    dynlib: "user32", importc: "SetMenuItemInfoA".}
proc drawTextA*(hDC: Hdc, lpString: Lpcstr, nCount: Int32, lpRect: Lprect,
                uFormat: Uint): Int32{.stdcall, dynlib: "user32",
                                       importc: "DrawTextA".}
proc drawTextExA*(para1: Hdc, para2: Lpstr, para3: Int32, para4: Lprect,
                  para5: Uint, para6: Lpdrawtextparams): Int32{.stdcall,
    dynlib: "user32", importc: "DrawTextExA".}
proc grayStringA*(hDC: Hdc, hBrush: Hbrush, lpOutputFunc: Graystringproc,
                  lpData: Lparam, nCount: Int32, X: Int32, Y: Int32,
                  nWidth: Int32, nHeight: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "GrayStringA".}
proc drawStateA*(para1: Hdc, para2: Hbrush, para3: Drawstateproc, para4: Lparam,
                 para5: Wparam, para6: Int32, para7: Int32, para8: Int32,
                 para9: Int32, para10: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "DrawStateA".}
proc tabbedTextOutA*(hDC: Hdc, X: Int32, Y: Int32, lpString: Lpcstr,
                     nCount: Int32, nTabPositions: Int32,
                     lpnTabStopPositions: Lpint, nTabOrigin: Int32): Long{.
    stdcall, dynlib: "user32", importc: "TabbedTextOutA".}
proc getTabbedTextExtentA*(hDC: Hdc, lpString: Lpcstr, nCount: Int32,
                           nTabPositions: Int32, lpnTabStopPositions: Lpint): Dword{.
    stdcall, dynlib: "user32", importc: "GetTabbedTextExtentA".}
proc setPropA*(wnd: Hwnd, lpString: Lpcstr, hData: Handle): Winbool{.stdcall,
    dynlib: "user32", importc: "SetPropA".}
proc getPropA*(wnd: Hwnd, lpString: Lpcstr): Handle{.stdcall, dynlib: "user32",
    importc: "GetPropA".}
proc removePropA*(wnd: Hwnd, lpString: Lpcstr): Handle{.stdcall,
    dynlib: "user32", importc: "RemovePropA".}
proc enumPropsExA*(wnd: Hwnd, lpEnumFunc: Propenumprocex, lp: Lparam): Int32{.
    stdcall, dynlib: "user32", importc: "EnumPropsExA".}
proc enumPropsA*(wnd: Hwnd, lpEnumFunc: Propenumproc): Int32{.stdcall,
    dynlib: "user32", importc: "EnumPropsA".}
proc setWindowTextA*(wnd: Hwnd, lpString: Lpcstr): Winbool{.stdcall,
    dynlib: "user32", importc: "SetWindowTextA".}
proc getWindowTextA*(wnd: Hwnd, lpString: Lpstr, nMaxCount: Int32): Int32{.
    stdcall, dynlib: "user32", importc: "GetWindowTextA".}
proc getWindowTextLengthA*(wnd: Hwnd): Int32{.stdcall, dynlib: "user32",
    importc: "GetWindowTextLengthA".}
proc messageBoxA*(wnd: Hwnd, lpText: Lpcstr, lpCaption: Lpcstr, uType: Int): Int32{.
    stdcall, dynlib: "user32", importc: "MessageBoxA".}
proc messageBoxExA*(wnd: Hwnd, lpText: Lpcstr, lpCaption: Lpcstr, uType: Uint,
                    wLanguageId: Int16): Int32{.stdcall, dynlib: "user32",
    importc: "MessageBoxExA".}
proc messageBoxIndirectA*(para1: Lpmsgboxparams): Int32{.stdcall,
    dynlib: "user32", importc: "MessageBoxIndirectA".}
proc getWindowLongA*(wnd: Hwnd, nIndex: Int32): Long{.stdcall,
    dynlib: "user32", importc: "GetWindowLongA".}
proc setWindowLongA*(wnd: Hwnd, nIndex: Int32, dwNewLong: Long): Long{.stdcall,
    dynlib: "user32", importc: "SetWindowLongA".}
proc getClassLongA*(wnd: Hwnd, nIndex: Int32): Dword{.stdcall,
    dynlib: "user32", importc: "GetClassLongA".}
proc setClassLongA*(wnd: Hwnd, nIndex: Int32, dwNewLong: Long): Dword{.stdcall,
    dynlib: "user32", importc: "SetClassLongA".}
when defined(cpu64):
  proc getWindowLongPtrA*(wnd: Hwnd, nIndex: Int32): LongPtr{.stdcall,
      dynlib: "user32", importc: "GetWindowLongPtrA".}
  proc setWindowLongPtrA*(wnd: Hwnd, nIndex: Int32, dwNewLong: LongPtr): LongPtr{.
      stdcall, dynlib: "user32", importc: "SetWindowLongPtrA".}
  proc getClassLongPtrA*(wnd: Hwnd, nIndex: Int32): LongPtr{.stdcall,
      dynlib: "user32", importc: "GetClassLongPtrA".}
  proc setClassLongPtrA*(wnd: Hwnd, nIndex: Int32, dwNewLong: LongPtr): LongPtr{.
      stdcall, dynlib: "user32", importc: "SetClassLongPtrA".}
else:
  proc GetWindowLongPtrA*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
      dynlib: "user32", importc: "GetWindowLongA".}
  proc SetWindowLongPtrA*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
      stdcall, dynlib: "user32", importc: "SetWindowLongA".}
  proc GetClassLongPtrA*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
      dynlib: "user32", importc: "GetClassLongA".}
  proc SetClassLongPtrA*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
      stdcall, dynlib: "user32", importc: "SetClassLongA".}
proc findWindowA*(lpClassName: Lpcstr, lpWindowName: Lpcstr): Hwnd{.stdcall,
    dynlib: "user32", importc: "FindWindowA".}
proc findWindowExA*(para1: Hwnd, para2: Hwnd, para3: Lpcstr, para4: Lpcstr): Hwnd{.
    stdcall, dynlib: "user32", importc: "FindWindowExA".}
proc getClassNameA*(wnd: Hwnd, lpClassName: Lpstr, nMaxCount: Int32): Int32{.
    stdcall, dynlib: "user32", importc: "GetClassNameA".}
proc setWindowsHookExA*(idHook: Int32, lpfn: Hookproc, hmod: Hinst,
                        dwThreadId: Dword): Hhook{.stdcall, dynlib: "user32",
    importc: "SetWindowsHookExA".}
proc loadBitmapA*(hInstance: Hinst, lpBitmapName: Lpcstr): Hbitmap{.stdcall,
    dynlib: "user32", importc: "LoadBitmapA".}
proc loadCursorA*(hInstance: Hinst, lpCursorName: Lpcstr): Hcursor{.stdcall,
    dynlib: "user32", importc: "LoadCursorA".}
proc loadCursorFromFileA*(lpFileName: Lpcstr): Hcursor{.stdcall,
    dynlib: "user32", importc: "LoadCursorFromFileA".}
proc loadIconA*(hInstance: Hinst, lpIconName: Lpcstr): Hicon{.stdcall,
    dynlib: "user32", importc: "LoadIconA".}
proc loadImageA*(para1: Hinst, para2: Lpcstr, para3: Uint, para4: Int32,
                 para5: Int32, para6: Uint): Handle{.stdcall, dynlib: "user32",
    importc: "LoadImageA".}
proc loadStringA*(hInstance: Hinst, uID: Uint, lpBuffer: Lpstr,
                  nBufferMax: Int32): Int32{.stdcall, dynlib: "user32",
    importc: "LoadStringA".}
proc isDialogMessageA*(hDlg: Hwnd, lpMsg: Lpmsg): Winbool{.stdcall,
    dynlib: "user32", importc: "IsDialogMessageA".}
proc dlgDirListA*(hDlg: Hwnd, lpPathSpec: Lpstr, nIDListBox: Int32,
                  nIDStaticPath: Int32, uFileType: Uint): Int32{.stdcall,
    dynlib: "user32", importc: "DlgDirListA".}
proc dlgDirSelectExA*(hDlg: Hwnd, lpString: Lpstr, nCount: Int32,
                      nIDListBox: Int32): Winbool{.stdcall, dynlib: "user32",
    importc: "DlgDirSelectExA".}
proc dlgDirListComboBoxA*(hDlg: Hwnd, lpPathSpec: Lpstr, nIDComboBox: Int32,
                          nIDStaticPath: Int32, uFiletype: Uint): Int32{.
    stdcall, dynlib: "user32", importc: "DlgDirListComboBoxA".}
proc dlgDirSelectComboBoxExA*(hDlg: Hwnd, lpString: Lpstr, nCount: Int32,
                              nIDComboBox: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "DlgDirSelectComboBoxExA".}
proc defFrameProcA*(wnd: Hwnd, hWndMDIClient: Hwnd, uMsg: Uint, wp: Wparam,
                    lp: Lparam): Lresult{.stdcall, dynlib: "user32",
    importc: "DefFrameProcA".}
proc defMDIChildProcA*(wnd: Hwnd, uMsg: Uint, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "DefMDIChildProcA".}
proc createMDIWindowA*(lpClassName: Lpstr, lpWindowName: Lpstr, dwStyle: Dword,
                       X: Int32, Y: Int32, nWidth: Int32, nHeight: Int32,
                       hWndParent: Hwnd, hInstance: Hinst, lp: Lparam): Hwnd{.
    stdcall, dynlib: "user32", importc: "CreateMDIWindowA".}
proc winHelpA*(hWndMain: Hwnd, lpszHelp: Lpcstr, uCommand: Uint, dwData: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "WinHelpA".}
proc changeDisplaySettingsA*(lpDevMode: Lpdevmode, dwFlags: Dword): Long{.
    stdcall, dynlib: "user32", importc: "ChangeDisplaySettingsA".}
proc enumDisplaySettingsA*(lpszDeviceName: Lpcstr, iModeNum: Dword,
                           lpDevMode: Lpdevmode): Winbool{.stdcall,
    dynlib: "user32", importc: "EnumDisplaySettingsA".}
proc systemParametersInfoA*(uiAction: Uint, uiParam: Uint, pvParam: Pvoid,
                            fWinIni: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "SystemParametersInfoA".}
proc addFontResourceA*(para1: Lpcstr): Int32{.stdcall, dynlib: "gdi32",
    importc: "AddFontResourceA".}
proc copyMetaFileA*(para1: Hmetafile, para2: Lpcstr): Hmetafile{.stdcall,
    dynlib: "gdi32", importc: "CopyMetaFileA".}
proc createFontA*(para1: Int32, para2: Int32, para3: Int32, para4: Int32,
                  para5: Int32, para6: Dword, para7: Dword, para8: Dword,
                  para9: Dword, para10: Dword, para11: Dword, para12: Dword,
                  para13: Dword, para14: Lpcstr): Hfont{.stdcall,
    dynlib: "gdi32", importc: "CreateFontA".}
proc createFontIndirectA*(para1: Lplogfont): Hfont{.stdcall, dynlib: "gdi32",
    importc: "CreateFontIndirectA".}
proc createFontIndirectA*(para1: var Logfont): Hfont{.stdcall, dynlib: "gdi32",
    importc: "CreateFontIndirectA".}
proc createICA*(para1: Lpcstr, para2: Lpcstr, para3: Lpcstr, para4: Lpdevmode): Hdc{.
    stdcall, dynlib: "gdi32", importc: "CreateICA".}
proc createMetaFileA*(para1: Lpcstr): Hdc{.stdcall, dynlib: "gdi32",
    importc: "CreateMetaFileA".}
proc createScalableFontResourceA*(para1: Dword, para2: Lpcstr, para3: Lpcstr,
                                  para4: Lpcstr): Winbool{.stdcall,
    dynlib: "gdi32", importc: "CreateScalableFontResourceA".}
proc enumFontFamiliesExA*(para1: Hdc, para2: Lplogfont, para3: Fontenumexproc,
                          para4: Lparam, para5: Dword): Int32{.stdcall,
    dynlib: "gdi32", importc: "EnumFontFamiliesExA".}
proc enumFontFamiliesA*(para1: Hdc, para2: Lpcstr, para3: Fontenumproc,
                        para4: Lparam): Int32{.stdcall, dynlib: "gdi32",
    importc: "EnumFontFamiliesA".}
proc enumFontsA*(para1: Hdc, para2: Lpcstr, para3: Enumfontsproc, para4: Lparam): Int32{.
    stdcall, dynlib: "gdi32", importc: "EnumFontsA".}
proc enumFontsA*(para1: Hdc, para2: Lpcstr, para3: Enumfontsproc, para4: Pointer): Int32{.
    stdcall, dynlib: "gdi32", importc: "EnumFontsA".}
proc getCharWidthA*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidthA".}
proc getCharWidth32A*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidth32A".}
proc getCharWidthFloatA*(para1: Hdc, para2: Uint, para3: Uint, para4: ptr Float32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidthFloatA".}
proc getCharABCWidthsA*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpabc): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsA".}
proc getCharABCWidthsFloatA*(para1: Hdc, para2: Uint, para3: Uint,
                             para4: Lpabcfloat): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCharABCWidthsFloatA".}
proc getGlyphOutlineA*(para1: Hdc, para2: Uint, para3: Uint,
                       para4: Lpglyphmetrics, para5: Dword, para6: Lpvoid,
                       para7: Pmat2): Dword{.stdcall, dynlib: "gdi32",
    importc: "GetGlyphOutlineA".}
proc getMetaFileA*(para1: Lpcstr): Hmetafile{.stdcall, dynlib: "gdi32",
    importc: "GetMetaFileA".}
proc getOutlineTextMetricsA*(para1: Hdc, para2: Uint, para3: Lpoutlinetextmetric): Uint{.
    stdcall, dynlib: "gdi32", importc: "GetOutlineTextMetricsA".}
proc getTextExtentPointA*(para1: Hdc, para2: Lpcstr, para3: Int32, para4: Lpsize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetTextExtentPointA".}
proc getTextExtentPoint32A*(para1: Hdc, para2: Lpcstr, para3: Int32,
                            para4: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetTextExtentPoint32A".}
proc getTextExtentExPointA*(para1: Hdc, para2: Lpcstr, para3: Int32,
                            para4: Int32, para5: Lpint, para6: Lpint,
                            para7: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetTextExtentExPointA".}
proc getCharacterPlacementA*(para1: Hdc, para2: Lpcstr, para3: Int32,
                             para4: Int32, para5: LpgcpResults, para6: Dword): Dword{.
    stdcall, dynlib: "gdi32", importc: "GetCharacterPlacementA".}
proc resetDCA*(para1: Hdc, para2: Lpdevmode): Hdc{.stdcall, dynlib: "gdi32",
    importc: "ResetDCA".}
proc removeFontResourceA*(para1: Lpcstr): Winbool{.stdcall, dynlib: "gdi32",
    importc: "RemoveFontResourceA".}
proc copyEnhMetaFileA*(para1: Henhmetafile, para2: Lpcstr): Henhmetafile{.
    stdcall, dynlib: "gdi32", importc: "CopyEnhMetaFileA".}
proc createEnhMetaFileA*(para1: Hdc, para2: Lpcstr, para3: Lprect, para4: Lpcstr): Hdc{.
    stdcall, dynlib: "gdi32", importc: "CreateEnhMetaFileA".}
proc getEnhMetaFileA*(para1: Lpcstr): Henhmetafile{.stdcall, dynlib: "gdi32",
    importc: "GetEnhMetaFileA".}
proc getEnhMetaFileDescriptionA*(para1: Henhmetafile, para2: Uint, para3: Lpstr): Uint{.
    stdcall, dynlib: "gdi32", importc: "GetEnhMetaFileDescriptionA".}
proc getTextMetricsA*(para1: Hdc, para2: Lptextmetric): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetTextMetricsA".}
proc startDocA*(para1: Hdc, para2: Pdocinfo): Int32{.stdcall, dynlib: "gdi32",
    importc: "StartDocA".}
proc getObjectA*(para1: Hgdiobj, para2: Int32, para3: Lpvoid): Int32{.stdcall,
    dynlib: "gdi32", importc: "GetObjectA".}
proc textOutA*(para1: Hdc, para2: Int32, para3: Int32, para4: Lpcstr,
               para5: Int32): Winbool{.stdcall, dynlib: "gdi32",
                                       importc: "TextOutA".}
proc extTextOutA*(para1: Hdc, para2: Int32, para3: Int32, para4: Uint,
                  para5: Lprect, para6: Lpcstr, para7: Uint, para8: Lpint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "ExtTextOutA".}
proc polyTextOutA*(para1: Hdc, para2: Ppolytext, para3: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyTextOutA".}
proc getTextFaceA*(para1: Hdc, para2: Int32, para3: Lpstr): Int32{.stdcall,
    dynlib: "gdi32", importc: "GetTextFaceA".}
proc getKerningPairsA*(para1: Hdc, para2: Dword, para3: Lpkerningpair): Dword{.
    stdcall, dynlib: "gdi32", importc: "GetKerningPairsA".}
proc createColorSpaceA*(para1: Lplogcolorspace): Hcolorspace{.stdcall,
    dynlib: "gdi32", importc: "CreateColorSpaceA".}
proc getLogColorSpaceA*(para1: Hcolorspace, para2: Lplogcolorspace, para3: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetLogColorSpaceA".}
proc getICMProfileA*(para1: Hdc, para2: Dword, para3: Lpstr): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetICMProfileA".}
proc setICMProfileA*(para1: Hdc, para2: Lpstr): Winbool{.stdcall,
    dynlib: "gdi32", importc: "SetICMProfileA".}
proc updateICMRegKeyA*(para1: Dword, para2: Dword, para3: Lpstr, para4: Uint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "UpdateICMRegKeyA".}
proc enumICMProfilesA*(para1: Hdc, para2: Icmenumproc, para3: Lparam): Int32{.
    stdcall, dynlib: "gdi32", importc: "EnumICMProfilesA".}
proc propertySheetA*(lppsph: Lpcpropsheetheader): Int32{.stdcall,
    dynlib: "comctl32", importc: "PropertySheetA".}
proc imageListLoadImageA*(hi: Hinst, lpbmp: Lpcstr, cx: Int32, cGrow: Int32,
                           crMask: Colorref, uType: Uint, uFlags: Uint): Himagelist{.
    stdcall, dynlib: "comctl32", importc: "ImageList_LoadImageA".}
proc createStatusWindowA*(style: Long, lpszText: Lpcstr, hwndParent: Hwnd,
                          wID: Uint): Hwnd{.stdcall, dynlib: "comctl32",
    importc: "CreateStatusWindowA".}
proc drawStatusTextA*(hDC: Hdc, lprc: Lprect, pszText: Lpcstr, uFlags: Uint){.
    stdcall, dynlib: "comctl32", importc: "DrawStatusTextA".}
proc getOpenFileNameA*(para1: Lpopenfilename): Winbool{.stdcall,
    dynlib: "comdlg32", importc: "GetOpenFileNameA".}
proc getSaveFileNameA*(para1: Lpopenfilename): Winbool{.stdcall,
    dynlib: "comdlg32", importc: "GetSaveFileNameA".}
proc getFileTitleA*(para1: Lpcstr, para2: Lpstr, para3: Int16): Int{.stdcall,
    dynlib: "comdlg32", importc: "GetFileTitleA".}
proc chooseColorA*(para1: Lpchoosecolor): Winbool{.stdcall, dynlib: "comdlg32",
    importc: "ChooseColorA".}
proc findTextA*(para1: Lpfindreplace): Hwnd{.stdcall, dynlib: "comdlg32",
    importc: "FindTextA".}
proc replaceTextA*(para1: Lpfindreplace): Hwnd{.stdcall, dynlib: "comdlg32",
    importc: "ReplaceTextA".}
proc chooseFontA*(para1: Lpchoosefont): Winbool{.stdcall, dynlib: "comdlg32",
    importc: "ChooseFontA".}
proc printDlgA*(para1: Lpprintdlg): Winbool{.stdcall, dynlib: "comdlg32",
    importc: "PrintDlgA".}
proc pageSetupDlgA*(para1: Lppagesetupdlg): Winbool{.stdcall,
    dynlib: "comdlg32", importc: "PageSetupDlgA".}
proc createProcessA*(lpApplicationName: Lpcstr, lpCommandLine: Lpstr,
                     lpProcessAttributes: LpsecurityAttributes,
                     lpThreadAttributes: LpsecurityAttributes,
                     bInheritHandles: Winbool, dwCreationFlags: Dword,
                     lpEnvironment: Lpvoid, lpCurrentDirectory: Lpcstr,
                     lpStartupInfo: Lpstartupinfo,
                     lpProcessInformation: LpprocessInformation): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateProcessA".}
proc getStartupInfoA*(lpStartupInfo: Lpstartupinfo){.stdcall,
    dynlib: "kernel32", importc: "GetStartupInfoA".}
proc findFirstFileA*(lpFileName: Lpcstr, lpFindFileData: Lpwin32FindData): Handle{.
    stdcall, dynlib: "kernel32", importc: "FindFirstFileA".}
proc findNextFileA*(hFindFile: Handle, lpFindFileData: Lpwin32FindData): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FindNextFileA".}
proc getVersionExA*(VersionInformation: Lposversioninfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVersionExA".}
proc createWindowA*(lpClassName: Lpcstr, lpWindowName: Lpcstr, dwStyle: Dword,
                    X: Int32, Y: Int32, nWidth: Int32, nHeight: Int32,
                    hWndParent: Hwnd, menu: Hmenu, hInstance: Hinst,
                    lpParam: Lpvoid): Hwnd
proc createDialogA*(hInstance: Hinst, lpTemplateName: Lpcstr, hWndParent: Hwnd,
                    lpDialogFunc: Dlgproc): Hwnd
proc createDialogIndirectA*(hInstance: Hinst, lpTemplate: Lpcdlgtemplate,
                            hWndParent: Hwnd, lpDialogFunc: Dlgproc): Hwnd
proc dialogBoxA*(hInstance: Hinst, lpTemplateName: Lpcstr, hWndParent: Hwnd,
                 lpDialogFunc: Dlgproc): Int32
proc dialogBoxIndirectA*(hInstance: Hinst, hDialogTemplate: Lpcdlgtemplate,
                         hWndParent: Hwnd, lpDialogFunc: Dlgproc): Int32
proc createDCA*(para1: Lpcstr, para2: Lpcstr, para3: Lpcstr, para4: Pdevmode): Hdc{.
    stdcall, dynlib: "gdi32", importc: "CreateDCA".}
proc verInstallFileA*(uFlags: Dword, szSrcFileName: Lpstr,
                      szDestFileName: Lpstr, szSrcDir: Lpstr, szDestDir: Lpstr,
                      szCurDir: Lpstr, szTmpFile: Lpstr, lpuTmpFileLen: Puint): Dword{.
    stdcall, dynlib: "version", importc: "VerInstallFileA".}
proc getFileVersionInfoSizeA*(lptstrFilename: Lpstr, lpdwHandle: Lpdword): Dword{.
    stdcall, dynlib: "version", importc: "GetFileVersionInfoSizeA".}
proc getFileVersionInfoA*(lptstrFilename: Lpstr, dwHandle: Dword, dwLen: Dword,
                          lpData: Lpvoid): Winbool{.stdcall, dynlib: "version",
    importc: "GetFileVersionInfoA".}
proc verLanguageNameA*(wLang: Dword, szLang: Lpstr, nSize: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "VerLanguageNameA".}
proc verQueryValueA*(pBlock: Lpvoid, lpSubBlock: Lpstr, lplpBuffer: Lpvoid,
                     puLen: Puint): Winbool{.stdcall, dynlib: "version",
    importc: "VerQueryValueA".}
proc verFindFileA*(uFlags: Dword, szFileName: Lpstr, szWinDir: Lpstr,
                   szAppDir: Lpstr, szCurDir: Lpstr, lpuCurDirLen: Puint,
                   szDestDir: Lpstr, lpuDestDirLen: Puint): Dword{.stdcall,
    dynlib: "version", importc: "VerFindFileA".}
proc regConnectRegistryA*(lpMachineName: Lpstr, key: Hkey, phkResult: Phkey): Long{.
    stdcall, dynlib: "advapi32", importc: "RegConnectRegistryA".}
proc regCreateKeyA*(key: Hkey, lpSubKey: Lpcstr, phkResult: Phkey): Long{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyA".}
proc regCreateKeyExA*(key: Hkey, lpSubKey: Lpcstr, Reserved: Dword,
                      lpClass: Lpstr, dwOptions: Dword, samDesired: Regsam,
                      lpSecurityAttributes: LpsecurityAttributes,
                      phkResult: Phkey, lpdwDisposition: Lpdword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyExA".}
proc regDeleteKeyA*(key: Hkey, lpSubKey: Lpcstr): Long{.stdcall,
    dynlib: "advapi32", importc: "RegDeleteKeyA".}
proc regDeleteValueA*(key: Hkey, lpValueName: Lpcstr): Long{.stdcall,
    dynlib: "advapi32", importc: "RegDeleteValueA".}
proc regEnumKeyA*(key: Hkey, dwIndex: Dword, lpName: Lpstr, cbName: Dword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegEnumKeyA".}
proc regEnumKeyExA*(key: Hkey, dwIndex: Dword, lpName: Lpstr,
                    lpcbName: Lpdword, lpReserved: Lpdword, lpClass: Lpstr,
                    lpcbClass: Lpdword, lpftLastWriteTime: Pfiletime): Long{.
    stdcall, dynlib: "advapi32", importc: "RegEnumKeyExA".}
proc regEnumValueA*(key: Hkey, dwIndex: Dword, lpValueName: Lpstr,
                    lpcbValueName: Lpdword, lpReserved: Lpdword,
                    lpType: Lpdword, lpData: Lpbyte, lpcbData: Lpdword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegEnumValueA".}
proc regLoadKeyA*(key: Hkey, lpSubKey: Lpcstr, lpFile: Lpcstr): Long{.stdcall,
    dynlib: "advapi32", importc: "RegLoadKeyA".}
proc regOpenKeyA*(key: Hkey, lpSubKey: Lpcstr, phkResult: Phkey): Long{.
    stdcall, dynlib: "advapi32", importc: "RegOpenKeyA".}
proc regOpenKeyExA*(key: Hkey, lpSubKey: Lpcstr, ulOptions: Dword,
                    samDesired: Regsam, phkResult: Phkey): Long{.stdcall,
    dynlib: "advapi32", importc: "RegOpenKeyExA".}
proc regQueryInfoKeyA*(key: Hkey, lpClass: Lpstr, lpcbClass: Lpdword,
                       lpReserved: Lpdword, lpcSubKeys: Lpdword,
                       lpcbMaxSubKeyLen: Lpdword, lpcbMaxClassLen: Lpdword,
                       lpcValues: Lpdword, lpcbMaxValueNameLen: Lpdword,
                       lpcbMaxValueLen: Lpdword,
                       lpcbSecurityDescriptor: Lpdword,
                       lpftLastWriteTime: Pfiletime): Long{.stdcall,
    dynlib: "advapi32", importc: "RegQueryInfoKeyA".}
proc regQueryValueA*(key: Hkey, lpSubKey: Lpcstr, lpValue: Lpstr,
                     lpcbValue: Plong): Long{.stdcall, dynlib: "advapi32",
    importc: "RegQueryValueA".}
proc regQueryMultipleValuesA*(key: Hkey, val_list: Pvalent, num_vals: Dword,
                              lpValueBuf: Lpstr, ldwTotsize: Lpdword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegQueryMultipleValuesA".}
proc regQueryValueExA*(key: Hkey, lpValueName: Lpcstr, lpReserved: Lpdword,
                       lpType: Lpdword, lpData: Lpbyte, lpcbData: Lpdword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegQueryValueExA".}
proc regReplaceKeyA*(key: Hkey, lpSubKey: Lpcstr, lpNewFile: Lpcstr,
                     lpOldFile: Lpcstr): Long{.stdcall, dynlib: "advapi32",
    importc: "RegReplaceKeyA".}
proc regRestoreKeyA*(key: Hkey, lpFile: Lpcstr, dwFlags: Dword): Long{.stdcall,
    dynlib: "advapi32", importc: "RegRestoreKeyA".}
proc regSaveKeyA*(key: Hkey, lpFile: Lpcstr,
                  lpSecurityAttributes: LpsecurityAttributes): Long{.stdcall,
    dynlib: "advapi32", importc: "RegSaveKeyA".}
proc regSetValueA*(key: Hkey, lpSubKey: Lpcstr, dwType: Dword, lpData: Lpcstr,
                   cbData: Dword): Long{.stdcall, dynlib: "advapi32",
    importc: "RegSetValueA".}
proc regSetValueExA*(key: Hkey, lpValueName: Lpcstr, Reserved: Dword,
                     dwType: Dword, lpData: Lpbyte, cbData: Dword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegSetValueExA".}
proc regUnLoadKeyA*(key: Hkey, lpSubKey: Lpcstr): Long{.stdcall,
    dynlib: "advapi32", importc: "RegUnLoadKeyA".}
proc initiateSystemShutdownA*(lpMachineName: Lpstr, lpMessage: Lpstr,
                              dwTimeout: Dword, bForceAppsClosed: Winbool,
                              bRebootAfterShutdown: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "InitiateSystemShutdownA".}
proc abortSystemShutdownA*(lpMachineName: Lpstr): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AbortSystemShutdownA".}
proc compareStringA*(Locale: Lcid, dwCmpFlags: Dword, lpString1: Lpcstr,
                     cchCount1: Int32, lpString2: Lpcstr, cchCount2: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "CompareStringA".}
proc lCMapStringA*(Locale: Lcid, dwMapFlags: Dword, lpSrcStr: Lpcstr,
                   cchSrc: Int32, lpDestStr: Lpstr, cchDest: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "LCMapStringA".}
proc getLocaleInfoA*(Locale: Lcid, LCType: Lctype, lpLCData: Lpstr,
                     cchData: Int32): Int32{.stdcall, dynlib: "kernel32",
    importc: "GetLocaleInfoA".}
proc setLocaleInfoA*(Locale: Lcid, LCType: Lctype, lpLCData: Lpcstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetLocaleInfoA".}
proc getTimeFormatA*(Locale: Lcid, dwFlags: Dword, lpTime: Lpsystemtime,
                     lpFormat: Lpcstr, lpTimeStr: Lpstr, cchTime: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "GetTimeFormatA".}
proc getDateFormatA*(Locale: Lcid, dwFlags: Dword, lpDate: Lpsystemtime,
                     lpFormat: Lpcstr, lpDateStr: Lpstr, cchDate: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "GetDateFormatA".}
proc getNumberFormatA*(Locale: Lcid, dwFlags: Dword, lpValue: Lpcstr,
                       lpFormat: Pnumberfmt, lpNumberStr: Lpstr,
                       cchNumber: Int32): Int32{.stdcall, dynlib: "kernel32",
    importc: "GetNumberFormatA".}
proc getCurrencyFormatA*(Locale: Lcid, dwFlags: Dword, lpValue: Lpcstr,
                         lpFormat: Pcurrencyfmt, lpCurrencyStr: Lpstr,
                         cchCurrency: Int32): Int32{.stdcall,
    dynlib: "kernel32", importc: "GetCurrencyFormatA".}
proc enumCalendarInfoA*(lpCalInfoEnumProc: CalinfoEnumproc, Locale: Lcid,
                        Calendar: Calid, CalType: Caltype): Winbool{.stdcall,
    dynlib: "kernel32", importc: "EnumCalendarInfoA".}
proc enumTimeFormatsA*(lpTimeFmtEnumProc: TIMEFMT_ENUMPROC, Locale: Lcid,
                       dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "EnumTimeFormatsA".}
proc enumDateFormatsA*(lpDateFmtEnumProc: DatefmtEnumproc, Locale: Lcid,
                       dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "EnumDateFormatsA".}
proc getStringTypeExA*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Lpcstr,
                       cchSrc: Int32, lpCharType: Lpword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetStringTypeExA".}
proc getStringTypeA*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Lpcstr,
                     cchSrc: Int32, lpCharType: Lpword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetStringTypeA".}
proc foldStringA*(dwMapFlags: Dword, lpSrcStr: Lpcstr, cchSrc: Int32,
                  lpDestStr: Lpstr, cchDest: Int32): Int32{.stdcall,
    dynlib: "kernel32", importc: "FoldStringA".}
proc enumSystemLocalesA*(lpLocaleEnumProc: LocaleEnumproc, dwFlags: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "EnumSystemLocalesA".}
proc enumSystemCodePagesA*(lpCodePageEnumProc: CodepageEnumproc, dwFlags: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "EnumSystemCodePagesA".}
proc peekConsoleInputA*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                        nLength: Dword, lpNumberOfEventsRead: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "PeekConsoleInputA".}
proc readConsoleInputA*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                        nLength: Dword, lpNumberOfEventsRead: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleInputA".}
proc writeConsoleInputA*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                         nLength: Dword, lpNumberOfEventsWritten: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleInputA".}
proc readConsoleOutputA*(hConsoleOutput: Handle, lpBuffer: PcharInfo,
                         dwBufferSize: Coord, dwBufferCoord: Coord,
                         lpReadRegion: PsmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ReadConsoleOutputA".}
proc writeConsoleOutputA*(hConsoleOutput: Handle, lpBuffer: PcharInfo,
                          dwBufferSize: Coord, dwBufferCoord: Coord,
                          lpWriteRegion: PsmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteConsoleOutputA".}
proc readConsoleOutputCharacterA*(hConsoleOutput: Handle, lpCharacter: Lpstr,
                                  nLength: Dword, dwReadCoord: Coord,
                                  lpNumberOfCharsRead: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterA".}
proc writeConsoleOutputCharacterA*(hConsoleOutput: Handle, lpCharacter: Lpcstr,
                                   nLength: Dword, dwWriteCoord: Coord,
                                   lpNumberOfCharsWritten: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterA".}
proc fillConsoleOutputCharacterA*(hConsoleOutput: Handle, cCharacter: Char,
                                  nLength: Dword, dwWriteCoord: Coord,
                                  lpNumberOfCharsWritten: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FillConsoleOutputCharacterA".}
proc scrollConsoleScreenBufferA*(hConsoleOutput: Handle,
                                 lpScrollRectangle: PsmallRect,
                                 lpClipRectangle: PsmallRect,
                                 dwDestinationOrigin: Coord, lpFill: PcharInfo): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ScrollConsoleScreenBufferA".}
proc getConsoleTitleA*(lpConsoleTitle: Lpstr, nSize: Dword): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetConsoleTitleA".}
proc setConsoleTitleA*(lpConsoleTitle: Lpcstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetConsoleTitleA".}
proc readConsoleA*(hConsoleInput: Handle, lpBuffer: Lpvoid,
                   nNumberOfCharsToRead: Dword, lpNumberOfCharsRead: Lpdword,
                   lpReserved: Lpvoid): Winbool{.stdcall, dynlib: "kernel32",
    importc: "ReadConsoleA".}
proc writeConsoleA*(hConsoleOutput: Handle, lpBuffer: Pointer,
                    nNumberOfCharsToWrite: Dword,
                    lpNumberOfCharsWritten: Lpdword, lpReserved: Lpvoid): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleA".}
proc wNetAddConnectionA*(lpRemoteName: Lpcstr, lpPassword: Lpcstr,
                         lpLocalName: Lpcstr): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetAddConnectionA".}
proc wNetAddConnection2A*(lpNetResource: Lpnetresource, lpPassword: Lpcstr,
                          lpUserName: Lpcstr, dwFlags: Dword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetAddConnection2A".}
proc wNetAddConnection3A*(hwndOwner: Hwnd, lpNetResource: Lpnetresource,
                          lpPassword: Lpcstr, lpUserName: Lpcstr, dwFlags: Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetAddConnection3A".}
proc wNetCancelConnectionA*(lpName: Lpcstr, fForce: Winbool): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetCancelConnectionA".}
proc wNetCancelConnection2A*(lpName: Lpcstr, dwFlags: Dword, fForce: Winbool): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetCancelConnection2A".}
proc wNetGetConnectionA*(lpLocalName: Lpcstr, lpRemoteName: Lpstr,
                         lpnLength: Lpdword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetConnectionA".}
proc wNetUseConnectionA*(hwndOwner: Hwnd, lpNetResource: Lpnetresource,
                         lpUserID: Lpcstr, lpPassword: Lpcstr, dwFlags: Dword,
                         lpAccessName: Lpstr, lpBufferSize: Lpdword,
                         lpResult: Lpdword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetUseConnectionA".}
proc wNetSetConnectionA*(lpName: Lpcstr, dwProperties: Dword, pvValues: Lpvoid): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetSetConnectionA".}
proc wNetConnectionDialog1A*(lpConnDlgStruct: Lpconnectdlgstruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetConnectionDialog1A".}
proc wNetDisconnectDialog1A*(lpConnDlgStruct: Lpdiscdlgstruct): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetDisconnectDialog1A".}
proc wNetOpenEnumA*(dwScope: Dword, dwType: Dword, dwUsage: Dword,
                    lpNetResource: Lpnetresource, lphEnum: Lphandle): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetOpenEnumA".}
proc wNetEnumResourceA*(hEnum: Handle, lpcCount: Lpdword, lpBuffer: Lpvoid,
                        lpBufferSize: Lpdword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetEnumResourceA".}
proc wNetGetUniversalNameA*(lpLocalPath: Lpcstr, dwInfoLevel: Dword,
                            lpBuffer: Lpvoid, lpBufferSize: Lpdword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUniversalNameA".}
proc wNetGetUserA*(lpName: Lpcstr, lpUserName: Lpstr, lpnLength: Lpdword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUserA".}
proc wNetGetProviderNameA*(dwNetType: Dword, lpProviderName: Lpstr,
                           lpBufferSize: Lpdword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetGetProviderNameA".}
proc wNetGetNetworkInformationA*(lpProvider: Lpcstr,
                                 lpNetInfoStruct: Lpnetinfostruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetNetworkInformationA".}
proc wNetGetLastErrorA*(lpError: Lpdword, lpErrorBuf: Lpstr,
                        nErrorBufSize: Dword, lpNameBuf: Lpstr,
                        nNameBufSize: Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetLastErrorA".}
proc multinetGetConnectionPerformanceA*(lpNetResource: Lpnetresource,
    lpNetConnectInfoStruct: Lpnetconnectinfostruct): Dword{.stdcall,
    dynlib: "mpr", importc: "MultinetGetConnectionPerformanceA".}
proc changeServiceConfigA*(hService: ScHandle, dwServiceType: Dword,
                           dwStartType: Dword, dwErrorControl: Dword,
                           lpBinaryPathName: Lpcstr, lpLoadOrderGroup: Lpcstr,
                           lpdwTagId: Lpdword, lpDependencies: Lpcstr,
                           lpServiceStartName: Lpcstr, lpPassword: Lpcstr,
                           lpDisplayName: Lpcstr): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ChangeServiceConfigA".}
proc createServiceA*(hSCManager: ScHandle, lpServiceName: Lpcstr,
                     lpDisplayName: Lpcstr, dwDesiredAccess: Dword,
                     dwServiceType: Dword, dwStartType: Dword,
                     dwErrorControl: Dword, lpBinaryPathName: Lpcstr,
                     lpLoadOrderGroup: Lpcstr, lpdwTagId: Lpdword,
                     lpDependencies: Lpcstr, lpServiceStartName: Lpcstr,
                     lpPassword: Lpcstr): ScHandle{.stdcall,
    dynlib: "advapi32", importc: "CreateServiceA".}
proc enumDependentServicesA*(hService: ScHandle, dwServiceState: Dword,
                             lpServices: LpenumServiceStatus,
                             cbBufSize: Dword, pcbBytesNeeded: Lpdword,
                             lpServicesReturned: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "EnumDependentServicesA".}
proc enumServicesStatusA*(hSCManager: ScHandle, dwServiceType: Dword,
                          dwServiceState: Dword,
                          lpServices: LpenumServiceStatus, cbBufSize: Dword,
                          pcbBytesNeeded: Lpdword, lpServicesReturned: Lpdword,
                          lpResumeHandle: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "EnumServicesStatusA".}
proc getServiceKeyNameA*(hSCManager: ScHandle, lpDisplayName: Lpcstr,
                         lpServiceName: Lpstr, lpcchBuffer: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetServiceKeyNameA".}
proc getServiceDisplayNameA*(hSCManager: ScHandle, lpServiceName: Lpcstr,
                             lpDisplayName: Lpstr, lpcchBuffer: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetServiceDisplayNameA".}
proc openSCManagerA*(lpMachineName: Lpcstr, lpDatabaseName: Lpcstr,
                     dwDesiredAccess: Dword): ScHandle{.stdcall,
    dynlib: "advapi32", importc: "OpenSCManagerA".}
proc openServiceA*(hSCManager: ScHandle, lpServiceName: Lpcstr,
                   dwDesiredAccess: Dword): ScHandle{.stdcall,
    dynlib: "advapi32", importc: "OpenServiceA".}
proc queryServiceConfigA*(hService: ScHandle,
                          lpServiceConfig: LpqueryServiceConfig,
                          cbBufSize: Dword, pcbBytesNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "QueryServiceConfigA".}
proc queryServiceLockStatusA*(hSCManager: ScHandle,
                              lpLockStatus: LpqueryServiceLockStatus,
                              cbBufSize: Dword, pcbBytesNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "QueryServiceLockStatusA".}
proc registerServiceCtrlHandlerA*(lpServiceName: Lpcstr,
                                  lpHandlerProc: LphandlerFunction): ServiceStatusHandle{.
    stdcall, dynlib: "advapi32", importc: "RegisterServiceCtrlHandlerA".}
proc startServiceCtrlDispatcherA*(lpServiceStartTable: LpserviceTableEntry): Winbool{.
    stdcall, dynlib: "advapi32", importc: "StartServiceCtrlDispatcherA".}
proc startServiceA*(hService: ScHandle, dwNumServiceArgs: Dword,
                    lpServiceArgVectors: Lpcstr): Winbool{.stdcall,
    dynlib: "advapi32", importc: "StartServiceA".}
proc dragQueryFileA*(para1: Hdrop, para2: Int, para3: Cstring, para4: Int): Int{.
    stdcall, dynlib: "shell32", importc: "DragQueryFileA".}
proc extractAssociatedIconA*(para1: Hinst, para2: Cstring, para3: Lpword): Hicon{.
    stdcall, dynlib: "shell32", importc: "ExtractAssociatedIconA".}
proc extractIconA*(para1: Hinst, para2: Cstring, para3: Int): Hicon{.stdcall,
    dynlib: "shell32", importc: "ExtractIconA".}
proc findExecutableA*(para1: Cstring, para2: Cstring, para3: Cstring): Hinst{.
    stdcall, dynlib: "shell32", importc: "FindExecutableA".}
proc shellAboutA*(para1: Hwnd, para2: Cstring, para3: Cstring, para4: Hicon): Int32{.
    stdcall, dynlib: "shell32", importc: "ShellAboutA".}
proc shellExecuteA*(para1: Hwnd, para2: Cstring, para3: Cstring, para4: Cstring,
                    para5: Cstring, para6: Int32): Hinst{.stdcall,
    dynlib: "shell32", importc: "ShellExecuteA".}
proc shellNotifyIconA*(dwMessage: Dword, lpData: PNotifyIconDataA): Winbool{.
    stdcall, dynlib: "shell32", importc: "Shell_NotifyIconA".}
proc ddeCreateStringHandleA*(para1: Dword, para2: Cstring, para3: Int32): Hsz{.
    stdcall, dynlib: "user32", importc: "DdeCreateStringHandleA".}
proc ddeInitializeA*(para1: Lpdword, para2: Pfncallback, para3: Dword,
                     para4: Dword): Uint{.stdcall, dynlib: "user32",
    importc: "DdeInitializeA".}
proc ddeQueryStringA*(para1: Dword, para2: Hsz, para3: Cstring, para4: Dword,
                      para5: Int32): Dword{.stdcall, dynlib: "user32",
    importc: "DdeQueryStringA".}
proc logonUserA*(para1: Lpstr, para2: Lpstr, para3: Lpstr, para4: Dword,
                 para5: Dword, para6: Phandle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LogonUserA".}
proc createProcessAsUserA*(para1: Handle, para2: Lpctstr, para3: Lptstr,
                           para4: LpsecurityAttributes,
                           para5: LpsecurityAttributes, para6: Winbool,
                           para7: Dword, para8: Lpvoid, para9: Lpctstr,
                           para10: Lpstartupinfo, para11: LpprocessInformation): Winbool{.
    stdcall, dynlib: "advapi32", importc: "CreateProcessAsUserA".}
proc getBinaryTypeW*(lpApplicationName: Lpcwstr, lpBinaryType: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetBinaryTypeW".}
proc getShortPathNameW*(lpszLongPath: Lpcwstr, lpszShortPath: Lpwstr,
                        cchBuffer: Dword): Dword{.stdcall, dynlib: "kernel32",
    importc: "GetShortPathNameW".}
proc getEnvironmentStringsW*(): Lpwstr{.stdcall, dynlib: "kernel32",
                                        importc: "GetEnvironmentStringsW".}
proc freeEnvironmentStringsW*(para1: Lpwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FreeEnvironmentStringsW".}
proc formatMessageW*(dwFlags: Dword, lpSource: Lpcvoid, dwMessageId: Dword,
                     dwLanguageId: Dword, lpBuffer: Lpwstr, nSize: Dword,
                     Arguments: VaList): Dword{.stdcall, dynlib: "kernel32",
    importc: "FormatMessageW".}
proc createMailslotW*(lpName: Lpcwstr, nMaxMessageSize: Dword,
                      lReadTimeout: Dword,
                      lpSecurityAttributes: LpsecurityAttributes): Handle{.
    stdcall, dynlib: "kernel32", importc: "CreateMailslotW".}
proc lstrcmpW*(lpString1: Lpcwstr, lpString2: Lpcwstr): Int32{.stdcall,
    dynlib: "kernel32", importc: "lstrcmpW".}
proc lstrcmpiW*(lpString1: Lpcwstr, lpString2: Lpcwstr): Int32{.stdcall,
    dynlib: "kernel32", importc: "lstrcmpiW".}
proc lstrcpynW*(lpString1: Lpwstr, lpString2: Lpcwstr, iMaxLength: Int32): Lpwstr{.
    stdcall, dynlib: "kernel32", importc: "lstrcpynW".}
proc lstrcpyW*(lpString1: Lpwstr, lpString2: Lpcwstr): Lpwstr{.stdcall,
    dynlib: "kernel32", importc: "lstrcpyW".}
proc lstrcatW*(lpString1: Lpwstr, lpString2: Lpcwstr): Lpwstr{.stdcall,
    dynlib: "kernel32", importc: "lstrcatW".}
proc lstrlenW*(lpString: Lpcwstr): Int32{.stdcall, dynlib: "kernel32",
    importc: "lstrlenW".}
proc createMutexW*(lpMutexAttributes: LpsecurityAttributes,
                   bInitialOwner: Winbool, lpName: Lpcwstr): Handle{.stdcall,
    dynlib: "kernel32", importc: "CreateMutexW".}
proc openMutexW*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                 lpName: Lpcwstr): Handle{.stdcall, dynlib: "kernel32",
    importc: "OpenMutexW".}
proc createEventW*(lpEventAttributes: LpsecurityAttributes,
                   bManualReset: Winbool, bInitialState: Winbool,
                   lpName: Lpcwstr): Handle{.stdcall, dynlib: "kernel32",
    importc: "CreateEventW".}
proc openEventW*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                 lpName: Lpcwstr): Handle{.stdcall, dynlib: "kernel32",
    importc: "OpenEventW".}
proc createSemaphoreW*(lpSemaphoreAttributes: LpsecurityAttributes,
                       lInitialCount: Long, lMaximumCount: Long, lpName: Lpcwstr): Handle{.
    stdcall, dynlib: "kernel32", importc: "CreateSemaphoreW".}
proc openSemaphoreW*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                     lpName: Lpcwstr): Handle{.stdcall, dynlib: "kernel32",
    importc: "OpenSemaphoreW".}
proc createFileMappingW*(hFile: Handle,
                         lpFileMappingAttributes: LpsecurityAttributes,
                         flProtect: Dword, dwMaximumSizeHigh: Dword,
                         dwMaximumSizeLow: Dword, lpName: Lpcwstr): Handle{.
    stdcall, dynlib: "kernel32", importc: "CreateFileMappingW".}
proc openFileMappingW*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                       lpName: Lpcwstr): Handle{.stdcall, dynlib: "kernel32",
    importc: "OpenFileMappingW".}
proc getLogicalDriveStringsW*(nBufferLength: Dword, lpBuffer: Lpwstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetLogicalDriveStringsW".}
proc loadLibraryW*(lpLibFileName: Lpcwstr): Hinst{.stdcall, dynlib: "kernel32",
    importc: "LoadLibraryW".}
proc loadLibraryExW*(lpLibFileName: Lpcwstr, hFile: Handle, dwFlags: Dword): Hinst{.
    stdcall, dynlib: "kernel32", importc: "LoadLibraryExW".}
proc getModuleFileNameW*(hModule: Hinst, lpFilename: Lpwstr, nSize: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetModuleFileNameW".}
proc getModuleHandleW*(lpModuleName: Lpcwstr): Hmodule{.stdcall,
    dynlib: "kernel32", importc: "GetModuleHandleW".}
proc fatalAppExitW*(uAction: Uint, lpMessageText: Lpcwstr){.stdcall,
    dynlib: "kernel32", importc: "FatalAppExitW".}
proc getCommandLineW*(): Lpwstr{.stdcall, dynlib: "kernel32",
                                 importc: "GetCommandLineW".}
proc getEnvironmentVariableW*(lpName: Lpcwstr, lpBuffer: Lpwstr, nSize: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetEnvironmentVariableW".}
proc setEnvironmentVariableW*(lpName: Lpcwstr, lpValue: Lpcwstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetEnvironmentVariableW".}
proc expandEnvironmentStringsW*(lpSrc: Lpcwstr, lpDst: Lpwstr, nSize: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "ExpandEnvironmentStringsW".}
proc outputDebugStringW*(lpOutputString: Lpcwstr){.stdcall, dynlib: "kernel32",
    importc: "OutputDebugStringW".}
proc findResourceW*(hModule: Hinst, lpName: Lpcwstr, lpType: Lpcwstr): Hrsrc{.
    stdcall, dynlib: "kernel32", importc: "FindResourceW".}
proc findResourceExW*(hModule: Hinst, lpType: Lpcwstr, lpName: Lpcwstr,
                      wLanguage: Int16): Hrsrc{.stdcall, dynlib: "kernel32",
    importc: "FindResourceExW".}
proc enumResourceTypesW*(hModule: Hinst, lpEnumFunc: Enumrestypeproc,
                         lParam: Long): Winbool{.stdcall, dynlib: "kernel32",
    importc: "EnumResourceTypesW".}
proc enumResourceNamesW*(hModule: Hinst, lpType: Lpcwstr,
                         lpEnumFunc: Enumresnameproc, lParam: Long): Winbool{.
    stdcall, dynlib: "kernel32", importc: "EnumResourceNamesW".}
proc enumResourceLanguagesW*(hModule: Hinst, lpType: Lpcwstr, lpName: Lpcwstr,
                             lpEnumFunc: Enumreslangproc, lParam: Long): Winbool{.
    stdcall, dynlib: "kernel32", importc: "EnumResourceLanguagesW".}
proc beginUpdateResourceW*(pFileName: Lpcwstr, bDeleteExistingResources: Winbool): Handle{.
    stdcall, dynlib: "kernel32", importc: "BeginUpdateResourceW".}
proc updateResourceW*(hUpdate: Handle, lpType: Lpcwstr, lpName: Lpcwstr,
                      wLanguage: Int16, lpData: Lpvoid, cbData: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "UpdateResourceW".}
proc endUpdateResourceW*(hUpdate: Handle, fDiscard: Winbool): Winbool{.stdcall,
    dynlib: "kernel32", importc: "EndUpdateResourceW".}
proc globalAddAtomW*(lpString: Lpcwstr): Atom{.stdcall, dynlib: "kernel32",
    importc: "GlobalAddAtomW".}
proc globalFindAtomW*(lpString: Lpcwstr): Atom{.stdcall, dynlib: "kernel32",
    importc: "GlobalFindAtomW".}
proc globalGetAtomNameW*(nAtom: Atom, lpBuffer: Lpwstr, nSize: Int32): Uint{.
    stdcall, dynlib: "kernel32", importc: "GlobalGetAtomNameW".}
proc addAtomW*(lpString: Lpcwstr): Atom{.stdcall, dynlib: "kernel32",
    importc: "AddAtomW".}
proc findAtomW*(lpString: Lpcwstr): Atom{.stdcall, dynlib: "kernel32",
    importc: "FindAtomW".}
proc getAtomNameW*(nAtom: Atom, lpBuffer: Lpwstr, nSize: Int32): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetAtomNameW".}
proc getProfileIntW*(lpAppName: Lpcwstr, lpKeyName: Lpcwstr, nDefault: Wint): Uint{.
    stdcall, dynlib: "kernel32", importc: "GetProfileIntW".}
proc getProfileStringW*(lpAppName: Lpcwstr, lpKeyName: Lpcwstr,
                        lpDefault: Lpcwstr, lpReturnedString: Lpwstr,
                        nSize: Dword): Dword{.stdcall, dynlib: "kernel32",
    importc: "GetProfileStringW".}
proc writeProfileStringW*(lpAppName: Lpcwstr, lpKeyName: Lpcwstr,
                          lpString: Lpcwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteProfileStringW".}
proc getProfileSectionW*(lpAppName: Lpcwstr, lpReturnedString: Lpwstr,
                         nSize: Dword): Dword{.stdcall, dynlib: "kernel32",
    importc: "GetProfileSectionW".}
proc writeProfileSectionW*(lpAppName: Lpcwstr, lpString: Lpcwstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteProfileSectionW".}
proc getPrivateProfileIntW*(lpAppName: Lpcwstr, lpKeyName: Lpcwstr,
                            nDefault: Wint, lpFileName: Lpcwstr): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetPrivateProfileIntW".}
proc getPrivateProfileStringW*(lpAppName: Lpcwstr, lpKeyName: Lpcwstr,
                               lpDefault: Lpcwstr, lpReturnedString: Lpwstr,
                               nSize: Dword, lpFileName: Lpcwstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetPrivateProfileStringW".}
proc writePrivateProfileStringW*(lpAppName: Lpcwstr, lpKeyName: Lpcwstr,
                                 lpString: Lpcwstr, lpFileName: Lpcwstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WritePrivateProfileStringW".}
proc getPrivateProfileSectionW*(lpAppName: Lpcwstr, lpReturnedString: Lpwstr,
                                nSize: Dword, lpFileName: Lpcwstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetPrivateProfileSectionW".}
proc writePrivateProfileSectionW*(lpAppName: Lpcwstr, lpString: Lpcwstr,
                                  lpFileName: Lpcwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WritePrivateProfileSectionW".}
proc getDriveTypeW*(lpRootPathName: Lpcwstr): Uint{.stdcall, dynlib: "kernel32",
    importc: "GetDriveTypeW".}
proc getSystemDirectoryW*(lpBuffer: Lpwstr, uSize: Uint): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetSystemDirectoryW".}
proc getTempPathW*(nBufferLength: Dword, lpBuffer: Lpwstr): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetTempPathW".}
proc getTempFileNameW*(lpPathName: Lpcwstr, lpPrefixString: Lpcwstr,
                       uUnique: Uint, lpTempFileName: Lpwstr): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetTempFileNameW".}
proc getWindowsDirectoryW*(lpBuffer: Lpwstr, uSize: Uint): Uint{.stdcall,
    dynlib: "kernel32", importc: "GetWindowsDirectoryW".}
proc setCurrentDirectoryW*(lpPathName: Lpcwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetCurrentDirectoryW".}
proc getCurrentDirectoryW*(nBufferLength: Dword, lpBuffer: Lpwstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetCurrentDirectoryW".}
proc getDiskFreeSpaceW*(lpRootPathName: Lpcwstr, lpSectorsPerCluster: Lpdword,
                        lpBytesPerSector: Lpdword,
                        lpNumberOfFreeClusters: Lpdword,
                        lpTotalNumberOfClusters: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetDiskFreeSpaceW".}
proc createDirectoryW*(lpPathName: Lpcwstr,
                       lpSecurityAttributes: LpsecurityAttributes): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateDirectoryW".}
proc createDirectoryExW*(lpTemplateDirectory: Lpcwstr, lpNewDirectory: Lpcwstr,
                         lpSecurityAttributes: LpsecurityAttributes): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateDirectoryExW".}
proc removeDirectoryW*(lpPathName: Lpcwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "RemoveDirectoryW".}
proc getFullPathNameW*(lpFileName: Lpcwstr, nBufferLength: Dword,
                       lpBuffer: Lpwstr, lpFilePart: var Lpwstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetFullPathNameW".}
proc defineDosDeviceW*(dwFlags: Dword, lpDeviceName: Lpcwstr,
                       lpTargetPath: Lpcwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "DefineDosDeviceW".}
proc queryDosDeviceW*(lpDeviceName: Lpcwstr, lpTargetPath: Lpwstr,
                      ucchMax: Dword): Dword{.stdcall, dynlib: "kernel32",
    importc: "QueryDosDeviceW".}
proc createFileW*(lpFileName: Lpcwstr, dwDesiredAccess: Dword,
                  dwShareMode: Dword,
                  lpSecurityAttributes: LpsecurityAttributes,
                  dwCreationDisposition: Dword, dwFlagsAndAttributes: Dword,
                  hTemplateFile: Handle): Handle{.stdcall, dynlib: "kernel32",
    importc: "CreateFileW".}
proc setFileAttributesW*(lpFileName: Lpcwstr, dwFileAttributes: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetFileAttributesW".}
proc getFileAttributesW*(lpFileName: Lpcwstr): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetFileAttributesW".}
proc getCompressedFileSizeW*(lpFileName: Lpcwstr, lpFileSizeHigh: Lpdword): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetCompressedFileSizeW".}
proc deleteFileW*(lpFileName: Lpcwstr): Winbool{.stdcall, dynlib: "kernel32",
    importc: "DeleteFileW".}
proc searchPathW*(lpPath: Lpcwstr, lpFileName: Lpcwstr, lpExtension: Lpcwstr,
                  nBufferLength: Dword, lpBuffer: Lpwstr, lpFilePart: Lpwstr): Dword{.
    stdcall, dynlib: "kernel32", importc: "SearchPathW".}
proc copyFileW*(lpExistingFileName: Lpcwstr, lpNewFileName: Lpcwstr,
                bFailIfExists: Winbool): Winbool{.stdcall, dynlib: "kernel32",
    importc: "CopyFileW".}
proc moveFileW*(lpExistingFileName: Lpcwstr, lpNewFileName: Lpcwstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "MoveFileW".}
proc moveFileExW*(lpExistingFileName: Lpcwstr, lpNewFileName: Lpcwstr,
                  dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "MoveFileExW".}
proc createNamedPipeW*(lpName: Lpcwstr, dwOpenMode: Dword, dwPipeMode: Dword,
                       nMaxInstances: Dword, nOutBufferSize: Dword,
                       nInBufferSize: Dword, nDefaultTimeOut: Dword,
                       lpSecurityAttributes: LpsecurityAttributes): Handle{.
    stdcall, dynlib: "kernel32", importc: "CreateNamedPipeW".}
proc getNamedPipeHandleStateW*(hNamedPipe: Handle, lpState: Lpdword,
                               lpCurInstances: Lpdword,
                               lpMaxCollectionCount: Lpdword,
                               lpCollectDataTimeout: Lpdword,
                               lpUserName: Lpwstr, nMaxUserNameSize: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetNamedPipeHandleStateW".}
proc callNamedPipeW*(lpNamedPipeName: Lpcwstr, lpInBuffer: Lpvoid,
                     nInBufferSize: Dword, lpOutBuffer: Lpvoid,
                     nOutBufferSize: Dword, lpBytesRead: Lpdword,
                     nTimeOut: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "CallNamedPipeW".}
proc waitNamedPipeW*(lpNamedPipeName: Lpcwstr, nTimeOut: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WaitNamedPipeW".}
proc setVolumeLabelW*(lpRootPathName: Lpcwstr, lpVolumeName: Lpcwstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetVolumeLabelW".}
proc getVolumeInformationW*(lpRootPathName: Lpcwstr, lpVolumeNameBuffer: Lpwstr,
                            nVolumeNameSize: Dword,
                            lpVolumeSerialNumber: Lpdword,
                            lpMaximumComponentLength: Lpdword,
                            lpFileSystemFlags: Lpdword,
                            lpFileSystemNameBuffer: Lpwstr,
                            nFileSystemNameSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVolumeInformationW".}
proc clearEventLogW*(hEventLog: Handle, lpBackupFileName: Lpcwstr): Winbool{.
    stdcall, dynlib: "advapi32", importc: "ClearEventLogW".}
proc backupEventLogW*(hEventLog: Handle, lpBackupFileName: Lpcwstr): Winbool{.
    stdcall, dynlib: "advapi32", importc: "BackupEventLogW".}
proc openEventLogW*(lpUNCServerName: Lpcwstr, lpSourceName: Lpcwstr): Handle{.
    stdcall, dynlib: "advapi32", importc: "OpenEventLogW".}
proc registerEventSourceW*(lpUNCServerName: Lpcwstr, lpSourceName: Lpcwstr): Handle{.
    stdcall, dynlib: "advapi32", importc: "RegisterEventSourceW".}
proc openBackupEventLogW*(lpUNCServerName: Lpcwstr, lpFileName: Lpcwstr): Handle{.
    stdcall, dynlib: "advapi32", importc: "OpenBackupEventLogW".}
proc readEventLogW*(hEventLog: Handle, dwReadFlags: Dword,
                    dwRecordOffset: Dword, lpBuffer: Lpvoid,
                    nNumberOfBytesToRead: Dword, pnBytesRead: Lpdword,
                    pnMinNumberOfBytesNeeded: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ReadEventLogW".}
proc reportEventW*(hEventLog: Handle, wType: Int16, wCategory: Int16,
                   dwEventID: Dword, lpUserSid: Psid, wNumStrings: Int16,
                   dwDataSize: Dword, lpStrings: Lppcwstr, lpRawData: Lpvoid): Winbool{.
    stdcall, dynlib: "advapi32", importc: "ReportEventW".}
proc accessCheckAndAuditAlarmW*(SubsystemName: Lpcwstr, HandleId: Lpvoid,
                                ObjectTypeName: Lpwstr, ObjectName: Lpwstr,
                                SecurityDescriptor: PsecurityDescriptor,
                                DesiredAccess: Dword,
                                GenericMapping: PgenericMapping,
                                ObjectCreation: Winbool, GrantedAccess: Lpdword,
                                AccessStatus: Lpbool, pfGenerateOnClose: Lpbool): Winbool{.
    stdcall, dynlib: "advapi32", importc: "AccessCheckAndAuditAlarmW".}
proc objectOpenAuditAlarmW*(SubsystemName: Lpcwstr, HandleId: Lpvoid,
                            ObjectTypeName: Lpwstr, ObjectName: Lpwstr,
                            pSecurityDescriptor: PsecurityDescriptor,
                            ClientToken: Handle, DesiredAccess: Dword,
                            GrantedAccess: Dword, Privileges: PprivilegeSet,
                            ObjectCreation: Winbool, AccessGranted: Winbool,
                            GenerateOnClose: Lpbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectOpenAuditAlarmW".}
proc objectPrivilegeAuditAlarmW*(SubsystemName: Lpcwstr, HandleId: Lpvoid,
                                 ClientToken: Handle, DesiredAccess: Dword,
                                 Privileges: PprivilegeSet,
                                 AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmW".}
proc objectCloseAuditAlarmW*(SubsystemName: Lpcwstr, HandleId: Lpvoid,
                             GenerateOnClose: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectCloseAuditAlarmW".}
proc privilegedServiceAuditAlarmW*(SubsystemName: Lpcwstr, ServiceName: Lpcwstr,
                                   ClientToken: Handle,
                                   Privileges: PprivilegeSet,
                                   AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmW".}
proc setFileSecurityW*(lpFileName: Lpcwstr,
                       SecurityInformation: SecurityInformation,
                       pSecurityDescriptor: PsecurityDescriptor): Winbool{.
    stdcall, dynlib: "advapi32", importc: "SetFileSecurityW".}
proc getFileSecurityW*(lpFileName: Lpcwstr,
                       RequestedInformation: SecurityInformation,
                       pSecurityDescriptor: PsecurityDescriptor,
                       nLength: Dword, lpnLengthNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetFileSecurityW".}
proc findFirstChangeNotificationW*(lpPathName: Lpcwstr, bWatchSubtree: Winbool,
                                   dwNotifyFilter: Dword): Handle{.stdcall,
    dynlib: "kernel32", importc: "FindFirstChangeNotificationW".}
proc isBadStringPtrW*(lpsz: Lpcwstr, ucchMax: Uint): Winbool{.stdcall,
    dynlib: "kernel32", importc: "IsBadStringPtrW".}
proc lookupAccountSidW*(lpSystemName: Lpcwstr, Sid: Psid, Name: Lpwstr,
                        cbName: Lpdword, ReferencedDomainName: Lpwstr,
                        cbReferencedDomainName: Lpdword, peUse: PsidNameUse): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LookupAccountSidW".}
proc lookupAccountNameW*(lpSystemName: Lpcwstr, lpAccountName: Lpcwstr,
                         Sid: Psid, cbSid: Lpdword,
                         ReferencedDomainName: Lpwstr,
                         cbReferencedDomainName: Lpdword, peUse: PsidNameUse): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LookupAccountNameW".}
proc lookupPrivilegeValueW*(lpSystemName: Lpcwstr, lpName: Lpcwstr,
                            lpLuid: Pluid): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeValueW".}
proc lookupPrivilegeNameW*(lpSystemName: Lpcwstr, lpLuid: Pluid, lpName: Lpwstr,
                           cbName: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeNameW".}
proc lookupPrivilegeDisplayNameW*(lpSystemName: Lpcwstr, lpName: Lpcwstr,
                                  lpDisplayName: Lpwstr, cbDisplayName: Lpdword,
                                  lpLanguageId: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameW".}
proc buildCommDCBW*(lpDef: Lpcwstr, lpDCB: Lpdcb): Winbool{.stdcall,
    dynlib: "kernel32", importc: "BuildCommDCBW".}
proc buildCommDCBAndTimeoutsW*(lpDef: Lpcwstr, lpDCB: Lpdcb,
                               lpCommTimeouts: Lpcommtimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsW".}
proc commConfigDialogW*(lpszName: Lpcwstr, wnd: Hwnd, lpCC: Lpcommconfig): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CommConfigDialogW".}
proc getDefaultCommConfigW*(lpszName: Lpcwstr, lpCC: Lpcommconfig,
                            lpdwSize: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetDefaultCommConfigW".}
proc setDefaultCommConfigW*(lpszName: Lpcwstr, lpCC: Lpcommconfig, dwSize: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetDefaultCommConfigW".}
proc getComputerNameW*(lpBuffer: Lpwstr, nSize: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetComputerNameW".}
proc setComputerNameW*(lpComputerName: Lpcwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetComputerNameW".}
proc getUserNameW*(lpBuffer: Lpwstr, nSize: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetUserNameW".}
proc loadKeyboardLayoutW*(pwszKLID: Lpcwstr, Flags: Uint): Hkl{.stdcall,
    dynlib: "user32", importc: "LoadKeyboardLayoutW".}
proc getKeyboardLayoutNameW*(pwszKLID: Lpwstr): Winbool{.stdcall,
    dynlib: "user32", importc: "GetKeyboardLayoutNameW".}
proc createDesktopW*(lpszDesktop: Lpwstr, lpszDevice: Lpwstr,
                     pDevmodew: Lpdevmodew, dwFlags: Dword,
                     dwDesiredAccess: Dword, lpsa: LpsecurityAttributes): Hdesk{.
    stdcall, dynlib: "user32", importc: "CreateDesktopW".}
proc openDesktopW*(lpszDesktop: Lpwstr, dwFlags: Dword, fInherit: Winbool,
                   dwDesiredAccess: Dword): Hdesk{.stdcall, dynlib: "user32",
    importc: "OpenDesktopW".}
proc enumDesktopsW*(hwinsta: Hwinsta, lpEnumFunc: Desktopenumproc,
                    lp: Lparam): Winbool{.stdcall, dynlib: "user32",
    importc: "EnumDesktopsW".}
proc createWindowStationW*(lpwinsta: Lpwstr, dwReserved: Dword,
                           dwDesiredAccess: Dword, lpsa: LpsecurityAttributes): Hwinsta{.
    stdcall, dynlib: "user32", importc: "CreateWindowStationW".}
proc openWindowStationW*(lpszWinSta: Lpwstr, fInherit: Winbool,
                         dwDesiredAccess: Dword): Hwinsta{.stdcall,
    dynlib: "user32", importc: "OpenWindowStationW".}
proc enumWindowStationsW*(lpEnumFunc: Enumwindowstationproc, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "EnumWindowStationsW".}
proc getUserObjectInformationW*(hObj: Handle, nIndex: Int32, pvInfo: Pvoid,
                                nLength: Dword, lpnLengthNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "user32", importc: "GetUserObjectInformationW".}
proc setUserObjectInformationW*(hObj: Handle, nIndex: Int32, pvInfo: Pvoid,
                                nLength: Dword): Winbool{.stdcall,
    dynlib: "user32", importc: "SetUserObjectInformationW".}
proc registerWindowMessageW*(lpString: Lpcwstr): Uint{.stdcall,
    dynlib: "user32", importc: "RegisterWindowMessageW".}
proc getMessageW*(lpMsg: Lpmsg, wnd: Hwnd, wMsgFilterMin: Uint,
                  wMsgFilterMax: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "GetMessageW".}
proc dispatchMessageW*(lpMsg: Lpmsg): Long{.stdcall, dynlib: "user32",
    importc: "DispatchMessageW".}
proc peekMessageW*(lpMsg: Lpmsg, wnd: Hwnd, wMsgFilterMin: Uint,
                   wMsgFilterMax: Uint, wRemoveMsg: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "PeekMessageW".}
proc sendMessageW*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "SendMessageW".}
proc sendMessageTimeoutW*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam,
                          fuFlags: Uint, uTimeout: Uint, lpdwResult: Lpdword): Lresult{.
    stdcall, dynlib: "user32", importc: "SendMessageTimeoutW".}
proc sendNotifyMessageW*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "SendNotifyMessageW".}
proc sendMessageCallbackW*(wnd: Hwnd, Msg: Uint, wp: Wparam,
                           lp: Lparam, lpResultCallBack: Sendasyncproc,
                           dwData: Dword): Winbool{.stdcall, dynlib: "user32",
    importc: "SendMessageCallbackW".}
proc postMessageW*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "PostMessageW".}
proc postThreadMessageW*(idThread: Dword, Msg: Uint, wp: Wparam,
                         lp: Lparam): Winbool{.stdcall, dynlib: "user32",
    importc: "PostThreadMessageW".}
proc defWindowProcW*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "DefWindowProcW".}
proc callWindowProcW*(lpPrevWndFunc: Wndproc, wnd: Hwnd, Msg: Uint,
                      wp: Wparam, lp: Lparam): Lresult{.stdcall,
    dynlib: "user32", importc: "CallWindowProcW".}
proc registerClassW*(lpWndClass: Lpwndclassw): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassW".}
proc unregisterClassW*(lpClassName: Lpcwstr, hInstance: Hinst): Winbool{.
    stdcall, dynlib: "user32", importc: "UnregisterClassW".}
proc getClassInfoW*(hInstance: Hinst, lpClassName: Lpcwstr,
                    lpWndClass: Lpwndclass): Winbool{.stdcall, dynlib: "user32",
    importc: "GetClassInfoW".}
proc registerClassExW*(para1: Lpwndclassexw): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassExW".}
proc getClassInfoExW*(para1: Hinst, para2: Lpcwstr, para3: Lpwndclassex): Winbool{.
    stdcall, dynlib: "user32", importc: "GetClassInfoExW".}
proc createWindowExW*(dwExStyle: Dword, lpClassName: Lpcwstr,
                      lpWindowName: Lpcwstr, dwStyle: Dword, X: Int32, Y: Int32,
                      nWidth: Int32, nHeight: Int32, hWndParent: Hwnd,
                      menu: Hmenu, hInstance: Hinst, lpParam: Lpvoid): Hwnd{.
    stdcall, dynlib: "user32", importc: "CreateWindowExW".}
proc createDialogParamW*(hInstance: Hinst, lpTemplateName: Lpcwstr,
                         hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                         dwInitParam: Lparam): Hwnd{.stdcall, dynlib: "user32",
    importc: "CreateDialogParamW".}
proc createDialogIndirectParamW*(hInstance: Hinst, lpTemplate: Lpcdlgtemplate,
                                 hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                                 dwInitParam: Lparam): Hwnd{.stdcall,
    dynlib: "user32", importc: "CreateDialogIndirectParamW".}
proc dialogBoxParamW*(hInstance: Hinst, lpTemplateName: Lpcwstr,
                      hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                      dwInitParam: Lparam): Int32{.stdcall, dynlib: "user32",
    importc: "DialogBoxParamW".}
proc dialogBoxIndirectParamW*(hInstance: Hinst, hDialogTemplate: Lpcdlgtemplate,
                              hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                              dwInitParam: Lparam): Int32{.stdcall,
    dynlib: "user32", importc: "DialogBoxIndirectParamW".}
proc setDlgItemTextW*(hDlg: Hwnd, nIDDlgItem: Int32, lpString: Lpcwstr): Winbool{.
    stdcall, dynlib: "user32", importc: "SetDlgItemTextW".}
proc getDlgItemTextW*(hDlg: Hwnd, nIDDlgItem: Int32, lpString: Lpwstr,
                      nMaxCount: Int32): Uint{.stdcall, dynlib: "user32",
    importc: "GetDlgItemTextW".}
proc sendDlgItemMessageW*(hDlg: Hwnd, nIDDlgItem: Int32, Msg: Uint,
                          wp: Wparam, lp: Lparam): Long{.stdcall,
    dynlib: "user32", importc: "SendDlgItemMessageW".}
proc defDlgProcW*(hDlg: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "DefDlgProcW".}
proc callMsgFilterW*(lpMsg: Lpmsg, nCode: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "CallMsgFilterW".}
proc registerClipboardFormatW*(lpszFormat: Lpcwstr): Uint{.stdcall,
    dynlib: "user32", importc: "RegisterClipboardFormatW".}
proc getClipboardFormatNameW*(format: Uint, lpszFormatName: Lpwstr,
                              cchMaxCount: Int32): Int32{.stdcall,
    dynlib: "user32", importc: "GetClipboardFormatNameW".}
proc charToOemW*(lpszSrc: Lpcwstr, lpszDst: Lpstr): Winbool{.stdcall,
    dynlib: "user32", importc: "CharToOemW".}
proc oemToCharW*(lpszSrc: Lpcstr, lpszDst: Lpwstr): Winbool{.stdcall,
    dynlib: "user32", importc: "OemToCharW".}
proc charToOemBuffW*(lpszSrc: Lpcwstr, lpszDst: Lpstr, cchDstLength: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "CharToOemBuffW".}
proc oemToCharBuffW*(lpszSrc: Lpcstr, lpszDst: Lpwstr, cchDstLength: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "OemToCharBuffW".}
proc charUpperW*(lpsz: Lpwstr): Lpwstr{.stdcall, dynlib: "user32",
                                        importc: "CharUpperW".}
proc charUpperBuffW*(lpsz: Lpwstr, cchLength: Dword): Dword{.stdcall,
    dynlib: "user32", importc: "CharUpperBuffW".}
proc charLowerW*(lpsz: Lpwstr): Lpwstr{.stdcall, dynlib: "user32",
                                        importc: "CharLowerW".}
proc charLowerBuffW*(lpsz: Lpwstr, cchLength: Dword): Dword{.stdcall,
    dynlib: "user32", importc: "CharLowerBuffW".}
proc charNextW*(lpsz: Lpcwstr): Lpwstr{.stdcall, dynlib: "user32",
                                        importc: "CharNextW".}
proc charPrevW*(lpszStart: Lpcwstr, lpszCurrent: Lpcwstr): Lpwstr{.stdcall,
    dynlib: "user32", importc: "CharPrevW".}
proc isCharAlphaW*(ch: Wchar): Winbool{.stdcall, dynlib: "user32",
                                        importc: "IsCharAlphaW".}
proc isCharAlphaNumericW*(ch: Wchar): Winbool{.stdcall, dynlib: "user32",
    importc: "IsCharAlphaNumericW".}
proc isCharUpperW*(ch: Wchar): Winbool{.stdcall, dynlib: "user32",
                                        importc: "IsCharUpperW".}
proc isCharLowerW*(ch: Wchar): Winbool{.stdcall, dynlib: "user32",
                                        importc: "IsCharLowerW".}
proc getKeyNameTextW*(lParam: Long, lpString: Lpwstr, nSize: Int32): Int32{.
    stdcall, dynlib: "user32", importc: "GetKeyNameTextW".}
proc vkKeyScanW*(ch: Wchar): Short{.stdcall, dynlib: "user32",
                                    importc: "VkKeyScanW".}
proc vkKeyScanExW*(ch: Wchar, dwhkl: Hkl): Short{.stdcall, dynlib: "user32",
    importc: "VkKeyScanExW".}
proc mapVirtualKeyW*(uCode: Uint, uMapType: Uint): Uint{.stdcall,
    dynlib: "user32", importc: "MapVirtualKeyW".}
proc mapVirtualKeyExW*(uCode: Uint, uMapType: Uint, dwhkl: Hkl): Uint{.stdcall,
    dynlib: "user32", importc: "MapVirtualKeyExW".}
proc loadAcceleratorsW*(hInstance: Hinst, lpTableName: Lpcwstr): Haccel{.
    stdcall, dynlib: "user32", importc: "LoadAcceleratorsW".}
proc createAcceleratorTableW*(para1: Lpaccel, para2: Int32): Haccel{.stdcall,
    dynlib: "user32", importc: "CreateAcceleratorTableW".}
proc copyAcceleratorTableW*(hAccelSrc: Haccel, lpAccelDst: Lpaccel,
                            cAccelEntries: Int32): Int32{.stdcall,
    dynlib: "user32", importc: "CopyAcceleratorTableW".}
proc translateAcceleratorW*(wnd: Hwnd, hAccTable: Haccel, lpMsg: Lpmsg): Int32{.
    stdcall, dynlib: "user32", importc: "TranslateAcceleratorW".}
proc loadMenuW*(hInstance: Hinst, lpMenuName: Lpcwstr): Hmenu{.stdcall,
    dynlib: "user32", importc: "LoadMenuW".}
proc loadMenuIndirectW*(lpMenuTemplate: Lpmenutemplate): Hmenu{.stdcall,
    dynlib: "user32", importc: "LoadMenuIndirectW".}
proc changeMenuW*(menu: Hmenu, cmd: Uint, lpszNewItem: Lpcwstr,
                  cmdInsert: Uint, flags: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "ChangeMenuW".}
proc getMenuStringW*(menu: Hmenu, uIDItem: Uint, lpString: Lpwstr,
                     nMaxCount: Int32, uFlag: Uint): Int32{.stdcall,
    dynlib: "user32", importc: "GetMenuStringW".}
proc insertMenuW*(menu: Hmenu, uPosition: Uint, uFlags: Uint, uIDNewItem: Uint,
                  lpNewItem: Lpcwstr): Winbool{.stdcall, dynlib: "user32",
    importc: "InsertMenuW".}
proc appendMenuW*(menu: Hmenu, uFlags: Uint, uIDNewItem: Uint,
                  lpNewItem: Lpcwstr): Winbool{.stdcall, dynlib: "user32",
    importc: "AppendMenuW".}
proc modifyMenuW*(hMnu: Hmenu, uPosition: Uint, uFlags: Uint, uIDNewItem: Uint,
                  lpNewItem: Lpcwstr): Winbool{.stdcall, dynlib: "user32",
    importc: "ModifyMenuW".}
proc insertMenuItemW*(para1: Hmenu, para2: Uint, para3: Winbool,
                      para4: Lpcmenuiteminfo): Winbool{.stdcall,
    dynlib: "user32", importc: "InsertMenuItemW".}
proc getMenuItemInfoW*(para1: Hmenu, para2: Uint, para3: Winbool,
                       para4: Lpmenuiteminfo): Winbool{.stdcall,
    dynlib: "user32", importc: "GetMenuItemInfoW".}
proc setMenuItemInfoW*(para1: Hmenu, para2: Uint, para3: Winbool,
                       para4: Lpcmenuiteminfo): Winbool{.stdcall,
    dynlib: "user32", importc: "SetMenuItemInfoW".}
proc drawTextW*(hDC: Hdc, lpString: Lpcwstr, nCount: Int32, lpRect: Lprect,
                uFormat: Uint): Int32{.stdcall, dynlib: "user32",
                                       importc: "DrawTextW".}
proc drawTextExW*(para1: Hdc, para2: Lpwstr, para3: Int32, para4: Lprect,
                  para5: Uint, para6: Lpdrawtextparams): Int32{.stdcall,
    dynlib: "user32", importc: "DrawTextExW".}
proc grayStringW*(hDC: Hdc, hBrush: Hbrush, lpOutputFunc: Graystringproc,
                  lpData: Lparam, nCount: Int32, X: Int32, Y: Int32,
                  nWidth: Int32, nHeight: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "GrayStringW".}
proc drawStateW*(para1: Hdc, para2: Hbrush, para3: Drawstateproc, para4: Lparam,
                 para5: Wparam, para6: Int32, para7: Int32, para8: Int32,
                 para9: Int32, para10: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "DrawStateW".}
proc tabbedTextOutW*(hDC: Hdc, X: Int32, Y: Int32, lpString: Lpcwstr,
                     nCount: Int32, nTabPositions: Int32,
                     lpnTabStopPositions: Lpint, nTabOrigin: Int32): Long{.
    stdcall, dynlib: "user32", importc: "TabbedTextOutW".}
proc getTabbedTextExtentW*(hDC: Hdc, lpString: Lpcwstr, nCount: Int32,
                           nTabPositions: Int32, lpnTabStopPositions: Lpint): Dword{.
    stdcall, dynlib: "user32", importc: "GetTabbedTextExtentW".}
proc setPropW*(wnd: Hwnd, lpString: Lpcwstr, hData: Handle): Winbool{.stdcall,
    dynlib: "user32", importc: "SetPropW".}
proc getPropW*(wnd: Hwnd, lpString: Lpcwstr): Handle{.stdcall,
    dynlib: "user32", importc: "GetPropW".}
proc removePropW*(wnd: Hwnd, lpString: Lpcwstr): Handle{.stdcall,
    dynlib: "user32", importc: "RemovePropW".}
proc enumPropsExW*(wnd: Hwnd, lpEnumFunc: Propenumprocex, lp: Lparam): Int32{.
    stdcall, dynlib: "user32", importc: "EnumPropsExW".}
proc enumPropsW*(wnd: Hwnd, lpEnumFunc: Propenumproc): Int32{.stdcall,
    dynlib: "user32", importc: "EnumPropsW".}
proc setWindowTextW*(wnd: Hwnd, lpString: Lpcwstr): Winbool{.stdcall,
    dynlib: "user32", importc: "SetWindowTextW".}
proc getWindowTextW*(wnd: Hwnd, lpString: Lpwstr, nMaxCount: Int32): Int32{.
    stdcall, dynlib: "user32", importc: "GetWindowTextW".}
proc getWindowTextLengthW*(wnd: Hwnd): Int32{.stdcall, dynlib: "user32",
    importc: "GetWindowTextLengthW".}
proc messageBoxW*(wnd: Hwnd, lpText: Lpcwstr, lpCaption: Lpcwstr, uType: Uint): Int32{.
    stdcall, dynlib: "user32", importc: "MessageBoxW".}
proc messageBoxExW*(wnd: Hwnd, lpText: Lpcwstr, lpCaption: Lpcwstr,
                    uType: Uint, wLanguageId: Int16): Int32{.stdcall,
    dynlib: "user32", importc: "MessageBoxExW".}
proc messageBoxIndirectW*(para1: Lpmsgboxparams): Int32{.stdcall,
    dynlib: "user32", importc: "MessageBoxIndirectW".}
proc getWindowLongW*(wnd: Hwnd, nIndex: Int32): Long{.stdcall,
    dynlib: "user32", importc: "GetWindowLongW".}
proc setWindowLongW*(wnd: Hwnd, nIndex: Int32, dwNewLong: Long): Long{.stdcall,
    dynlib: "user32", importc: "SetWindowLongW".}
proc getClassLongW*(wnd: Hwnd, nIndex: Int32): Dword{.stdcall,
    dynlib: "user32", importc: "GetClassLongW".}
proc setClassLongW*(wnd: Hwnd, nIndex: Int32, dwNewLong: Long): Dword{.stdcall,
    dynlib: "user32", importc: "SetClassLongW".}
when defined(cpu64):
  proc getWindowLongPtrW*(wnd: Hwnd, nIndex: Int32): LongPtr{.stdcall,
      dynlib: "user32", importc: "GetWindowLongPtrW".}
  proc setWindowLongPtrW*(wnd: Hwnd, nIndex: Int32, dwNewLong: LongPtr): LongPtr{.
      stdcall, dynlib: "user32", importc: "SetWindowLongPtrW".}
  proc getClassLongPtrW*(wnd: Hwnd, nIndex: Int32): LongPtr{.stdcall,
      dynlib: "user32", importc: "GetClassLongPtrW".}
  proc setClassLongPtrW*(wnd: Hwnd, nIndex: Int32, dwNewLong: LongPtr): LongPtr{.
      stdcall, dynlib: "user32", importc: "SetClassLongPtrW".}
else:
  proc GetWindowLongPtrW*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
      dynlib: "user32", importc: "GetWindowLongW".}
  proc SetWindowLongPtrW*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
      stdcall, dynlib: "user32", importc: "SetWindowLongW".}
  proc GetClassLongPtrW*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
      dynlib: "user32", importc: "GetClassLongW".}
  proc SetClassLongPtrW*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
      stdcall, dynlib: "user32", importc: "SetClassLongW".}
proc findWindowW*(lpClassName: Lpcwstr, lpWindowName: Lpcwstr): Hwnd{.stdcall,
    dynlib: "user32", importc: "FindWindowW".}
proc findWindowExW*(para1: Hwnd, para2: Hwnd, para3: Lpcwstr, para4: Lpcwstr): Hwnd{.
    stdcall, dynlib: "user32", importc: "FindWindowExW".}
proc getClassNameW*(wnd: Hwnd, lpClassName: Lpwstr, nMaxCount: Int32): Int32{.
    stdcall, dynlib: "user32", importc: "GetClassNameW".}
proc setWindowsHookExW*(idHook: Int32, lpfn: Hookproc, hmod: Hinst,
                        dwThreadId: Dword): Hhook{.stdcall, dynlib: "user32",
    importc: "SetWindowsHookExW".}
proc loadBitmapW*(hInstance: Hinst, lpBitmapName: Lpcwstr): Hbitmap{.stdcall,
    dynlib: "user32", importc: "LoadBitmapW".}
proc loadCursorW*(hInstance: Hinst, lpCursorName: Lpcwstr): Hcursor{.stdcall,
    dynlib: "user32", importc: "LoadCursorW".}
proc loadCursorFromFileW*(lpFileName: Lpcwstr): Hcursor{.stdcall,
    dynlib: "user32", importc: "LoadCursorFromFileW".}
proc loadIconW*(hInstance: Hinst, lpIconName: Lpcwstr): Hicon{.stdcall,
    dynlib: "user32", importc: "LoadIconW".}
proc loadImageW*(para1: Hinst, para2: Lpcwstr, para3: Uint, para4: Int32,
                 para5: Int32, para6: Uint): Handle{.stdcall, dynlib: "user32",
    importc: "LoadImageW".}
proc loadStringW*(hInstance: Hinst, uID: Uint, lpBuffer: Lpwstr,
                  nBufferMax: Int32): Int32{.stdcall, dynlib: "user32",
    importc: "LoadStringW".}
proc isDialogMessageW*(hDlg: Hwnd, lpMsg: Lpmsg): Winbool{.stdcall,
    dynlib: "user32", importc: "IsDialogMessageW".}
proc dlgDirListW*(hDlg: Hwnd, lpPathSpec: Lpwstr, nIDListBox: Int32,
                  nIDStaticPath: Int32, uFileType: Uint): Int32{.stdcall,
    dynlib: "user32", importc: "DlgDirListW".}
proc dlgDirSelectExW*(hDlg: Hwnd, lpString: Lpwstr, nCount: Int32,
                      nIDListBox: Int32): Winbool{.stdcall, dynlib: "user32",
    importc: "DlgDirSelectExW".}
proc dlgDirListComboBoxW*(hDlg: Hwnd, lpPathSpec: Lpwstr, nIDComboBox: Int32,
                          nIDStaticPath: Int32, uFiletype: Uint): Int32{.
    stdcall, dynlib: "user32", importc: "DlgDirListComboBoxW".}
proc dlgDirSelectComboBoxExW*(hDlg: Hwnd, lpString: Lpwstr, nCount: Int32,
                              nIDComboBox: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "DlgDirSelectComboBoxExW".}
proc defFrameProcW*(wnd: Hwnd, hWndMDIClient: Hwnd, uMsg: Uint, w: Wparam,
                    lp: Lparam): Lresult{.stdcall, dynlib: "user32",
    importc: "DefFrameProcW".}
proc defMDIChildProcW*(wnd: Hwnd, uMsg: Uint, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "DefMDIChildProcW".}
proc createMDIWindowW*(lpClassName: Lpwstr, lpWindowName: Lpwstr,
                       dwStyle: Dword, X: Int32, Y: Int32, nWidth: Int32,
                       nHeight: Int32, hWndParent: Hwnd, hInstance: Hinst,
                       lp: Lparam): Hwnd{.stdcall, dynlib: "user32",
    importc: "CreateMDIWindowW".}
proc winHelpW*(hWndMain: Hwnd, lpszHelp: Lpcwstr, uCommand: Uint, dwData: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "WinHelpW".}
proc changeDisplaySettingsW*(lpDevMode: Lpdevmodew, dwFlags: Dword): Long{.
    stdcall, dynlib: "user32", importc: "ChangeDisplaySettingsW".}
proc enumDisplaySettingsW*(lpszDeviceName: Lpcwstr, iModeNum: Dword,
                           lpDevMode: Lpdevmodew): Winbool{.stdcall,
    dynlib: "user32", importc: "EnumDisplaySettingsW".}
proc systemParametersInfoW*(uiAction: Uint, uiParam: Uint, pvParam: Pvoid,
                            fWinIni: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "SystemParametersInfoW".}
proc addFontResourceW*(para1: Lpcwstr): Int32{.stdcall, dynlib: "gdi32",
    importc: "AddFontResourceW".}
proc copyMetaFileW*(para1: Hmetafile, para2: Lpcwstr): Hmetafile{.stdcall,
    dynlib: "gdi32", importc: "CopyMetaFileW".}
proc createFontIndirectW*(para1: Plogfont): Hfont{.stdcall, dynlib: "gdi32",
    importc: "CreateFontIndirectW".}
proc createFontIndirectW*(para1: var Logfont): Hfont{.stdcall, dynlib: "gdi32",
    importc: "CreateFontIndirectW".}
proc createFontW*(para1: Int32, para2: Int32, para3: Int32, para4: Int32,
                  para5: Int32, para6: Dword, para7: Dword, para8: Dword,
                  para9: Dword, para10: Dword, para11: Dword, para12: Dword,
                  para13: Dword, para14: Lpcwstr): Hfont{.stdcall,
    dynlib: "gdi32", importc: "CreateFontW".}
proc createICW*(para1: Lpcwstr, para2: Lpcwstr, para3: Lpcwstr,
                para4: Lpdevmodew): Hdc{.stdcall, dynlib: "gdi32",
    importc: "CreateICW".}
proc createMetaFileW*(para1: Lpcwstr): Hdc{.stdcall, dynlib: "gdi32",
    importc: "CreateMetaFileW".}
proc createScalableFontResourceW*(para1: Dword, para2: Lpcwstr, para3: Lpcwstr,
                                  para4: Lpcwstr): Winbool{.stdcall,
    dynlib: "gdi32", importc: "CreateScalableFontResourceW".}
proc enumFontFamiliesExW*(para1: Hdc, para2: Lplogfont, para3: Fontenumexproc,
                          para4: Lparam, para5: Dword): Int32{.stdcall,
    dynlib: "gdi32", importc: "EnumFontFamiliesExW".}
proc enumFontFamiliesW*(para1: Hdc, para2: Lpcwstr, para3: Fontenumproc,
                        para4: Lparam): Int32{.stdcall, dynlib: "gdi32",
    importc: "EnumFontFamiliesW".}
proc enumFontsW*(para1: Hdc, para2: Lpcwstr, para3: Enumfontsproc, para4: Lparam): Int32{.
    stdcall, dynlib: "gdi32", importc: "EnumFontsW".}
proc enumFontsW*(para1: Hdc, para2: Lpcwstr, para3: Enumfontsproc,
                 para4: Pointer): Int32{.stdcall, dynlib: "gdi32",
    importc: "EnumFontsW".}
proc getCharWidthW*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidthW".}
proc getCharWidth32W*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidth32W".}
proc getCharWidthFloatW*(para1: Hdc, para2: Uint, para3: Uint, para4: ptr Float32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidthFloatW".}
proc getCharABCWidthsW*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpabc): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsW".}
proc getCharABCWidthsFloatW*(para1: Hdc, para2: Uint, para3: Uint,
                             para4: Lpabcfloat): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCharABCWidthsFloatW".}
proc getGlyphOutlineW*(para1: Hdc, para2: Uint, para3: Uint,
                       para4: Lpglyphmetrics, para5: Dword, para6: Lpvoid,
                       para7: Pmat2): Dword{.stdcall, dynlib: "gdi32",
    importc: "GetGlyphOutlineW".}
proc getMetaFileW*(para1: Lpcwstr): Hmetafile{.stdcall, dynlib: "gdi32",
    importc: "GetMetaFileW".}
proc getOutlineTextMetricsW*(para1: Hdc, para2: Uint, para3: Lpoutlinetextmetric): Uint{.
    stdcall, dynlib: "gdi32", importc: "GetOutlineTextMetricsW".}
proc getTextExtentPointW*(para1: Hdc, para2: Lpcwstr, para3: Int32,
                          para4: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetTextExtentPointW".}
proc getTextExtentPoint32W*(para1: Hdc, para2: Lpcwstr, para3: Int32,
                            para4: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetTextExtentPoint32W".}
proc getTextExtentExPointW*(para1: Hdc, para2: Lpcwstr, para3: Int32,
                            para4: Int32, para5: Lpint, para6: Lpint,
                            para7: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetTextExtentExPointW".}
proc getCharacterPlacementW*(para1: Hdc, para2: Lpcwstr, para3: Int32,
                             para4: Int32, para5: LpgcpResults, para6: Dword): Dword{.
    stdcall, dynlib: "gdi32", importc: "GetCharacterPlacementW".}
proc resetDCW*(para1: Hdc, para2: Lpdevmodew): Hdc{.stdcall, dynlib: "gdi32",
    importc: "ResetDCW".}
proc removeFontResourceW*(para1: Lpcwstr): Winbool{.stdcall, dynlib: "gdi32",
    importc: "RemoveFontResourceW".}
proc copyEnhMetaFileW*(para1: Henhmetafile, para2: Lpcwstr): Henhmetafile{.
    stdcall, dynlib: "gdi32", importc: "CopyEnhMetaFileW".}
proc createEnhMetaFileW*(para1: Hdc, para2: Lpcwstr, para3: Lprect,
                         para4: Lpcwstr): Hdc{.stdcall, dynlib: "gdi32",
    importc: "CreateEnhMetaFileW".}
proc getEnhMetaFileW*(para1: Lpcwstr): Henhmetafile{.stdcall, dynlib: "gdi32",
    importc: "GetEnhMetaFileW".}
proc getEnhMetaFileDescriptionW*(para1: Henhmetafile, para2: Uint, para3: Lpwstr): Uint{.
    stdcall, dynlib: "gdi32", importc: "GetEnhMetaFileDescriptionW".}
proc getTextMetricsW*(para1: Hdc, para2: Lptextmetric): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetTextMetricsW".}
proc startDocW*(para1: Hdc, para2: Pdocinfo): Int32{.stdcall, dynlib: "gdi32",
    importc: "StartDocW".}
proc getObjectW*(para1: Hgdiobj, para2: Int32, para3: Lpvoid): Int32{.stdcall,
    dynlib: "gdi32", importc: "GetObjectW".}
proc textOutW*(para1: Hdc, para2: Int32, para3: Int32, para4: Lpcwstr,
               para5: Int32): Winbool{.stdcall, dynlib: "gdi32",
                                       importc: "TextOutW".}
proc extTextOutW*(para1: Hdc, para2: Int32, para3: Int32, para4: Uint,
                  para5: Lprect, para6: Lpcwstr, para7: Uint, para8: Lpint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "ExtTextOutW".}
proc polyTextOutW*(para1: Hdc, para2: Ppolytext, para3: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyTextOutW".}
proc getTextFaceW*(para1: Hdc, para2: Int32, para3: Lpwstr): Int32{.stdcall,
    dynlib: "gdi32", importc: "GetTextFaceW".}
proc getKerningPairsW*(para1: Hdc, para2: Dword, para3: Lpkerningpair): Dword{.
    stdcall, dynlib: "gdi32", importc: "GetKerningPairsW".}
proc getLogColorSpaceW*(para1: Hcolorspace, para2: Lplogcolorspace, para3: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetLogColorSpaceW".}
proc createColorSpaceW*(para1: Lplogcolorspace): Hcolorspace{.stdcall,
    dynlib: "gdi32", importc: "CreateColorSpaceW".}
proc getICMProfileW*(para1: Hdc, para2: Dword, para3: Lpwstr): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetICMProfileW".}
proc setICMProfileW*(para1: Hdc, para2: Lpwstr): Winbool{.stdcall,
    dynlib: "gdi32", importc: "SetICMProfileW".}
proc updateICMRegKeyW*(para1: Dword, para2: Dword, para3: Lpwstr, para4: Uint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "UpdateICMRegKeyW".}
proc enumICMProfilesW*(para1: Hdc, para2: Icmenumproc, para3: Lparam): Int32{.
    stdcall, dynlib: "gdi32", importc: "EnumICMProfilesW".}
proc createPropertySheetPageW*(lppsp: Lpcpropsheetpage): Hpropsheetpage{.
    stdcall, dynlib: "comctl32", importc: "CreatePropertySheetPageW".}
proc propertySheetW*(lppsph: Lpcpropsheetheader): Int32{.stdcall,
    dynlib: "comctl32", importc: "PropertySheetW".}
proc imageListLoadImageW*(hi: Hinst, lpbmp: Lpcwstr, cx: Int32, cGrow: Int32,
                           crMask: Colorref, uType: Uint, uFlags: Uint): Himagelist{.
    stdcall, dynlib: "comctl32", importc: "ImageList_LoadImageW".}
proc createStatusWindowW*(style: Long, lpszText: Lpcwstr, hwndParent: Hwnd,
                          wID: Uint): Hwnd{.stdcall, dynlib: "comctl32",
    importc: "CreateStatusWindowW".}
proc drawStatusTextW*(hDC: Hdc, lprc: Lprect, pszText: Lpcwstr, uFlags: Uint){.
    stdcall, dynlib: "comctl32", importc: "DrawStatusTextW".}
proc getOpenFileNameW*(para1: Lpopenfilename): Winbool{.stdcall,
    dynlib: "comdlg32", importc: "GetOpenFileNameW".}
proc getSaveFileNameW*(para1: Lpopenfilename): Winbool{.stdcall,
    dynlib: "comdlg32", importc: "GetSaveFileNameW".}
proc getFileTitleW*(para1: Lpcwstr, para2: Lpwstr, para3: Int16): Int{.stdcall,
    dynlib: "comdlg32", importc: "GetFileTitleW".}
proc chooseColorW*(para1: Lpchoosecolor): Winbool{.stdcall, dynlib: "comdlg32",
    importc: "ChooseColorW".}
proc replaceTextW*(para1: Lpfindreplace): Hwnd{.stdcall, dynlib: "comdlg32",
    importc: "ReplaceTextW".}
proc chooseFontW*(para1: Lpchoosefont): Winbool{.stdcall, dynlib: "comdlg32",
    importc: "ChooseFontW".}
proc findTextW*(para1: Lpfindreplace): Hwnd{.stdcall, dynlib: "comdlg32",
    importc: "FindTextW".}
proc printDlgW*(para1: Lpprintdlg): Winbool{.stdcall, dynlib: "comdlg32",
    importc: "PrintDlgW".}
proc pageSetupDlgW*(para1: Lppagesetupdlg): Winbool{.stdcall,
    dynlib: "comdlg32", importc: "PageSetupDlgW".}
proc createProcessW*(lpApplicationName: Lpcwstr, lpCommandLine: Lpwstr,
                     lpProcessAttributes: LpsecurityAttributes,
                     lpThreadAttributes: LpsecurityAttributes,
                     bInheritHandles: Winbool, dwCreationFlags: Dword,
                     lpEnvironment: Lpvoid, lpCurrentDirectory: Lpcwstr,
                     lpStartupInfo: Lpstartupinfo,
                     lpProcessInformation: LpprocessInformation): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateProcessW".}
proc getStartupInfoW*(lpStartupInfo: Lpstartupinfo){.stdcall,
    dynlib: "kernel32", importc: "GetStartupInfoW".}
proc findFirstFileW*(lpFileName: Lpcwstr, lpFindFileData: Lpwin32FindDataw): Handle{.
    stdcall, dynlib: "kernel32", importc: "FindFirstFileW".}
proc findNextFileW*(hFindFile: Handle, lpFindFileData: Lpwin32FindDataw): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FindNextFileW".}
proc getVersionExW*(VersionInformation: Lposversioninfow): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVersionExW".}
proc createWindowW*(lpClassName: Lpcwstr, lpWindowName: Lpcwstr, dwStyle: Dword,
                    X: Int32, Y: Int32, nWidth: Int32, nHeight: Int32,
                    hWndParent: Hwnd, menu: Hmenu, hInstance: Hinst,
                    lpParam: Lpvoid): Hwnd
proc createDialogW*(hInstance: Hinst, lpName: Lpcwstr, hWndParent: Hwnd,
                    lpDialogFunc: Dlgproc): Hwnd
proc createDialogIndirectW*(hInstance: Hinst, lpTemplate: Lpcdlgtemplate,
                            hWndParent: Hwnd, lpDialogFunc: Dlgproc): Hwnd
proc dialogBoxW*(hInstance: Hinst, lpTemplate: Lpcwstr, hWndParent: Hwnd,
                 lpDialogFunc: Dlgproc): Int32
proc dialogBoxIndirectW*(hInstance: Hinst, lpTemplate: Lpcdlgtemplate,
                         hWndParent: Hwnd, lpDialogFunc: Dlgproc): Int32
proc createDCW*(para1: Lpcwstr, para2: Lpcwstr, para3: Lpcwstr, para4: Pdevmodew): Hdc{.
    stdcall, dynlib: "gdi32", importc: "CreateDCW".}
proc verInstallFileW*(uFlags: Dword, szSrcFileName: Lpwstr,
                      szDestFileName: Lpwstr, szSrcDir: Lpwstr,
                      szDestDir: Lpwstr, szCurDir: Lpwstr, szTmpFile: Lpwstr,
                      lpuTmpFileLen: Puint): Dword{.stdcall, dynlib: "version",
    importc: "VerInstallFileW".}
proc getFileVersionInfoSizeW*(lptstrFilename: Lpwstr, lpdwHandle: Lpdword): Dword{.
    stdcall, dynlib: "version", importc: "GetFileVersionInfoSizeW".}
proc getFileVersionInfoW*(lptstrFilename: Lpwstr, dwHandle: Dword, dwLen: Dword,
                          lpData: Lpvoid): Winbool{.stdcall, dynlib: "version",
    importc: "GetFileVersionInfoW".}
proc verLanguageNameW*(wLang: Dword, szLang: Lpwstr, nSize: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "VerLanguageNameW".}
proc verQueryValueW*(pBlock: Lpvoid, lpSubBlock: Lpwstr, lplpBuffer: Lpvoid,
                     puLen: Puint): Winbool{.stdcall, dynlib: "version",
    importc: "VerQueryValueW".}
proc verFindFileW*(uFlags: Dword, szFileName: Lpwstr, szWinDir: Lpwstr,
                   szAppDir: Lpwstr, szCurDir: Lpwstr, lpuCurDirLen: Puint,
                   szDestDir: Lpwstr, lpuDestDirLen: Puint): Dword{.stdcall,
    dynlib: "version", importc: "VerFindFileW".}
proc regSetValueExW*(key: Hkey, lpValueName: Lpcwstr, Reserved: Dword,
                     dwType: Dword, lpData: Lpbyte, cbData: Dword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegSetValueExW".}
proc regUnLoadKeyW*(key: Hkey, lpSubKey: Lpcwstr): Long{.stdcall,
    dynlib: "advapi32", importc: "RegUnLoadKeyW".}
proc initiateSystemShutdownW*(lpMachineName: Lpwstr, lpMessage: Lpwstr,
                              dwTimeout: Dword, bForceAppsClosed: Winbool,
                              bRebootAfterShutdown: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "InitiateSystemShutdownW".}
proc abortSystemShutdownW*(lpMachineName: Lpwstr): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AbortSystemShutdownW".}
proc regRestoreKeyW*(key: Hkey, lpFile: Lpcwstr, dwFlags: Dword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegRestoreKeyW".}
proc regSaveKeyW*(key: Hkey, lpFile: Lpcwstr,
                  lpSecurityAttributes: LpsecurityAttributes): Long{.stdcall,
    dynlib: "advapi32", importc: "RegSaveKeyW".}
proc regSetValueW*(key: Hkey, lpSubKey: Lpcwstr, dwType: Dword,
                   lpData: Lpcwstr, cbData: Dword): Long{.stdcall,
    dynlib: "advapi32", importc: "RegSetValueW".}
proc regQueryValueW*(key: Hkey, lpSubKey: Lpcwstr, lpValue: Lpwstr,
                     lpcbValue: Plong): Long{.stdcall, dynlib: "advapi32",
    importc: "RegQueryValueW".}
proc regQueryMultipleValuesW*(key: Hkey, val_list: Pvalent, num_vals: Dword,
                              lpValueBuf: Lpwstr, ldwTotsize: Lpdword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegQueryMultipleValuesW".}
proc regQueryValueExW*(key: Hkey, lpValueName: Lpcwstr, lpReserved: Lpdword,
                       lpType: Lpdword, lpData: Lpbyte, lpcbData: Lpdword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegQueryValueExW".}
proc regReplaceKeyW*(key: Hkey, lpSubKey: Lpcwstr, lpNewFile: Lpcwstr,
                     lpOldFile: Lpcwstr): Long{.stdcall, dynlib: "advapi32",
    importc: "RegReplaceKeyW".}
proc regConnectRegistryW*(lpMachineName: Lpwstr, key: Hkey, phkResult: Phkey): Long{.
    stdcall, dynlib: "advapi32", importc: "RegConnectRegistryW".}
proc regCreateKeyW*(key: Hkey, lpSubKey: Lpcwstr, phkResult: Phkey): Long{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyW".}
proc regCreateKeyExW*(key: Hkey, lpSubKey: Lpcwstr, Reserved: Dword,
                      lpClass: Lpwstr, dwOptions: Dword, samDesired: Regsam,
                      lpSecurityAttributes: LpsecurityAttributes,
                      phkResult: Phkey, lpdwDisposition: Lpdword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyExW".}
proc regDeleteKeyW*(key: Hkey, lpSubKey: Lpcwstr): Long{.stdcall,
    dynlib: "advapi32", importc: "RegDeleteKeyW".}
proc regDeleteValueW*(key: Hkey, lpValueName: Lpcwstr): Long{.stdcall,
    dynlib: "advapi32", importc: "RegDeleteValueW".}
proc regEnumKeyW*(key: Hkey, dwIndex: Dword, lpName: Lpwstr, cbName: Dword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegEnumKeyW".}
proc regEnumKeyExW*(key: Hkey, dwIndex: Dword, lpName: Lpwstr,
                    lpcbName: Lpdword, lpReserved: Lpdword, lpClass: Lpwstr,
                    lpcbClass: Lpdword, lpftLastWriteTime: Pfiletime): Long{.
    stdcall, dynlib: "advapi32", importc: "RegEnumKeyExW".}
proc regEnumValueW*(key: Hkey, dwIndex: Dword, lpValueName: Lpwstr,
                    lpcbValueName: Lpdword, lpReserved: Lpdword,
                    lpType: Lpdword, lpData: Lpbyte, lpcbData: Lpdword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegEnumValueW".}
proc regLoadKeyW*(key: Hkey, lpSubKey: Lpcwstr, lpFile: Lpcwstr): Long{.
    stdcall, dynlib: "advapi32", importc: "RegLoadKeyW".}
proc regOpenKeyW*(key: Hkey, lpSubKey: Lpcwstr, phkResult: Phkey): Long{.
    stdcall, dynlib: "advapi32", importc: "RegOpenKeyW".}
proc regOpenKeyExW*(key: Hkey, lpSubKey: Lpcwstr, ulOptions: Dword,
                    samDesired: Regsam, phkResult: Phkey): Long{.stdcall,
    dynlib: "advapi32", importc: "RegOpenKeyExW".}
proc regQueryInfoKeyW*(key: Hkey, lpClass: Lpwstr, lpcbClass: Lpdword,
                       lpReserved: Lpdword, lpcSubKeys: Lpdword,
                       lpcbMaxSubKeyLen: Lpdword, lpcbMaxClassLen: Lpdword,
                       lpcValues: Lpdword, lpcbMaxValueNameLen: Lpdword,
                       lpcbMaxValueLen: Lpdword,
                       lpcbSecurityDescriptor: Lpdword,
                       lpftLastWriteTime: Pfiletime): Long{.stdcall,
    dynlib: "advapi32", importc: "RegQueryInfoKeyW".}
proc compareStringW*(Locale: Lcid, dwCmpFlags: Dword, lpString1: Lpcwstr,
                     cchCount1: Int32, lpString2: Lpcwstr, cchCount2: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "CompareStringW".}
proc lCMapStringW*(Locale: Lcid, dwMapFlags: Dword, lpSrcStr: Lpcwstr,
                   cchSrc: Int32, lpDestStr: Lpwstr, cchDest: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "LCMapStringW".}
proc getLocaleInfoW*(Locale: Lcid, LCType: Lctype, lpLCData: Lpwstr,
                     cchData: Int32): Int32{.stdcall, dynlib: "kernel32",
    importc: "GetLocaleInfoW".}
proc setLocaleInfoW*(Locale: Lcid, LCType: Lctype, lpLCData: Lpcwstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetLocaleInfoW".}
proc getTimeFormatW*(Locale: Lcid, dwFlags: Dword, lpTime: Lpsystemtime,
                     lpFormat: Lpcwstr, lpTimeStr: Lpwstr, cchTime: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "GetTimeFormatW".}
proc getDateFormatW*(Locale: Lcid, dwFlags: Dword, lpDate: Lpsystemtime,
                     lpFormat: Lpcwstr, lpDateStr: Lpwstr, cchDate: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "GetDateFormatW".}
proc getNumberFormatW*(Locale: Lcid, dwFlags: Dword, lpValue: Lpcwstr,
                       lpFormat: Pnumberfmt, lpNumberStr: Lpwstr,
                       cchNumber: Int32): Int32{.stdcall, dynlib: "kernel32",
    importc: "GetNumberFormatW".}
proc getCurrencyFormatW*(Locale: Lcid, dwFlags: Dword, lpValue: Lpcwstr,
                         lpFormat: Pcurrencyfmt, lpCurrencyStr: Lpwstr,
                         cchCurrency: Int32): Int32{.stdcall,
    dynlib: "kernel32", importc: "GetCurrencyFormatW".}
proc enumCalendarInfoW*(lpCalInfoEnumProc: CalinfoEnumproc, Locale: Lcid,
                        Calendar: Calid, CalType: Caltype): Winbool{.stdcall,
    dynlib: "kernel32", importc: "EnumCalendarInfoW".}
proc enumTimeFormatsW*(lpTimeFmtEnumProc: TIMEFMT_ENUMPROC, Locale: Lcid,
                       dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "EnumTimeFormatsW".}
proc enumDateFormatsW*(lpDateFmtEnumProc: DatefmtEnumproc, Locale: Lcid,
                       dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "EnumDateFormatsW".}
proc getStringTypeExW*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Lpcwstr,
                       cchSrc: Int32, lpCharType: Lpword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetStringTypeExW".}
proc getStringTypeW*(dwInfoType: Dword, lpSrcStr: Lpcwstr, cchSrc: Int32,
                     lpCharType: Lpword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "GetStringTypeW".}
proc foldStringW*(dwMapFlags: Dword, lpSrcStr: Lpcwstr, cchSrc: Int32,
                  lpDestStr: Lpwstr, cchDest: Int32): Int32{.stdcall,
    dynlib: "kernel32", importc: "FoldStringW".}
proc enumSystemLocalesW*(lpLocaleEnumProc: LocaleEnumproc, dwFlags: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "EnumSystemLocalesW".}
proc enumSystemCodePagesW*(lpCodePageEnumProc: CodepageEnumproc, dwFlags: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "EnumSystemCodePagesW".}
proc peekConsoleInputW*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                        nLength: Dword, lpNumberOfEventsRead: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "PeekConsoleInputW".}
proc readConsoleInputW*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                        nLength: Dword, lpNumberOfEventsRead: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleInputW".}
proc writeConsoleInputW*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                         nLength: Dword, lpNumberOfEventsWritten: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleInputW".}
proc readConsoleOutputW*(hConsoleOutput: Handle, lpBuffer: PcharInfo,
                         dwBufferSize: Coord, dwBufferCoord: Coord,
                         lpReadRegion: PsmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ReadConsoleOutputW".}
proc writeConsoleOutputW*(hConsoleOutput: Handle, lpBuffer: PcharInfo,
                          dwBufferSize: Coord, dwBufferCoord: Coord,
                          lpWriteRegion: PsmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteConsoleOutputW".}
proc readConsoleOutputCharacterW*(hConsoleOutput: Handle, lpCharacter: Lpwstr,
                                  nLength: Dword, dwReadCoord: Coord,
                                  lpNumberOfCharsRead: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterW".}
proc writeConsoleOutputCharacterW*(hConsoleOutput: Handle, lpCharacter: Lpcwstr,
                                   nLength: Dword, dwWriteCoord: Coord,
                                   lpNumberOfCharsWritten: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterW".}
proc fillConsoleOutputCharacterW*(hConsoleOutput: Handle, cCharacter: Wchar,
                                  nLength: Dword, dwWriteCoord: Coord,
                                  lpNumberOfCharsWritten: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FillConsoleOutputCharacterW".}
proc scrollConsoleScreenBufferW*(hConsoleOutput: Handle,
                                 lpScrollRectangle: PsmallRect,
                                 lpClipRectangle: PsmallRect,
                                 dwDestinationOrigin: Coord, lpFill: PcharInfo): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ScrollConsoleScreenBufferW".}
proc getConsoleTitleW*(lpConsoleTitle: Lpwstr, nSize: Dword): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetConsoleTitleW".}
proc setConsoleTitleW*(lpConsoleTitle: Lpcwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetConsoleTitleW".}
proc readConsoleW*(hConsoleInput: Handle, lpBuffer: Lpvoid,
                   nNumberOfCharsToRead: Dword, lpNumberOfCharsRead: Lpdword,
                   lpReserved: Lpvoid): Winbool{.stdcall, dynlib: "kernel32",
    importc: "ReadConsoleW".}
proc writeConsoleW*(hConsoleOutput: Handle, lpBuffer: Pointer,
                    nNumberOfCharsToWrite: Dword,
                    lpNumberOfCharsWritten: Lpdword, lpReserved: Lpvoid): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleW".}
proc wNetAddConnectionW*(lpRemoteName: Lpcwstr, lpPassword: Lpcwstr,
                         lpLocalName: Lpcwstr): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetAddConnectionW".}
proc wNetAddConnection2W*(lpNetResource: Lpnetresource, lpPassword: Lpcwstr,
                          lpUserName: Lpcwstr, dwFlags: Dword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetAddConnection2W".}
proc wNetAddConnection3W*(hwndOwner: Hwnd, lpNetResource: Lpnetresource,
                          lpPassword: Lpcwstr, lpUserName: Lpcwstr,
                          dwFlags: Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetAddConnection3W".}
proc wNetCancelConnectionW*(lpName: Lpcwstr, fForce: Winbool): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetCancelConnectionW".}
proc wNetCancelConnection2W*(lpName: Lpcwstr, dwFlags: Dword, fForce: Winbool): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetCancelConnection2W".}
proc wNetGetConnectionW*(lpLocalName: Lpcwstr, lpRemoteName: Lpwstr,
                         lpnLength: Lpdword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetConnectionW".}
proc wNetUseConnectionW*(hwndOwner: Hwnd, lpNetResource: Lpnetresource,
                         lpUserID: Lpcwstr, lpPassword: Lpcwstr, dwFlags: Dword,
                         lpAccessName: Lpwstr, lpBufferSize: Lpdword,
                         lpResult: Lpdword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetUseConnectionW".}
proc wNetSetConnectionW*(lpName: Lpcwstr, dwProperties: Dword, pvValues: Lpvoid): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetSetConnectionW".}
proc wNetConnectionDialog1W*(lpConnDlgStruct: Lpconnectdlgstruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetConnectionDialog1W".}
proc wNetDisconnectDialog1W*(lpConnDlgStruct: Lpdiscdlgstruct): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetDisconnectDialog1W".}
proc wNetOpenEnumW*(dwScope: Dword, dwType: Dword, dwUsage: Dword,
                    lpNetResource: Lpnetresource, lphEnum: Lphandle): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetOpenEnumW".}
proc wNetEnumResourceW*(hEnum: Handle, lpcCount: Lpdword, lpBuffer: Lpvoid,
                        lpBufferSize: Lpdword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetEnumResourceW".}
proc wNetGetUniversalNameW*(lpLocalPath: Lpcwstr, dwInfoLevel: Dword,
                            lpBuffer: Lpvoid, lpBufferSize: Lpdword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUniversalNameW".}
proc wNetGetUserW*(lpName: Lpcwstr, lpUserName: Lpwstr, lpnLength: Lpdword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUserW".}
proc wNetGetProviderNameW*(dwNetType: Dword, lpProviderName: Lpwstr,
                           lpBufferSize: Lpdword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetGetProviderNameW".}
proc wNetGetNetworkInformationW*(lpProvider: Lpcwstr,
                                 lpNetInfoStruct: Lpnetinfostruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetNetworkInformationW".}
proc wNetGetLastErrorW*(lpError: Lpdword, lpErrorBuf: Lpwstr,
                        nErrorBufSize: Dword, lpNameBuf: Lpwstr,
                        nNameBufSize: Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetLastErrorW".}
proc multinetGetConnectionPerformanceW*(lpNetResource: Lpnetresource,
    lpNetConnectInfoStruct: Lpnetconnectinfostruct): Dword{.stdcall,
    dynlib: "mpr", importc: "MultinetGetConnectionPerformanceW".}
proc changeServiceConfigW*(hService: ScHandle, dwServiceType: Dword,
                           dwStartType: Dword, dwErrorControl: Dword,
                           lpBinaryPathName: Lpcwstr, lpLoadOrderGroup: Lpcwstr,
                           lpdwTagId: Lpdword, lpDependencies: Lpcwstr,
                           lpServiceStartName: Lpcwstr, lpPassword: Lpcwstr,
                           lpDisplayName: Lpcwstr): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ChangeServiceConfigW".}
proc createServiceW*(hSCManager: ScHandle, lpServiceName: Lpcwstr,
                     lpDisplayName: Lpcwstr, dwDesiredAccess: Dword,
                     dwServiceType: Dword, dwStartType: Dword,
                     dwErrorControl: Dword, lpBinaryPathName: Lpcwstr,
                     lpLoadOrderGroup: Lpcwstr, lpdwTagId: Lpdword,
                     lpDependencies: Lpcwstr, lpServiceStartName: Lpcwstr,
                     lpPassword: Lpcwstr): ScHandle{.stdcall,
    dynlib: "advapi32", importc: "CreateServiceW".}
proc enumDependentServicesW*(hService: ScHandle, dwServiceState: Dword,
                             lpServices: LpenumServiceStatus,
                             cbBufSize: Dword, pcbBytesNeeded: Lpdword,
                             lpServicesReturned: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "EnumDependentServicesW".}
proc enumServicesStatusW*(hSCManager: ScHandle, dwServiceType: Dword,
                          dwServiceState: Dword,
                          lpServices: LpenumServiceStatus, cbBufSize: Dword,
                          pcbBytesNeeded: Lpdword, lpServicesReturned: Lpdword,
                          lpResumeHandle: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "EnumServicesStatusW".}
proc getServiceKeyNameW*(hSCManager: ScHandle, lpDisplayName: Lpcwstr,
                         lpServiceName: Lpwstr, lpcchBuffer: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetServiceKeyNameW".}
proc getServiceDisplayNameW*(hSCManager: ScHandle, lpServiceName: Lpcwstr,
                             lpDisplayName: Lpwstr, lpcchBuffer: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetServiceDisplayNameW".}
proc openSCManagerW*(lpMachineName: Lpcwstr, lpDatabaseName: Lpcwstr,
                     dwDesiredAccess: Dword): ScHandle{.stdcall,
    dynlib: "advapi32", importc: "OpenSCManagerW".}
proc openServiceW*(hSCManager: ScHandle, lpServiceName: Lpcwstr,
                   dwDesiredAccess: Dword): ScHandle{.stdcall,
    dynlib: "advapi32", importc: "OpenServiceW".}
proc queryServiceConfigW*(hService: ScHandle,
                          lpServiceConfig: LpqueryServiceConfig,
                          cbBufSize: Dword, pcbBytesNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "QueryServiceConfigW".}
proc queryServiceLockStatusW*(hSCManager: ScHandle,
                              lpLockStatus: LpqueryServiceLockStatus,
                              cbBufSize: Dword, pcbBytesNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "QueryServiceLockStatusW".}
proc registerServiceCtrlHandlerW*(lpServiceName: Lpcwstr,
                                  lpHandlerProc: LphandlerFunction): ServiceStatusHandle{.
    stdcall, dynlib: "advapi32", importc: "RegisterServiceCtrlHandlerW".}
proc startServiceCtrlDispatcherW*(lpServiceStartTable: LpserviceTableEntry): Winbool{.
    stdcall, dynlib: "advapi32", importc: "StartServiceCtrlDispatcherW".}
proc startServiceW*(hService: ScHandle, dwNumServiceArgs: Dword,
                    lpServiceArgVectors: Lpcwstr): Winbool{.stdcall,
    dynlib: "advapi32", importc: "StartServiceW".}
proc dragQueryFileW*(para1: Hdrop, para2: Int, para3: Lpcwstr, para4: Int): Int{.
    stdcall, dynlib: "shell32", importc: "DragQueryFileW".}
proc extractAssociatedIconW*(para1: Hinst, para2: Lpcwstr, para3: Lpword): Hicon{.
    stdcall, dynlib: "shell32", importc: "ExtractAssociatedIconW".}
proc extractIconW*(para1: Hinst, para2: Lpcwstr, para3: Int): Hicon{.stdcall,
    dynlib: "shell32", importc: "ExtractIconW".}
proc findExecutableW*(para1: Lpcwstr, para2: Lpcwstr, para3: Lpcwstr): Hinst{.
    stdcall, dynlib: "shell32", importc: "FindExecutableW".}
proc shellAboutW*(para1: Hwnd, para2: Lpcwstr, para3: Lpcwstr, para4: Hicon): Int32{.
    stdcall, dynlib: "shell32", importc: "ShellAboutW".}
proc shellExecuteW*(para1: Hwnd, para2: Lpcwstr, para3: Lpcwstr, para4: Lpcwstr,
                    para5: Lpcwstr, para6: Int32): Hinst{.stdcall,
    dynlib: "shell32", importc: "ShellExecuteW".}
proc shellNotifyIconW*(dwMessage: Dword, lpData: PNotifyIconDataA): Winbool{.
    stdcall, dynlib: "shell32", importc: "Shell_NotifyIconW".}
proc ddeCreateStringHandleW*(para1: Dword, para2: Lpcwstr, para3: Int32): Hsz{.
    stdcall, dynlib: "user32", importc: "DdeCreateStringHandleW".}
proc ddeInitializeW*(para1: Lpdword, para2: Pfncallback, para3: Dword,
                     para4: Dword): Uint{.stdcall, dynlib: "user32",
    importc: "DdeInitializeW".}
proc ddeQueryStringW*(para1: Dword, para2: Hsz, para3: Lpcwstr, para4: Dword,
                      para5: Int32): Dword{.stdcall, dynlib: "user32",
    importc: "DdeQueryStringW".}
proc logonUserW*(para1: Lpwstr, para2: Lpwstr, para3: Lpwstr, para4: Dword,
                 para5: Dword, para6: Phandle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LogonUserW".}
proc createProcessAsUserW*(para1: Handle, para2: Lpcwstr, para3: Lpwstr,
                           para4: LpsecurityAttributes,
                           para5: LpsecurityAttributes, para6: Winbool,
                           para7: Dword, para8: Lpvoid, para9: Lpcwstr,
                           para10: Lpstartupinfo, para11: LpprocessInformation): Winbool{.
    stdcall, dynlib: "advapi32", importc: "CreateProcessAsUserW".}
when defined(winUnicode):
  proc GetBinaryType*(lpApplicationName: LPCWSTR, lpBinaryType: LPDWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "GetBinaryTypeW".}
  proc GetShortPathName*(lpszLongPath: LPCWSTR, lpszShortPath: LPWSTR,
                         cchBuffer: DWORD): DWORD{.stdcall, dynlib: "kernel32",
      importc: "GetShortPathNameW".}
  proc GetEnvironmentStrings*(): LPWSTR{.stdcall, dynlib: "kernel32",
      importc: "GetEnvironmentStringsW".}
  proc FreeEnvironmentStrings*(para1: LPWSTR): WINBOOL{.stdcall,

      dynlib: "kernel32", importc: "FreeEnvironmentStringsW".}
  proc FormatMessage*(dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD,
                      dwLanguageId: DWORD, lpBuffer: LPWSTR, nSize: DWORD,
                      Arguments: va_list): DWORD{.stdcall, dynlib: "kernel32",
      importc: "FormatMessageW".}
  proc CreateMailslot*(lpName: LPCWSTR, nMaxMessageSize: DWORD,
                       lReadTimeout: DWORD,
                       lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE{.
      stdcall, dynlib: "kernel32", importc: "CreateMailslotW".}
  proc lstrcmp*(lpString1: LPCWSTR, lpString2: LPCWSTR): int32{.stdcall,
      dynlib: "kernel32", importc: "lstrcmpW".}
  proc lstrcmpi*(lpString1: LPCWSTR, lpString2: LPCWSTR): int32{.stdcall,
      dynlib: "kernel32", importc: "lstrcmpiW".}
  proc lstrcpyn*(lpString1: LPWSTR, lpString2: LPCWSTR, iMaxLength: int32): LPWSTR{.
      stdcall, dynlib: "kernel32", importc: "lstrcpynW".}
  proc lstrcpy*(lpString1: LPWSTR, lpString2: LPCWSTR): LPWSTR{.stdcall,
      dynlib: "kernel32", importc: "lstrcpyW".}
  proc lstrcat*(lpString1: LPWSTR, lpString2: LPCWSTR): LPWSTR{.stdcall,
      dynlib: "kernel32", importc: "lstrcatW".}
  proc lstrlen*(lpString: LPCWSTR): int32{.stdcall, dynlib: "kernel32",
      importc: "lstrlenW".}
  proc CreateMutex*(lpMutexAttributes: LPSECURITY_ATTRIBUTES,
                    bInitialOwner: WINBOOL, lpName: LPCWSTR): HANDLE{.stdcall,
      dynlib: "kernel32", importc: "CreateMutexW".}
  proc OpenMutex*(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL,
                  lpName: LPCWSTR): HANDLE{.stdcall, dynlib: "kernel32",
      importc: "OpenMutexW".}
  proc CreateEvent*(lpEventAttributes: LPSECURITY_ATTRIBUTES,
                    bManualReset: WINBOOL, bInitialState: WINBOOL,
                    lpName: LPCWSTR): HANDLE{.stdcall, dynlib: "kernel32",
      importc: "CreateEventW".}
  proc OpenEvent*(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL,
                  lpName: LPCWSTR): HANDLE{.stdcall, dynlib: "kernel32",
      importc: "OpenEventW".}
  proc CreateSemaphore*(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES,
                        lInitialCount: LONG, lMaximumCount: LONG,
                        lpName: LPCWSTR): HANDLE{.stdcall, dynlib: "kernel32",
      importc: "CreateSemaphoreW".}
  proc OpenSemaphore*(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL,
                      lpName: LPCWSTR): HANDLE{.stdcall, dynlib: "kernel32",
      importc: "OpenSemaphoreW".}
  proc CreateFileMapping*(hFile: HANDLE,
                          lpFileMappingAttributes: LPSECURITY_ATTRIBUTES,
                          flProtect: DWORD, dwMaximumSizeHigh: DWORD,
                          dwMaximumSizeLow: DWORD, lpName: LPCWSTR): HANDLE{.
      stdcall, dynlib: "kernel32", importc: "CreateFileMappingW".}
  proc OpenFileMapping*(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL,
                        lpName: LPCWSTR): HANDLE{.stdcall, dynlib: "kernel32",
      importc: "OpenFileMappingW".}
  proc GetLogicalDriveStrings*(nBufferLength: DWORD, lpBuffer: LPWSTR): DWORD{.
      stdcall, dynlib: "kernel32", importc: "GetLogicalDriveStringsW".}
  proc LoadLibrary*(lpLibFileName: LPCWSTR): HINST{.stdcall, dynlib: "kernel32",
      importc: "LoadLibraryW".}
  proc LoadLibraryEx*(lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: DWORD): HINST{.
      stdcall, dynlib: "kernel32", importc: "LoadLibraryExW".}
  proc GetModuleFileName*(hModule: HINST, lpFilename: LPWSTR, nSize: DWORD): DWORD{.
      stdcall, dynlib: "kernel32", importc: "GetModuleFileNameW".}
  proc GetModuleHandle*(lpModuleName: LPCWSTR): HMODULE{.stdcall,
      dynlib: "kernel32", importc: "GetModuleHandleW".}
  proc FatalAppExit*(uAction: UINT, lpMessageText: LPCWSTR){.stdcall,
      dynlib: "kernel32", importc: "FatalAppExitW".}
  proc GetCommandLine*(): LPWSTR{.stdcall, dynlib: "kernel32",
                                  importc: "GetCommandLineW".}
  proc GetEnvironmentVariable*(lpName: LPCWSTR, lpBuffer: LPWSTR, nSize: DWORD): DWORD{.
      stdcall, dynlib: "kernel32", importc: "GetEnvironmentVariableW".}
  proc SetEnvironmentVariable*(lpName: LPCWSTR, lpValue: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "SetEnvironmentVariableW".}
  proc ExpandEnvironmentStrings*(lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: DWORD): DWORD{.
      stdcall, dynlib: "kernel32", importc: "ExpandEnvironmentStringsW".}
  proc OutputDebugString*(lpOutputString: LPCWSTR){.stdcall, dynlib: "kernel32",
      importc: "OutputDebugStringW".}
  proc FindResource*(hModule: HINST, lpName: LPCWSTR, lpType: LPCWSTR): HRSRC{.
      stdcall, dynlib: "kernel32", importc: "FindResourceW".}
  proc FindResourceEx*(hModule: HINST, lpType: LPCWSTR, lpName: LPCWSTR,
                       wLanguage: int16): HRSRC{.stdcall, dynlib: "kernel32",
      importc: "FindResourceExW".}
  proc EnumResourceTypes*(hModule: HINST, lpEnumFunc: ENUMRESTYPEPROC,
                          lParam: LONG): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "EnumResourceTypesW".}
  proc EnumResourceNames*(hModule: HINST, lpType: LPCWSTR,
                          lpEnumFunc: ENUMRESNAMEPROC, lParam: LONG): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "EnumResourceNamesW".}
  proc EnumResourceLanguages*(hModule: HINST, lpType: LPCWSTR, lpName: LPCWSTR,
                              lpEnumFunc: ENUMRESLANGPROC, lParam: LONG): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "EnumResourceLanguagesW".}
  proc BeginUpdateResource*(pFileName: LPCWSTR,
                            bDeleteExistingResources: WINBOOL): HANDLE{.stdcall,
      dynlib: "kernel32", importc: "BeginUpdateResourceW".}
  proc UpdateResource*(hUpdate: HANDLE, lpType: LPCWSTR, lpName: LPCWSTR,
                       wLanguage: int16, lpData: LPVOID, cbData: DWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "UpdateResourceW".}
  proc EndUpdateResource*(hUpdate: HANDLE, fDiscard: WINBOOL): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "EndUpdateResourceW".}
  proc GlobalAddAtom*(lpString: LPCWSTR): ATOM{.stdcall, dynlib: "kernel32",
      importc: "GlobalAddAtomW".}
  proc GlobalFindAtom*(lpString: LPCWSTR): ATOM{.stdcall, dynlib: "kernel32",
      importc: "GlobalFindAtomW".}
  proc GlobalGetAtomName*(nAtom: ATOM, lpBuffer: LPWSTR, nSize: int32): UINT{.
      stdcall, dynlib: "kernel32", importc: "GlobalGetAtomNameW".}
  proc AddAtom*(lpString: LPCWSTR): ATOM{.stdcall, dynlib: "kernel32",
      importc: "AddAtomW".}
  proc FindAtom*(lpString: LPCWSTR): ATOM{.stdcall, dynlib: "kernel32",
      importc: "FindAtomW".}
  proc GetAtomName*(nAtom: ATOM, lpBuffer: LPWSTR, nSize: int32): UINT{.stdcall,
      dynlib: "kernel32", importc: "GetAtomNameW".}
  proc GetProfileInt*(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: WINT): UINT{.
      stdcall, dynlib: "kernel32", importc: "GetProfileIntW".}
  proc GetProfileString*(lpAppName: LPCWSTR, lpKeyName: LPCWSTR,
                         lpDefault: LPCWSTR, lpReturnedString: LPWSTR,
                         nSize: DWORD): DWORD{.stdcall, dynlib: "kernel32",
      importc: "GetProfileStringW".}
  proc WriteProfileString*(lpAppName: LPCWSTR, lpKeyName: LPCWSTR,
                           lpString: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "WriteProfileStringW".}
  proc GetProfileSection*(lpAppName: LPCWSTR, lpReturnedString: LPWSTR,
                          nSize: DWORD): DWORD{.stdcall, dynlib: "kernel32",
      importc: "GetProfileSectionW".}
  proc WriteProfileSection*(lpAppName: LPCWSTR, lpString: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "WriteProfileSectionW".}
  proc GetPrivateProfileInt*(lpAppName: LPCWSTR, lpKeyName: LPCWSTR,
                             nDefault: WINT, lpFileName: LPCWSTR): UINT{.
      stdcall, dynlib: "kernel32", importc: "GetPrivateProfileIntW".}
  proc GetPrivateProfileString*(lpAppName: LPCWSTR, lpKeyName: LPCWSTR,
                                lpDefault: LPCWSTR, lpReturnedString: LPWSTR,
                                nSize: DWORD, lpFileName: LPCWSTR): DWORD{.
      stdcall, dynlib: "kernel32", importc: "GetPrivateProfileStringW".}
  proc WritePrivateProfileString*(lpAppName: LPCWSTR, lpKeyName: LPCWSTR,
                                  lpString: LPCWSTR, lpFileName: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "WritePrivateProfileStringW".}
  proc GetPrivateProfileSection*(lpAppName: LPCWSTR, lpReturnedString: LPWSTR,
                                 nSize: DWORD, lpFileName: LPCWSTR): DWORD{.
      stdcall, dynlib: "kernel32", importc: "GetPrivateProfileSectionW".}
  proc WritePrivateProfileSection*(lpAppName: LPCWSTR, lpString: LPCWSTR,
                                   lpFileName: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "WritePrivateProfileSectionW".}
  proc GetDriveType*(lpRootPathName: LPCWSTR): UINT{.stdcall,
      dynlib: "kernel32", importc: "GetDriveTypeW".}
  proc GetSystemDirectory*(lpBuffer: LPWSTR, uSize: UINT): UINT{.stdcall,
      dynlib: "kernel32", importc: "GetSystemDirectoryW".}
  proc GetTempPath*(nBufferLength: DWORD, lpBuffer: LPWSTR): DWORD{.stdcall,
      dynlib: "kernel32", importc: "GetTempPathW".}
  proc GetTempFileName*(lpPathName: LPCWSTR, lpPrefixString: LPCWSTR,
                        uUnique: UINT, lpTempFileName: LPWSTR): UINT{.stdcall,
      dynlib: "kernel32", importc: "GetTempFileNameW".}
  proc GetWindowsDirectory*(lpBuffer: LPWSTR, uSize: UINT): UINT{.stdcall,
      dynlib: "kernel32", importc: "GetWindowsDirectoryW".}
  proc SetCurrentDirectory*(lpPathName: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "SetCurrentDirectoryW".}
  proc GetCurrentDirectory*(nBufferLength: DWORD, lpBuffer: LPWSTR): DWORD{.
      stdcall, dynlib: "kernel32", importc: "GetCurrentDirectoryW".}
  proc GetDiskFreeSpace*(lpRootPathName: LPCWSTR, lpSectorsPerCluster: LPDWORD,
                         lpBytesPerSector: LPDWORD,
                         lpNumberOfFreeClusters: LPDWORD,
                         lpTotalNumberOfClusters: LPDWORD): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "GetDiskFreeSpaceW".}
  proc CreateDirectory*(lpPathName: LPCWSTR,
                        lpSecurityAttributes: LPSECURITY_ATTRIBUTES): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "CreateDirectoryW".}
  proc CreateDirectoryEx*(lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR,
                          lpSecurityAttributes: LPSECURITY_ATTRIBUTES): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "CreateDirectoryExW".}
  proc RemoveDirectory*(lpPathName: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "RemoveDirectoryW".}
  proc GetFullPathName*(lpFileName: LPCWSTR, nBufferLength: DWORD,
                        lpBuffer: LPWSTR, lpFilePart: var LPWSTR): DWORD{.
      stdcall, dynlib: "kernel32", importc: "GetFullPathNameW".}
  proc DefineDosDevice*(dwFlags: DWORD, lpDeviceName: LPCWSTR,
                        lpTargetPath: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "DefineDosDeviceW".}
  proc QueryDosDevice*(lpDeviceName: LPCWSTR, lpTargetPath: LPWSTR,
                       ucchMax: DWORD): DWORD{.stdcall, dynlib: "kernel32",
      importc: "QueryDosDeviceW".}
  proc CreateFile*(lpFileName: LPCWSTR, dwDesiredAccess: DWORD,
                   dwShareMode: DWORD,
                   lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
                   dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD,
                   hTemplateFile: HANDLE): HANDLE{.stdcall, dynlib: "kernel32",
      importc: "CreateFileW".}
  proc SetFileAttributes*(lpFileName: LPCWSTR, dwFileAttributes: DWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "SetFileAttributesW".}
  proc GetFileAttributes*(lpFileName: LPCWSTR): DWORD{.stdcall,
      dynlib: "kernel32", importc: "GetFileAttributesW".}
  proc GetCompressedFileSize*(lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD): DWORD{.
      stdcall, dynlib: "kernel32", importc: "GetCompressedFileSizeW".}
  proc DeleteFile*(lpFileName: LPCWSTR): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "DeleteFileW".}
  proc SearchPath*(lpPath: LPCWSTR, lpFileName: LPCWSTR, lpExtension: LPCWSTR,
                   nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: LPWSTR): DWORD{.
      stdcall, dynlib: "kernel32", importc: "SearchPathW".}
  proc CopyFile*(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR,
                 bFailIfExists: WINBOOL): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "CopyFileW".}
  proc MoveFile*(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "MoveFileW".}
  proc MoveFileEx*(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR,
                   dwFlags: DWORD): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "MoveFileExW".}
  proc CreateNamedPipe*(lpName: LPCWSTR, dwOpenMode: DWORD, dwPipeMode: DWORD,
                        nMaxInstances: DWORD, nOutBufferSize: DWORD,
                        nInBufferSize: DWORD, nDefaultTimeOut: DWORD,
                        lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE{.
      stdcall, dynlib: "kernel32", importc: "CreateNamedPipeW".}
  proc GetNamedPipeHandleState*(hNamedPipe: HANDLE, lpState: LPDWORD,
                                lpCurInstances: LPDWORD,
                                lpMaxCollectionCount: LPDWORD,
                                lpCollectDataTimeout: LPDWORD,
                                lpUserName: LPWSTR, nMaxUserNameSize: DWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "GetNamedPipeHandleStateW".}
  proc CallNamedPipe*(lpNamedPipeName: LPCWSTR, lpInBuffer: LPVOID,
                      nInBufferSize: DWORD, lpOutBuffer: LPVOID,
                      nOutBufferSize: DWORD, lpBytesRead: LPDWORD,
                      nTimeOut: DWORD): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "CallNamedPipeW".}
  proc WaitNamedPipe*(lpNamedPipeName: LPCWSTR, nTimeOut: DWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "WaitNamedPipeW".}
  proc SetVolumeLabel*(lpRootPathName: LPCWSTR, lpVolumeName: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "SetVolumeLabelW".}
  proc GetVolumeInformation*(lpRootPathName: LPCWSTR,
                             lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD,
                             lpVolumeSerialNumber: LPDWORD,
                             lpMaximumComponentLength: LPDWORD,
                             lpFileSystemFlags: LPDWORD,
                             lpFileSystemNameBuffer: LPWSTR,
                             nFileSystemNameSize: DWORD): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "GetVolumeInformationW".}
  proc ClearEventLog*(hEventLog: HANDLE, lpBackupFileName: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "ClearEventLogW".}
  proc BackupEventLog*(hEventLog: HANDLE, lpBackupFileName: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "BackupEventLogW".}
  proc OpenEventLog*(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR): HANDLE{.
      stdcall, dynlib: "advapi32", importc: "OpenEventLogW".}
  proc RegisterEventSource*(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR): HANDLE{.
      stdcall, dynlib: "advapi32", importc: "RegisterEventSourceW".}
  proc OpenBackupEventLog*(lpUNCServerName: LPCWSTR, lpFileName: LPCWSTR): HANDLE{.
      stdcall, dynlib: "advapi32", importc: "OpenBackupEventLogW".}
  proc ReadEventLog*(hEventLog: HANDLE, dwReadFlags: DWORD,
                     dwRecordOffset: DWORD, lpBuffer: LPVOID,
                     nNumberOfBytesToRead: DWORD, pnBytesRead: LPDWORD,
                     pnMinNumberOfBytesNeeded: LPDWORD): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "ReadEventLogW".}
  proc ReportEvent*(hEventLog: HANDLE, wType: int16, wCategory: int16,
                    dwEventID: DWORD, lpUserSid: PSID, wNumStrings: int16,
                    dwDataSize: DWORD, lpStrings: LPPCWSTR, lpRawData: LPVOID): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "ReportEventW".}
  proc AccessCheckAndAuditAlarm*(SubsystemName: LPCWSTR, HandleId: LPVOID,
                                 ObjectTypeName: LPWSTR, ObjectName: LPWSTR,
                                 SecurityDescriptor: PSECURITY_DESCRIPTOR,
                                 DesiredAccess: DWORD,
                                 GenericMapping: PGENERIC_MAPPING,
                                 ObjectCreation: WINBOOL,
                                 GrantedAccess: LPDWORD, AccessStatus: LPBOOL,
                                 pfGenerateOnClose: LPBOOL): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "AccessCheckAndAuditAlarmW".}
  proc ObjectOpenAuditAlarm*(SubsystemName: LPCWSTR, HandleId: LPVOID,
                             ObjectTypeName: LPWSTR, ObjectName: LPWSTR,
                             pSecurityDescriptor: PSECURITY_DESCRIPTOR,
                             ClientToken: HANDLE, DesiredAccess: DWORD,
                             GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET,
                             ObjectCreation: WINBOOL, AccessGranted: WINBOOL,
                             GenerateOnClose: LPBOOL): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "ObjectOpenAuditAlarmW".}
  proc ObjectPrivilegeAuditAlarm*(SubsystemName: LPCWSTR, HandleId: LPVOID,
                                  ClientToken: HANDLE, DesiredAccess: DWORD,
                                  Privileges: PPRIVILEGE_SET,
                                  AccessGranted: WINBOOL): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmW".}
  proc ObjectCloseAuditAlarm*(SubsystemName: LPCWSTR, HandleId: LPVOID,
                              GenerateOnClose: WINBOOL): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "ObjectCloseAuditAlarmW".}
  proc PrivilegedServiceAuditAlarm*(SubsystemName: LPCWSTR,
                                    ServiceName: LPCWSTR, ClientToken: HANDLE,
                                    Privileges: PPRIVILEGE_SET,
                                    AccessGranted: WINBOOL): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmW".}
  proc SetFileSecurity*(lpFileName: LPCWSTR,
                        SecurityInformation: SECURITY_INFORMATION,
                        pSecurityDescriptor: PSECURITY_DESCRIPTOR): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "SetFileSecurityW".}
  proc GetFileSecurity*(lpFileName: LPCWSTR,
                        RequestedInformation: SECURITY_INFORMATION,
                        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
                        nLength: DWORD, lpnLengthNeeded: LPDWORD): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "GetFileSecurityW".}
  proc FindFirstChangeNotification*(lpPathName: LPCWSTR, bWatchSubtree: WINBOOL,
                                    dwNotifyFilter: DWORD): HANDLE{.stdcall,
      dynlib: "kernel32", importc: "FindFirstChangeNotificationW".}
  proc IsBadStringPtr*(lpsz: LPCWSTR, ucchMax: UINT): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "IsBadStringPtrW".}
  proc LookupAccountSid*(lpSystemName: LPCWSTR, Sid: PSID, Name: LPWSTR,
                         cbName: LPDWORD, ReferencedDomainName: LPWSTR,
                         cbReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "LookupAccountSidW".}
  proc LookupAccountName*(lpSystemName: LPCWSTR, lpAccountName: LPCWSTR,
                          Sid: PSID, cbSid: LPDWORD,
                          ReferencedDomainName: LPWSTR,
                          cbReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "LookupAccountNameW".}
  proc LookupPrivilegeValue*(lpSystemName: LPCWSTR, lpName: LPCWSTR,
                             lpLuid: PLUID): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "LookupPrivilegeValueW".}
  proc LookupPrivilegeName*(lpSystemName: LPCWSTR, lpLuid: PLUID,
                            lpName: LPWSTR, cbName: LPDWORD): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "LookupPrivilegeNameW".}
  proc LookupPrivilegeDisplayName*(lpSystemName: LPCWSTR, lpName: LPCWSTR,
                                   lpDisplayName: LPWSTR,
                                   cbDisplayName: LPDWORD, lpLanguageId: LPDWORD): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameW".}
  proc BuildCommDCB*(lpDef: LPCWSTR, lpDCB: LPDCB): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "BuildCommDCBW".}
  proc BuildCommDCBAndTimeouts*(lpDef: LPCWSTR, lpDCB: LPDCB,
                                lpCommTimeouts: LPCOMMTIMEOUTS): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsW".}
  proc CommConfigDialog*(lpszName: LPCWSTR, wnd: HWND, lpCC: LPCOMMCONFIG): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "CommConfigDialogW".}
  proc GetDefaultCommConfig*(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG,
                             lpdwSize: LPDWORD): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "GetDefaultCommConfigW".}
  proc SetDefaultCommConfig*(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG,
                             dwSize: DWORD): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "SetDefaultCommConfigW".}
  proc GetComputerName*(lpBuffer: LPWSTR, nSize: LPDWORD): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "GetComputerNameW".}
  proc SetComputerName*(lpComputerName: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "SetComputerNameW".}
  proc GetUserName*(lpBuffer: LPWSTR, nSize: LPDWORD): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "GetUserNameW".}
  proc LoadKeyboardLayout*(pwszKLID: LPCWSTR, Flags: UINT): HKL{.stdcall,
      dynlib: "user32", importc: "LoadKeyboardLayoutW".}
  proc GetKeyboardLayoutName*(pwszKLID: LPWSTR): WINBOOL{.stdcall,
      dynlib: "user32", importc: "GetKeyboardLayoutNameW".}
  proc CreateDesktop*(lpszDesktop: LPWSTR, lpszDevice: LPWSTR,
                      pDevmode: LPDEVMODE, dwFlags: DWORD,
                      dwDesiredAccess: DWORD, lpsa: LPSECURITY_ATTRIBUTES): HDESK{.
      stdcall, dynlib: "user32", importc: "CreateDesktopW".}
  proc OpenDesktop*(lpszDesktop: LPWSTR, dwFlags: DWORD, fInherit: WINBOOL,
                    dwDesiredAccess: DWORD): HDESK{.stdcall, dynlib: "user32",
      importc: "OpenDesktopW".}
  proc EnumDesktops*(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROC,
                     lp: LPARAM): WINBOOL{.stdcall, dynlib: "user32",
      importc: "EnumDesktopsW".}
  proc CreateWindowStation*(lpwinsta: LPWSTR, dwReserved: DWORD,
                            dwDesiredAccess: DWORD, lpsa: LPSECURITY_ATTRIBUTES): HWINSTA{.
      stdcall, dynlib: "user32", importc: "CreateWindowStationW".}
  proc OpenWindowStation*(lpszWinSta: LPWSTR, fInherit: WINBOOL,
                          dwDesiredAccess: DWORD): HWINSTA{.stdcall,
      dynlib: "user32", importc: "OpenWindowStationW".}
  proc EnumWindowStations*(lpEnumFunc: ENUMWINDOWSTATIONPROC, lp: LPARAM): WINBOOL{.
      stdcall, dynlib: "user32", importc: "EnumWindowStationsW".}
  proc GetUserObjectInformation*(hObj: HANDLE, nIndex: int32, pvInfo: PVOID,
                                 nLength: DWORD, lpnLengthNeeded: LPDWORD): WINBOOL{.
      stdcall, dynlib: "user32", importc: "GetUserObjectInformationW".}
  proc SetUserObjectInformation*(hObj: HANDLE, nIndex: int32, pvInfo: PVOID,
                                 nLength: DWORD): WINBOOL{.stdcall,
      dynlib: "user32", importc: "SetUserObjectInformationW".}
  proc RegisterWindowMessage*(lpString: LPCWSTR): UINT{.stdcall,
      dynlib: "user32", importc: "RegisterWindowMessageW".}
  proc GetMessage*(lpMsg: LPMSG, wnd: HWND, wMsgFilterMin: UINT,
                   wMsgFilterMax: UINT): WINBOOL{.stdcall, dynlib: "user32",
      importc: "GetMessageW".}
  proc DispatchMessage*(lpMsg: LPMSG): LONG{.stdcall, dynlib: "user32",
      importc: "DispatchMessageW".}
  proc PeekMessage*(lpMsg: LPMSG, wnd: HWND, wMsgFilterMin: UINT,
                    wMsgFilterMax: UINT, wRemoveMsg: UINT): WINBOOL{.stdcall,
      dynlib: "user32", importc: "PeekMessageW".}
  proc SendMessage*(wnd: HWND, Msg: UINT, wp: WPARAM, lp: LPARAM): LRESULT{.
      stdcall, dynlib: "user32", importc: "SendMessageW".}
  proc SendMessageTimeout*(wnd: HWND, Msg: UINT, wp: WPARAM,
                           lp: LPARAM, fuFlags: UINT, uTimeout: UINT,
                           lpdwResult: LPDWORD): LRESULT{.stdcall,
      dynlib: "user32", importc: "SendMessageTimeoutW".}
  proc SendNotifyMessage*(wnd: HWND, Msg: UINT, wp: WPARAM, lp: LPARAM): WINBOOL{.
      stdcall, dynlib: "user32", importc: "SendNotifyMessageW".}
  proc SendMessageCallback*(wnd: HWND, Msg: UINT, wp: WPARAM,
                            lp: LPARAM, lpResultCallBack: SENDASYNCPROC,
                            dwData: DWORD): WINBOOL{.stdcall, dynlib: "user32",
      importc: "SendMessageCallbackW".}
  proc PostMessage*(wnd: HWND, Msg: UINT, wp: WPARAM, lp: LPARAM): WINBOOL{.
      stdcall, dynlib: "user32", importc: "PostMessageW".}
  proc PostThreadMessage*(idThread: DWORD, Msg: UINT, wp: WPARAM,
                          lp: LPARAM): WINBOOL{.stdcall, dynlib: "user32",
      importc: "PostThreadMessageW".}
  proc DefWindowProc*(wnd: HWND, Msg: UINT, wp: WPARAM, lp: LPARAM): LRESULT{.
      stdcall, dynlib: "user32", importc: "DefWindowProcW".}
  proc CallWindowProc*(lpPrevWndFunc: WNDPROC, wnd: HWND, Msg: UINT,
                       wp: WPARAM, lp: LPARAM): LRESULT{.stdcall,
      dynlib: "user32", importc: "CallWindowProcW".}
  proc RegisterClass*(lpWndClass: LPWNDCLASS): ATOM{.stdcall, dynlib: "user32",
      importc: "RegisterClassW".}
  proc UnregisterClass*(lpClassName: LPCWSTR, hInstance: HINST): WINBOOL{.
      stdcall, dynlib: "user32", importc: "UnregisterClassW".}
  proc GetClassInfo*(hInstance: HINST, lpClassName: LPCWSTR,
                     lpWndClass: LPWNDCLASS): WINBOOL{.stdcall,
      dynlib: "user32", importc: "GetClassInfoW".}
  proc RegisterClassEx*(para1: LPWNDCLASSEXW): ATOM{.stdcall, dynlib: "user32",
      importc: "RegisterClassExW".}
  proc GetClassInfoEx*(para1: HINST, para2: LPCWSTR, para3: LPWNDCLASSEX): WINBOOL{.
      stdcall, dynlib: "user32", importc: "GetClassInfoExW".}
  proc CreateWindowEx*(dwExStyle: DWORD, lpClassName: LPCWSTR,
                       lpWindowName: LPCWSTR, dwStyle: DWORD, X: int32,
                       Y: int32, nWidth: int32, nHeight: int32,
                       hWndParent: HWND, menu: HMENU, hInstance: HINST,
                       lpParam: LPVOID): HWND{.stdcall, dynlib: "user32",
      importc: "CreateWindowExW".}
  proc CreateDialogParam*(hInstance: HINST, lpTemplateName: LPCWSTR,
                          hWndParent: HWND, lpDialogFunc: DLGPROC,
                          dwInitParam: LPARAM): HWND{.stdcall, dynlib: "user32",
      importc: "CreateDialogParamW".}
  proc CreateDialogIndirectParam*(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                                  hWndParent: HWND, lpDialogFunc: DLGPROC,
                                  dwInitParam: LPARAM): HWND{.stdcall,
      dynlib: "user32", importc: "CreateDialogIndirectParamW".}
  proc DialogBoxParam*(hInstance: HINST, lpTemplateName: LPCWSTR,
                       hWndParent: HWND, lpDialogFunc: DLGPROC,
                       dwInitParam: LPARAM): int32{.stdcall, dynlib: "user32",
      importc: "DialogBoxParamW".}
  proc DialogBoxIndirectParam*(hInstance: HINST,
                               hDialogTemplate: LPCDLGTEMPLATE,
                               hWndParent: HWND, lpDialogFunc: DLGPROC,
                               dwInitParam: LPARAM): int32{.stdcall,
      dynlib: "user32", importc: "DialogBoxIndirectParamW".}
  proc SetDlgItemText*(hDlg: HWND, nIDDlgItem: int32, lpString: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "user32", importc: "SetDlgItemTextW".}
  proc GetDlgItemText*(hDlg: HWND, nIDDlgItem: int32, lpString: LPWSTR,
                       nMaxCount: int32): UINT{.stdcall, dynlib: "user32",
      importc: "GetDlgItemTextW".}
  proc SendDlgItemMessage*(hDlg: HWND, nIDDlgItem: int32, Msg: UINT,
                           wp: WPARAM, lp: LPARAM): LONG{.stdcall,
      dynlib: "user32", importc: "SendDlgItemMessageW".}
  proc DefDlgProc*(hDlg: HWND, Msg: UINT, wp: WPARAM, lp: LPARAM): LRESULT{.
      stdcall, dynlib: "user32", importc: "DefDlgProcW".}
  proc CallMsgFilter*(lpMsg: LPMSG, nCode: int32): WINBOOL{.stdcall,
      dynlib: "user32", importc: "CallMsgFilterW".}
  proc RegisterClipboardFormat*(lpszFormat: LPCWSTR): UINT{.stdcall,
      dynlib: "user32", importc: "RegisterClipboardFormatW".}
  proc GetClipboardFormatName*(format: UINT, lpszFormatName: LPWSTR,
                               cchMaxCount: int32): int32{.stdcall,
      dynlib: "user32", importc: "GetClipboardFormatNameW".}
  proc CharToOem*(lpszSrc: LPCWSTR, lpszDst: LPSTR): WINBOOL{.stdcall,
      dynlib: "user32", importc: "CharToOemW".}
  proc OemToChar*(lpszSrc: LPCSTR, lpszDst: LPWSTR): WINBOOL{.stdcall,
      dynlib: "user32", importc: "OemToCharW".}
  proc CharToOemBuff*(lpszSrc: LPCWSTR, lpszDst: LPSTR, cchDstLength: DWORD): WINBOOL{.
      stdcall, dynlib: "user32", importc: "CharToOemBuffW".}
  proc OemToCharBuff*(lpszSrc: LPCSTR, lpszDst: LPWSTR, cchDstLength: DWORD): WINBOOL{.
      stdcall, dynlib: "user32", importc: "OemToCharBuffW".}
  proc CharUpper*(lpsz: LPWSTR): LPWSTR{.stdcall, dynlib: "user32",
      importc: "CharUpperW".}
  proc CharUpperBuff*(lpsz: LPWSTR, cchLength: DWORD): DWORD{.stdcall,
      dynlib: "user32", importc: "CharUpperBuffW".}
  proc CharLower*(lpsz: LPWSTR): LPWSTR{.stdcall, dynlib: "user32",
      importc: "CharLowerW".}
  proc CharLowerBuff*(lpsz: LPWSTR, cchLength: DWORD): DWORD{.stdcall,
      dynlib: "user32", importc: "CharLowerBuffW".}
  proc CharNext*(lpsz: LPCWSTR): LPWSTR{.stdcall, dynlib: "user32",
      importc: "CharNextW".}
  proc CharPrev*(lpszStart: LPCWSTR, lpszCurrent: LPCWSTR): LPWSTR{.stdcall,
      dynlib: "user32", importc: "CharPrevW".}
  proc IsCharAlpha*(ch: WCHAR): WINBOOL{.stdcall, dynlib: "user32",
      importc: "IsCharAlphaW".}
  proc IsCharAlphaNumeric*(ch: WCHAR): WINBOOL{.stdcall, dynlib: "user32",
      importc: "IsCharAlphaNumericW".}
  proc IsCharUpper*(ch: WCHAR): WINBOOL{.stdcall, dynlib: "user32",
      importc: "IsCharUpperW".}
  proc IsCharLower*(ch: WCHAR): WINBOOL{.stdcall, dynlib: "user32",
      importc: "IsCharLowerW".}
  proc GetKeyNameText*(lParam: LONG, lpString: LPWSTR, nSize: int32): int32{.
      stdcall, dynlib: "user32", importc: "GetKeyNameTextW".}
  proc VkKeyScan*(ch: WCHAR): SHORT{.stdcall, dynlib: "user32",
                                     importc: "VkKeyScanW".}
  proc VkKeyScanEx*(ch: WCHAR, dwhkl: HKL): SHORT{.stdcall, dynlib: "user32",
      importc: "VkKeyScanExW".}
  proc MapVirtualKey*(uCode: UINT, uMapType: UINT): UINT{.stdcall,
      dynlib: "user32", importc: "MapVirtualKeyW".}
  proc MapVirtualKeyEx*(uCode: UINT, uMapType: UINT, dwhkl: HKL): UINT{.stdcall,
      dynlib: "user32", importc: "MapVirtualKeyExW".}
  proc LoadAccelerators*(hInstance: HINST, lpTableName: LPCWSTR): HACCEL{.
      stdcall, dynlib: "user32", importc: "LoadAcceleratorsW".}
  proc CreateAcceleratorTable*(para1: LPACCEL, para2: int32): HACCEL{.stdcall,
      dynlib: "user32", importc: "CreateAcceleratorTableW".}
  proc CopyAcceleratorTable*(hAccelSrc: HACCEL, lpAccelDst: LPACCEL,
                             cAccelEntries: int32): int32{.stdcall,
      dynlib: "user32", importc: "CopyAcceleratorTableW".}
  proc TranslateAccelerator*(wnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG): int32{.
      stdcall, dynlib: "user32", importc: "TranslateAcceleratorW".}
  proc LoadMenu*(hInstance: HINST, lpMenuName: LPCWSTR): HMENU{.stdcall,
      dynlib: "user32", importc: "LoadMenuW".}
  proc LoadMenuIndirect*(lpMenuTemplate: LPMENUTEMPLATE): HMENU{.stdcall,
      dynlib: "user32", importc: "LoadMenuIndirectW".}
  proc ChangeMenu*(menu: HMENU, cmd: UINT, lpszNewItem: LPCWSTR,
                   cmdInsert: UINT, flags: UINT): WINBOOL{.stdcall,
      dynlib: "user32", importc: "ChangeMenuW".}
  proc GetMenuString*(menu: HMENU, uIDItem: UINT, lpString: LPWSTR,
                      nMaxCount: int32, uFlag: UINT): int32{.stdcall,
      dynlib: "user32", importc: "GetMenuStringW".}
  proc InsertMenu*(menu: HMENU, uPosition: UINT, uFlags: UINT,
                   uIDNewItem: UINT, lpNewItem: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "user32", importc: "InsertMenuW".}
  proc AppendMenu*(menu: HMENU, uFlags: UINT, uIDNewItem: UINT,
                   lpNewItem: LPCWSTR): WINBOOL{.stdcall, dynlib: "user32",
      importc: "AppendMenuW".}
  proc ModifyMenu*(hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT,
                   lpNewItem: LPCWSTR): WINBOOL{.stdcall, dynlib: "user32",
      importc: "ModifyMenuW".}
  proc InsertMenuItem*(para1: HMENU, para2: UINT, para3: WINBOOL,
                       para4: LPCMENUITEMINFO): WINBOOL{.stdcall,
      dynlib: "user32", importc: "InsertMenuItemW".}
  proc GetMenuItemInfo*(para1: HMENU, para2: UINT, para3: WINBOOL,
                        para4: LPMENUITEMINFO): WINBOOL{.stdcall,
      dynlib: "user32", importc: "GetMenuItemInfoW".}
  proc SetMenuItemInfo*(para1: HMENU, para2: UINT, para3: WINBOOL,
                        para4: LPCMENUITEMINFO): WINBOOL{.stdcall,
      dynlib: "user32", importc: "SetMenuItemInfoW".}
  proc DrawText*(hDC: HDC, lpString: LPCWSTR, nCount: int32, lpRect: LPRECT,
                 uFormat: UINT): int32{.stdcall, dynlib: "user32",
                                        importc: "DrawTextW".}
  proc DrawTextEx*(para1: HDC, para2: LPWSTR, para3: int32, para4: LPRECT,
                   para5: UINT, para6: LPDRAWTEXTPARAMS): int32{.stdcall,
      dynlib: "user32", importc: "DrawTextExW".}
  proc GrayString*(hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC,
                   lpData: LPARAM, nCount: int32, X: int32, Y: int32,
                   nWidth: int32, nHeight: int32): WINBOOL{.stdcall,
      dynlib: "user32", importc: "GrayStringW".}
  proc DrawState*(para1: HDC, para2: HBRUSH, para3: DRAWSTATEPROC,
                  para4: LPARAM, para5: WPARAM, para6: int32, para7: int32,
                  para8: int32, para9: int32, para10: UINT): WINBOOL{.stdcall,
      dynlib: "user32", importc: "DrawStateW".}
  proc TabbedTextOut*(hDC: HDC, X: int32, Y: int32, lpString: LPCWSTR,
                      nCount: int32, nTabPositions: int32,
                      lpnTabStopPositions: LPINT, nTabOrigin: int32): LONG{.
      stdcall, dynlib: "user32", importc: "TabbedTextOutW".}
  proc GetTabbedTextExtent*(hDC: HDC, lpString: LPCWSTR, nCount: int32,
                            nTabPositions: int32, lpnTabStopPositions: LPINT): DWORD{.
      stdcall, dynlib: "user32", importc: "GetTabbedTextExtentW".}
  proc SetProp*(wnd: HWND, lpString: LPCWSTR, hData: HANDLE): WINBOOL{.stdcall,
      dynlib: "user32", importc: "SetPropW".}
  proc GetProp*(wnd: HWND, lpString: LPCWSTR): HANDLE{.stdcall,
      dynlib: "user32", importc: "GetPropW".}
  proc RemoveProp*(wnd: HWND, lpString: LPCWSTR): HANDLE{.stdcall,
      dynlib: "user32", importc: "RemovePropW".}
  proc EnumPropsEx*(wnd: HWND, lpEnumFunc: PROPENUMPROCEX, lp: LPARAM): int32{.
      stdcall, dynlib: "user32", importc: "EnumPropsExW".}
  proc EnumProps*(wnd: HWND, lpEnumFunc: PROPENUMPROC): int32{.stdcall,
      dynlib: "user32", importc: "EnumPropsW".}
  proc SetWindowText*(wnd: HWND, lpString: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "user32", importc: "SetWindowTextW".}
  proc GetWindowText*(wnd: HWND, lpString: LPWSTR, nMaxCount: int32): int32{.
      stdcall, dynlib: "user32", importc: "GetWindowTextW".}
  proc GetWindowTextLength*(wnd: HWND): int32{.stdcall, dynlib: "user32",
      importc: "GetWindowTextLengthW".}
  proc MessageBox*(wnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT): int32{.
      stdcall, dynlib: "user32", importc: "MessageBoxW".}
  proc MessageBoxEx*(wnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR,
                     uType: UINT, wLanguageId: int16): int32{.stdcall,
      dynlib: "user32", importc: "MessageBoxExW".}
  proc MessageBoxIndirect*(para1: LPMSGBOXPARAMS): int32{.stdcall,
      dynlib: "user32", importc: "MessageBoxIndirectW".}
  proc GetWindowLong*(wnd: HWND, nIndex: int32): LONG{.stdcall,
      dynlib: "user32", importc: "GetWindowLongW".}
  proc SetWindowLong*(wnd: HWND, nIndex: int32, dwNewLong: LONG): LONG{.
      stdcall, dynlib: "user32", importc: "SetWindowLongW".}
  proc GetClassLong*(wnd: HWND, nIndex: int32): DWORD{.stdcall,
      dynlib: "user32", importc: "GetClassLongW".}
  proc SetClassLong*(wnd: HWND, nIndex: int32, dwNewLong: LONG): DWORD{.
      stdcall, dynlib: "user32", importc: "SetClassLongW".}
  when defined(cpu64):
    proc GetWindowLongPtr*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
        dynlib: "user32", importc: "GetWindowLongPtrW".}
    proc SetWindowLongPtr*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
        stdcall, dynlib: "user32", importc: "SetWindowLongPtrW".}
    proc GetClassLongPtr*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
        dynlib: "user32", importc: "GetClassLongPtrW".}
    proc SetClassLongPtr*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
        stdcall, dynlib: "user32", importc: "SetClassLongPtrW".}
  else:
    proc GetWindowLongPtr*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
        dynlib: "user32", importc: "GetWindowLongW".}
    proc SetWindowLongPtr*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
        stdcall, dynlib: "user32", importc: "SetWindowLongW".}
    proc GetClassLongPtr*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
        dynlib: "user32", importc: "GetClassLongW".}
    proc SetClassLongPtr*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
        stdcall, dynlib: "user32", importc: "SetClassLongW".}
  proc FindWindow*(lpClassName: LPCWSTR, lpWindowName: LPCWSTR): HWND{.stdcall,
      dynlib: "user32", importc: "FindWindowW".}
  proc FindWindowEx*(para1: HWND, para2: HWND, para3: LPCWSTR, para4: LPCWSTR): HWND{.
      stdcall, dynlib: "user32", importc: "FindWindowExW".}
  proc GetClassName*(wnd: HWND, lpClassName: LPWSTR, nMaxCount: int32): int32{.
      stdcall, dynlib: "user32", importc: "GetClassNameW".}
  proc SetWindowsHookEx*(idHook: int32, lpfn: HOOKPROC, hmod: HINST,
                         dwThreadId: DWORD): HHOOK{.stdcall, dynlib: "user32",
      importc: "SetWindowsHookExW".}
  proc LoadBitmap*(hInstance: HINST, lpBitmapName: LPCWSTR): HBITMAP{.stdcall,
      dynlib: "user32", importc: "LoadBitmapW".}
  proc LoadCursor*(hInstance: HINST, lpCursorName: LPCWSTR): HCURSOR{.stdcall,
      dynlib: "user32", importc: "LoadCursorW".}
  proc LoadCursorFromFile*(lpFileName: LPCWSTR): HCURSOR{.stdcall,
      dynlib: "user32", importc: "LoadCursorFromFileW".}
  proc LoadIcon*(hInstance: HINST, lpIconName: LPCWSTR): HICON{.stdcall,
      dynlib: "user32", importc: "LoadIconW".}
  proc LoadImage*(para1: HINST, para2: LPCWSTR, para3: UINT, para4: int32,
                  para5: int32, para6: UINT): HANDLE{.stdcall, dynlib: "user32",
      importc: "LoadImageW".}
  proc LoadString*(hInstance: HINST, uID: UINT, lpBuffer: LPWSTR,
                   nBufferMax: int32): int32{.stdcall, dynlib: "user32",
      importc: "LoadStringW".}
  proc IsDialogMessage*(hDlg: HWND, lpMsg: LPMSG): WINBOOL{.stdcall,
      dynlib: "user32", importc: "IsDialogMessageW".}
  proc DlgDirList*(hDlg: HWND, lpPathSpec: LPWSTR, nIDListBox: int32,
                   nIDStaticPath: int32, uFileType: UINT): int32{.stdcall,
      dynlib: "user32", importc: "DlgDirListW".}
  proc DlgDirSelectEx*(hDlg: HWND, lpString: LPWSTR, nCount: int32,
                       nIDListBox: int32): WINBOOL{.stdcall, dynlib: "user32",
      importc: "DlgDirSelectExW".}
  proc DlgDirListComboBox*(hDlg: HWND, lpPathSpec: LPWSTR, nIDComboBox: int32,
                           nIDStaticPath: int32, uFiletype: UINT): int32{.
      stdcall, dynlib: "user32", importc: "DlgDirListComboBoxW".}
  proc DlgDirSelectComboBoxEx*(hDlg: HWND, lpString: LPWSTR, nCount: int32,
                               nIDComboBox: int32): WINBOOL{.stdcall,
      dynlib: "user32", importc: "DlgDirSelectComboBoxExW".}
  proc DefFrameProc*(wnd: HWND, hWndMDIClient: HWND, uMsg: UINT,
                     wp: WPARAM, lp: LPARAM): LRESULT{.stdcall,
      dynlib: "user32", importc: "DefFrameProcW".}
  proc DefMDIChildProc*(wnd: HWND, uMsg: UINT, wp: WPARAM, lp: LPARAM): LRESULT{.
      stdcall, dynlib: "user32", importc: "DefMDIChildProcW".}
  proc CreateMDIWindow*(lpClassName: LPWSTR, lpWindowName: LPWSTR,
                        dwStyle: DWORD, X: int32, Y: int32, nWidth: int32,
                        nHeight: int32, hWndParent: HWND, hInstance: HINST,
                        lp: LPARAM): HWND{.stdcall, dynlib: "user32",
      importc: "CreateMDIWindowW".}
  proc WinHelp*(hWndMain: HWND, lpszHelp: LPCWSTR, uCommand: UINT, dwData: DWORD): WINBOOL{.
      stdcall, dynlib: "user32", importc: "WinHelpW".}
  proc ChangeDisplaySettings*(lpDevMode: LPDEVMODE, dwFlags: DWORD): LONG{.
      stdcall, dynlib: "user32", importc: "ChangeDisplaySettingsW".}
  proc EnumDisplaySettings*(lpszDeviceName: LPCWSTR, iModeNum: DWORD,
                            lpDevMode: LPDEVMODEW): WINBOOL{.stdcall,
      dynlib: "user32", importc: "EnumDisplaySettingsW".}
  proc SystemParametersInfo*(uiAction: UINT, uiParam: UINT, pvParam: PVOID,
                             fWinIni: UINT): WINBOOL{.stdcall, dynlib: "user32",
      importc: "SystemParametersInfoW".}
  proc AddFontResource*(para1: LPCWSTR): int32{.stdcall, dynlib: "gdi32",
      importc: "AddFontResourceW".}
  proc CopyMetaFile*(para1: HMETAFILE, para2: LPCWSTR): HMETAFILE{.stdcall,
      dynlib: "gdi32", importc: "CopyMetaFileW".}
  proc CreateFontIndirect*(para1: PLOGFONT): HFONT{.stdcall, dynlib: "gdi32",
      importc: "CreateFontIndirectW".}
  proc CreateFontIndirect*(para1: var LOGFONT): HFONT{.stdcall, dynlib: "gdi32",
      importc: "CreateFontIndirectW".}
  proc CreateFont*(para1: int32, para2: int32, para3: int32, para4: int32,
                   para5: int32, para6: DWORD, para7: DWORD, para8: DWORD,
                   para9: DWORD, para10: DWORD, para11: DWORD, para12: DWORD,
                   para13: DWORD, para14: LPCWSTR): HFONT{.stdcall,
      dynlib: "gdi32", importc: "CreateFontW".}
  proc CreateIC*(para1: LPCWSTR, para2: LPCWSTR, para3: LPCWSTR,
                 para4: LPDEVMODE): HDC{.stdcall, dynlib: "gdi32",
      importc: "CreateICW".}
  proc CreateMetaFile*(para1: LPCWSTR): HDC{.stdcall, dynlib: "gdi32",
      importc: "CreateMetaFileW".}
  proc CreateScalableFontResource*(para1: DWORD, para2: LPCWSTR, para3: LPCWSTR,
                                   para4: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "gdi32", importc: "CreateScalableFontResourceW".}
  proc EnumFontFamiliesEx*(para1: HDC, para2: LPLOGFONT, para3: FONTENUMEXPROC,
                           para4: LPARAM, para5: DWORD): int32{.stdcall,
      dynlib: "gdi32", importc: "EnumFontFamiliesExW".}
  proc EnumFontFamilies*(para1: HDC, para2: LPCWSTR, para3: FONTENUMPROC,
                         para4: LPARAM): int32{.stdcall, dynlib: "gdi32",
      importc: "EnumFontFamiliesW".}
  proc EnumFonts*(para1: HDC, para2: LPCWSTR, para3: ENUMFONTSPROC,
                  para4: LPARAM): int32{.stdcall, dynlib: "gdi32",
      importc: "EnumFontsW".}
  proc EnumFonts*(para1: HDC, para2: LPCWSTR, para3: ENUMFONTSPROC,
                  para4: pointer): int32{.stdcall, dynlib: "gdi32",
      importc: "EnumFontsW".}
  proc GetCharWidth*(para1: HDC, para2: UINT, para3: UINT, para4: LPINT): WINBOOL{.
      stdcall, dynlib: "gdi32", importc: "GetCharWidthW".}
  proc GetCharWidth32*(para1: HDC, para2: UINT, para3: UINT, para4: LPINT): WINBOOL{.
      stdcall, dynlib: "gdi32", importc: "GetCharWidth32W".}
  proc GetCharWidthFloat*(para1: HDC, para2: UINT, para3: UINT, para4: ptr float32): WINBOOL{.
      stdcall, dynlib: "gdi32", importc: "GetCharWidthFloatW".}
  proc GetCharABCWidths*(para1: HDC, para2: UINT, para3: UINT, para4: LPABC): WINBOOL{.
      stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsW".}
  proc GetCharABCWidthsFloat*(para1: HDC, para2: UINT, para3: UINT,
                              para4: LPABCFLOAT): WINBOOL{.stdcall,
      dynlib: "gdi32", importc: "GetCharABCWidthsFloatW".}
  proc GetGlyphOutline*(para1: HDC, para2: UINT, para3: UINT,
                        para4: LPGLYPHMETRICS, para5: DWORD, para6: LPVOID,
                        para7: PMAT2): DWORD{.stdcall, dynlib: "gdi32",
      importc: "GetGlyphOutlineW".}
  proc GetMetaFile*(para1: LPCWSTR): HMETAFILE{.stdcall, dynlib: "gdi32",
      importc: "GetMetaFileW".}
  proc GetOutlineTextMetrics*(para1: HDC, para2: UINT,
                              para3: LPOUTLINETEXTMETRIC): UINT{.stdcall,
      dynlib: "gdi32", importc: "GetOutlineTextMetricsW".}
  proc GetTextExtentPoint*(para1: HDC, para2: LPCWSTR, para3: int32,
                           para4: LPSIZE): WINBOOL{.stdcall, dynlib: "gdi32",
      importc: "GetTextExtentPointW".}
  proc GetTextExtentPoint32*(para1: HDC, para2: LPCWSTR, para3: int32,
                             para4: LPSIZE): WINBOOL{.stdcall, dynlib: "gdi32",
      importc: "GetTextExtentPoint32W".}
  proc GetTextExtentExPoint*(para1: HDC, para2: LPCWSTR, para3: int32,
                             para4: int32, para5: LPINT, para6: LPINT,
                             para7: LPSIZE): WINBOOL{.stdcall, dynlib: "gdi32",
      importc: "GetTextExtentExPointW".}
  proc GetCharacterPlacement*(para1: HDC, para2: LPCWSTR, para3: int32,
                              para4: int32, para5: LPGCP_RESULTS, para6: DWORD): DWORD{.
      stdcall, dynlib: "gdi32", importc: "GetCharacterPlacementW".}
  proc ResetDC*(para1: HDC, para2: LPDEVMODE): HDC{.stdcall, dynlib: "gdi32",
      importc: "ResetDCW".}
  proc RemoveFontResource*(para1: LPCWSTR): WINBOOL{.stdcall, dynlib: "gdi32",
      importc: "RemoveFontResourceW".}
  proc CopyEnhMetaFile*(para1: HENHMETAFILE, para2: LPCWSTR): HENHMETAFILE{.
      stdcall, dynlib: "gdi32", importc: "CopyEnhMetaFileW".}
  proc CreateEnhMetaFile*(para1: HDC, para2: LPCWSTR, para3: LPRECT,
                          para4: LPCWSTR): HDC{.stdcall, dynlib: "gdi32",
      importc: "CreateEnhMetaFileW".}
  proc GetEnhMetaFile*(para1: LPCWSTR): HENHMETAFILE{.stdcall, dynlib: "gdi32",
      importc: "GetEnhMetaFileW".}
  proc GetEnhMetaFileDescription*(para1: HENHMETAFILE, para2: UINT,
                                  para3: LPWSTR): UINT{.stdcall,
      dynlib: "gdi32", importc: "GetEnhMetaFileDescriptionW".}
  proc GetTextMetrics*(para1: HDC, para2: LPTEXTMETRIC): WINBOOL{.stdcall,
      dynlib: "gdi32", importc: "GetTextMetricsW".}
  proc StartDoc*(para1: HDC, para2: PDOCINFO): int32{.stdcall, dynlib: "gdi32",
      importc: "StartDocW".}
  proc GetObject*(para1: HGDIOBJ, para2: int32, para3: LPVOID): int32{.stdcall,
      dynlib: "gdi32", importc: "GetObjectW".}
  proc TextOut*(para1: HDC, para2: int32, para3: int32, para4: LPCWSTR,
                para5: int32): WINBOOL{.stdcall, dynlib: "gdi32",
                                        importc: "TextOutW".}
  proc ExtTextOut*(para1: HDC, para2: int32, para3: int32, para4: UINT,
                   para5: LPRECT, para6: LPCWSTR, para7: UINT, para8: LPINT): WINBOOL{.
      stdcall, dynlib: "gdi32", importc: "ExtTextOutW".}
  proc PolyTextOut*(para1: HDC, para2: PPOLYTEXT, para3: int32): WINBOOL{.
      stdcall, dynlib: "gdi32", importc: "PolyTextOutW".}
  proc GetTextFace*(para1: HDC, para2: int32, para3: LPWSTR): int32{.stdcall,
      dynlib: "gdi32", importc: "GetTextFaceW".}
  proc GetKerningPairs*(para1: HDC, para2: DWORD, para3: LPKERNINGPAIR): DWORD{.
      stdcall, dynlib: "gdi32", importc: "GetKerningPairsW".}
  proc GetLogColorSpace*(para1: HCOLORSPACE, para2: LPLOGCOLORSPACE,
                         para3: DWORD): WINBOOL{.stdcall, dynlib: "gdi32",
      importc: "GetLogColorSpaceW".}
  proc CreateColorSpace*(para1: LPLOGCOLORSPACE): HCOLORSPACE{.stdcall,
      dynlib: "gdi32", importc: "CreateColorSpaceW".}
  proc GetICMProfile*(para1: HDC, para2: DWORD, para3: LPWSTR): WINBOOL{.
      stdcall, dynlib: "gdi32", importc: "GetICMProfileW".}
  proc SetICMProfile*(para1: HDC, para2: LPWSTR): WINBOOL{.stdcall,

      dynlib: "gdi32", importc: "SetICMProfileW".}
  proc UpdateICMRegKey*(para1: DWORD, para2: DWORD, para3: LPWSTR, para4: UINT): WINBOOL{.
      stdcall, dynlib: "gdi32", importc: "UpdateICMRegKeyW".}
  proc EnumICMProfiles*(para1: HDC, para2: ICMENUMPROC, para3: LPARAM): int32{.
      stdcall, dynlib: "gdi32", importc: "EnumICMProfilesW".}
  proc CreatePropertySheetPage*(lppsp: LPCPROPSHEETPAGE): HPROPSHEETPAGE{.
      stdcall, dynlib: "comctl32", importc: "CreatePropertySheetPageW".}
  proc PropertySheet*(lppsph: LPCPROPSHEETHEADER): int32{.stdcall,
      dynlib: "comctl32", importc: "PropertySheetW".}
  proc ImageList_LoadImage*(hi: HINST, lpbmp: LPCWSTR, cx: int32, cGrow: int32,
                            crMask: COLORREF, uType: UINT, uFlags: UINT): HIMAGELIST{.
      stdcall, dynlib: "comctl32", importc: "ImageList_LoadImageW".}
  proc CreateStatusWindow*(style: LONG, lpszText: LPCWSTR, hwndParent: HWND,
                           wID: UINT): HWND{.stdcall, dynlib: "comctl32",
      importc: "CreateStatusWindowW".}
  proc DrawStatusText*(hDC: HDC, lprc: LPRECT, pszText: LPCWSTR, uFlags: UINT){.
      stdcall, dynlib: "comctl32", importc: "DrawStatusTextW".}
  proc GetOpenFileName*(para1: LPOPENFILENAME): WINBOOL{.stdcall,
      dynlib: "comdlg32", importc: "GetOpenFileNameW".}
  proc GetSaveFileName*(para1: LPOPENFILENAME): WINBOOL{.stdcall,
      dynlib: "comdlg32", importc: "GetSaveFileNameW".}
  proc GetFileTitle*(para1: LPCWSTR, para2: LPWSTR, para3: int16): int{.stdcall,
      dynlib: "comdlg32", importc: "GetFileTitleW".}
  proc ChooseColor*(para1: LPCHOOSECOLOR): WINBOOL{.stdcall, dynlib: "comdlg32",
      importc: "ChooseColorW".}
  proc ReplaceText*(para1: LPFINDREPLACE): HWND{.stdcall, dynlib: "comdlg32",
      importc: "ReplaceTextW".}
  proc ChooseFont*(para1: LPCHOOSEFONT): WINBOOL{.stdcall, dynlib: "comdlg32",
      importc: "ChooseFontW".}
  proc FindText*(para1: LPFINDREPLACE): HWND{.stdcall, dynlib: "comdlg32",
      importc: "FindTextW".}
  proc PrintDlg*(para1: LPPRINTDLG): WINBOOL{.stdcall, dynlib: "comdlg32",
      importc: "PrintDlgW".}
  proc PageSetupDlg*(para1: LPPAGESETUPDLG): WINBOOL{.stdcall,
      dynlib: "comdlg32", importc: "PageSetupDlgW".}
  proc CreateProcess*(lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR,
                      lpProcessAttributes: LPSECURITY_ATTRIBUTES,
                      lpThreadAttributes: LPSECURITY_ATTRIBUTES,
                      bInheritHandles: WINBOOL, dwCreationFlags: DWORD,
                      lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR,
                      lpStartupInfo: LPSTARTUPINFO,
                      lpProcessInformation: LPPROCESS_INFORMATION): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "CreateProcessW".}
  proc GetStartupInfo*(lpStartupInfo: LPSTARTUPINFO){.stdcall,
      dynlib: "kernel32", importc: "GetStartupInfoW".}
  proc FindFirstFile*(lpFileName: LPCWSTR, lpFindFileData: LPWIN32_FIND_DATA): HANDLE{.
      stdcall, dynlib: "kernel32", importc: "FindFirstFileW".}
  proc FindNextFile*(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATA): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "FindNextFileW".}
  proc GetVersionEx*(VersionInformation: LPOSVERSIONINFOW): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "GetVersionExW".}
  proc GetVersionExW*(VersionInformation: LPOSVERSIONINFOW): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "GetVersionExW".}
  proc CreateWindow*(lpClassName: LPCWSTR, lpWindowName: LPCWSTR,
                     dwStyle: DWORD, X: int32, Y: int32, nWidth: int32,
                     nHeight: int32, hWndParent: HWND, menu: HMENU,
                     hInstance: HINST, lpParam: LPVOID): HWND
  proc CreateDialog*(hInstance: HINST, lpName: LPCWSTR, hWndParent: HWND,
                     lpDialogFunc: DLGPROC): HWND
  proc CreateDialogIndirect*(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                             hWndParent: HWND, lpDialogFunc: DLGPROC): HWND
  proc DialogBox*(hInstance: HINST, lpTemplate: LPCWSTR, hWndParent: HWND,
                  lpDialogFunc: DLGPROC): int32
  proc DialogBoxIndirect*(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                          hWndParent: HWND, lpDialogFunc: DLGPROC): int32
  proc CreateDC*(para1: LPCWSTR, para2: LPCWSTR, para3: LPCWSTR, para4: pDEVMODE): HDC{.
      stdcall, dynlib: "gdi32", importc: "CreateDCW".}
  proc VerInstallFile*(uFlags: DWORD, szSrcFileName: LPWSTR,
                       szDestFileName: LPWSTR, szSrcDir: LPWSTR,
                       szDestDir: LPWSTR, szCurDir: LPWSTR, szTmpFile: LPWSTR,
                       lpuTmpFileLen: PUINT): DWORD{.stdcall, dynlib: "version",
      importc: "VerInstallFileW".}
  proc GetFileVersionInfoSize*(lptstrFilename: LPWSTR, lpdwHandle: LPDWORD): DWORD{.
      stdcall, dynlib: "version", importc: "GetFileVersionInfoSizeW".}
  proc GetFileVersionInfo*(lptstrFilename: LPWSTR, dwHandle: DWORD,
                           dwLen: DWORD, lpData: LPVOID): WINBOOL{.stdcall,
      dynlib: "version", importc: "GetFileVersionInfoW".}
  proc VerLanguageName*(wLang: DWORD, szLang: LPWSTR, nSize: DWORD): DWORD{.
      stdcall, dynlib: "kernel32", importc: "VerLanguageNameW".}
  proc VerQueryValue*(pBlock: LPVOID, lpSubBlock: LPWSTR, lplpBuffer: LPVOID,
                      puLen: PUINT): WINBOOL{.stdcall, dynlib: "version",
      importc: "VerQueryValueW".}
  proc VerFindFile*(uFlags: DWORD, szFileName: LPWSTR, szWinDir: LPWSTR,
                    szAppDir: LPWSTR, szCurDir: LPWSTR, lpuCurDirLen: PUINT,
                    szDestDir: LPWSTR, lpuDestDirLen: PUINT): DWORD{.stdcall,
      dynlib: "version", importc: "VerFindFileW".}
  proc RegSetValueEx*(key: HKEY, lpValueName: LPCWSTR, Reserved: DWORD,
                      dwType: DWORD, lpData: LPBYTE, cbData: DWORD): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegSetValueExW".}
  proc RegUnLoadKey*(key: HKEY, lpSubKey: LPCWSTR): LONG{.stdcall,
      dynlib: "advapi32", importc: "RegUnLoadKeyW".}
  proc InitiateSystemShutdown*(lpMachineName: LPWSTR, lpMessage: LPWSTR,
                               dwTimeout: DWORD, bForceAppsClosed: WINBOOL,
                               bRebootAfterShutdown: WINBOOL): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "InitiateSystemShutdownW".}
  proc AbortSystemShutdown*(lpMachineName: LPWSTR): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "AbortSystemShutdownW".}
  proc RegRestoreKey*(key: HKEY, lpFile: LPCWSTR, dwFlags: DWORD): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegRestoreKeyW".}
  proc RegSaveKey*(key: HKEY, lpFile: LPCWSTR,
                   lpSecurityAttributes: LPSECURITY_ATTRIBUTES): LONG{.stdcall,
      dynlib: "advapi32", importc: "RegSaveKeyW".}
  proc RegSetValue*(key: HKEY, lpSubKey: LPCWSTR, dwType: DWORD,
                    lpData: LPCWSTR, cbData: DWORD): LONG{.stdcall,
      dynlib: "advapi32", importc: "RegSetValueW".}
  proc RegQueryValue*(key: HKEY, lpSubKey: LPCWSTR, lpValue: LPWSTR,
                      lpcbValue: PLONG): LONG{.stdcall, dynlib: "advapi32",
      importc: "RegQueryValueW".}
  proc RegQueryMultipleValues*(key: HKEY, val_list: PVALENT, num_vals: DWORD,
                               lpValueBuf: LPWSTR, ldwTotsize: LPDWORD): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegQueryMultipleValuesW".}
  proc RegQueryValueEx*(key: HKEY, lpValueName: LPCWSTR, lpReserved: LPDWORD,
                        lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegQueryValueExW".}
  proc RegReplaceKey*(key: HKEY, lpSubKey: LPCWSTR, lpNewFile: LPCWSTR,
                      lpOldFile: LPCWSTR): LONG{.stdcall, dynlib: "advapi32",
      importc: "RegReplaceKeyW".}
  proc RegConnectRegistry*(lpMachineName: LPWSTR, key: HKEY, phkResult: PHKEY): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegConnectRegistryW".}
  proc RegCreateKey*(key: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegCreateKeyW".}
  proc RegCreateKeyEx*(key: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD,
                       lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM,
                       lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
                       phkResult: PHKEY, lpdwDisposition: LPDWORD): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegCreateKeyExW".}
  proc RegDeleteKey*(key: HKEY, lpSubKey: LPCWSTR): LONG{.stdcall,
      dynlib: "advapi32", importc: "RegDeleteKeyW".}
  proc RegDeleteValue*(key: HKEY, lpValueName: LPCWSTR): LONG{.stdcall,
      dynlib: "advapi32", importc: "RegDeleteValueW".}
  proc RegEnumKey*(key: HKEY, dwIndex: DWORD, lpName: LPWSTR, cbName: DWORD): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegEnumKeyW".}
  proc RegEnumKeyEx*(key: HKEY, dwIndex: DWORD, lpName: LPWSTR,
                     lpcbName: LPDWORD, lpReserved: LPDWORD, lpClass: LPWSTR,
                     lpcbClass: LPDWORD, lpftLastWriteTime: PFILETIME): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegEnumKeyExW".}
  proc RegEnumValue*(key: HKEY, dwIndex: DWORD, lpValueName: LPWSTR,
                     lpcbValueName: LPDWORD, lpReserved: LPDWORD,
                     lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegEnumValueW".}
  proc RegLoadKey*(key: HKEY, lpSubKey: LPCWSTR, lpFile: LPCWSTR): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegLoadKeyW".}
  proc RegOpenKey*(key: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY): LONG{.
      stdcall, dynlib: "advapi32", importc: "RegOpenKeyW".}
  proc RegOpenKeyEx*(key: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD,
                     samDesired: REGSAM, phkResult: PHKEY): LONG{.stdcall,
      dynlib: "advapi32", importc: "RegOpenKeyExW".}
  proc RegQueryInfoKey*(key: HKEY, lpClass: LPWSTR, lpcbClass: LPDWORD,
                        lpReserved: LPDWORD, lpcSubKeys: LPDWORD,
                        lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD,
                        lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD,
                        lpcbMaxValueLen: LPDWORD,
                        lpcbSecurityDescriptor: LPDWORD,
                        lpftLastWriteTime: PFILETIME): LONG{.stdcall,
      dynlib: "advapi32", importc: "RegQueryInfoKeyW".}
  proc CompareString*(Locale: LCID, dwCmpFlags: DWORD, lpString1: LPCWSTR,
                      cchCount1: int32, lpString2: LPCWSTR, cchCount2: int32): int32{.
      stdcall, dynlib: "kernel32", importc: "CompareStringW".}
  proc LCMapString*(Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCWSTR,
                    cchSrc: int32, lpDestStr: LPWSTR, cchDest: int32): int32{.
      stdcall, dynlib: "kernel32", importc: "LCMapStringW".}
  proc GetLocaleInfo*(Locale: LCID, LCType: LCTYPE, lpLCData: LPWSTR,
                      cchData: int32): int32{.stdcall, dynlib: "kernel32",
      importc: "GetLocaleInfoW".}
  proc SetLocaleInfo*(Locale: LCID, LCType: LCTYPE, lpLCData: LPCWSTR): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "SetLocaleInfoW".}
  proc GetTimeFormat*(Locale: LCID, dwFlags: DWORD, lpTime: LPSYSTEMTIME,
                      lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: int32): int32{.
      stdcall, dynlib: "kernel32", importc: "GetTimeFormatW".}
  proc GetDateFormat*(Locale: LCID, dwFlags: DWORD, lpDate: LPSYSTEMTIME,
                      lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: int32): int32{.
      stdcall, dynlib: "kernel32", importc: "GetDateFormatW".}
  proc GetNumberFormat*(Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR,
                        lpFormat: PNUMBERFMT, lpNumberStr: LPWSTR,
                        cchNumber: int32): int32{.stdcall, dynlib: "kernel32",
      importc: "GetNumberFormatW".}
  proc GetCurrencyFormat*(Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR,
                          lpFormat: PCURRENCYFMT, lpCurrencyStr: LPWSTR,
                          cchCurrency: int32): int32{.stdcall,
      dynlib: "kernel32", importc: "GetCurrencyFormatW".}
  proc EnumCalendarInfo*(lpCalInfoEnumProc: CALINFO_ENUMPROC, Locale: LCID,
                         Calendar: CALID, CalType: CALTYPE): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "EnumCalendarInfoW".}
  proc EnumTimeFormats*(lpTimeFmtEnumProc: TIMEFMT_ENUMPROC, Locale: LCID,
                        dwFlags: DWORD): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "EnumTimeFormatsW".}
  proc EnumDateFormats*(lpDateFmtEnumProc: DATEFMT_ENUMPROC, Locale: LCID,
                        dwFlags: DWORD): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "EnumDateFormatsW".}
  proc GetStringTypeEx*(Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCWSTR,
                        cchSrc: int32, lpCharType: LPWORD): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "GetStringTypeExW".}
  proc GetStringType*(dwInfoType: DWORD, lpSrcStr: LPCWSTR, cchSrc: int32,
                      lpCharType: LPWORD): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "GetStringTypeW".}
  proc FoldString*(dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: int32,
                   lpDestStr: LPWSTR, cchDest: int32): int32{.stdcall,
      dynlib: "kernel32", importc: "FoldStringW".}
  proc EnumSystemLocales*(lpLocaleEnumProc: LOCALE_ENUMPROC, dwFlags: DWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "EnumSystemLocalesW".}
  proc EnumSystemCodePages*(lpCodePageEnumProc: CODEPAGE_ENUMPROC,
                            dwFlags: DWORD): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "EnumSystemCodePagesW".}
  proc PeekConsoleInput*(hConsoleInput: HANDLE, lpBuffer: PINPUTRECORD,
                         nLength: DWORD, lpNumberOfEventsRead: LPDWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "PeekConsoleInputW".}
  proc ReadConsoleInput*(hConsoleInput: HANDLE, lpBuffer: PINPUTRECORD,
                         nLength: DWORD, lpNumberOfEventsRead: LPDWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "ReadConsoleInputW".}
  proc WriteConsoleInput*(hConsoleInput: HANDLE, lpBuffer: PINPUTRECORD,
                          nLength: DWORD, lpNumberOfEventsWritten: LPDWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "WriteConsoleInputW".}
  proc ReadConsoleOutput*(hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO,
                          dwBufferSize: COORD, dwBufferCoord: COORD,
                          lpReadRegion: PSMALL_RECT): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "ReadConsoleOutputW".}
  proc WriteConsoleOutput*(hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO,
                           dwBufferSize: COORD, dwBufferCoord: COORD,
                           lpWriteRegion: PSMALL_RECT): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "WriteConsoleOutputW".}
  proc ReadConsoleOutputCharacter*(hConsoleOutput: HANDLE, lpCharacter: LPWSTR,
                                   nLength: DWORD, dwReadCoord: COORD,
                                   lpNumberOfCharsRead: LPDWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterW".}
  proc WriteConsoleOutputCharacter*(hConsoleOutput: HANDLE,
                                    lpCharacter: LPCWSTR, nLength: DWORD,
                                    dwWriteCoord: COORD,
                                    lpNumberOfCharsWritten: LPDWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterW".}
  proc FillConsoleOutputCharacter*(hConsoleOutput: HANDLE, cCharacter: WCHAR,
                                   nLength: DWORD, dwWriteCoord: COORD,
                                   lpNumberOfCharsWritten: LPDWORD): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "FillConsoleOutputCharacterW".}
  proc ScrollConsoleScreenBuffer*(hConsoleOutput: HANDLE,
                                  lpScrollRectangle: PSMALL_RECT,
                                  lpClipRectangle: PSMALL_RECT,
                                  dwDestinationOrigin: COORD, lpFill: PCHAR_INFO): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "ScrollConsoleScreenBufferW".}
  proc GetConsoleTitle*(lpConsoleTitle: LPWSTR, nSize: DWORD): DWORD{.stdcall,
      dynlib: "kernel32", importc: "GetConsoleTitleW".}
  proc SetConsoleTitle*(lpConsoleTitle: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "kernel32", importc: "SetConsoleTitleW".}
  proc ReadConsole*(hConsoleInput: HANDLE, lpBuffer: LPVOID,
                    nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD,
                    lpReserved: LPVOID): WINBOOL{.stdcall, dynlib: "kernel32",
      importc: "ReadConsoleW".}
  proc WriteConsole*(hConsoleOutput: HANDLE, lpBuffer: pointer,
                     nNumberOfCharsToWrite: DWORD,
                     lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID): WINBOOL{.
      stdcall, dynlib: "kernel32", importc: "WriteConsoleW".}
  proc WNetAddConnection*(lpRemoteName: LPCWSTR, lpPassword: LPCWSTR,
                          lpLocalName: LPCWSTR): DWORD{.stdcall, dynlib: "mpr",
      importc: "WNetAddConnectionW".}
  proc WNetAddConnection2*(lpNetResource: LPNETRESOURCE, lpPassword: LPCWSTR,
                           lpUserName: LPCWSTR, dwFlags: DWORD): DWORD{.stdcall,
      dynlib: "mpr", importc: "WNetAddConnection2W".}
  proc WNetAddConnection3*(hwndOwner: HWND, lpNetResource: LPNETRESOURCE,
                           lpPassword: LPCWSTR, lpUserName: LPCWSTR,
                           dwFlags: DWORD): DWORD{.stdcall, dynlib: "mpr",
      importc: "WNetAddConnection3W".}
  proc WNetCancelConnection*(lpName: LPCWSTR, fForce: WINBOOL): DWORD{.stdcall,
      dynlib: "mpr", importc: "WNetCancelConnectionW".}
  proc WNetCancelConnection2*(lpName: LPCWSTR, dwFlags: DWORD, fForce: WINBOOL): DWORD{.
      stdcall, dynlib: "mpr", importc: "WNetCancelConnection2W".}
  proc WNetGetConnection*(lpLocalName: LPCWSTR, lpRemoteName: LPWSTR,
                          lpnLength: LPDWORD): DWORD{.stdcall, dynlib: "mpr",
      importc: "WNetGetConnectionW".}
  proc WNetUseConnection*(hwndOwner: HWND, lpNetResource: LPNETRESOURCE,
                          lpUserID: LPCWSTR, lpPassword: LPCWSTR,
                          dwFlags: DWORD, lpAccessName: LPWSTR,
                          lpBufferSize: LPDWORD, lpResult: LPDWORD): DWORD{.
      stdcall, dynlib: "mpr", importc: "WNetUseConnectionW".}
  proc WNetSetConnection*(lpName: LPCWSTR, dwProperties: DWORD, pvValues: LPVOID): DWORD{.
      stdcall, dynlib: "mpr", importc: "WNetSetConnectionW".}
  proc WNetConnectionDialog1*(lpConnDlgStruct: LPCONNECTDLGSTRUCT): DWORD{.
      stdcall, dynlib: "mpr", importc: "WNetConnectionDialog1W".}
  proc WNetDisconnectDialog1*(lpConnDlgStruct: LPDISCDLGSTRUCT): DWORD{.stdcall,
      dynlib: "mpr", importc: "WNetDisconnectDialog1W".}
  proc WNetOpenEnum*(dwScope: DWORD, dwType: DWORD, dwUsage: DWORD,
                     lpNetResource: LPNETRESOURCE, lphEnum: LPHANDLE): DWORD{.
      stdcall, dynlib: "mpr", importc: "WNetOpenEnumW".}
  proc WNetEnumResource*(hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID,
                         lpBufferSize: LPDWORD): DWORD{.stdcall, dynlib: "mpr",
      importc: "WNetEnumResourceW".}
  proc WNetGetUniversalName*(lpLocalPath: LPCWSTR, dwInfoLevel: DWORD,
                             lpBuffer: LPVOID, lpBufferSize: LPDWORD): DWORD{.
      stdcall, dynlib: "mpr", importc: "WNetGetUniversalNameW".}
  proc WNetGetUser*(lpName: LPCWSTR, lpUserName: LPWSTR, lpnLength: LPDWORD): DWORD{.
      stdcall, dynlib: "mpr", importc: "WNetGetUserW".}
  proc WNetGetProviderName*(dwNetType: DWORD, lpProviderName: LPWSTR,
                            lpBufferSize: LPDWORD): DWORD{.stdcall,
      dynlib: "mpr", importc: "WNetGetProviderNameW".}
  proc WNetGetNetworkInformation*(lpProvider: LPCWSTR,
                                  lpNetInfoStruct: LPNETINFOSTRUCT): DWORD{.
      stdcall, dynlib: "mpr", importc: "WNetGetNetworkInformationW".}
  proc WNetGetLastError*(lpError: LPDWORD, lpErrorBuf: LPWSTR,
                         nErrorBufSize: DWORD, lpNameBuf: LPWSTR,
                         nNameBufSize: DWORD): DWORD{.stdcall, dynlib: "mpr",
      importc: "WNetGetLastErrorW".}
  proc MultinetGetConnectionPerformance*(lpNetResource: LPNETRESOURCE,
      lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT): DWORD{.stdcall,
      dynlib: "mpr", importc: "MultinetGetConnectionPerformanceW".}
  proc ChangeServiceConfig*(hService: SC_HANDLE, dwServiceType: DWORD,
                            dwStartType: DWORD, dwErrorControl: DWORD,
                            lpBinaryPathName: LPCWSTR,
                            lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD,
                            lpDependencies: LPCWSTR,
                            lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR,
                            lpDisplayName: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "ChangeServiceConfigW".}
  proc CreateService*(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR,
                      lpDisplayName: LPCWSTR, dwDesiredAccess: DWORD,
                      dwServiceType: DWORD, dwStartType: DWORD,
                      dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR,
                      lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD,
                      lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR,
                      lpPassword: LPCWSTR): SC_HANDLE{.stdcall,
      dynlib: "advapi32", importc: "CreateServiceW".}
  proc EnumDependentServices*(hService: SC_HANDLE, dwServiceState: DWORD,
                              lpServices: LPENUM_SERVICE_STATUS,
                              cbBufSize: DWORD, pcbBytesNeeded: LPDWORD,
                              lpServicesReturned: LPDWORD): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "EnumDependentServicesW".}
  proc EnumServicesStatus*(hSCManager: SC_HANDLE, dwServiceType: DWORD,
                           dwServiceState: DWORD,
                           lpServices: LPENUM_SERVICE_STATUS, cbBufSize: DWORD,
                           pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD,
                           lpResumeHandle: LPDWORD): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "EnumServicesStatusW".}
  proc GetServiceKeyName*(hSCManager: SC_HANDLE, lpDisplayName: LPCWSTR,
                          lpServiceName: LPWSTR, lpcchBuffer: LPDWORD): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "GetServiceKeyNameW".}
  proc GetServiceDisplayName*(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR,
                              lpDisplayName: LPWSTR, lpcchBuffer: LPDWORD): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "GetServiceDisplayNameW".}
  proc OpenSCManager*(lpMachineName: LPCWSTR, lpDatabaseName: LPCWSTR,
                      dwDesiredAccess: DWORD): SC_HANDLE{.stdcall,
      dynlib: "advapi32", importc: "OpenSCManagerW".}
  proc OpenService*(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR,
                    dwDesiredAccess: DWORD): SC_HANDLE{.stdcall,
      dynlib: "advapi32", importc: "OpenServiceW".}
  proc QueryServiceConfig*(hService: SC_HANDLE,
                           lpServiceConfig: LPQUERY_SERVICE_CONFIG,
                           cbBufSize: DWORD, pcbBytesNeeded: LPDWORD): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "QueryServiceConfigW".}
  proc QueryServiceLockStatus*(hSCManager: SC_HANDLE,
                               lpLockStatus: LPQUERY_SERVICE_LOCK_STATUS,
                               cbBufSize: DWORD, pcbBytesNeeded: LPDWORD): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "QueryServiceLockStatusW".}
  proc RegisterServiceCtrlHandler*(lpServiceName: LPCWSTR,
                                   lpHandlerProc: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE{.
      stdcall, dynlib: "advapi32", importc: "RegisterServiceCtrlHandlerW".}
  proc StartServiceCtrlDispatcher*(lpServiceStartTable: LPSERVICE_TABLE_ENTRY): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "StartServiceCtrlDispatcherW".}
  proc StartService*(hService: SC_HANDLE, dwNumServiceArgs: DWORD,
                     lpServiceArgVectors: LPCWSTR): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "StartServiceW".}
  proc DragQueryFile*(para1: HDROP, para2: int, para3: LPCWSTR, para4: int): int{.
      stdcall, dynlib: "shell32", importc: "DragQueryFileW".}
  proc ExtractAssociatedIcon*(para1: HINST, para2: LPCWSTR, para3: LPWORD): HICON{.
      stdcall, dynlib: "shell32", importc: "ExtractAssociatedIconW".}
  proc ExtractIcon*(para1: HINST, para2: LPCWSTR, para3: int): HICON{.stdcall,
      dynlib: "shell32", importc: "ExtractIconW".}
  proc FindExecutable*(para1: LPCWSTR, para2: LPCWSTR, para3: LPCWSTR): HINST{.
      stdcall, dynlib: "shell32", importc: "FindExecutableW".}
  proc ShellAbout*(para1: HWND, para2: LPCWSTR, para3: LPCWSTR, para4: HICON): int32{.
      stdcall, dynlib: "shell32", importc: "ShellAboutW".}
  proc ShellExecute*(para1: HWND, para2: LPCWSTR, para3: LPCWSTR,
                     para4: LPCWSTR, para5: LPCWSTR, para6: int32): HINST{.
      stdcall, dynlib: "shell32", importc: "ShellExecuteW".}
  proc Shell_NotifyIcon*(dwMessage: DWORD, lpData: PNotifyIconDataA): WINBOOL{.
      stdcall, dynlib: "shell32", importc: "Shell_NotifyIconW".}
  proc DdeCreateStringHandle*(para1: DWORD, para2: LPCWSTR, para3: int32): HSZ{.
      stdcall, dynlib: "user32", importc: "DdeCreateStringHandleW".}
  proc DdeInitialize*(para1: LPDWORD, para2: PFNCALLBACK, para3: DWORD,
                      para4: DWORD): UINT{.stdcall, dynlib: "user32",
      importc: "DdeInitializeW".}
  proc DdeQueryString*(para1: DWORD, para2: HSZ, para3: LPCWSTR, para4: DWORD,
                       para5: int32): DWORD{.stdcall, dynlib: "user32",
      importc: "DdeQueryStringW".}
  proc LogonUser*(para1: LPWSTR, para2: LPWSTR, para3: LPWSTR, para4: DWORD,
                  para5: DWORD, para6: PHANDLE): WINBOOL{.stdcall,
      dynlib: "advapi32", importc: "LogonUserW".}
  proc CreateProcessAsUser*(para1: HANDLE, para2: LPCWSTR, para3: LPWSTR,
                            para4: LPSECURITY_ATTRIBUTES,
                            para5: LPSECURITY_ATTRIBUTES, para6: WINBOOL,
                            para7: DWORD, para8: LPVOID, para9: LPCWSTR,
                            para10: LPSTARTUPINFO, para11: LPPROCESS_INFORMATION): WINBOOL{.
      stdcall, dynlib: "advapi32", importc: "CreateProcessAsUserW".}
else:
  proc getBinaryType*(lpApplicationName: Lpcstr, lpBinaryType: Lpdword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "GetBinaryTypeA".}
  proc getShortPathName*(lpszLongPath: Lpcstr, lpszShortPath: Lpstr,
                         cchBuffer: Dword): Dword{.stdcall, dynlib: "kernel32",
      importc: "GetShortPathNameA".}
  proc getEnvironmentStrings*(): Lpstr{.stdcall, dynlib: "kernel32",
                                        importc: "GetEnvironmentStringsA".}
  proc freeEnvironmentStrings*(para1: Lpstr): Winbool{.stdcall,
      dynlib: "kernel32", importc: "FreeEnvironmentStringsA".}
  proc formatMessage*(dwFlags: Dword, lpSource: Lpcvoid, dwMessageId: Dword,
                      dwLanguageId: Dword, lpBuffer: Lpstr, nSize: Dword,
                      Arguments: VaList): Dword{.stdcall, dynlib: "kernel32",
      importc: "FormatMessageA".}
  proc createMailslot*(lpName: Lpcstr, nMaxMessageSize: Dword,
                       lReadTimeout: Dword,
                       lpSecurityAttributes: LpsecurityAttributes): Handle{.
      stdcall, dynlib: "kernel32", importc: "CreateMailslotA".}
  proc lstrcmp*(lpString1: Lpcstr, lpString2: Lpcstr): Int32{.stdcall,
      dynlib: "kernel32", importc: "lstrcmpA".}
  proc lstrcmpi*(lpString1: Lpcstr, lpString2: Lpcstr): Int32{.stdcall,
      dynlib: "kernel32", importc: "lstrcmpiA".}
  proc lstrcpyn*(lpString1: Lpstr, lpString2: Lpcstr, iMaxLength: Int32): Lpstr{.
      stdcall, dynlib: "kernel32", importc: "lstrcpynA".}
  proc lstrcpy*(lpString1: Lpstr, lpString2: Lpcstr): Lpstr{.stdcall,
      dynlib: "kernel32", importc: "lstrcpyA".}
  proc lstrcat*(lpString1: Lpstr, lpString2: Lpcstr): Lpstr{.stdcall,
      dynlib: "kernel32", importc: "lstrcatA".}
  proc lstrlen*(lpString: Lpcstr): Int32{.stdcall, dynlib: "kernel32",
      importc: "lstrlenA".}
  proc createMutex*(lpMutexAttributes: LpsecurityAttributes,
                    bInitialOwner: Winbool, lpName: Lpcstr): Handle{.stdcall,
      dynlib: "kernel32", importc: "CreateMutexA".}
  proc openMutex*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                  lpName: Lpcstr): Handle{.stdcall, dynlib: "kernel32",
      importc: "OpenMutexA".}
  proc createEvent*(lpEventAttributes: LpsecurityAttributes,
                    bManualReset: Winbool, bInitialState: Winbool,
                    lpName: Lpcstr): Handle{.stdcall, dynlib: "kernel32",
      importc: "CreateEventA".}
  proc openEvent*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                  lpName: Lpcstr): Handle{.stdcall, dynlib: "kernel32",
      importc: "OpenEventA".}
  proc createSemaphore*(lpSemaphoreAttributes: LpsecurityAttributes,
                        lInitialCount: Long, lMaximumCount: Long, lpName: Lpcstr): Handle{.
      stdcall, dynlib: "kernel32", importc: "CreateSemaphoreA".}
  proc openSemaphore*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                      lpName: Lpcstr): Handle{.stdcall, dynlib: "kernel32",
      importc: "OpenSemaphoreA".}
  proc createFileMapping*(hFile: Handle,
                          lpFileMappingAttributes: LpsecurityAttributes,
                          flProtect: Dword, dwMaximumSizeHigh: Dword,
                          dwMaximumSizeLow: Dword, lpName: Lpcstr): Handle{.
      stdcall, dynlib: "kernel32", importc: "CreateFileMappingA".}
  proc openFileMapping*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                        lpName: Lpcstr): Handle{.stdcall, dynlib: "kernel32",
      importc: "OpenFileMappingA".}
  proc getLogicalDriveStrings*(nBufferLength: Dword, lpBuffer: Lpstr): Dword{.
      stdcall, dynlib: "kernel32", importc: "GetLogicalDriveStringsA".}
  proc loadLibrary*(lpLibFileName: Lpcstr): Hinst{.stdcall, dynlib: "kernel32",
      importc: "LoadLibraryA".}
  proc loadLibraryEx*(lpLibFileName: Lpcstr, hFile: Handle, dwFlags: Dword): Hinst{.
      stdcall, dynlib: "kernel32", importc: "LoadLibraryExA".}
  proc getModuleFileName*(hModule: Hinst, lpFilename: Lpstr, nSize: Dword): Dword{.
      stdcall, dynlib: "kernel32", importc: "GetModuleFileNameA".}
  proc getModuleHandle*(lpModuleName: Lpcstr): Hmodule{.stdcall,
      dynlib: "kernel32", importc: "GetModuleHandleA".}
  proc fatalAppExit*(uAction: Uint, lpMessageText: Lpcstr){.stdcall,
      dynlib: "kernel32", importc: "FatalAppExitA".}
  proc getCommandLine*(): Lpstr{.stdcall, dynlib: "kernel32",
                                 importc: "GetCommandLineA".}
  proc getEnvironmentVariable*(lpName: Lpcstr, lpBuffer: Lpstr, nSize: Dword): Dword{.
      stdcall, dynlib: "kernel32", importc: "GetEnvironmentVariableA".}
  proc setEnvironmentVariable*(lpName: Lpcstr, lpValue: Lpcstr): Winbool{.
      stdcall, dynlib: "kernel32", importc: "SetEnvironmentVariableA".}
  proc expandEnvironmentStrings*(lpSrc: Lpcstr, lpDst: Lpstr, nSize: Dword): Dword{.
      stdcall, dynlib: "kernel32", importc: "ExpandEnvironmentStringsA".}
  proc outputDebugString*(lpOutputString: Lpcstr){.stdcall, dynlib: "kernel32",
      importc: "OutputDebugStringA".}
  proc findResource*(hModule: Hinst, lpName: Lpcstr, lpType: Lpcstr): Hrsrc{.
      stdcall, dynlib: "kernel32", importc: "FindResourceA".}
  proc findResourceEx*(hModule: Hinst, lpType: Lpcstr, lpName: Lpcstr,
                       wLanguage: Int16): Hrsrc{.stdcall, dynlib: "kernel32",
      importc: "FindResourceExA".}
  proc enumResourceTypes*(hModule: Hinst, lpEnumFunc: Enumrestypeproc,
                          lParam: Long): Winbool{.stdcall, dynlib: "kernel32",
      importc: "EnumResourceTypesA".}
  proc enumResourceNames*(hModule: Hinst, lpType: Lpcstr,
                          lpEnumFunc: Enumresnameproc, lParam: Long): Winbool{.
      stdcall, dynlib: "kernel32", importc: "EnumResourceNamesA".}
  proc enumResourceLanguages*(hModule: Hinst, lpType: Lpcstr, lpName: Lpcstr,
                              lpEnumFunc: Enumreslangproc, lParam: Long): Winbool{.
      stdcall, dynlib: "kernel32", importc: "EnumResourceLanguagesA".}
  proc beginUpdateResource*(pFileName: Lpcstr, bDeleteExistingResources: Winbool): Handle{.
      stdcall, dynlib: "kernel32", importc: "BeginUpdateResourceA".}
  proc updateResource*(hUpdate: Handle, lpType: Lpcstr, lpName: Lpcstr,
                       wLanguage: Int16, lpData: Lpvoid, cbData: Dword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "UpdateResourceA".}
  proc endUpdateResource*(hUpdate: Handle, fDiscard: Winbool): Winbool{.stdcall,
      dynlib: "kernel32", importc: "EndUpdateResourceA".}
  proc globalAddAtom*(lpString: Lpcstr): Atom{.stdcall, dynlib: "kernel32",
      importc: "GlobalAddAtomA".}
  proc globalFindAtom*(lpString: Lpcstr): Atom{.stdcall, dynlib: "kernel32",
      importc: "GlobalFindAtomA".}
  proc globalGetAtomName*(nAtom: Atom, lpBuffer: Lpstr, nSize: Int32): Uint{.
      stdcall, dynlib: "kernel32", importc: "GlobalGetAtomNameA".}
  proc addAtom*(lpString: Lpcstr): Atom{.stdcall, dynlib: "kernel32",
      importc: "AddAtomA".}
  proc findAtom*(lpString: Lpcstr): Atom{.stdcall, dynlib: "kernel32",
      importc: "FindAtomA".}
  proc getAtomName*(nAtom: Atom, lpBuffer: Lpstr, nSize: Int32): Uint{.stdcall,
      dynlib: "kernel32", importc: "GetAtomNameA".}
  proc getProfileInt*(lpAppName: Lpcstr, lpKeyName: Lpcstr, nDefault: Wint): Uint{.
      stdcall, dynlib: "kernel32", importc: "GetProfileIntA".}
  proc getProfileString*(lpAppName: Lpcstr, lpKeyName: Lpcstr,
                         lpDefault: Lpcstr, lpReturnedString: Lpstr,
                         nSize: Dword): Dword{.stdcall, dynlib: "kernel32",
      importc: "GetProfileStringA".}
  proc writeProfileString*(lpAppName: Lpcstr, lpKeyName: Lpcstr,
                           lpString: Lpcstr): Winbool{.stdcall,
      dynlib: "kernel32", importc: "WriteProfileStringA".}
  proc getProfileSection*(lpAppName: Lpcstr, lpReturnedString: Lpstr,
                          nSize: Dword): Dword{.stdcall, dynlib: "kernel32",
      importc: "GetProfileSectionA".}
  proc writeProfileSection*(lpAppName: Lpcstr, lpString: Lpcstr): Winbool{.
      stdcall, dynlib: "kernel32", importc: "WriteProfileSectionA".}
  proc getPrivateProfileInt*(lpAppName: Lpcstr, lpKeyName: Lpcstr,
                             nDefault: Wint, lpFileName: Lpcstr): Uint{.stdcall,
      dynlib: "kernel32", importc: "GetPrivateProfileIntA".}
  proc getPrivateProfileString*(lpAppName: Lpcstr, lpKeyName: Lpcstr,
                                lpDefault: Lpcstr, lpReturnedString: Lpstr,
                                nSize: Dword, lpFileName: Lpcstr): Dword{.
      stdcall, dynlib: "kernel32", importc: "GetPrivateProfileStringA".}
  proc writePrivateProfileString*(lpAppName: Lpcstr, lpKeyName: Lpcstr,
                                  lpString: Lpcstr, lpFileName: Lpcstr): Winbool{.
      stdcall, dynlib: "kernel32", importc: "WritePrivateProfileStringA".}
  proc getPrivateProfileSection*(lpAppName: Lpcstr, lpReturnedString: Lpstr,
                                 nSize: Dword, lpFileName: Lpcstr): Dword{.
      stdcall, dynlib: "kernel32", importc: "GetPrivateProfileSectionA".}
  proc writePrivateProfileSection*(lpAppName: Lpcstr, lpString: Lpcstr,
                                   lpFileName: Lpcstr): Winbool{.stdcall,
      dynlib: "kernel32", importc: "WritePrivateProfileSectionA".}
  proc getDriveType*(lpRootPathName: Lpcstr): Uint{.stdcall, dynlib: "kernel32",
      importc: "GetDriveTypeA".}
  proc getSystemDirectory*(lpBuffer: Lpstr, uSize: Uint): Uint{.stdcall,
      dynlib: "kernel32", importc: "GetSystemDirectoryA".}
  proc getTempPath*(nBufferLength: Dword, lpBuffer: Lpstr): Dword{.stdcall,
      dynlib: "kernel32", importc: "GetTempPathA".}
  proc getTempFileName*(lpPathName: Lpcstr, lpPrefixString: Lpcstr,
                        uUnique: Uint, lpTempFileName: Lpstr): Uint{.stdcall,
      dynlib: "kernel32", importc: "GetTempFileNameA".}
  proc getWindowsDirectory*(lpBuffer: Lpstr, uSize: Uint): Uint{.stdcall,
      dynlib: "kernel32", importc: "GetWindowsDirectoryA".}
  proc setCurrentDirectory*(lpPathName: Lpcstr): Winbool{.stdcall,
      dynlib: "kernel32", importc: "SetCurrentDirectoryA".}
  proc getCurrentDirectory*(nBufferLength: Dword, lpBuffer: Lpstr): Dword{.
      stdcall, dynlib: "kernel32", importc: "GetCurrentDirectoryA".}
  proc getDiskFreeSpace*(lpRootPathName: Lpcstr, lpSectorsPerCluster: Lpdword,
                         lpBytesPerSector: Lpdword,
                         lpNumberOfFreeClusters: Lpdword,
                         lpTotalNumberOfClusters: Lpdword): Winbool{.stdcall,
      dynlib: "kernel32", importc: "GetDiskFreeSpaceA".}
  proc createDirectory*(lpPathName: Lpcstr,
                        lpSecurityAttributes: LpsecurityAttributes): Winbool{.
      stdcall, dynlib: "kernel32", importc: "CreateDirectoryA".}
  proc createDirectoryEx*(lpTemplateDirectory: Lpcstr, lpNewDirectory: Lpcstr,
                          lpSecurityAttributes: LpsecurityAttributes): Winbool{.
      stdcall, dynlib: "kernel32", importc: "CreateDirectoryExA".}
  proc removeDirectory*(lpPathName: Lpcstr): Winbool{.stdcall,
      dynlib: "kernel32", importc: "RemoveDirectoryA".}
  proc getFullPathName*(lpFileName: Lpcstr, nBufferLength: Dword,
                        lpBuffer: Lpstr, lpFilePart: var Lpstr): Dword{.stdcall,
      dynlib: "kernel32", importc: "GetFullPathNameA".}
  proc defineDosDevice*(dwFlags: Dword, lpDeviceName: Lpcstr,
                        lpTargetPath: Lpcstr): Winbool{.stdcall,
      dynlib: "kernel32", importc: "DefineDosDeviceA".}
  proc queryDosDevice*(lpDeviceName: Lpcstr, lpTargetPath: Lpstr, ucchMax: Dword): Dword{.
      stdcall, dynlib: "kernel32", importc: "QueryDosDeviceA".}
  proc createFile*(lpFileName: Lpcstr, dwDesiredAccess: Dword,
                   dwShareMode: Dword,
                   lpSecurityAttributes: LpsecurityAttributes,
                   dwCreationDisposition: Dword, dwFlagsAndAttributes: Dword,
                   hTemplateFile: Handle): Handle{.stdcall, dynlib: "kernel32",
      importc: "CreateFileA".}
  proc setFileAttributes*(lpFileName: Lpcstr, dwFileAttributes: Dword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "SetFileAttributesA".}
  proc getFileAttributes*(lpFileName: Lpcstr): Dword{.stdcall,
      dynlib: "kernel32", importc: "GetFileAttributesA".}
  proc getCompressedFileSize*(lpFileName: Lpcstr, lpFileSizeHigh: Lpdword): Dword{.
      stdcall, dynlib: "kernel32", importc: "GetCompressedFileSizeA".}
  proc deleteFile*(lpFileName: Lpcstr): Winbool{.stdcall, dynlib: "kernel32",
      importc: "DeleteFileA".}
  proc searchPath*(lpPath: Lpcstr, lpFileName: Lpcstr, lpExtension: Lpcstr,
                   nBufferLength: Dword, lpBuffer: Lpstr, lpFilePart: Lpstr): Dword{.
      stdcall, dynlib: "kernel32", importc: "SearchPathA".}
  proc copyFile*(lpExistingFileName: Lpcstr, lpNewFileName: Lpcstr,
                 bFailIfExists: Winbool): Winbool{.stdcall, dynlib: "kernel32",
      importc: "CopyFileA".}
  proc moveFile*(lpExistingFileName: Lpcstr, lpNewFileName: Lpcstr): Winbool{.
      stdcall, dynlib: "kernel32", importc: "MoveFileA".}
  proc moveFileEx*(lpExistingFileName: Lpcstr, lpNewFileName: Lpcstr,
                   dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
      importc: "MoveFileExA".}
  proc createNamedPipe*(lpName: Lpcstr, dwOpenMode: Dword, dwPipeMode: Dword,
                        nMaxInstances: Dword, nOutBufferSize: Dword,
                        nInBufferSize: Dword, nDefaultTimeOut: Dword,
                        lpSecurityAttributes: LpsecurityAttributes): Handle{.
      stdcall, dynlib: "kernel32", importc: "CreateNamedPipeA".}
  proc getNamedPipeHandleState*(hNamedPipe: Handle, lpState: Lpdword,
                                lpCurInstances: Lpdword,
                                lpMaxCollectionCount: Lpdword,
                                lpCollectDataTimeout: Lpdword,
                                lpUserName: Lpstr, nMaxUserNameSize: Dword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "GetNamedPipeHandleStateA".}
  proc callNamedPipe*(lpNamedPipeName: Lpcstr, lpInBuffer: Lpvoid,
                      nInBufferSize: Dword, lpOutBuffer: Lpvoid,
                      nOutBufferSize: Dword, lpBytesRead: Lpdword,
                      nTimeOut: Dword): Winbool{.stdcall, dynlib: "kernel32",
      importc: "CallNamedPipeA".}
  proc waitNamedPipe*(lpNamedPipeName: Lpcstr, nTimeOut: Dword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "WaitNamedPipeA".}
  proc setVolumeLabel*(lpRootPathName: Lpcstr, lpVolumeName: Lpcstr): Winbool{.
      stdcall, dynlib: "kernel32", importc: "SetVolumeLabelA".}
  proc getVolumeInformation*(lpRootPathName: Lpcstr, lpVolumeNameBuffer: Lpstr,
                             nVolumeNameSize: Dword,
                             lpVolumeSerialNumber: Lpdword,
                             lpMaximumComponentLength: Lpdword,
                             lpFileSystemFlags: Lpdword,
                             lpFileSystemNameBuffer: Lpstr,
                             nFileSystemNameSize: Dword): Winbool{.stdcall,
      dynlib: "kernel32", importc: "GetVolumeInformationA".}
  proc clearEventLog*(hEventLog: Handle, lpBackupFileName: Lpcstr): Winbool{.
      stdcall, dynlib: "advapi32", importc: "ClearEventLogA".}
  proc backupEventLog*(hEventLog: Handle, lpBackupFileName: Lpcstr): Winbool{.
      stdcall, dynlib: "advapi32", importc: "BackupEventLogA".}
  proc openEventLog*(lpUNCServerName: Lpcstr, lpSourceName: Lpcstr): Handle{.
      stdcall, dynlib: "advapi32", importc: "OpenEventLogA".}
  proc registerEventSource*(lpUNCServerName: Lpcstr, lpSourceName: Lpcstr): Handle{.
      stdcall, dynlib: "advapi32", importc: "RegisterEventSourceA".}
  proc openBackupEventLog*(lpUNCServerName: Lpcstr, lpFileName: Lpcstr): Handle{.
      stdcall, dynlib: "advapi32", importc: "OpenBackupEventLogA".}
  proc readEventLog*(hEventLog: Handle, dwReadFlags: Dword,
                     dwRecordOffset: Dword, lpBuffer: Lpvoid,
                     nNumberOfBytesToRead: Dword, pnBytesRead: Lpdword,
                     pnMinNumberOfBytesNeeded: Lpdword): Winbool{.stdcall,
      dynlib: "advapi32", importc: "ReadEventLogA".}
  proc reportEvent*(hEventLog: Handle, wType: Int16, wCategory: Int16,
                    dwEventID: Dword, lpUserSid: Psid, wNumStrings: Int16,
                    dwDataSize: Dword, lpStrings: Lppcstr, lpRawData: Lpvoid): Winbool{.
      stdcall, dynlib: "advapi32", importc: "ReportEventA".}
  proc accessCheckAndAuditAlarm*(SubsystemName: Lpcstr, HandleId: Lpvoid,
                                 ObjectTypeName: Lpstr, ObjectName: Lpstr,
                                 SecurityDescriptor: PsecurityDescriptor,
                                 DesiredAccess: Dword,
                                 GenericMapping: PgenericMapping,
                                 ObjectCreation: Winbool,
                                 GrantedAccess: Lpdword, AccessStatus: Lpbool,
                                 pfGenerateOnClose: Lpbool): Winbool{.stdcall,
      dynlib: "advapi32", importc: "AccessCheckAndAuditAlarmA".}
  proc objectOpenAuditAlarm*(SubsystemName: Lpcstr, HandleId: Lpvoid,
                             ObjectTypeName: Lpstr, ObjectName: Lpstr,
                             pSecurityDescriptor: PsecurityDescriptor,
                             ClientToken: Handle, DesiredAccess: Dword,
                             GrantedAccess: Dword, Privileges: PprivilegeSet,
                             ObjectCreation: Winbool, AccessGranted: Winbool,
                             GenerateOnClose: Lpbool): Winbool{.stdcall,
      dynlib: "advapi32", importc: "ObjectOpenAuditAlarmA".}
  proc objectPrivilegeAuditAlarm*(SubsystemName: Lpcstr, HandleId: Lpvoid,
                                  ClientToken: Handle, DesiredAccess: Dword,
                                  Privileges: PprivilegeSet,
                                  AccessGranted: Winbool): Winbool{.stdcall,
      dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmA".}
  proc objectCloseAuditAlarm*(SubsystemName: Lpcstr, HandleId: Lpvoid,
                              GenerateOnClose: Winbool): Winbool{.stdcall,
      dynlib: "advapi32", importc: "ObjectCloseAuditAlarmA".}
  proc privilegedServiceAuditAlarm*(SubsystemName: Lpcstr, ServiceName: Lpcstr,
                                    ClientToken: Handle,
                                    Privileges: PprivilegeSet,
                                    AccessGranted: Winbool): Winbool{.stdcall,
      dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmA".}
  proc setFileSecurity*(lpFileName: Lpcstr,
                        SecurityInformation: SecurityInformation,
                        pSecurityDescriptor: PsecurityDescriptor): Winbool{.
      stdcall, dynlib: "advapi32", importc: "SetFileSecurityA".}
  proc getFileSecurity*(lpFileName: Lpcstr,
                        RequestedInformation: SecurityInformation,
                        pSecurityDescriptor: PsecurityDescriptor,
                        nLength: Dword, lpnLengthNeeded: Lpdword): Winbool{.
      stdcall, dynlib: "advapi32", importc: "GetFileSecurityA".}
  proc findFirstChangeNotification*(lpPathName: Lpcstr, bWatchSubtree: Winbool,
                                    dwNotifyFilter: Dword): Handle{.stdcall,
      dynlib: "kernel32", importc: "FindFirstChangeNotificationA".}
  proc isBadStringPtr*(lpsz: Lpcstr, ucchMax: Uint): Winbool{.stdcall,
      dynlib: "kernel32", importc: "IsBadStringPtrA".}
  proc lookupAccountSid*(lpSystemName: Lpcstr, Sid: Psid, Name: Lpstr,
                         cbName: Lpdword, ReferencedDomainName: Lpstr,
                         cbReferencedDomainName: Lpdword, peUse: PsidNameUse): Winbool{.
      stdcall, dynlib: "advapi32", importc: "LookupAccountSidA".}
  proc lookupAccountName*(lpSystemName: Lpcstr, lpAccountName: Lpcstr,
                          Sid: Psid, cbSid: Lpdword,
                          ReferencedDomainName: Lpstr,
                          cbReferencedDomainName: Lpdword, peUse: PsidNameUse): Winbool{.
      stdcall, dynlib: "advapi32", importc: "LookupAccountNameA".}
  proc lookupPrivilegeValue*(lpSystemName: Lpcstr, lpName: Lpcstr, lpLuid: Pluid): Winbool{.
      stdcall, dynlib: "advapi32", importc: "LookupPrivilegeValueA".}
  proc lookupPrivilegeName*(lpSystemName: Lpcstr, lpLuid: Pluid, lpName: Lpstr,
                            cbName: Lpdword): Winbool{.stdcall,
      dynlib: "advapi32", importc: "LookupPrivilegeNameA".}
  proc lookupPrivilegeDisplayName*(lpSystemName: Lpcstr, lpName: Lpcstr,
                                   lpDisplayName: Lpstr, cbDisplayName: Lpdword,
                                   lpLanguageId: Lpdword): Winbool{.stdcall,
      dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameA".}
  proc buildCommDCB*(lpDef: Lpcstr, lpDCB: Lpdcb): Winbool{.stdcall,
      dynlib: "kernel32", importc: "BuildCommDCBA".}
  proc buildCommDCBAndTimeouts*(lpDef: Lpcstr, lpDCB: Lpdcb,
                                lpCommTimeouts: Lpcommtimeouts): Winbool{.
      stdcall, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsA".}
  proc commConfigDialog*(lpszName: Lpcstr, wnd: Hwnd, lpCC: Lpcommconfig): Winbool{.
      stdcall, dynlib: "kernel32", importc: "CommConfigDialogA".}
  proc getDefaultCommConfig*(lpszName: Lpcstr, lpCC: Lpcommconfig,
                             lpdwSize: Lpdword): Winbool{.stdcall,
      dynlib: "kernel32", importc: "GetDefaultCommConfigA".}
  proc setDefaultCommConfig*(lpszName: Lpcstr, lpCC: Lpcommconfig, dwSize: Dword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "SetDefaultCommConfigA".}
  proc getComputerName*(lpBuffer: Lpstr, nSize: Lpdword): Winbool{.stdcall,
      dynlib: "kernel32", importc: "GetComputerNameA".}
  proc setComputerName*(lpComputerName: Lpcstr): Winbool{.stdcall,
      dynlib: "kernel32", importc: "SetComputerNameA".}
  proc getUserName*(lpBuffer: Lpstr, nSize: Lpdword): Winbool{.stdcall,
      dynlib: "advapi32", importc: "GetUserNameA".}
  proc wvsprintf*(para1: Lpstr, para2: Lpcstr, arglist: VaList): Int32{.
      stdcall, dynlib: "user32", importc: "wvsprintfA".}
  proc loadKeyboardLayout*(pwszKLID: Lpcstr, Flags: Uint): Hkl{.stdcall,
      dynlib: "user32", importc: "LoadKeyboardLayoutA".}
  proc getKeyboardLayoutName*(pwszKLID: Lpstr): Winbool{.stdcall,
      dynlib: "user32", importc: "GetKeyboardLayoutNameA".}
  proc createDesktop*(lpszDesktop: Lpstr, lpszDevice: Lpstr,
                      pDevmode: Lpdevmode, dwFlags: Dword,
                      dwDesiredAccess: Dword, lpsa: LpsecurityAttributes): Hdesk{.
      stdcall, dynlib: "user32", importc: "CreateDesktopA".}
  proc openDesktop*(lpszDesktop: Lpstr, dwFlags: Dword, fInherit: Winbool,
                    dwDesiredAccess: Dword): Hdesk{.stdcall, dynlib: "user32",
      importc: "OpenDesktopA".}
  proc enumDesktops*(hwinsta: Hwinsta, lpEnumFunc: Desktopenumproc,
                     lp: Lparam): Winbool{.stdcall, dynlib: "user32",
      importc: "EnumDesktopsA".}
  proc createWindowStation*(lpwinsta: Lpstr, dwReserved: Dword,
                            dwDesiredAccess: Dword, lpsa: LpsecurityAttributes): Hwinsta{.
      stdcall, dynlib: "user32", importc: "CreateWindowStationA".}
  proc openWindowStation*(lpszWinSta: Lpstr, fInherit: Winbool,
                          dwDesiredAccess: Dword): Hwinsta{.stdcall,
      dynlib: "user32", importc: "OpenWindowStationA".}
  proc enumWindowStations*(lpEnumFunc: Enumwindowstationproc, lp: Lparam): Winbool{.
      stdcall, dynlib: "user32", importc: "EnumWindowStationsA".}
  proc getUserObjectInformation*(hObj: Handle, nIndex: Int32, pvInfo: Pvoid,
                                 nLength: Dword, lpnLengthNeeded: Lpdword): Winbool{.
      stdcall, dynlib: "user32", importc: "GetUserObjectInformationA".}
  proc setUserObjectInformation*(hObj: Handle, nIndex: Int32, pvInfo: Pvoid,
                                 nLength: Dword): Winbool{.stdcall,
      dynlib: "user32", importc: "SetUserObjectInformationA".}
  proc registerWindowMessage*(lpString: Lpcstr): Uint{.stdcall,
      dynlib: "user32", importc: "RegisterWindowMessageA".}
  proc getMessage*(lpMsg: Lpmsg, wnd: Hwnd, wMsgFilterMin: Uint,
                   wMsgFilterMax: Uint): Winbool{.stdcall, dynlib: "user32",
      importc: "GetMessageA".}
  proc dispatchMessage*(lpMsg: Lpmsg): Long{.stdcall, dynlib: "user32",
      importc: "DispatchMessageA".}
  proc peekMessage*(lpMsg: Lpmsg, wnd: Hwnd, wMsgFilterMin: Uint,
                    wMsgFilterMax: Uint, wRemoveMsg: Uint): Winbool{.stdcall,
      dynlib: "user32", importc: "PeekMessageA".}
  proc sendMessage*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
      stdcall, dynlib: "user32", importc: "SendMessageA".}
  proc sendMessageTimeout*(wnd: Hwnd, Msg: Uint, wp: Wparam,
                           lp: Lparam, fuFlags: Uint, uTimeout: Uint,
                           lpdwResult: Lpdword): Lresult{.stdcall,
      dynlib: "user32", importc: "SendMessageTimeoutA".}
  proc sendNotifyMessage*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Winbool{.
      stdcall, dynlib: "user32", importc: "SendNotifyMessageA".}
  proc sendMessageCallback*(wnd: Hwnd, Msg: Uint, wp: Wparam,
                            lp: Lparam, lpResultCallBack: Sendasyncproc,
                            dwData: Dword): Winbool{.stdcall, dynlib: "user32",
      importc: "SendMessageCallbackA".}
  proc postMessage*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Winbool{.
      stdcall, dynlib: "user32", importc: "PostMessageA".}
  proc postThreadMessage*(idThread: Dword, Msg: Uint, wp: Wparam,
                          lp: Lparam): Winbool{.stdcall, dynlib: "user32",
      importc: "PostThreadMessageA".}
  proc defWindowProc*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
      stdcall, dynlib: "user32", importc: "DefWindowProcA".}
  proc callWindowProc*(lpPrevWndFunc: Wndproc, wnd: Hwnd, Msg: Uint,
                       wp: Wparam, lp: Lparam): Lresult{.stdcall,
      dynlib: "user32", importc: "CallWindowProcA".}
  proc registerClass*(lpWndClass: Lpwndclass): Atom{.stdcall, dynlib: "user32",
      importc: "RegisterClassA".}
  proc unregisterClass*(lpClassName: Lpcstr, hInstance: Hinst): Winbool{.
      stdcall, dynlib: "user32", importc: "UnregisterClassA".}
  proc getClassInfo*(hInstance: Hinst, lpClassName: Lpcstr,
                     lpWndClass: Lpwndclass): Winbool{.stdcall,
      dynlib: "user32", importc: "GetClassInfoA".}
  proc registerClassEx*(para1: Lpwndclassex): Atom{.stdcall, dynlib: "user32",
      importc: "RegisterClassExA".}
  proc getClassInfoEx*(para1: Hinst, para2: Lpcstr, para3: Lpwndclassex): Winbool{.
      stdcall, dynlib: "user32", importc: "GetClassInfoExA".}
  proc createWindowEx*(dwExStyle: Dword, lpClassName: Lpcstr,
                       lpWindowName: Lpcstr, dwStyle: Dword, X: Int32, Y: Int32,
                       nWidth: Int32, nHeight: Int32, hWndParent: Hwnd,
                       menu: Hmenu, hInstance: Hinst, lpParam: Lpvoid): Hwnd{.
      stdcall, dynlib: "user32", importc: "CreateWindowExA".}
  proc createDialogParam*(hInstance: Hinst, lpTemplateName: Lpcstr,
                          hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                          dwInitParam: Lparam): Hwnd{.stdcall, dynlib: "user32",
      importc: "CreateDialogParamA".}
  proc createDialogIndirectParam*(hInstance: Hinst, lpTemplate: Lpcdlgtemplate,

                                  hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                                  dwInitParam: Lparam): Hwnd{.stdcall,
      dynlib: "user32", importc: "CreateDialogIndirectParamA".}
  proc dialogBoxParam*(hInstance: Hinst, lpTemplateName: Lpcstr,
                       hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                       dwInitParam: Lparam): Int32{.stdcall, dynlib: "user32",
      importc: "DialogBoxParamA".}
  proc dialogBoxIndirectParam*(hInstance: Hinst,
                               hDialogTemplate: Lpcdlgtemplate,
                               hWndParent: Hwnd, lpDialogFunc: Dlgproc,
                               dwInitParam: Lparam): Int32{.stdcall,
      dynlib: "user32", importc: "DialogBoxIndirectParamA".}
  proc setDlgItemText*(hDlg: Hwnd, nIDDlgItem: Int32, lpString: Lpcstr): Winbool{.
      stdcall, dynlib: "user32", importc: "SetDlgItemTextA".}
  proc getDlgItemText*(hDlg: Hwnd, nIDDlgItem: Int32, lpString: Lpstr,
                       nMaxCount: Int32): Uint{.stdcall, dynlib: "user32",
      importc: "GetDlgItemTextA".}
  proc sendDlgItemMessage*(hDlg: Hwnd, nIDDlgItem: Int32, Msg: Uint,
                           wp: Wparam, lp: Lparam): Long{.stdcall,
      dynlib: "user32", importc: "SendDlgItemMessageA".}
  proc defDlgProc*(hDlg: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult{.
      stdcall, dynlib: "user32", importc: "DefDlgProcA".}
  proc callMsgFilter*(lpMsg: Lpmsg, nCode: Int32): Winbool{.stdcall,
      dynlib: "user32", importc: "CallMsgFilterA".}
  proc registerClipboardFormat*(lpszFormat: Lpcstr): Uint{.stdcall,
      dynlib: "user32", importc: "RegisterClipboardFormatA".}
  proc getClipboardFormatName*(format: Uint, lpszFormatName: Lpstr,
                               cchMaxCount: Int32): Int32{.stdcall,
      dynlib: "user32", importc: "GetClipboardFormatNameA".}
  proc charToOem*(lpszSrc: Lpcstr, lpszDst: Lpstr): Winbool{.stdcall,
      dynlib: "user32", importc: "CharToOemA".}
  proc oemToChar*(lpszSrc: Lpcstr, lpszDst: Lpstr): Winbool{.stdcall,
      dynlib: "user32", importc: "OemToCharA".}
  proc charToOemBuff*(lpszSrc: Lpcstr, lpszDst: Lpstr, cchDstLength: Dword): Winbool{.
      stdcall, dynlib: "user32", importc: "CharToOemBuffA".}
  proc oemToCharBuff*(lpszSrc: Lpcstr, lpszDst: Lpstr, cchDstLength: Dword): Winbool{.
      stdcall, dynlib: "user32", importc: "OemToCharBuffA".}
  proc charUpper*(lpsz: Lpstr): Lpstr{.stdcall, dynlib: "user32",
                                       importc: "CharUpperA".}
  proc charUpperBuff*(lpsz: Lpstr, cchLength: Dword): Dword{.stdcall,
      dynlib: "user32", importc: "CharUpperBuffA".}
  proc charLower*(lpsz: Lpstr): Lpstr{.stdcall, dynlib: "user32",
                                       importc: "CharLowerA".}
  proc charLowerBuff*(lpsz: Lpstr, cchLength: Dword): Dword{.stdcall,
      dynlib: "user32", importc: "CharLowerBuffA".}
  proc charNext*(lpsz: Lpcstr): Lpstr{.stdcall, dynlib: "user32",
                                       importc: "CharNextA".}
  proc charPrev*(lpszStart: Lpcstr, lpszCurrent: Lpcstr): Lpstr{.stdcall,
      dynlib: "user32", importc: "CharPrevA".}
  proc isCharAlpha*(ch: Char): Winbool{.stdcall, dynlib: "user32",
                                        importc: "IsCharAlphaA".}
  proc isCharAlphaNumeric*(ch: Char): Winbool{.stdcall, dynlib: "user32",
      importc: "IsCharAlphaNumericA".}
  proc isCharUpper*(ch: Char): Winbool{.stdcall, dynlib: "user32",
                                        importc: "IsCharUpperA".}
  proc isCharLower*(ch: Char): Winbool{.stdcall, dynlib: "user32",
                                        importc: "IsCharLowerA".}
  proc getKeyNameText*(lParam: Long, lpString: Lpstr, nSize: Int32): Int32{.
      stdcall, dynlib: "user32", importc: "GetKeyNameTextA".}
  proc vkKeyScan*(ch: Char): Short{.stdcall, dynlib: "user32",
                                    importc: "VkKeyScanA".}
  proc vkKeyScanEx*(ch: Char, dwhkl: Hkl): Short{.stdcall, dynlib: "user32",
      importc: "VkKeyScanExA".}
  proc mapVirtualKey*(uCode: Uint, uMapType: Uint): Uint{.stdcall,
      dynlib: "user32", importc: "MapVirtualKeyA".}
  proc mapVirtualKeyEx*(uCode: Uint, uMapType: Uint, dwhkl: Hkl): Uint{.stdcall,
      dynlib: "user32", importc: "MapVirtualKeyExA".}
  proc loadAccelerators*(hInstance: Hinst, lpTableName: Lpcstr): Haccel{.
      stdcall, dynlib: "user32", importc: "LoadAcceleratorsA".}
  proc createAcceleratorTable*(para1: Lpaccel, para2: Int32): Haccel{.stdcall,
      dynlib: "user32", importc: "CreateAcceleratorTableA".}
  proc copyAcceleratorTable*(hAccelSrc: Haccel, lpAccelDst: Lpaccel,
                             cAccelEntries: Int32): Int32{.stdcall,
      dynlib: "user32", importc: "CopyAcceleratorTableA".}
  proc translateAccelerator*(wnd: Hwnd, hAccTable: Haccel, lpMsg: Lpmsg): Int32{.
      stdcall, dynlib: "user32", importc: "TranslateAcceleratorA".}
  proc loadMenu*(hInstance: Hinst, lpMenuName: Lpcstr): Hmenu{.stdcall,
      dynlib: "user32", importc: "LoadMenuA".}
  proc loadMenuIndirect*(lpMenuTemplate: Lpmenutemplate): Hmenu{.stdcall,
      dynlib: "user32", importc: "LoadMenuIndirectA".}
  proc changeMenu*(menu: Hmenu, cmd: Uint, lpszNewItem: Lpcstr,
                   cmdInsert: Uint, flags: Uint): Winbool{.stdcall,
      dynlib: "user32", importc: "ChangeMenuA".}
  proc getMenuString*(menu: Hmenu, uIDItem: Uint, lpString: Lpstr,
                      nMaxCount: Int32, uFlag: Uint): Int32{.stdcall,
      dynlib: "user32", importc: "GetMenuStringA".}
  proc insertMenu*(menu: Hmenu, uPosition: Uint, uFlags: Uint,
                   uIDNewItem: Uint, lpNewItem: Lpcstr): Winbool{.stdcall,
      dynlib: "user32", importc: "InsertMenuA".}
  proc appendMenu*(menu: Hmenu, uFlags: Uint, uIDNewItem: Uint,
                   lpNewItem: Lpcstr): Winbool{.stdcall, dynlib: "user32",
      importc: "AppendMenuA".}
  proc modifyMenu*(hMnu: Hmenu, uPosition: Uint, uFlags: Uint, uIDNewItem: Uint,
                   lpNewItem: Lpcstr): Winbool{.stdcall, dynlib: "user32",
      importc: "ModifyMenuA".}
  proc insertMenuItem*(para1: Hmenu, para2: Uint, para3: Winbool,
                       para4: Lpcmenuiteminfo): Winbool{.stdcall,
      dynlib: "user32", importc: "InsertMenuItemA".}
  proc getMenuItemInfo*(para1: Hmenu, para2: Uint, para3: Winbool,
                        para4: Lpmenuiteminfo): Winbool{.stdcall,
      dynlib: "user32", importc: "GetMenuItemInfoA".}
  proc setMenuItemInfo*(para1: Hmenu, para2: Uint, para3: Winbool,
                        para4: Lpcmenuiteminfo): Winbool{.stdcall,
      dynlib: "user32", importc: "SetMenuItemInfoA".}
  proc drawText*(hDC: Hdc, lpString: Lpcstr, nCount: Int32, lpRect: Lprect,
                 uFormat: Uint): Int32{.stdcall, dynlib: "user32",
                                        importc: "DrawTextA".}
  proc drawTextEx*(para1: Hdc, para2: Lpstr, para3: Int32, para4: Lprect,
                   para5: Uint, para6: Lpdrawtextparams): Int32{.stdcall,
      dynlib: "user32", importc: "DrawTextExA".}
  proc grayString*(hDC: Hdc, hBrush: Hbrush, lpOutputFunc: Graystringproc,
                   lpData: Lparam, nCount: Int32, X: Int32, Y: Int32,
                   nWidth: Int32, nHeight: Int32): Winbool{.stdcall,
      dynlib: "user32", importc: "GrayStringA".}
  proc drawState*(para1: Hdc, para2: Hbrush, para3: Drawstateproc,
                  para4: Lparam, para5: Wparam, para6: Int32, para7: Int32,
                  para8: Int32, para9: Int32, para10: Uint): Winbool{.stdcall,
      dynlib: "user32", importc: "DrawStateA".}
  proc tabbedTextOut*(dc: Hdc, X: Int32, Y: Int32, lpString: Lpcstr,
                      nCount: Int32, nTabPositions: Int32,
                      lpnTabStopPositions: Lpint, nTabOrigin: Int32): Long{.
      stdcall, dynlib: "user32", importc: "TabbedTextOutA".}
  proc getTabbedTextExtent*(hDC: Hdc, lpString: Lpcstr, nCount: Int32,
                            nTabPositions: Int32, lpnTabStopPositions: Lpint): Dword{.
      stdcall, dynlib: "user32", importc: "GetTabbedTextExtentA".}
  proc setProp*(wnd: Hwnd, lpString: Lpcstr, hData: Handle): Winbool{.stdcall,
      dynlib: "user32", importc: "SetPropA".}
  proc getProp*(wnd: Hwnd, lpString: Lpcstr): Handle{.stdcall,
      dynlib: "user32", importc: "GetPropA".}
  proc removeProp*(wnd: Hwnd, lpString: Lpcstr): Handle{.stdcall,
      dynlib: "user32", importc: "RemovePropA".}
  proc enumPropsEx*(wnd: Hwnd, lpEnumFunc: Propenumprocex, lp: Lparam): Int32{.
      stdcall, dynlib: "user32", importc: "EnumPropsExA".}
  proc enumProps*(wnd: Hwnd, lpEnumFunc: Propenumproc): Int32{.stdcall,
      dynlib: "user32", importc: "EnumPropsA".}
  proc setWindowText*(wnd: Hwnd, lpString: Lpcstr): Winbool{.stdcall,
      dynlib: "user32", importc: "SetWindowTextA".}
  proc getWindowText*(wnd: Hwnd, lpString: Lpstr, nMaxCount: Int32): Int32{.
      stdcall, dynlib: "user32", importc: "GetWindowTextA".}
  proc getWindowTextLength*(wnd: Hwnd): Int32{.stdcall, dynlib: "user32",
      importc: "GetWindowTextLengthA".}
  proc messageBox*(wnd: Hwnd, lpText: Lpcstr, lpCaption: Lpcstr, uType: Uint): Int32{.
      stdcall, dynlib: "user32", importc: "MessageBoxA".}
  proc messageBoxEx*(wnd: Hwnd, lpText: Lpcstr, lpCaption: Lpcstr, uType: Uint,
                     wLanguageId: Int16): Int32{.stdcall, dynlib: "user32",
      importc: "MessageBoxExA".}
  proc messageBoxIndirect*(para1: Lpmsgboxparams): Int32{.stdcall,
      dynlib: "user32", importc: "MessageBoxIndirectA".}
  proc getWindowLong*(wnd: Hwnd, nIndex: Int32): Long{.stdcall,
      dynlib: "user32", importc: "GetWindowLongA".}
  proc setWindowLong*(wnd: Hwnd, nIndex: Int32, dwNewLong: Long): Long{.
      stdcall, dynlib: "user32", importc: "SetWindowLongA".}
  proc getClassLong*(wnd: Hwnd, nIndex: Int32): Dword{.stdcall,
      dynlib: "user32", importc: "GetClassLongA".}
  proc setClassLong*(wnd: Hwnd, nIndex: Int32, dwNewLong: Long): Dword{.
      stdcall, dynlib: "user32", importc: "SetClassLongA".}
  when defined(cpu64):
    proc getWindowLongPtr*(wnd: Hwnd, nIndex: Int32): LongPtr{.stdcall,
        dynlib: "user32", importc: "GetWindowLongPtrA".}
    proc setWindowLongPtr*(wnd: Hwnd, nIndex: Int32, dwNewLong: LongPtr): LongPtr{.
        stdcall, dynlib: "user32", importc: "SetWindowLongPtrA".}
    proc getClassLongPtr*(wnd: Hwnd, nIndex: Int32): LongPtr{.stdcall,
        dynlib: "user32", importc: "GetClassLongPtrA".}
    proc setClassLongPtr*(wnd: Hwnd, nIndex: Int32, dwNewLong: LongPtr): LongPtr{.
        stdcall, dynlib: "user32", importc: "SetClassLongPtrA".}
  else:
    proc GetWindowLongPtr*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
        dynlib: "user32", importc: "GetWindowLongA".}
    proc SetWindowLongPtr*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
        stdcall, dynlib: "user32", importc: "SetWindowLongA".}
    proc GetClassLongPtr*(wnd: HWND, nIndex: int32): LONG_PTR{.stdcall,
        dynlib: "user32", importc: "GetClassLongA".}
    proc SetClassLongPtr*(wnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR{.
        stdcall, dynlib: "user32", importc: "SetClassLongA".}
  proc findWindow*(lpClassName: Lpcstr, lpWindowName: Lpcstr): Hwnd{.stdcall,
      dynlib: "user32", importc: "FindWindowA".}
  proc findWindowEx*(para1: Hwnd, para2: Hwnd, para3: Lpcstr, para4: Lpcstr): Hwnd{.
      stdcall, dynlib: "user32", importc: "FindWindowExA".}
  proc getClassName*(wnd: Hwnd, lpClassName: Lpstr, nMaxCount: Int32): Int32{.
      stdcall, dynlib: "user32", importc: "GetClassNameA".}
  proc setWindowsHookEx*(idHook: Int32, lpfn: Hookproc, hmod: Hinst,
                         dwThreadId: Dword): Hhook{.stdcall, dynlib: "user32",
      importc: "SetWindowsHookExA".}
  proc loadBitmap*(hInstance: Hinst, lpBitmapName: Lpcstr): Hbitmap{.stdcall,
      dynlib: "user32", importc: "LoadBitmapA".}
  proc loadCursor*(hInstance: Hinst, lpCursorName: Lpcstr): Hcursor{.stdcall,
      dynlib: "user32", importc: "LoadCursorA".}
  proc loadCursorFromFile*(lpFileName: Lpcstr): Hcursor{.stdcall,
      dynlib: "user32", importc: "LoadCursorFromFileA".}
  proc loadIcon*(hInstance: Hinst, lpIconName: Lpcstr): Hicon{.stdcall,
      dynlib: "user32", importc: "LoadIconA".}
  proc loadImage*(para1: Hinst, para2: Lpcstr, para3: Uint, para4: Int32,
                  para5: Int32, para6: Uint): Handle{.stdcall, dynlib: "user32",
      importc: "LoadImageA".}
  proc loadString*(hInstance: Hinst, uID: Uint, lpBuffer: Lpstr,
                   nBufferMax: Int32): Int32{.stdcall, dynlib: "user32",
      importc: "LoadStringA".}
  proc isDialogMessage*(hDlg: Hwnd, lpMsg: Lpmsg): Winbool{.stdcall,
      dynlib: "user32", importc: "IsDialogMessageA".}
  proc dlgDirList*(hDlg: Hwnd, lpPathSpec: Lpstr, nIDListBox: Int32,
                   nIDStaticPath: Int32, uFileType: Uint): Int32{.stdcall,
      dynlib: "user32", importc: "DlgDirListA".}
  proc dlgDirSelectEx*(hDlg: Hwnd, lpString: Lpstr, nCount: Int32,
                       nIDListBox: Int32): Winbool{.stdcall, dynlib: "user32",
      importc: "DlgDirSelectExA".}
  proc dlgDirListComboBox*(hDlg: Hwnd, lpPathSpec: Lpstr, nIDComboBox: Int32,
                           nIDStaticPath: Int32, uFiletype: Uint): Int32{.
      stdcall, dynlib: "user32", importc: "DlgDirListComboBoxA".}
  proc dlgDirSelectComboBoxEx*(hDlg: Hwnd, lpString: Lpstr, nCount: Int32,
                               nIDComboBox: Int32): Winbool{.stdcall,
      dynlib: "user32", importc: "DlgDirSelectComboBoxExA".}
  proc defFrameProc*(wnd: Hwnd, hWndMDIClient: Hwnd, uMsg: Uint,
                     wp: Wparam, lp: Lparam): Lresult{.stdcall,
      dynlib: "user32", importc: "DefFrameProcA".}
  proc defMDIChildProc*(wnd: Hwnd, uMsg: Uint, wp: Wparam, lp: Lparam): Lresult{.
      stdcall, dynlib: "user32", importc: "DefMDIChildProcA".}
  proc createMDIWindow*(lpClassName: Lpstr, lpWindowName: Lpstr, dwStyle: Dword,
                        X: Int32, Y: Int32, nWidth: Int32, nHeight: Int32,
                        hWndParent: Hwnd, hInstance: Hinst, lp: Lparam): Hwnd{.
      stdcall, dynlib: "user32", importc: "CreateMDIWindowA".}
  proc winHelp*(hWndMain: Hwnd, lpszHelp: Lpcstr, uCommand: Uint, dwData: Dword): Winbool{.
      stdcall, dynlib: "user32", importc: "WinHelpA".}
  proc changeDisplaySettings*(lpDevMode: Lpdevmode, dwFlags: Dword): Long{.
      stdcall, dynlib: "user32", importc: "ChangeDisplaySettingsA".}
  proc enumDisplaySettings*(lpszDeviceName: Lpcstr, iModeNum: Dword,
                            lpDevMode: Lpdevmode): Winbool{.stdcall,
      dynlib: "user32", importc: "EnumDisplaySettingsA".}
  proc systemParametersInfo*(uiAction: Uint, uiParam: Uint, pvParam: Pvoid,
                             fWinIni: Uint): Winbool{.stdcall, dynlib: "user32",
      importc: "SystemParametersInfoA".}
  proc addFontResource*(para1: Lpcstr): Int32{.stdcall, dynlib: "gdi32",
      importc: "AddFontResourceA".}
  proc copyMetaFile*(para1: Hmetafile, para2: Lpcstr): Hmetafile{.stdcall,
      dynlib: "gdi32", importc: "CopyMetaFileA".}
  proc createFont*(para1: Int32, para2: Int32, para3: Int32, para4: Int32,
                   para5: Int32, para6: Dword, para7: Dword, para8: Dword,
                   para9: Dword, para10: Dword, para11: Dword, para12: Dword,
                   para13: Dword, para14: Lpcstr): Hfont{.stdcall,
      dynlib: "gdi32", importc: "CreateFontA".}
  proc createFontIndirect*(para1: Lplogfont): Hfont{.stdcall, dynlib: "gdi32",
      importc: "CreateFontIndirectA".}
  proc createFontIndirect*(para1: var Logfont): Hfont{.stdcall, dynlib: "gdi32",
      importc: "CreateFontIndirectA".}
  proc createIC*(para1: Lpcstr, para2: Lpcstr, para3: Lpcstr, para4: Lpdevmode): Hdc{.
      stdcall, dynlib: "gdi32", importc: "CreateICA".}
  proc createMetaFile*(para1: Lpcstr): Hdc{.stdcall, dynlib: "gdi32",
      importc: "CreateMetaFileA".}
  proc createScalableFontResource*(para1: Dword, para2: Lpcstr, para3: Lpcstr,
                                   para4: Lpcstr): Winbool{.stdcall,
      dynlib: "gdi32", importc: "CreateScalableFontResourceA".}
  proc enumFontFamiliesEx*(para1: Hdc, para2: Lplogfont, para3: Fontenumexproc,
                           para4: Lparam, para5: Dword): Int32{.stdcall,
      dynlib: "gdi32", importc: "EnumFontFamiliesExA".}
  proc enumFontFamilies*(para1: Hdc, para2: Lpcstr, para3: Fontenumproc,
                         para4: Lparam): Int32{.stdcall, dynlib: "gdi32",
      importc: "EnumFontFamiliesA".}
  proc enumFonts*(para1: Hdc, para2: Lpcstr, para3: Enumfontsproc, para4: Lparam): Int32{.
      stdcall, dynlib: "gdi32", importc: "EnumFontsA".}
  proc enumFonts*(para1: Hdc, para2: Lpcstr, para3: Enumfontsproc,
                  para4: Pointer): Int32{.stdcall, dynlib: "gdi32",
      importc: "EnumFontsA".}
  proc getCharWidth*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpint): Winbool{.
      stdcall, dynlib: "gdi32", importc: "GetCharWidthA".}
  proc getCharWidth32*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpint): Winbool{.
      stdcall, dynlib: "gdi32", importc: "GetCharWidth32A".}
  proc getCharWidthFloat*(para1: Hdc, para2: Uint, para3: Uint, para4: ptr Float32): Winbool{.
      stdcall, dynlib: "gdi32", importc: "GetCharWidthFloatA".}
  proc getCharABCWidths*(para1: Hdc, para2: Uint, para3: Uint, para4: Lpabc): Winbool{.
      stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsA".}
  proc getCharABCWidthsFloat*(para1: Hdc, para2: Uint, para3: Uint,
                              para4: Lpabcfloat): Winbool{.stdcall,
      dynlib: "gdi32", importc: "GetCharABCWidthsFloatA".}
  proc getGlyphOutline*(para1: Hdc, para2: Uint, para3: Uint,
                        para4: Lpglyphmetrics, para5: Dword, para6: Lpvoid,
                        para7: Pmat2): Dword{.stdcall, dynlib: "gdi32",
      importc: "GetGlyphOutlineA".}
  proc getMetaFile*(para1: Lpcstr): Hmetafile{.stdcall, dynlib: "gdi32",
      importc: "GetMetaFileA".}
  proc getOutlineTextMetrics*(para1: Hdc, para2: Uint,
                              para3: Lpoutlinetextmetric): Uint{.stdcall,
      dynlib: "gdi32", importc: "GetOutlineTextMetricsA".}
  proc getTextExtentPoint*(para1: Hdc, para2: Lpcstr, para3: Int32,
                           para4: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
      importc: "GetTextExtentPointA".}
  proc getTextExtentPoint32*(para1: Hdc, para2: Lpcstr, para3: Int32,
                             para4: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
      importc: "GetTextExtentPoint32A".}
  proc getTextExtentExPoint*(para1: Hdc, para2: Lpcstr, para3: Int32,
                             para4: Int32, para5: Lpint, para6: Lpint,
                             para7: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
      importc: "GetTextExtentExPointA".}
  proc getCharacterPlacement*(para1: Hdc, para2: Lpcstr, para3: Int32,
                              para4: Int32, para5: LpgcpResults, para6: Dword): Dword{.
      stdcall, dynlib: "gdi32", importc: "GetCharacterPlacementA".}
  proc resetDC*(para1: Hdc, para2: Lpdevmode): Hdc{.stdcall, dynlib: "gdi32",
      importc: "ResetDCA".}
  proc removeFontResource*(para1: Lpcstr): Winbool{.stdcall, dynlib: "gdi32",
      importc: "RemoveFontResourceA".}
  proc copyEnhMetaFile*(para1: Henhmetafile, para2: Lpcstr): Henhmetafile{.
      stdcall, dynlib: "gdi32", importc: "CopyEnhMetaFileA".}
  proc createEnhMetaFile*(para1: Hdc, para2: Lpcstr, para3: Lprect,
                          para4: Lpcstr): Hdc{.stdcall, dynlib: "gdi32",
      importc: "CreateEnhMetaFileA".}
  proc getEnhMetaFile*(para1: Lpcstr): Henhmetafile{.stdcall, dynlib: "gdi32",
      importc: "GetEnhMetaFileA".}
  proc getEnhMetaFileDescription*(para1: Henhmetafile, para2: Uint, para3: Lpstr): Uint{.
      stdcall, dynlib: "gdi32", importc: "GetEnhMetaFileDescriptionA".}
  proc getTextMetrics*(para1: Hdc, para2: Lptextmetric): Winbool{.stdcall,
      dynlib: "gdi32", importc: "GetTextMetricsA".}
  proc startDoc*(para1: Hdc, para2: Pdocinfo): Int32{.stdcall, dynlib: "gdi32",
      importc: "StartDocA".}
  proc getObject*(para1: Hgdiobj, para2: Int32, para3: Lpvoid): Int32{.stdcall,
      dynlib: "gdi32", importc: "GetObjectA".}
  proc textOut*(para1: Hdc, para2: Int32, para3: Int32, para4: Lpcstr,
                para5: Int32): Winbool{.stdcall, dynlib: "gdi32",
                                        importc: "TextOutA".}
  proc extTextOut*(para1: Hdc, para2: Int32, para3: Int32, para4: Uint,
                   para5: Lprect, para6: Lpcstr, para7: Uint, para8: Lpint): Winbool{.
      stdcall, dynlib: "gdi32", importc: "ExtTextOutA".}
  proc polyTextOut*(para1: Hdc, para2: Ppolytext, para3: Int32): Winbool{.
      stdcall, dynlib: "gdi32", importc: "PolyTextOutA".}
  proc getTextFace*(para1: Hdc, para2: Int32, para3: Lpstr): Int32{.stdcall,
      dynlib: "gdi32", importc: "GetTextFaceA".}
  proc getKerningPairs*(para1: Hdc, para2: Dword, para3: Lpkerningpair): Dword{.
      stdcall, dynlib: "gdi32", importc: "GetKerningPairsA".}
  proc createColorSpace*(para1: Lplogcolorspace): Hcolorspace{.stdcall,
      dynlib: "gdi32", importc: "CreateColorSpaceA".}
  proc getLogColorSpace*(para1: Hcolorspace, para2: Lplogcolorspace,
                         para3: Dword): Winbool{.stdcall, dynlib: "gdi32",
      importc: "GetLogColorSpaceA".}
  proc getICMProfile*(para1: Hdc, para2: Dword, para3: Lpstr): Winbool{.stdcall,
      dynlib: "gdi32", importc: "GetICMProfileA".}
  proc setICMProfile*(para1: Hdc, para2: Lpstr): Winbool{.stdcall,
      dynlib: "gdi32", importc: "SetICMProfileA".}
  proc updateICMRegKey*(para1: Dword, para2: Dword, para3: Lpstr, para4: Uint): Winbool{.
      stdcall, dynlib: "gdi32", importc: "UpdateICMRegKeyA".}
  proc enumICMProfiles*(para1: Hdc, para2: Icmenumproc, para3: Lparam): Int32{.
      stdcall, dynlib: "gdi32", importc: "EnumICMProfilesA".}
  proc propertySheet*(lppsph: Lpcpropsheetheader): Int32{.stdcall,
      dynlib: "comctl32", importc: "PropertySheetA".}
  proc imageListLoadImage*(hi: Hinst, lpbmp: Lpcstr, cx: Int32, cGrow: Int32,
                            crMask: Colorref, uType: Uint, uFlags: Uint): Himagelist{.
      stdcall, dynlib: "comctl32", importc: "ImageList_LoadImageA".}
  proc createStatusWindow*(style: Long, lpszText: Lpcstr, hwndParent: Hwnd,
                           wID: Uint): Hwnd{.stdcall, dynlib: "comctl32",
      importc: "CreateStatusWindowA".}
  proc drawStatusText*(hDC: Hdc, lprc: Lprect, pszText: Lpcstr, uFlags: Uint){.
      stdcall, dynlib: "comctl32", importc: "DrawStatusTextA".}
  proc getOpenFileName*(para1: Lpopenfilename): Winbool{.stdcall,
      dynlib: "comdlg32", importc: "GetOpenFileNameA".}
  proc getSaveFileName*(para1: Lpopenfilename): Winbool{.stdcall,
      dynlib: "comdlg32", importc: "GetSaveFileNameA".}
  proc getFileTitle*(para1: Lpcstr, para2: Lpstr, para3: Int16): Int{.stdcall,
      dynlib: "comdlg32", importc: "GetFileTitleA".}
  proc chooseColor*(para1: Lpchoosecolor): Winbool{.stdcall, dynlib: "comdlg32",
      importc: "ChooseColorA".}
  proc findText*(para1: Lpfindreplace): Hwnd{.stdcall, dynlib: "comdlg32",
      importc: "FindTextA".}
  proc replaceText*(para1: Lpfindreplace): Hwnd{.stdcall, dynlib: "comdlg32",
      importc: "ReplaceTextA".}
  proc chooseFont*(para1: Lpchoosefont): Winbool{.stdcall, dynlib: "comdlg32",
      importc: "ChooseFontA".}
  proc printDlg*(para1: Lpprintdlg): Winbool{.stdcall, dynlib: "comdlg32",
      importc: "PrintDlgA".}
  proc pageSetupDlg*(para1: Lppagesetupdlg): Winbool{.stdcall,
      dynlib: "comdlg32", importc: "PageSetupDlgA".}
  proc createProcess*(lpApplicationName: Lpcstr, lpCommandLine: Lpstr,
                      lpProcessAttributes: LpsecurityAttributes,
                      lpThreadAttributes: LpsecurityAttributes,
                      bInheritHandles: Winbool, dwCreationFlags: Dword,
                      lpEnvironment: Lpvoid, lpCurrentDirectory: Lpcstr,
                      lpStartupInfo: Lpstartupinfo,
                      lpProcessInformation: LpprocessInformation): Winbool{.
      stdcall, dynlib: "kernel32", importc: "CreateProcessA".}
  proc getStartupInfo*(lpStartupInfo: Lpstartupinfo){.stdcall,
      dynlib: "kernel32", importc: "GetStartupInfoA".}
  proc findFirstFile*(lpFileName: Lpcstr, lpFindFileData: Lpwin32FindData): Handle{.
      stdcall, dynlib: "kernel32", importc: "FindFirstFileA".}
  proc findNextFile*(hFindFile: Handle, lpFindFileData: Lpwin32FindData): Winbool{.
      stdcall, dynlib: "kernel32", importc: "FindNextFileA".}
  proc getVersionEx*(VersionInformation: Lposversioninfo): Winbool{.stdcall,
      dynlib: "kernel32", importc: "GetVersionExA".}
  proc createWindow*(lpClassName: Lpcstr, lpWindowName: Lpcstr, dwStyle: Dword,
                     X: Int32, Y: Int32, nWidth: Int32, nHeight: Int32,
                     hWndParent: Hwnd, menu: Hmenu, hInstance: Hinst,
                     lpParam: Lpvoid): Hwnd
  proc createDialog*(hInstance: Hinst, lpTemplateName: Lpcstr, hWndParent: Hwnd,
                     lpDialogFunc: Dlgproc): Hwnd
  proc createDialogIndirect*(hInstance: Hinst, lpTemplate: Lpcdlgtemplate,
                             hWndParent: Hwnd, lpDialogFunc: Dlgproc): Hwnd
  proc dialogBox*(hInstance: Hinst, lpTemplateName: Lpcstr, hWndParent: Hwnd,
                  lpDialogFunc: Dlgproc): Int32
  proc dialogBoxIndirect*(hInstance: Hinst, hDialogTemplate: Lpcdlgtemplate,
                          hWndParent: Hwnd, lpDialogFunc: Dlgproc): Int32
  proc createDC*(para1: Lpcstr, para2: Lpcstr, para3: Lpcstr, para4: Pdevmode): Hdc{.
      stdcall, dynlib: "gdi32", importc: "CreateDCA".}
  proc verInstallFile*(uFlags: Dword, szSrcFileName: Lpstr,
                       szDestFileName: Lpstr, szSrcDir: Lpstr, szDestDir: Lpstr,
                       szCurDir: Lpstr, szTmpFile: Lpstr, lpuTmpFileLen: Puint): Dword{.
      stdcall, dynlib: "version", importc: "VerInstallFileA".}
  proc getFileVersionInfoSize*(lptstrFilename: Lpstr, lpdwHandle: Lpdword): Dword{.
      stdcall, dynlib: "version", importc: "GetFileVersionInfoSizeA".}
  proc getFileVersionInfo*(lptstrFilename: Lpstr, dwHandle: Dword, dwLen: Dword,
                           lpData: Lpvoid): Winbool{.stdcall, dynlib: "version",
      importc: "GetFileVersionInfoA".}
  proc verLanguageName*(wLang: Dword, szLang: Lpstr, nSize: Dword): Dword{.
      stdcall, dynlib: "kernel32", importc: "VerLanguageNameA".}
  proc verQueryValue*(pBlock: Lpvoid, lpSubBlock: Lpstr, lplpBuffer: Lpvoid,
                      puLen: Puint): Winbool{.stdcall, dynlib: "version",
      importc: "VerQueryValueA".}
  proc verFindFile*(uFlags: Dword, szFileName: Lpstr, szWinDir: Lpstr,
                    szAppDir: Lpstr, szCurDir: Lpstr, lpuCurDirLen: Puint,
                    szDestDir: Lpstr, lpuDestDirLen: Puint): Dword{.stdcall,
      dynlib: "version", importc: "VerFindFileA".}
  proc regConnectRegistry*(lpMachineName: Lpstr, key: Hkey, phkResult: Phkey): Long{.
      stdcall, dynlib: "advapi32", importc: "RegConnectRegistryA".}
  proc regCreateKey*(key: Hkey, lpSubKey: Lpcstr, phkResult: Phkey): Long{.
      stdcall, dynlib: "advapi32", importc: "RegCreateKeyA".}
  proc regCreateKeyEx*(key: Hkey, lpSubKey: Lpcstr, Reserved: Dword,
                       lpClass: Lpstr, dwOptions: Dword, samDesired: Regsam,
                       lpSecurityAttributes: LpsecurityAttributes,
                       phkResult: Phkey, lpdwDisposition: Lpdword): Long{.
      stdcall, dynlib: "advapi32", importc: "RegCreateKeyExA".}
  proc regDeleteKey*(key: Hkey, lpSubKey: Lpcstr): Long{.stdcall,
      dynlib: "advapi32", importc: "RegDeleteKeyA".}
  proc regDeleteValue*(key: Hkey, lpValueName: Lpcstr): Long{.stdcall,
      dynlib: "advapi32", importc: "RegDeleteValueA".}
  proc regEnumKey*(key: Hkey, dwIndex: Dword, lpName: Lpstr, cbName: Dword): Long{.
      stdcall, dynlib: "advapi32", importc: "RegEnumKeyA".}
  proc regEnumKeyEx*(key: Hkey, dwIndex: Dword, lpName: Lpstr,
                     lpcbName: Lpdword, lpReserved: Lpdword, lpClass: Lpstr,
                     lpcbClass: Lpdword, lpftLastWriteTime: Pfiletime): Long{.
      stdcall, dynlib: "advapi32", importc: "RegEnumKeyExA".}
  proc regEnumValue*(key: Hkey, dwIndex: Dword, lpValueName: Lpstr,
                     lpcbValueName: Lpdword, lpReserved: Lpdword,
                     lpType: Lpdword, lpData: Lpbyte, lpcbData: Lpdword): Long{.
      stdcall, dynlib: "advapi32", importc: "RegEnumValueA".}
  proc regLoadKey*(key: Hkey, lpSubKey: Lpcstr, lpFile: Lpcstr): Long{.stdcall,
      dynlib: "advapi32", importc: "RegLoadKeyA".}
  proc regOpenKey*(key: Hkey, lpSubKey: Lpcstr, phkResult: Phkey): Long{.
      stdcall, dynlib: "advapi32", importc: "RegOpenKeyA".}
  proc regOpenKeyEx*(key: Hkey, lpSubKey: Lpcstr, ulOptions: Dword,
                     samDesired: Regsam, phkResult: Phkey): Long{.stdcall,
      dynlib: "advapi32", importc: "RegOpenKeyExA".}
  proc regQueryInfoKey*(key: Hkey, lpClass: Lpstr, lpcbClass: Lpdword,
                        lpReserved: Lpdword, lpcSubKeys: Lpdword,
                        lpcbMaxSubKeyLen: Lpdword, lpcbMaxClassLen: Lpdword,
                        lpcValues: Lpdword, lpcbMaxValueNameLen: Lpdword,
                        lpcbMaxValueLen: Lpdword,
                        lpcbSecurityDescriptor: Lpdword,
                        lpftLastWriteTime: Pfiletime): Long{.stdcall,
      dynlib: "advapi32", importc: "RegQueryInfoKeyA".}
  proc regQueryValue*(key: Hkey, lpSubKey: Lpcstr, lpValue: Lpstr,
                      lpcbValue: Plong): Long{.stdcall, dynlib: "advapi32",
      importc: "RegQueryValueA".}
  proc regQueryMultipleValues*(key: Hkey, val_list: Pvalent, num_vals: Dword,
                               lpValueBuf: Lpstr, ldwTotsize: Lpdword): Long{.
      stdcall, dynlib: "advapi32", importc: "RegQueryMultipleValuesA".}
  proc regQueryValueEx*(key: Hkey, lpValueName: Lpcstr, lpReserved: Lpdword,
                        lpType: Lpdword, lpData: Lpbyte, lpcbData: Lpdword): Long{.
      stdcall, dynlib: "advapi32", importc: "RegQueryValueExA".}
  proc regReplaceKey*(key: Hkey, lpSubKey: Lpcstr, lpNewFile: Lpcstr,
                      lpOldFile: Lpcstr): Long{.stdcall, dynlib: "advapi32",
      importc: "RegReplaceKeyA".}
  proc regRestoreKey*(key: Hkey, lpFile: Lpcstr, dwFlags: Dword): Long{.
      stdcall, dynlib: "advapi32", importc: "RegRestoreKeyA".}
  proc regSaveKey*(key: Hkey, lpFile: Lpcstr,
                   lpSecurityAttributes: LpsecurityAttributes): Long{.stdcall,
      dynlib: "advapi32", importc: "RegSaveKeyA".}
  proc regSetValue*(key: Hkey, lpSubKey: Lpcstr, dwType: Dword, lpData: Lpcstr,
                    cbData: Dword): Long{.stdcall, dynlib: "advapi32",
      importc: "RegSetValueA".}
  proc regSetValueEx*(key: Hkey, lpValueName: Lpcstr, Reserved: Dword,
                      dwType: Dword, lpData: Lpbyte, cbData: Dword): Long{.
      stdcall, dynlib: "advapi32", importc: "RegSetValueExA".}
  proc regUnLoadKey*(key: Hkey, lpSubKey: Lpcstr): Long{.stdcall,
      dynlib: "advapi32", importc: "RegUnLoadKeyA".}
  proc initiateSystemShutdown*(lpMachineName: Lpstr, lpMessage: Lpstr,
                               dwTimeout: Dword, bForceAppsClosed: Winbool,
                               bRebootAfterShutdown: Winbool): Winbool{.stdcall,
      dynlib: "advapi32", importc: "InitiateSystemShutdownA".}
  proc abortSystemShutdown*(lpMachineName: Lpstr): Winbool{.stdcall,
      dynlib: "advapi32", importc: "AbortSystemShutdownA".}
  proc compareString*(Locale: Lcid, dwCmpFlags: Dword, lpString1: Lpcstr,
                      cchCount1: Int32, lpString2: Lpcstr, cchCount2: Int32): Int32{.
      stdcall, dynlib: "kernel32", importc: "CompareStringA".}
  proc lCMapString*(Locale: Lcid, dwMapFlags: Dword, lpSrcStr: Lpcstr,
                    cchSrc: Int32, lpDestStr: Lpstr, cchDest: Int32): Int32{.
      stdcall, dynlib: "kernel32", importc: "LCMapStringA".}
  proc getLocaleInfo*(Locale: Lcid, LCType: Lctype, lpLCData: Lpstr,
                      cchData: Int32): Int32{.stdcall, dynlib: "kernel32",
      importc: "GetLocaleInfoA".}
  proc setLocaleInfo*(Locale: Lcid, LCType: Lctype, lpLCData: Lpcstr): Winbool{.
      stdcall, dynlib: "kernel32", importc: "SetLocaleInfoA".}
  proc getTimeFormat*(Locale: Lcid, dwFlags: Dword, lpTime: Lpsystemtime,
                      lpFormat: Lpcstr, lpTimeStr: Lpstr, cchTime: Int32): Int32{.
      stdcall, dynlib: "kernel32", importc: "GetTimeFormatA".}
  proc getDateFormat*(Locale: Lcid, dwFlags: Dword, lpDate: Lpsystemtime,
                      lpFormat: Lpcstr, lpDateStr: Lpstr, cchDate: Int32): Int32{.
      stdcall, dynlib: "kernel32", importc: "GetDateFormatA".}
  proc getNumberFormat*(Locale: Lcid, dwFlags: Dword, lpValue: Lpcstr,
                        lpFormat: Pnumberfmt, lpNumberStr: Lpstr,
                        cchNumber: Int32): Int32{.stdcall, dynlib: "kernel32",
      importc: "GetNumberFormatA".}
  proc getCurrencyFormat*(Locale: Lcid, dwFlags: Dword, lpValue: Lpcstr,
                          lpFormat: Pcurrencyfmt, lpCurrencyStr: Lpstr,
                          cchCurrency: Int32): Int32{.stdcall,
      dynlib: "kernel32", importc: "GetCurrencyFormatA".}
  proc enumCalendarInfo*(lpCalInfoEnumProc: CalinfoEnumproc, Locale: Lcid,
                         Calendar: Calid, CalType: Caltype): Winbool{.stdcall,
      dynlib: "kernel32", importc: "EnumCalendarInfoA".}
  proc enumTimeFormats*(lpTimeFmtEnumProc: TIMEFMT_ENUMPROC, Locale: Lcid,
                        dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
      importc: "EnumTimeFormatsA".}
  proc enumDateFormats*(lpDateFmtEnumProc: DatefmtEnumproc, Locale: Lcid,
                        dwFlags: Dword): Winbool{.stdcall, dynlib: "kernel32",
      importc: "EnumDateFormatsA".}
  proc getStringTypeEx*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Lpcstr,
                        cchSrc: Int32, lpCharType: Lpword): Winbool{.stdcall,
      dynlib: "kernel32", importc: "GetStringTypeExA".}
  proc getStringType*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Lpcstr,
                      cchSrc: Int32, lpCharType: Lpword): Winbool{.stdcall,
      dynlib: "kernel32", importc: "GetStringTypeA".}
  proc foldString*(dwMapFlags: Dword, lpSrcStr: Lpcstr, cchSrc: Int32,
                   lpDestStr: Lpstr, cchDest: Int32): Int32{.stdcall,
      dynlib: "kernel32", importc: "FoldStringA".}
  proc enumSystemLocales*(lpLocaleEnumProc: LocaleEnumproc, dwFlags: Dword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "EnumSystemLocalesA".}
  proc enumSystemCodePages*(lpCodePageEnumProc: CodepageEnumproc,
                            dwFlags: Dword): Winbool{.stdcall,
      dynlib: "kernel32", importc: "EnumSystemCodePagesA".}
  proc peekConsoleInput*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                         nLength: Dword, lpNumberOfEventsRead: Lpdword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "PeekConsoleInputA".}
  proc readConsoleInput*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                         nLength: Dword, lpNumberOfEventsRead: Lpdword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "ReadConsoleInputA".}
  proc writeConsoleInput*(hConsoleInput: Handle, lpBuffer: PinputRecord,
                          nLength: Dword, lpNumberOfEventsWritten: Lpdword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "WriteConsoleInputA".}
  proc readConsoleOutput*(hConsoleOutput: Handle, lpBuffer: PcharInfo,
                          dwBufferSize: Coord, dwBufferCoord: Coord,
                          lpReadRegion: PsmallRect): Winbool{.stdcall,
      dynlib: "kernel32", importc: "ReadConsoleOutputA".}
  proc writeConsoleOutput*(hConsoleOutput: Handle, lpBuffer: PcharInfo,
                           dwBufferSize: Coord, dwBufferCoord: Coord,
                           lpWriteRegion: PsmallRect): Winbool{.stdcall,
      dynlib: "kernel32", importc: "WriteConsoleOutputA".}
  proc readConsoleOutputCharacter*(hConsoleOutput: Handle, lpCharacter: Lpstr,
                                   nLength: Dword, dwReadCoord: Coord,
                                   lpNumberOfCharsRead: Lpdword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterA".}
  proc writeConsoleOutputCharacter*(hConsoleOutput: Handle, lpCharacter: Lpcstr,
                                    nLength: Dword, dwWriteCoord: Coord,
                                    lpNumberOfCharsWritten: Lpdword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterA".}
  proc fillConsoleOutputCharacter*(hConsoleOutput: Handle, cCharacter: Char,
                                   nLength: Dword, dwWriteCoord: Coord,
                                   lpNumberOfCharsWritten: Lpdword): Winbool{.
      stdcall, dynlib: "kernel32", importc: "FillConsoleOutputCharacterA".}
  proc scrollConsoleScreenBuffer*(hConsoleOutput: Handle,
                                  lpScrollRectangle: PsmallRect,
                                  lpClipRectangle: PsmallRect,
                                  dwDestinationOrigin: Coord, lpFill: PcharInfo): Winbool{.
      stdcall, dynlib: "kernel32", importc: "ScrollConsoleScreenBufferA".}
  proc getConsoleTitle*(lpConsoleTitle: Lpstr, nSize: Dword): Dword{.stdcall,
      dynlib: "kernel32", importc: "GetConsoleTitleA".}
  proc setConsoleTitle*(lpConsoleTitle: Lpcstr): Winbool{.stdcall,
      dynlib: "kernel32", importc: "SetConsoleTitleA".}
  proc readConsole*(hConsoleInput: Handle, lpBuffer: Lpvoid,
                    nNumberOfCharsToRead: Dword, lpNumberOfCharsRead: Lpdword,
                    lpReserved: Lpvoid): Winbool{.stdcall, dynlib: "kernel32",
      importc: "ReadConsoleA".}
  proc writeConsole*(hConsoleOutput: Handle, lpBuffer: Pointer,
                     nNumberOfCharsToWrite: Dword,
                     lpNumberOfCharsWritten: Lpdword, lpReserved: Lpvoid): Winbool{.
      stdcall, dynlib: "kernel32", importc: "WriteConsoleA".}
  proc wNetAddConnection*(lpRemoteName: Lpcstr, lpPassword: Lpcstr,
                          lpLocalName: Lpcstr): Dword{.stdcall, dynlib: "mpr",
      importc: "WNetAddConnectionA".}
  proc wNetAddConnection2*(lpNetResource: Lpnetresource, lpPassword: Lpcstr,
                           lpUserName: Lpcstr, dwFlags: Dword): Dword{.stdcall,
      dynlib: "mpr", importc: "WNetAddConnection2A".}
  proc wNetAddConnection3*(hwndOwner: Hwnd, lpNetResource: Lpnetresource,
                           lpPassword: Lpcstr, lpUserName: Lpcstr,
                           dwFlags: Dword): Dword{.stdcall, dynlib: "mpr",
      importc: "WNetAddConnection3A".}
  proc wNetCancelConnection*(lpName: Lpcstr, fForce: Winbool): Dword{.stdcall,
      dynlib: "mpr", importc: "WNetCancelConnectionA".}
  proc wNetCancelConnection2*(lpName: Lpcstr, dwFlags: Dword, fForce: Winbool): Dword{.
      stdcall, dynlib: "mpr", importc: "WNetCancelConnection2A".}
  proc wNetGetConnection*(lpLocalName: Lpcstr, lpRemoteName: Lpstr,
                          lpnLength: Lpdword): Dword{.stdcall, dynlib: "mpr",
      importc: "WNetGetConnectionA".}
  proc wNetUseConnection*(hwndOwner: Hwnd, lpNetResource: Lpnetresource,
                          lpUserID: Lpcstr, lpPassword: Lpcstr, dwFlags: Dword,
                          lpAccessName: Lpstr, lpBufferSize: Lpdword,
                          lpResult: Lpdword): Dword{.stdcall, dynlib: "mpr",
      importc: "WNetUseConnectionA".}
  proc wNetSetConnection*(lpName: Lpcstr, dwProperties: Dword, pvValues: Lpvoid): Dword{.
      stdcall, dynlib: "mpr", importc: "WNetSetConnectionA".}
  proc wNetConnectionDialog1*(lpConnDlgStruct: Lpconnectdlgstruct): Dword{.
      stdcall, dynlib: "mpr", importc: "WNetConnectionDialog1A".}
  proc wNetDisconnectDialog1*(lpConnDlgStruct: Lpdiscdlgstruct): Dword{.stdcall,
      dynlib: "mpr", importc: "WNetDisconnectDialog1A".}
  proc wNetOpenEnum*(dwScope: Dword, dwType: Dword, dwUsage: Dword,
                     lpNetResource: Lpnetresource, lphEnum: Lphandle): Dword{.
      stdcall, dynlib: "mpr", importc: "WNetOpenEnumA".}
  proc wNetEnumResource*(hEnum: Handle, lpcCount: Lpdword, lpBuffer: Lpvoid,
                         lpBufferSize: Lpdword): Dword{.stdcall, dynlib: "mpr",
      importc: "WNetEnumResourceA".}
  proc wNetGetUniversalName*(lpLocalPath: Lpcstr, dwInfoLevel: Dword,
                             lpBuffer: Lpvoid, lpBufferSize: Lpdword): Dword{.
      stdcall, dynlib: "mpr", importc: "WNetGetUniversalNameA".}
  proc wNetGetUser*(lpName: Lpcstr, lpUserName: Lpstr, lpnLength: Lpdword): Dword{.
      stdcall, dynlib: "mpr", importc: "WNetGetUserA".}
  proc wNetGetProviderName*(dwNetType: Dword, lpProviderName: Lpstr,
                            lpBufferSize: Lpdword): Dword{.stdcall,
      dynlib: "mpr", importc: "WNetGetProviderNameA".}
  proc wNetGetNetworkInformation*(lpProvider: Lpcstr,
                                  lpNetInfoStruct: Lpnetinfostruct): Dword{.
      stdcall, dynlib: "mpr", importc: "WNetGetNetworkInformationA".}
  proc wNetGetLastError*(lpError: Lpdword, lpErrorBuf: Lpstr,
                         nErrorBufSize: Dword, lpNameBuf: Lpstr,
                         nNameBufSize: Dword): Dword{.stdcall, dynlib: "mpr",
      importc: "WNetGetLastErrorA".}
  proc multinetGetConnectionPerformance*(lpNetResource: Lpnetresource,
      lpNetConnectInfoStruct: Lpnetconnectinfostruct): Dword{.stdcall,
      dynlib: "mpr", importc: "MultinetGetConnectionPerformanceA".}
  proc changeServiceConfig*(hService: ScHandle, dwServiceType: Dword,
                            dwStartType: Dword, dwErrorControl: Dword,
                            lpBinaryPathName: Lpcstr, lpLoadOrderGroup: Lpcstr,
                            lpdwTagId: Lpdword, lpDependencies: Lpcstr,
                            lpServiceStartName: Lpcstr, lpPassword: Lpcstr,
                            lpDisplayName: Lpcstr): Winbool{.stdcall,
      dynlib: "advapi32", importc: "ChangeServiceConfigA".}
  proc createService*(hSCManager: ScHandle, lpServiceName: Lpcstr,
                      lpDisplayName: Lpcstr, dwDesiredAccess: Dword,
                      dwServiceType: Dword, dwStartType: Dword,
                      dwErrorControl: Dword, lpBinaryPathName: Lpcstr,
                      lpLoadOrderGroup: Lpcstr, lpdwTagId: Lpdword,
                      lpDependencies: Lpcstr, lpServiceStartName: Lpcstr,
                      lpPassword: Lpcstr): ScHandle{.stdcall,
      dynlib: "advapi32", importc: "CreateServiceA".}
  proc enumDependentServices*(hService: ScHandle, dwServiceState: Dword,
                              lpServices: LpenumServiceStatus,
                              cbBufSize: Dword, pcbBytesNeeded: Lpdword,
                              lpServicesReturned: Lpdword): Winbool{.stdcall,
      dynlib: "advapi32", importc: "EnumDependentServicesA".}
  proc enumServicesStatus*(hSCManager: ScHandle, dwServiceType: Dword,
                           dwServiceState: Dword,
                           lpServices: LpenumServiceStatus, cbBufSize: Dword,
                           pcbBytesNeeded: Lpdword, lpServicesReturned: Lpdword,
                           lpResumeHandle: Lpdword): Winbool{.stdcall,
      dynlib: "advapi32", importc: "EnumServicesStatusA".}
  proc getServiceKeyName*(hSCManager: ScHandle, lpDisplayName: Lpcstr,
                          lpServiceName: Lpstr, lpcchBuffer: Lpdword): Winbool{.
      stdcall, dynlib: "advapi32", importc: "GetServiceKeyNameA".}
  proc getServiceDisplayName*(hSCManager: ScHandle, lpServiceName: Lpcstr,
                              lpDisplayName: Lpstr, lpcchBuffer: Lpdword): Winbool{.
      stdcall, dynlib: "advapi32", importc: "GetServiceDisplayNameA".}
  proc openSCManager*(lpMachineName: Lpcstr, lpDatabaseName: Lpcstr,
                      dwDesiredAccess: Dword): ScHandle{.stdcall,
      dynlib: "advapi32", importc: "OpenSCManagerA".}
  proc openService*(hSCManager: ScHandle, lpServiceName: Lpcstr,
                    dwDesiredAccess: Dword): ScHandle{.stdcall,
      dynlib: "advapi32", importc: "OpenServiceA".}
  proc queryServiceConfig*(hService: ScHandle,
                           lpServiceConfig: LpqueryServiceConfig,
                           cbBufSize: Dword, pcbBytesNeeded: Lpdword): Winbool{.
      stdcall, dynlib: "advapi32", importc: "QueryServiceConfigA".}
  proc queryServiceLockStatus*(hSCManager: ScHandle,
                               lpLockStatus: LpqueryServiceLockStatus,
                               cbBufSize: Dword, pcbBytesNeeded: Lpdword): Winbool{.
      stdcall, dynlib: "advapi32", importc: "QueryServiceLockStatusA".}
  proc registerServiceCtrlHandler*(lpServiceName: Lpcstr,
                                   lpHandlerProc: LphandlerFunction): ServiceStatusHandle{.
      stdcall, dynlib: "advapi32", importc: "RegisterServiceCtrlHandlerA".}
  proc startServiceCtrlDispatcher*(lpServiceStartTable: LpserviceTableEntry): Winbool{.
      stdcall, dynlib: "advapi32", importc: "StartServiceCtrlDispatcherA".}
  proc startService*(hService: ScHandle, dwNumServiceArgs: Dword,
                     lpServiceArgVectors: Lpcstr): Winbool{.stdcall,
      dynlib: "advapi32", importc: "StartServiceA".}
  proc dragQueryFile*(para1: Hdrop, para2: Int, para3: Cstring, para4: Int): Int{.
      stdcall, dynlib: "shell32", importc: "DragQueryFileA".}
  proc extractAssociatedIcon*(para1: Hinst, para2: Cstring, para3: Lpword): Hicon{.
      stdcall, dynlib: "shell32", importc: "ExtractAssociatedIconA".}
  proc extractIcon*(para1: Hinst, para2: Cstring, para3: Int): Hicon{.stdcall,
      dynlib: "shell32", importc: "ExtractIconA".}
  proc findExecutable*(para1: Cstring, para2: Cstring, para3: Cstring): Hinst{.
      stdcall, dynlib: "shell32", importc: "FindExecutableA".}
  proc shellAbout*(para1: Hwnd, para2: Cstring, para3: Cstring, para4: Hicon): Int32{.
      stdcall, dynlib: "shell32", importc: "ShellAboutA".}
  proc shellExecute*(para1: Hwnd, para2: Cstring, para3: Cstring,
                     para4: Cstring, para5: Cstring, para6: Int32): Hinst{.
      stdcall, dynlib: "shell32", importc: "ShellExecuteA".}
  proc shellNotifyIcon*(dwMessage: Dword, lpData: PNotifyIconDataA): Winbool{.
      stdcall, dynlib: "shell32", importc: "Shell_NotifyIconA".}
  proc ddeCreateStringHandle*(para1: Dword, para2: Cstring, para3: Int32): Hsz{.
      stdcall, dynlib: "user32", importc: "DdeCreateStringHandleA".}
  proc ddeInitialize*(para1: Lpdword, para2: Pfncallback, para3: Dword,
                      para4: Dword): Uint{.stdcall, dynlib: "user32",
      importc: "DdeInitializeA".}
  proc ddeQueryString*(para1: Dword, para2: Hsz, para3: Cstring, para4: Dword,
                       para5: Int32): Dword{.stdcall, dynlib: "user32",
      importc: "DdeQueryStringA".}
  proc logonUser*(para1: Lpstr, para2: Lpstr, para3: Lpstr, para4: Dword,
                  para5: Dword, para6: Phandle): Winbool{.stdcall,
      dynlib: "advapi32", importc: "LogonUserA".}
  proc createProcessAsUser*(para1: Handle, para2: Lpctstr, para3: Lptstr,
                            para4: LpsecurityAttributes,
                            para5: LpsecurityAttributes, para6: Winbool,
                            para7: Dword, para8: Lpvoid, para9: Lpctstr,
                            para10: Lpstartupinfo, para11: LpprocessInformation): Winbool{.
      stdcall, dynlib: "advapi32", importc: "CreateProcessAsUserA".}
proc GetRandomRgn*(aHDC: Hdc, aHRGN: Hrgn, iNum: Wint): Wint{.stdcall,
     importc, dynlib: "gdi32".}

proc accessCheck*(pSecurityDescriptor: PsecurityDescriptor,
                  ClientToken: Handle, DesiredAccess: Dword,
                  GenericMapping: PgenericMapping,
                  PrivilegeSet: PprivilegeSet, PrivilegeSetLength: Lpdword,
                  GrantedAccess: Lpdword, AccessStatus: Lpbool): Winbool{.
    stdcall, dynlib: "advapi32", importc: "AccessCheck".}
proc freeResource*(hResData: Hglobal): Winbool{.stdcall, dynlib: "kernel32",
    importc: "FreeResource".}
proc lockResource*(hResData: Hglobal): Lpvoid{.stdcall, dynlib: "kernel32",
    importc: "LockResource".}
proc freeLibrary*(hLibModule: Hinst): Winbool{.stdcall, dynlib: "kernel32",
    importc: "FreeLibrary".}
proc freeLibraryAndExitThread*(hLibModule: Hmodule, dwExitCode: Dword){.stdcall,
    dynlib: "kernel32", importc: "FreeLibraryAndExitThread".}
proc disableThreadLibraryCalls*(hLibModule: Hmodule): Winbool{.stdcall,
    dynlib: "kernel32", importc: "DisableThreadLibraryCalls".}
proc getProcAddress*(hModule: Hinst, lpProcName: Lpcstr): Farproc{.stdcall,
    dynlib: "kernel32", importc: "GetProcAddress".}
proc getVersion*(): Dword{.stdcall, dynlib: "kernel32", importc: "GetVersion".}
proc globalAlloc*(uFlags: Int, dwBytes: Dword): Hglobal{.stdcall,
    dynlib: "kernel32", importc: "GlobalAlloc".}
proc globalReAlloc*(hMem: Hglobal, dwBytes: Dword, uFlags: Int): Hglobal{.
    stdcall, dynlib: "kernel32", importc: "GlobalReAlloc".}
proc globalSize*(hMem: Hglobal): Dword{.stdcall, dynlib: "kernel32",
                                        importc: "GlobalSize".}
proc globalFlags*(hMem: Hglobal): Uint{.stdcall, dynlib: "kernel32",
                                        importc: "GlobalFlags".}
proc globalLock*(hMem: Hglobal): Lpvoid{.stdcall, dynlib: "kernel32",
    importc: "GlobalLock".}
proc globalHandle*(pMem: Lpcvoid): Hglobal{.stdcall, dynlib: "kernel32",
    importc: "GlobalHandle".}
proc globalUnlock*(hMem: Hglobal): Winbool{.stdcall, dynlib: "kernel32",
    importc: "GlobalUnlock".}
proc globalFree*(hMem: Hglobal): Hglobal{.stdcall, dynlib: "kernel32",
    importc: "GlobalFree".}
proc globalCompact*(dwMinFree: Dword): Uint{.stdcall, dynlib: "kernel32",
    importc: "GlobalCompact".}
proc globalFix*(hMem: Hglobal){.stdcall, dynlib: "kernel32",
                                importc: "GlobalFix".}
proc globalUnfix*(hMem: Hglobal){.stdcall, dynlib: "kernel32",
                                  importc: "GlobalUnfix".}
proc globalWire*(hMem: Hglobal): Lpvoid{.stdcall, dynlib: "kernel32",
    importc: "GlobalWire".}
proc globalUnWire*(hMem: Hglobal): Winbool{.stdcall, dynlib: "kernel32",
    importc: "GlobalUnWire".}
proc globalMemoryStatus*(lpBuffer: Lpmemorystatus){.stdcall, dynlib: "kernel32",
    importc: "GlobalMemoryStatus".}
proc localAlloc*(uFlags: Uint, uBytes: Uint): Hlocal{.stdcall,
    dynlib: "kernel32", importc: "LocalAlloc".}
proc localReAlloc*(hMem: Hlocal, uBytes: Uint, uFlags: Uint): Hlocal{.stdcall,
    dynlib: "kernel32", importc: "LocalReAlloc".}
proc localLock*(hMem: Hlocal): Lpvoid{.stdcall, dynlib: "kernel32",
                                       importc: "LocalLock".}
proc localHandle*(pMem: Lpcvoid): Hlocal{.stdcall, dynlib: "kernel32",
    importc: "LocalHandle".}
proc localUnlock*(hMem: Hlocal): Winbool{.stdcall, dynlib: "kernel32",
    importc: "LocalUnlock".}
proc localSize*(hMem: Hlocal): Uint{.stdcall, dynlib: "kernel32",
                                     importc: "LocalSize".}
proc localFlags*(hMem: Hlocal): Uint{.stdcall, dynlib: "kernel32",
                                      importc: "LocalFlags".}
proc localFree*(hMem: Hlocal): Hlocal{.stdcall, dynlib: "kernel32",
                                       importc: "LocalFree".}
proc localShrink*(hMem: Hlocal, cbNewSize: Uint): Uint{.stdcall,
    dynlib: "kernel32", importc: "LocalShrink".}
proc localCompact*(uMinFree: Uint): Uint{.stdcall, dynlib: "kernel32",
    importc: "LocalCompact".}
proc flushInstructionCache*(hProcess: Handle, lpBaseAddress: Lpcvoid,
                            dwSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FlushInstructionCache".}
proc virtualAlloc*(lpAddress: Lpvoid, dwSize: Dword, flAllocationType: Dword,
                   flProtect: Dword): Lpvoid{.stdcall, dynlib: "kernel32",
    importc: "VirtualAlloc".}
proc virtualFree*(lpAddress: Lpvoid, dwSize: Dword, dwFreeType: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "VirtualFree".}
proc virtualProtect*(lpAddress: Lpvoid, dwSize: Dword, flNewProtect: Dword,
                     lpflOldProtect: Pdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "VirtualProtect".}
proc virtualQuery*(lpAddress: Lpcvoid, lpBuffer: PmemoryBasicInformation,
                   dwLength: Dword): Dword{.stdcall, dynlib: "kernel32",
    importc: "VirtualQuery".}
proc virtualProtectEx*(hProcess: Handle, lpAddress: Lpvoid, dwSize: Dword,
                       flNewProtect: Dword, lpflOldProtect: Pdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "VirtualProtectEx".}
proc virtualQueryEx*(hProcess: Handle, lpAddress: Lpcvoid,
                     lpBuffer: PmemoryBasicInformation, dwLength: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "VirtualQueryEx".}
proc heapCreate*(flOptions: Dword, dwInitialSize: Dword, dwMaximumSize: Dword): Handle{.
    stdcall, dynlib: "kernel32", importc: "HeapCreate".}
proc heapDestroy*(hHeap: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "HeapDestroy".}
proc heapAlloc*(hHeap: Handle, dwFlags: Dword, dwBytes: Dword): Lpvoid{.stdcall,
    dynlib: "kernel32", importc: "HeapAlloc".}
proc heapReAlloc*(hHeap: Handle, dwFlags: Dword, lpMem: Lpvoid, dwBytes: Dword): Lpvoid{.
    stdcall, dynlib: "kernel32", importc: "HeapReAlloc".}
proc heapFree*(hHeap: Handle, dwFlags: Dword, lpMem: Lpvoid): Winbool{.stdcall,
    dynlib: "kernel32", importc: "HeapFree".}
proc heapSize*(hHeap: Handle, dwFlags: Dword, lpMem: Lpcvoid): Dword{.stdcall,
    dynlib: "kernel32", importc: "HeapSize".}
proc heapValidate*(hHeap: Handle, dwFlags: Dword, lpMem: Lpcvoid): Winbool{.
    stdcall, dynlib: "kernel32", importc: "HeapValidate".}
proc heapCompact*(hHeap: Handle, dwFlags: Dword): Uint{.stdcall,
    dynlib: "kernel32", importc: "HeapCompact".}
proc getProcessHeap*(): Handle{.stdcall, dynlib: "kernel32",
                                importc: "GetProcessHeap".}
proc getProcessHeaps*(NumberOfHeaps: Dword, ProcessHeaps: Phandle): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetProcessHeaps".}
proc heapLock*(hHeap: Handle): Winbool{.stdcall, dynlib: "kernel32",
                                        importc: "HeapLock".}
proc heapUnlock*(hHeap: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "HeapUnlock".}
proc heapWalk*(hHeap: Handle, lpEntry: LpprocessHeapEntry): Winbool{.stdcall,
    dynlib: "kernel32", importc: "HeapWalk".}
proc getProcessAffinityMask*(hProcess: Handle, lpProcessAffinityMask: Lpdword,
                             lpSystemAffinityMask: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetProcessAffinityMask".}
proc getProcessTimes*(hProcess: Handle, lpCreationTime: Lpfiletime,
                      lpExitTime: Lpfiletime, lpKernelTime: Lpfiletime,
                      lpUserTime: Lpfiletime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetProcessTimes".}
proc getProcessWorkingSetSize*(hProcess: Handle,
                               lpMinimumWorkingSetSize: Lpdword,
                               lpMaximumWorkingSetSize: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetProcessWorkingSetSize".}
proc setProcessWorkingSetSize*(hProcess: Handle, dwMinimumWorkingSetSize: Dword,
                               dwMaximumWorkingSetSize: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetProcessWorkingSetSize".}
proc openProcess*(dwDesiredAccess: Dword, bInheritHandle: Winbool,
                  dwProcessId: Dword): Handle{.stdcall, dynlib: "kernel32",
    importc: "OpenProcess".}
proc getCurrentProcess*(): Handle{.stdcall, dynlib: "kernel32",
                                   importc: "GetCurrentProcess".}
proc getCurrentProcessId*(): Dword{.stdcall, dynlib: "kernel32",
                                    importc: "GetCurrentProcessId".}
proc exitProcess*(uExitCode: Uint){.stdcall, dynlib: "kernel32",
                                    importc: "ExitProcess".}
proc terminateProcess*(hProcess: Handle, uExitCode: Uint): Winbool{.stdcall,
    dynlib: "kernel32", importc: "TerminateProcess".}
proc setProcessAffinityMask*(hProcess: THandle, dwProcessAffinityMask: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetProcessAffinityMask".}
proc getExitCodeProcess*(hProcess: Handle, lpExitCode: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetExitCodeProcess".}
proc fatalExit*(ExitCode: Int32){.stdcall, dynlib: "kernel32",
                                  importc: "FatalExit".}
proc raiseException*(dwExceptionCode: Dword, dwExceptionFlags: Dword,
                     nNumberOfArguments: Dword, lpArguments: Lpdword){.stdcall,
    dynlib: "kernel32", importc: "RaiseException".}
proc unhandledExceptionFilter*(ExceptionInfo: Lpemptyrecord): Long{.stdcall,
    dynlib: "kernel32", importc: "UnhandledExceptionFilter".}
proc createRemoteThread*(hProcess: Handle,
                         lpThreadAttributes: LpsecurityAttributes,
                         dwStackSize: Dword,
                         lpStartAddress: LpthreadStartRoutine,
                         lpParameter: Lpvoid, dwCreationFlags: Dword,
                         lpThreadId: Lpdword): Handle{.stdcall,
    dynlib: "kernel32", importc: "CreateRemoteThread".}
proc getCurrentThread*(): Handle{.stdcall, dynlib: "kernel32",
                                  importc: "GetCurrentThread".}
proc getCurrentThreadId*(): Dword{.stdcall, dynlib: "kernel32",
                                   importc: "GetCurrentThreadId".}
proc setThreadAffinityMask*(hThread: Handle, dwThreadAffinityMask: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "SetThreadAffinityMask".}
proc setThreadPriority*(hThread: Handle, nPriority: Int32): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetThreadPriority".}
proc getThreadPriority*(hThread: Handle): Int32{.stdcall, dynlib: "kernel32",
    importc: "GetThreadPriority".}
proc getThreadTimes*(hThread: Handle, lpCreationTime: Lpfiletime,
                     lpExitTime: Lpfiletime, lpKernelTime: Lpfiletime,
                     lpUserTime: Lpfiletime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetThreadTimes".}
proc exitThread*(dwExitCode: Dword){.stdcall, dynlib: "kernel32",
                                     importc: "ExitThread".}
proc terminateThread*(hThread: Handle, dwExitCode: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "TerminateThread".}
proc getExitCodeThread*(hThread: Handle, lpExitCode: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetExitCodeThread".}
proc getThreadSelectorEntry*(hThread: Handle, dwSelector: Dword,
                             lpSelectorEntry: LpldtEntry): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetThreadSelectorEntry".}
proc getLastError*(): Dword{.stdcall, dynlib: "kernel32",
                             importc: "GetLastError".}
proc setLastError*(dwErrCode: Dword){.stdcall, dynlib: "kernel32",
                                      importc: "SetLastError".}
proc createIoCompletionPort*(FileHandle: Handle, ExistingCompletionPort: Handle,
                             CompletionKey: Dword,
                             NumberOfConcurrentThreads: Dword): Handle{.stdcall,
    dynlib: "kernel32", importc: "CreateIoCompletionPort".}
proc setErrorMode*(uMode: Uint): Uint{.stdcall, dynlib: "kernel32",
                                       importc: "SetErrorMode".}
proc readProcessMemory*(hProcess: Handle, lpBaseAddress: Lpcvoid,
                        lpBuffer: Lpvoid, nSize: Dword,
                        lpNumberOfBytesRead: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ReadProcessMemory".}
proc writeProcessMemory*(hProcess: Handle, lpBaseAddress: Lpvoid,
                         lpBuffer: Lpvoid, nSize: Dword,
                         lpNumberOfBytesWritten: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteProcessMemory".}
proc getThreadContext*(hThread: Handle, lpContext: Lpcontext): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetThreadContext".}
proc suspendThread*(hThread: Handle): Dword{.stdcall, dynlib: "kernel32",
    importc: "SuspendThread".}
proc resumeThread*(hThread: Handle): Dword{.stdcall, dynlib: "kernel32",
    importc: "ResumeThread".}
proc debugBreak*(){.stdcall, dynlib: "kernel32", importc: "DebugBreak".}
proc waitForDebugEvent*(lpDebugEvent: LpdebugEvent, dwMilliseconds: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WaitForDebugEvent".}
proc continueDebugEvent*(dwProcessId: Dword, dwThreadId: Dword,
                         dwContinueStatus: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ContinueDebugEvent".}
proc debugActiveProcess*(dwProcessId: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "DebugActiveProcess".}
proc initializeCriticalSection*(lpCriticalSection: LpcriticalSection){.stdcall,
    dynlib: "kernel32", importc: "InitializeCriticalSection".}
proc enterCriticalSection*(lpCriticalSection: LpcriticalSection){.stdcall,
    dynlib: "kernel32", importc: "EnterCriticalSection".}
proc leaveCriticalSection*(lpCriticalSection: LpcriticalSection){.stdcall,
    dynlib: "kernel32", importc: "LeaveCriticalSection".}
proc deleteCriticalSection*(lpCriticalSection: LpcriticalSection){.stdcall,
    dynlib: "kernel32", importc: "DeleteCriticalSection".}
proc tryEnterCriticalSection*(lpCriticalSection: LpcriticalSection): Winbool{.
    stdcall, dynlib: "kernel32", importc: "TryEnterCriticalSection".}
proc setEvent*(hEvent: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "SetEvent".}
proc resetEvent*(hEvent: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "ResetEvent".}
proc pulseEvent*(hEvent: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "PulseEvent".}
proc releaseSemaphore*(hSemaphore: Handle, lReleaseCount: Long,
                       lpPreviousCount: Lplong): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ReleaseSemaphore".}
proc releaseMutex*(hMutex: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "ReleaseMutex".}
proc waitForSingleObject*(hHandle: Handle, dwMilliseconds: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "WaitForSingleObject".}

proc sleep*(dwMilliseconds: Dword){.stdcall, dynlib: "kernel32",
                                    importc: "Sleep".}
proc loadResource*(hModule: Hinst, hResInfo: Hrsrc): Hglobal{.stdcall,
    dynlib: "kernel32", importc: "LoadResource".}
proc sizeofResource*(hModule: Hinst, hResInfo: Hrsrc): Dword{.stdcall,
    dynlib: "kernel32", importc: "SizeofResource".}
proc globalDeleteAtom*(nAtom: Atom): Atom{.stdcall, dynlib: "kernel32",
    importc: "GlobalDeleteAtom".}
proc initAtomTable*(nSize: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "InitAtomTable".}
proc deleteAtom*(nAtom: Atom): Atom{.stdcall, dynlib: "kernel32",
                                     importc: "DeleteAtom".}
proc setHandleCount*(uNumber: Uint): Uint{.stdcall, dynlib: "kernel32",
    importc: "SetHandleCount".}
proc getLogicalDrives*(): Dword{.stdcall, dynlib: "kernel32",
                                 importc: "GetLogicalDrives".}
proc lockFile*(hFile: Handle, dwFileOffsetLow: Dword, dwFileOffsetHigh: Dword,
               nNumberOfBytesToLockLow: Dword, nNumberOfBytesToLockHigh: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "LockFile".}
proc unlockFile*(hFile: Handle, dwFileOffsetLow: Dword, dwFileOffsetHigh: Dword,
                 nNumberOfBytesToUnlockLow: Dword,
                 nNumberOfBytesToUnlockHigh: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "UnlockFile".}
proc lockFileEx*(hFile: Handle, dwFlags: Dword, dwReserved: Dword,
                 nNumberOfBytesToLockLow: Dword,
                 nNumberOfBytesToLockHigh: Dword, lpOverlapped: Lpoverlapped): Winbool{.
    stdcall, dynlib: "kernel32", importc: "LockFileEx".}
proc unlockFileEx*(hFile: Handle, dwReserved: Dword,
                   nNumberOfBytesToUnlockLow: Dword,
                   nNumberOfBytesToUnlockHigh: Dword, lpOverlapped: Lpoverlapped): Winbool{.
    stdcall, dynlib: "kernel32", importc: "UnlockFileEx".}
proc getFileInformationByHandle*(hFile: Handle, lpFileInformation: LpbyHandleFileInformation): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetFileInformationByHandle".}
proc getFileType*(hFile: Handle): Dword{.stdcall, dynlib: "kernel32",
    importc: "GetFileType".}
proc getFileSize*(hFile: Handle, lpFileSizeHigh: Lpdword): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetFileSize".}
proc getStdHandle*(nStdHandle: Dword): Handle{.stdcall, dynlib: "kernel32",
    importc: "GetStdHandle".}
proc setStdHandle*(nStdHandle: Dword, hHandle: Handle): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetStdHandle".}
proc flushFileBuffers*(hFile: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "FlushFileBuffers".}
proc deviceIoControl*(hDevice: Handle, dwIoControlCode: Dword,
                      lpInBuffer: Lpvoid, nInBufferSize: Dword,
                      lpOutBuffer: Lpvoid, nOutBufferSize: Dword,
                      lpBytesReturned: Lpdword, lpOverlapped: Lpoverlapped): Winbool{.
    stdcall, dynlib: "kernel32", importc: "DeviceIoControl".}
proc setEndOfFile*(hFile: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "SetEndOfFile".}
proc setFilePointer*(hFile: Handle, lDistanceToMove: Long,
                     lpDistanceToMoveHigh: Plong, dwMoveMethod: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "SetFilePointer".}
proc findClose*(hFindFile: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "FindClose".}
proc getFileTime*(hFile: Handle, lpCreationTime: Lpfiletime,
                  lpLastAccessTime: Lpfiletime, lpLastWriteTime: Lpfiletime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetFileTime".}
proc setFileTime*(hFile: Handle, lpCreationTime: Lpfiletime,
                  lpLastAccessTime: Lpfiletime, lpLastWriteTime: Lpfiletime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetFileTime".}
proc closeHandle*(hObject: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "CloseHandle".}
proc duplicateHandle*(hSourceProcessHandle: Handle, hSourceHandle: Handle,
                      hTargetProcessHandle: Handle, lpTargetHandle: Lphandle,
                      dwDesiredAccess: Dword, bInheritHandle: Winbool,
                      dwOptions: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "DuplicateHandle".}
proc getHandleInformation*(hObject: Handle, lpdwFlags: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetHandleInformation".}
proc setHandleInformation*(hObject: Handle, dwMask: Dword, dwFlags: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetHandleInformation".}
proc loadModule*(lpModuleName: Lpcstr, lpParameterBlock: Lpvoid): Dword{.
    stdcall, dynlib: "kernel32", importc: "LoadModule".}
proc winExec*(lpCmdLine: Lpcstr, uCmdShow: Uint): Uint{.stdcall,
    dynlib: "kernel32", importc: "WinExec".}
proc clearCommBreak*(hFile: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "ClearCommBreak".}
proc clearCommError*(hFile: Handle, lpErrors: Lpdword, lpStat: Lpcomstat): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ClearCommError".}
proc setupComm*(hFile: Handle, dwInQueue: Dword, dwOutQueue: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetupComm".}
proc escapeCommFunction*(hFile: Handle, dwFunc: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "EscapeCommFunction".}
proc getCommConfig*(hCommDev: Handle, lpCC: Lpcommconfig, lpdwSize: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetCommConfig".}
proc getCommProperties*(hFile: Handle, lpCommProp: Lpcommprop): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetCommProperties".}
proc getCommModemStatus*(hFile: Handle, lpModemStat: Pdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetCommModemStatus".}
proc getCommState*(hFile: Handle, lpDCB: Pdcb): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetCommState".}
proc getCommTimeouts*(hFile: Handle, lpCommTimeouts: Pcommtimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetCommTimeouts".}
proc purgeComm*(hFile: Handle, dwFlags: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "PurgeComm".}
proc setCommBreak*(hFile: Handle): Winbool{.stdcall, dynlib: "kernel32",
    importc: "SetCommBreak".}
proc setCommConfig*(hCommDev: Handle, lpCC: Lpcommconfig, dwSize: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetCommConfig".}
proc setCommMask*(hFile: Handle, dwEvtMask: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetCommMask".}
proc setCommState*(hFile: Handle, lpDCB: Lpdcb): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetCommState".}
proc setCommTimeouts*(hFile: Handle, lpCommTimeouts: Lpcommtimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetCommTimeouts".}
proc transmitCommChar*(hFile: Handle, cChar: Char): Winbool{.stdcall,
    dynlib: "kernel32", importc: "TransmitCommChar".}
proc waitCommEvent*(hFile: Handle, lpEvtMask: Lpdword,
                    lpOverlapped: Lpoverlapped): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WaitCommEvent".}
proc setTapePosition*(hDevice: Handle, dwPositionMethod: Dword,
                      dwPartition: Dword, dwOffsetLow: Dword,
                      dwOffsetHigh: Dword, bImmediate: Winbool): Dword{.stdcall,
    dynlib: "kernel32", importc: "SetTapePosition".}
proc getTapePosition*(hDevice: Handle, dwPositionType: Dword,
                      lpdwPartition: Lpdword, lpdwOffsetLow: Lpdword,
                      lpdwOffsetHigh: Lpdword): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetTapePosition".}
proc prepareTape*(hDevice: Handle, dwOperation: Dword, bImmediate: Winbool): Dword{.
    stdcall, dynlib: "kernel32", importc: "PrepareTape".}
proc eraseTape*(hDevice: Handle, dwEraseType: Dword, bImmediate: Winbool): Dword{.
    stdcall, dynlib: "kernel32", importc: "EraseTape".}
proc createTapePartition*(hDevice: Handle, dwPartitionMethod: Dword,
                          dwCount: Dword, dwSize: Dword): Dword{.stdcall,
    dynlib: "kernel32", importc: "CreateTapePartition".}
proc writeTapemark*(hDevice: Handle, dwTapemarkType: Dword,
                    dwTapemarkCount: Dword, bImmediate: Winbool): Dword{.
    stdcall, dynlib: "kernel32", importc: "WriteTapemark".}
proc getTapeStatus*(hDevice: Handle): Dword{.stdcall, dynlib: "kernel32",
    importc: "GetTapeStatus".}
proc getTapeParameters*(hDevice: Handle, dwOperation: Dword, lpdwSize: Lpdword,
                        lpTapeInformation: Lpvoid): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetTapeParameters".}
proc setTapeParameters*(hDevice: Handle, dwOperation: Dword,
                        lpTapeInformation: Lpvoid): Dword{.stdcall,
    dynlib: "kernel32", importc: "SetTapeParameters".}
proc beep*(dwFreq: Dword, dwDuration: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "Beep".}
proc mulDiv*(nNumber: Int32, nNumerator: Int32, nDenominator: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "MulDiv".}
proc getSystemTime*(lpSystemTime: Lpsystemtime){.stdcall, dynlib: "kernel32",
    importc: "GetSystemTime".}
proc getSystemTimeAsFileTime*(lpSystemTimeAsFileTime: Lpfiletime){.stdcall,
    dynlib: "kernel32", importc: "GetSystemTimeAsFileTime".}
proc setSystemTime*(lpSystemTime: Lpsystemtime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetSystemTime".}
proc getLocalTime*(lpSystemTime: Lpsystemtime){.stdcall, dynlib: "kernel32",
    importc: "GetLocalTime".}
proc setLocalTime*(lpSystemTime: Lpsystemtime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetLocalTime".}
proc getSystemInfo*(lpSystemInfo: LpsystemInfo){.stdcall, dynlib: "kernel32",
    importc: "GetSystemInfo".}
proc systemTimeToTzSpecificLocalTime*(lpTimeZoneInformation: LptimeZoneInformation,
                                      lpUniversalTime: Lpsystemtime,
                                      lpLocalTime: Lpsystemtime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SystemTimeToTzSpecificLocalTime".}
proc getTimeZoneInformation*(lpTimeZoneInformation: LptimeZoneInformation): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetTimeZoneInformation".}
proc setTimeZoneInformation*(lpTimeZoneInformation: LptimeZoneInformation): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetTimeZoneInformation".}
proc systemTimeToFileTime*(lpSystemTime: Lpsystemtime, lpFileTime: Lpfiletime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SystemTimeToFileTime".}
proc fileTimeToLocalFileTime*(FileTime: Lpfiletime,
                              lpLocalFileTime: Lpfiletime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FileTimeToLocalFileTime".}
proc localFileTimeToFileTime*(lpLocalFileTime: Lpfiletime,
                              lpFileTime: Lpfiletime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "LocalFileTimeToFileTime".}
proc fileTimeToSystemTime*(lpFileTime: Lpfiletime, lpSystemTime: Lpsystemtime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FileTimeToSystemTime".}
proc compareFileTime*(lpFileTime1: Lpfiletime, lpFileTime2: Lpfiletime): Long{.
    stdcall, dynlib: "kernel32", importc: "CompareFileTime".}
proc fileTimeToDosDateTime*(lpFileTime: Lpfiletime, lpFatDate: Lpword,
                            lpFatTime: Lpword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FileTimeToDosDateTime".}
proc dosDateTimeToFileTime*(wFatDate: Int16, wFatTime: Int16,
                            lpFileTime: Lpfiletime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "DosDateTimeToFileTime".}
proc getTickCount*(): Dword{.stdcall, dynlib: "kernel32",
                             importc: "GetTickCount".}
proc setSystemTimeAdjustment*(dwTimeAdjustment: Dword,
                              bTimeAdjustmentDisabled: Winbool): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetSystemTimeAdjustment".}
proc getSystemTimeAdjustment*(lpTimeAdjustment: Pdword, lpTimeIncrement: Pdword,
                              lpTimeAdjustmentDisabled: Pwinbool): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetSystemTimeAdjustment".}
proc createPipe*(hReadPipe: Phandle, hWritePipe: Phandle,
                 lpPipeAttributes: LpsecurityAttributes, nSize: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreatePipe".}
proc connectNamedPipe*(hNamedPipe: Handle, lpOverlapped: Lpoverlapped): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ConnectNamedPipe".}
proc disconnectNamedPipe*(hNamedPipe: Handle): Winbool{.stdcall,
    dynlib: "kernel32", importc: "DisconnectNamedPipe".}
proc setNamedPipeHandleState*(hNamedPipe: Handle, lpMode: Lpdword,
                              lpMaxCollectionCount: Lpdword,
                              lpCollectDataTimeout: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetNamedPipeHandleState".}
proc getNamedPipeInfo*(hNamedPipe: Handle, lpFlags: Lpdword,
                       lpOutBufferSize: Lpdword, lpInBufferSize: Lpdword,
                       lpMaxInstances: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetNamedPipeInfo".}
proc peekNamedPipe*(hNamedPipe: Handle, lpBuffer: Lpvoid, nBufferSize: Dword,
                    lpBytesRead: Lpdword, lpTotalBytesAvail: Lpdword,
                    lpBytesLeftThisMessage: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "PeekNamedPipe".}
proc transactNamedPipe*(hNamedPipe: Handle, lpInBuffer: Lpvoid,
                        nInBufferSize: Dword, lpOutBuffer: Lpvoid,
                        nOutBufferSize: Dword, lpBytesRead: Lpdword,
                        lpOverlapped: Lpoverlapped): Winbool{.stdcall,
    dynlib: "kernel32", importc: "TransactNamedPipe".}
proc getMailslotInfo*(hMailslot: Handle, lpMaxMessageSize: Lpdword,
                      lpNextSize: Lpdword, lpMessageCount: Lpdword,
                      lpReadTimeout: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetMailslotInfo".}
proc setMailslotInfo*(hMailslot: Handle, lReadTimeout: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetMailslotInfo".}
proc mapViewOfFile*(hFileMappingObject: Handle, dwDesiredAccess: Dword,
                    dwFileOffsetHigh: Dword, dwFileOffsetLow: Dword,
                    dwNumberOfBytesToMap: Dword): Lpvoid{.stdcall,
    dynlib: "kernel32", importc: "MapViewOfFile".}
proc flushViewOfFile*(lpBaseAddress: Lpcvoid, dwNumberOfBytesToFlush: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FlushViewOfFile".}
proc unmapViewOfFile*(lpBaseAddress: Lpvoid): Winbool{.stdcall,
    dynlib: "kernel32", importc: "UnmapViewOfFile".}
proc openFile*(lpFileName: Lpcstr, lpReOpenBuff: Lpofstruct, uStyle: Uint): Hfile{.
    stdcall, dynlib: "kernel32", importc: "OpenFile".}
proc lopen*(lpPathName: Lpcstr, iReadWrite: Int32): Hfile{.stdcall,
    dynlib: "kernel32", importc: "_lopen".}
proc lcreat*(lpPathName: Lpcstr, iAttribute: Int32): Hfile{.stdcall,
    dynlib: "kernel32", importc: "_lcreat".}
proc lread*(hFile: Hfile, lpBuffer: Lpvoid, uBytes: Uint): Uint{.stdcall,
    dynlib: "kernel32", importc: "_lread".}
proc lwrite*(hFile: Hfile, lpBuffer: Lpcstr, uBytes: Uint): Uint{.stdcall,
    dynlib: "kernel32", importc: "_lwrite".}
proc hread*(hFile: Hfile, lpBuffer: Lpvoid, lBytes: Int32): Int32{.stdcall,
    dynlib: "kernel32", importc: "_hread".}
proc hwrite*(hFile: Hfile, lpBuffer: Lpcstr, lBytes: Int32): Int32{.stdcall,
    dynlib: "kernel32", importc: "_hwrite".}
proc lclose*(file: Hfile): Hfile{.stdcall, dynlib: "kernel32",
                                   importc: "_lclose".}
proc llseek*(file: Hfile, lOffset: Long, iOrigin: Int32): Long{.stdcall,
    dynlib: "kernel32", importc: "_llseek".}
proc isTextUnicode*(lpBuffer: Lpvoid, cb: Int32, lpi: Lpint): Winbool{.stdcall,
    dynlib: "advapi32", importc: "IsTextUnicode".}
proc tlsAlloc*(): Dword{.stdcall, dynlib: "kernel32", importc: "TlsAlloc".}
proc tlsGetValue*(dwTlsIndex: Dword): Lpvoid{.stdcall, dynlib: "kernel32",
    importc: "TlsGetValue".}
proc tlsSetValue*(dwTlsIndex: Dword, lpTlsValue: Lpvoid): Winbool{.stdcall,
    dynlib: "kernel32", importc: "TlsSetValue".}
proc tlsFree*(dwTlsIndex: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "TlsFree".}
proc sleepEx*(dwMilliseconds: Dword, bAlertable: Winbool): Dword{.stdcall,
    dynlib: "kernel32", importc: "SleepEx".}
proc waitForSingleObjectEx*(hHandle: Handle, dwMilliseconds: Dword,
                            bAlertable: Winbool): Dword{.stdcall,
    dynlib: "kernel32", importc: "WaitForSingleObjectEx".}
proc waitForMultipleObjectsEx*(nCount: Dword, lpHandles: Lphandle,
                               bWaitAll: Winbool, dwMilliseconds: Dword,
                               bAlertable: Winbool): Dword{.stdcall,
    dynlib: "kernel32", importc: "WaitForMultipleObjectsEx".}
proc readFileEx*(hFile: Handle, lpBuffer: Lpvoid, nNumberOfBytesToRead: Dword,
                 lpOverlapped: Lpoverlapped,
                 lpCompletionRoutine: LpoverlappedCompletionRoutine): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadFileEx".}
proc writeFileEx*(hFile: Handle, lpBuffer: Lpcvoid,
                  nNumberOfBytesToWrite: Dword, lpOverlapped: Lpoverlapped,
                  lpCompletionRoutine: LpoverlappedCompletionRoutine): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteFileEx".}
proc backupRead*(hFile: Handle, lpBuffer: Lpbyte, nNumberOfBytesToRead: Dword,
                 lpNumberOfBytesRead: Lpdword, bAbort: Winbool,
                 bProcessSecurity: Winbool, lpContext: var Lpvoid): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BackupRead".}
proc backupSeek*(hFile: Handle, dwLowBytesToSeek: Dword,
                 dwHighBytesToSeek: Dword, lpdwLowByteSeeked: Lpdword,
                 lpdwHighByteSeeked: Lpdword, lpContext: var Lpvoid): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BackupSeek".}
proc backupWrite*(hFile: Handle, lpBuffer: Lpbyte, nNumberOfBytesToWrite: Dword,
                  lpNumberOfBytesWritten: Lpdword, bAbort: Winbool,
                  bProcessSecurity: Winbool, lpContext: var Lpvoid): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BackupWrite".}
proc setProcessShutdownParameters*(dwLevel: Dword, dwFlags: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetProcessShutdownParameters".}
proc getProcessShutdownParameters*(lpdwLevel: Lpdword, lpdwFlags: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetProcessShutdownParameters".}
proc setFileApisToOEM*(){.stdcall, dynlib: "kernel32",
                          importc: "SetFileApisToOEM".}
proc setFileApisToANSI*(){.stdcall, dynlib: "kernel32",
                           importc: "SetFileApisToANSI".}
proc areFileApisANSI*(): Winbool{.stdcall, dynlib: "kernel32",
                                  importc: "AreFileApisANSI".}
proc closeEventLog*(hEventLog: Handle): Winbool{.stdcall, dynlib: "advapi32",
    importc: "CloseEventLog".}
proc deregisterEventSource*(hEventLog: Handle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "DeregisterEventSource".}
proc notifyChangeEventLog*(hEventLog: Handle, hEvent: Handle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "NotifyChangeEventLog".}
proc getNumberOfEventLogRecords*(hEventLog: Handle, NumberOfRecords: Pdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetNumberOfEventLogRecords".}
proc getOldestEventLogRecord*(hEventLog: Handle, OldestRecord: Pdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetOldestEventLogRecord".}
proc duplicateToken*(ExistingTokenHandle: Handle,
                     ImpersonationLevel: SecurityImpersonationLevel,
                     DuplicateTokenHandle: Phandle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "DuplicateToken".}
proc getKernelObjectSecurity*(Handle: Handle,
                              RequestedInformation: SecurityInformation,
                              pSecurityDescriptor: PsecurityDescriptor,
                              nLength: Dword, lpnLengthNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetKernelObjectSecurity".}
proc impersonateNamedPipeClient*(hNamedPipe: Handle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ImpersonateNamedPipeClient".}
proc impersonateLoggedOnUser*(hToken: Handle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ImpersonateLoggedOnUser".}
proc impersonateSelf*(ImpersonationLevel: SecurityImpersonationLevel): Winbool{.
    stdcall, dynlib: "advapi32", importc: "ImpersonateSelf".}
proc revertToSelf*(): Winbool{.stdcall, dynlib: "advapi32",
                               importc: "RevertToSelf".}
proc setThreadToken*(Thread: Phandle, Token: Handle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "SetThreadToken".}
proc openProcessToken*(ProcessHandle: Handle, DesiredAccess: Dword,
                       TokenHandle: Phandle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "OpenProcessToken".}
proc openThreadToken*(ThreadHandle: Handle, DesiredAccess: Dword,
                      OpenAsSelf: Winbool, TokenHandle: Phandle): Winbool{.
    stdcall, dynlib: "advapi32", importc: "OpenThreadToken".}
proc getTokenInformation*(TokenHandle: Handle,
                          TokenInformationClass: TOKEN_INFORMATION_CLASS,
                          TokenInformation: Lpvoid,
                          TokenInformationLength: Dword, ReturnLength: Pdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetTokenInformation".}
proc setTokenInformation*(TokenHandle: Handle,
                          TokenInformationClass: TOKEN_INFORMATION_CLASS,
                          TokenInformation: Lpvoid,
                          TokenInformationLength: Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "SetTokenInformation".}
proc adjustTokenPrivileges*(TokenHandle: Handle, DisableAllPrivileges: Winbool,
                            NewState: PtokenPrivileges, BufferLength: Dword,
                            PreviousState: PtokenPrivileges,
                            ReturnLength: Pdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AdjustTokenPrivileges".}
proc adjustTokenGroups*(TokenHandle: Handle, ResetToDefault: Winbool,
                        NewState: Ptokengroups, BufferLength: Dword,
                        PreviousState: Ptokengroups, ReturnLength: Pdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "AdjustTokenGroups".}
proc privilegeCheck*(ClientToken: Handle, RequiredPrivileges: PprivilegeSet,
                     pfResult: Lpbool): Winbool{.stdcall, dynlib: "advapi32",
    importc: "PrivilegeCheck".}
proc isValidSid*(pSid: Psid): Winbool{.stdcall, dynlib: "advapi32",
                                       importc: "IsValidSid".}
proc equalSid*(pSid1: Psid, pSid2: Psid): Winbool{.stdcall, dynlib: "advapi32",
    importc: "EqualSid".}
proc equalPrefixSid*(pSid1: Psid, pSid2: Psid): Winbool{.stdcall,
    dynlib: "advapi32", importc: "EqualPrefixSid".}
proc getSidLengthRequired*(nSubAuthorityCount: Uchar): Dword{.stdcall,
    dynlib: "advapi32", importc: "GetSidLengthRequired".}
proc allocateAndInitializeSid*(pIdentifierAuthority: PsidIdentifierAuthority,
                               nSubAuthorityCount: Int8, nSubAuthority0: Dword,
                               nSubAuthority1: Dword, nSubAuthority2: Dword,
                               nSubAuthority3: Dword, nSubAuthority4: Dword,
                               nSubAuthority5: Dword, nSubAuthority6: Dword,
                               nSubAuthority7: Dword, pSid: var Psid): Winbool{.
    stdcall, dynlib: "advapi32", importc: "AllocateAndInitializeSid".}
proc freeSid*(pSid: Psid): Pvoid{.stdcall, dynlib: "advapi32",
                                  importc: "FreeSid".}
proc initializeSid*(Sid: Psid, pIdentifierAuthority: PsidIdentifierAuthority,
                    nSubAuthorityCount: Int8): Winbool{.stdcall,
    dynlib: "advapi32", importc: "InitializeSid".}
proc getSidIdentifierAuthority*(pSid: Psid): PsidIdentifierAuthority{.stdcall,
    dynlib: "advapi32", importc: "GetSidIdentifierAuthority".}
proc getSidSubAuthority*(pSid: Psid, nSubAuthority: Dword): Pdword{.stdcall,
    dynlib: "advapi32", importc: "GetSidSubAuthority".}
proc getSidSubAuthorityCount*(pSid: Psid): Puchar{.stdcall, dynlib: "advapi32",
    importc: "GetSidSubAuthorityCount".}
proc getLengthSid*(pSid: Psid): Dword{.stdcall, dynlib: "advapi32",
                                       importc: "GetLengthSid".}
proc copySid*(nDestinationSidLength: Dword, pDestinationSid: Psid,
              pSourceSid: Psid): Winbool{.stdcall, dynlib: "advapi32",
    importc: "CopySid".}
proc areAllAccessesGranted*(GrantedAccess: Dword, DesiredAccess: Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "AreAllAccessesGranted".}
proc areAnyAccessesGranted*(GrantedAccess: Dword, DesiredAccess: Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "AreAnyAccessesGranted".}
proc mapGenericMask*(AccessMask: Pdword, GenericMapping: PgenericMapping){.
    stdcall, dynlib: "advapi32", importc: "MapGenericMask".}
proc isValidAcl*(pAcl: Pacl): Winbool{.stdcall, dynlib: "advapi32",
                                       importc: "IsValidAcl".}
proc initializeAcl*(pAcl: Pacl, nAclLength: Dword, dwAclRevision: Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "InitializeAcl".}
proc getAclInformation*(pAcl: Pacl, pAclInformation: Lpvoid,
                        nAclInformationLength: Dword,
                        dwAclInformationClass: AclInformationClass): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetAclInformation".}
proc setAclInformation*(pAcl: Pacl, pAclInformation: Lpvoid,
                        nAclInformationLength: Dword,
                        dwAclInformationClass: AclInformationClass): Winbool{.
    stdcall, dynlib: "advapi32", importc: "SetAclInformation".}
proc addAce*(pAcl: Pacl, dwAceRevision: Dword, dwStartingAceIndex: Dword,
             pAceList: Lpvoid, nAceListLength: Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AddAce".}
proc deleteAce*(pAcl: Pacl, dwAceIndex: Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "DeleteAce".}
proc getAce*(pAcl: Pacl, dwAceIndex: Dword, pAce: var Lpvoid): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetAce".}
proc addAccessAllowedAce*(pAcl: Pacl, dwAceRevision: Dword, AccessMask: Dword,
                          pSid: Psid): Winbool{.stdcall, dynlib: "advapi32",
    importc: "AddAccessAllowedAce".}
proc addAccessDeniedAce*(pAcl: Pacl, dwAceRevision: Dword, AccessMask: Dword,
                         pSid: Psid): Winbool{.stdcall, dynlib: "advapi32",
    importc: "AddAccessDeniedAce".}
proc addAuditAccessAce*(pAcl: Pacl, dwAceRevision: Dword, dwAccessMask: Dword,
                        pSid: Psid, bAuditSuccess: Winbool,
                        bAuditFailure: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AddAuditAccessAce".}
proc findFirstFreeAce*(pAcl: Pacl, pAce: var Lpvoid): Winbool{.stdcall,
    dynlib: "advapi32", importc: "FindFirstFreeAce".}
proc initializeSecurityDescriptor*(pSecurityDescriptor: PsecurityDescriptor,
                                   dwRevision: Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "InitializeSecurityDescriptor".}
proc isValidSecurityDescriptor*(pSecurityDescriptor: PsecurityDescriptor): Winbool{.
    stdcall, dynlib: "advapi32", importc: "IsValidSecurityDescriptor".}
proc getSecurityDescriptorLength*(pSecurityDescriptor: PsecurityDescriptor): Dword{.
    stdcall, dynlib: "advapi32", importc: "GetSecurityDescriptorLength".}
proc getSecurityDescriptorControl*(pSecurityDescriptor: PsecurityDescriptor,
                                   pControl: PsecurityDescriptorControl,
                                   lpdwRevision: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetSecurityDescriptorControl".}
proc setSecurityDescriptorDacl*(pSecurityDescriptor: PsecurityDescriptor,
                                bDaclPresent: Winbool, pDacl: Pacl,
                                bDaclDefaulted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "SetSecurityDescriptorDacl".}
proc getSecurityDescriptorDacl*(pSecurityDescriptor: PsecurityDescriptor,
                                lpbDaclPresent: Lpbool, pDacl: var Pacl,
                                lpbDaclDefaulted: Lpbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetSecurityDescriptorDacl".}
proc setSecurityDescriptorSacl*(pSecurityDescriptor: PsecurityDescriptor,
                                bSaclPresent: Winbool, pSacl: Pacl,
                                bSaclDefaulted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "SetSecurityDescriptorSacl".}
proc getSecurityDescriptorSacl*(pSecurityDescriptor: PsecurityDescriptor,
                                lpbSaclPresent: Lpbool, pSacl: var Pacl,
                                lpbSaclDefaulted: Lpbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetSecurityDescriptorSacl".}
proc setSecurityDescriptorOwner*(pSecurityDescriptor: PsecurityDescriptor,
                                 pOwner: Psid, bOwnerDefaulted: Winbool): Winbool{.
    stdcall, dynlib: "advapi32", importc: "SetSecurityDescriptorOwner".}
proc getSecurityDescriptorOwner*(pSecurityDescriptor: PsecurityDescriptor,
                                 pOwner: var Psid, lpbOwnerDefaulted: Lpbool): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetSecurityDescriptorOwner".}
proc setSecurityDescriptorGroup*(pSecurityDescriptor: PsecurityDescriptor,
                                 pGroup: Psid, bGroupDefaulted: Winbool): Winbool{.
    stdcall, dynlib: "advapi32", importc: "SetSecurityDescriptorGroup".}
proc getSecurityDescriptorGroup*(pSecurityDescriptor: PsecurityDescriptor,
                                 pGroup: var Psid, lpbGroupDefaulted: Lpbool): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetSecurityDescriptorGroup".}
proc createPrivateObjectSecurity*(ParentDescriptor: PsecurityDescriptor,
                                  CreatorDescriptor: PsecurityDescriptor,
                                  NewDescriptor: var PsecurityDescriptor,
                                  IsDirectoryObject: Winbool, Token: Handle,
                                  GenericMapping: PgenericMapping): Winbool{.
    stdcall, dynlib: "advapi32", importc: "CreatePrivateObjectSecurity".}
proc setPrivateObjectSecurity*(SecurityInformation: SecurityInformation,
                               ModificationDescriptor: PsecurityDescriptor,
    ObjectsSecurityDescriptor: var PsecurityDescriptor,
                               GenericMapping: PgenericMapping, Token: Handle): Winbool{.
    stdcall, dynlib: "advapi32", importc: "SetPrivateObjectSecurity".}
proc getPrivateObjectSecurity*(ObjectDescriptor: PsecurityDescriptor,
                               SecurityInformation: SecurityInformation,
                               ResultantDescriptor: PsecurityDescriptor,
                               DescriptorLength: Dword, ReturnLength: Pdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "GetPrivateObjectSecurity".}
proc destroyPrivateObjectSecurity*(ObjectDescriptor: PsecurityDescriptor): Winbool{.
    stdcall, dynlib: "advapi32", importc: "DestroyPrivateObjectSecurity".}
proc makeSelfRelativeSD*(pAbsoluteSecurityDescriptor: PsecurityDescriptor,
                         pSelfRelativeSecurityDescriptor: PsecurityDescriptor,
                         lpdwBufferLength: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "MakeSelfRelativeSD".}
proc makeAbsoluteSD*(pSelfRelativeSecurityDescriptor: PsecurityDescriptor,
                     pAbsoluteSecurityDescriptor: PsecurityDescriptor,
                     lpdwAbsoluteSecurityDescriptorSize: Lpdword, pDacl: Pacl,
                     lpdwDaclSize: Lpdword, pSacl: Pacl, lpdwSaclSize: Lpdword,
                     pOwner: Psid, lpdwOwnerSize: Lpdword, pPrimaryGroup: Psid,
                     lpdwPrimaryGroupSize: Lpdword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "MakeAbsoluteSD".}
proc setKernelObjectSecurity*(Handle: Handle,
                              SecurityInformation: SecurityInformation,
                              SecurityDescriptor: PsecurityDescriptor): Winbool{.
    stdcall, dynlib: "advapi32", importc: "SetKernelObjectSecurity".}
proc findNextChangeNotification*(hChangeHandle: Handle): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FindNextChangeNotification".}
proc findCloseChangeNotification*(hChangeHandle: Handle): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FindCloseChangeNotification".}
proc virtualLock*(lpAddress: Lpvoid, dwSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "VirtualLock".}
proc virtualUnlock*(lpAddress: Lpvoid, dwSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "VirtualUnlock".}
proc mapViewOfFileEx*(hFileMappingObject: Handle, dwDesiredAccess: Dword,
                      dwFileOffsetHigh: Dword, dwFileOffsetLow: Dword,
                      dwNumberOfBytesToMap: Dword, lpBaseAddress: Lpvoid): Lpvoid{.
    stdcall, dynlib: "kernel32", importc: "MapViewOfFileEx".}
proc setPriorityClass*(hProcess: Handle, dwPriorityClass: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetPriorityClass".}
proc getPriorityClass*(hProcess: Handle): Dword{.stdcall, dynlib: "kernel32",
    importc: "GetPriorityClass".}
proc isBadReadPtr*(lp: Pointer, ucb: Uint): Winbool{.stdcall,
    dynlib: "kernel32", importc: "IsBadReadPtr".}
proc isBadWritePtr*(lp: Lpvoid, ucb: Uint): Winbool{.stdcall,
    dynlib: "kernel32", importc: "IsBadWritePtr".}
proc isBadHugeReadPtr*(lp: Pointer, ucb: Uint): Winbool{.stdcall,
    dynlib: "kernel32", importc: "IsBadHugeReadPtr".}
proc isBadHugeWritePtr*(lp: Lpvoid, ucb: Uint): Winbool{.stdcall,
    dynlib: "kernel32", importc: "IsBadHugeWritePtr".}
proc isBadCodePtr*(lpfn: Farproc): Winbool{.stdcall, dynlib: "kernel32",
    importc: "IsBadCodePtr".}
proc allocateLocallyUniqueId*(Luid: Pluid): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AllocateLocallyUniqueId".}
proc queryPerformanceCounter*(lpPerformanceCount: PlargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "QueryPerformanceCounter".}
proc queryPerformanceFrequency*(lpFrequency: PlargeInteger): Winbool{.stdcall,
    dynlib: "kernel32", importc: "QueryPerformanceFrequency".}
proc activateKeyboardLayout*(hkl: Hkl, Flags: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "ActivateKeyboardLayout".}
proc unloadKeyboardLayout*(hkl: Hkl): Winbool{.stdcall, dynlib: "user32",
    importc: "UnloadKeyboardLayout".}
proc getKeyboardLayoutList*(nBuff: Int32, lpList: var Hkl): Int32{.stdcall,
    dynlib: "user32", importc: "GetKeyboardLayoutList".}
proc getKeyboardLayout*(dwLayout: Dword): Hkl{.stdcall, dynlib: "user32",
    importc: "GetKeyboardLayout".}
proc openInputDesktop*(dwFlags: Dword, fInherit: Winbool, dwDesiredAccess: Dword): Hdesk{.
    stdcall, dynlib: "user32", importc: "OpenInputDesktop".}
proc enumDesktopWindows*(hDesktop: Hdesk, lpfn: Enumwindowsproc, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "EnumDesktopWindows".}
proc switchDesktop*(hDesktop: Hdesk): Winbool{.stdcall, dynlib: "user32",
    importc: "SwitchDesktop".}
proc setThreadDesktop*(hDesktop: Hdesk): Winbool{.stdcall, dynlib: "user32",
    importc: "SetThreadDesktop".}
proc closeDesktop*(hDesktop: Hdesk): Winbool{.stdcall, dynlib: "user32",
    importc: "CloseDesktop".}
proc getThreadDesktop*(dwThreadId: Dword): Hdesk{.stdcall, dynlib: "user32",
    importc: "GetThreadDesktop".}
proc closeWindowStation*(hWinSta: Hwinsta): Winbool{.stdcall, dynlib: "user32",
    importc: "CloseWindowStation".}
proc setProcessWindowStation*(hWinSta: Hwinsta): Winbool{.stdcall,
    dynlib: "user32", importc: "SetProcessWindowStation".}
proc getProcessWindowStation*(): Hwinsta{.stdcall, dynlib: "user32",
    importc: "GetProcessWindowStation".}
proc setUserObjectSecurity*(hObj: Handle, pSIRequested: PsecurityInformation,
                            pSID: PsecurityDescriptor): Winbool{.stdcall,
    dynlib: "user32", importc: "SetUserObjectSecurity".}
proc getUserObjectSecurity*(hObj: Handle, pSIRequested: PsecurityInformation,
                            pSID: PsecurityDescriptor, nLength: Dword,
                            lpnLengthNeeded: Lpdword): Winbool{.stdcall,
    dynlib: "user32", importc: "GetUserObjectSecurity".}
proc translateMessage*(lpMsg: Lpmsg): Winbool{.stdcall, dynlib: "user32",
    importc: "TranslateMessage".}
proc setMessageQueue*(cMessagesMax: Int32): Winbool{.stdcall, dynlib: "user32",
    importc: "SetMessageQueue".}
proc registerHotKey*(wnd: Hwnd, anID: Int32, fsModifiers: Uint, vk: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "RegisterHotKey".}
proc unregisterHotKey*(wnd: Hwnd, anID: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "UnregisterHotKey".}
proc exitWindowsEx*(uFlags: Uint, dwReserved: Dword): Winbool{.stdcall,
    dynlib: "user32", importc: "ExitWindowsEx".}
proc swapMouseButton*(fSwap: Winbool): Winbool{.stdcall, dynlib: "user32",
    importc: "SwapMouseButton".}
proc getMessagePos*(): Dword{.stdcall, dynlib: "user32",
                              importc: "GetMessagePos".}
proc getMessageTime*(): Long{.stdcall, dynlib: "user32",
                              importc: "GetMessageTime".}
proc getMessageExtraInfo*(): Long{.stdcall, dynlib: "user32",
                                   importc: "GetMessageExtraInfo".}
proc setMessageExtraInfo*(lp: Lparam): Lparam{.stdcall, dynlib: "user32",
    importc: "SetMessageExtraInfo".}
proc broadcastSystemMessage*(para1: Dword, para2: Lpdword, para3: Uint,
                             para4: Wparam, para5: Lparam): Int32{.stdcall,
    dynlib: "user32", importc: "BroadcastSystemMessage".}
proc attachThreadInput*(idAttach: Dword, idAttachTo: Dword, fAttach: Winbool): Winbool{.
    stdcall, dynlib: "user32", importc: "AttachThreadInput".}
proc replyMessage*(lResult: Lresult): Winbool{.stdcall, dynlib: "user32",
    importc: "ReplyMessage".}
proc waitMessage*(): Winbool{.stdcall, dynlib: "user32", importc: "WaitMessage".}
proc waitForInputIdle*(hProcess: Handle, dwMilliseconds: Dword): Dword{.stdcall,
    dynlib: "user32", importc: "WaitForInputIdle".}
proc postQuitMessage*(nExitCode: Int32){.stdcall, dynlib: "user32",
    importc: "PostQuitMessage".}
proc inSendMessage*(): Winbool{.stdcall, dynlib: "user32",
                                importc: "InSendMessage".}
proc getDoubleClickTime*(): Uint{.stdcall, dynlib: "user32",
                                  importc: "GetDoubleClickTime".}
proc setDoubleClickTime*(para1: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "SetDoubleClickTime".}
proc isWindow*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
                                     importc: "IsWindow".}
proc isMenu*(menu: Hmenu): Winbool{.stdcall, dynlib: "user32",
                                     importc: "IsMenu".}
proc isChild*(hWndParent: Hwnd, wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "IsChild".}
proc destroyWindow*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "DestroyWindow".}
proc showWindow*(wnd: Hwnd, nCmdShow: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "ShowWindow".}
proc showWindowAsync*(wnd: Hwnd, nCmdShow: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "ShowWindowAsync".}
proc flashWindow*(wnd: Hwnd, bInvert: Winbool): Winbool{.stdcall,
    dynlib: "user32", importc: "FlashWindow".}
proc showOwnedPopups*(wnd: Hwnd, fShow: Winbool): Winbool{.stdcall,
    dynlib: "user32", importc: "ShowOwnedPopups".}
proc openIcon*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
                                     importc: "OpenIcon".}
proc closeWindow*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
                                        importc: "CloseWindow".}
proc moveWindow*(wnd: Hwnd, X: Int32, Y: Int32, nWidth: Int32, nHeight: Int32,
                 bRepaint: Winbool): Winbool{.stdcall, dynlib: "user32",
    importc: "MoveWindow".}
proc setWindowPos*(wnd: Hwnd, hWndInsertAfter: Hwnd, X: Int32, Y: Int32,
                   cx: Int32, cy: Int32, uFlags: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "SetWindowPos".}
proc getWindowPlacement*(wnd: Hwnd, lpwndpl: var Windowplacement): Winbool{.
    stdcall, dynlib: "user32", importc: "GetWindowPlacement".}
proc setWindowPlacement*(wnd: Hwnd, lpwndpl: var Windowplacement): Winbool{.
    stdcall, dynlib: "user32", importc: "SetWindowPlacement".}
proc getWindowPlacement*(wnd: Hwnd, lpwndpl: Pwindowplacement): Winbool{.
    stdcall, dynlib: "user32", importc: "GetWindowPlacement".}
proc setWindowPlacement*(wnd: Hwnd, lpwndpl: Pwindowplacement): Winbool{.
    stdcall, dynlib: "user32", importc: "SetWindowPlacement".}
proc beginDeferWindowPos*(nNumWindows: Int32): Hdwp{.stdcall, dynlib: "user32",
    importc: "BeginDeferWindowPos".}
proc deferWindowPos*(hWinPosInfo: Hdwp, wnd: Hwnd, hWndInsertAfter: Hwnd,
                     x: Int32, y: Int32, cx: Int32, cy: Int32, uFlags: Uint): Hdwp{.
    stdcall, dynlib: "user32", importc: "DeferWindowPos".}
proc endDeferWindowPos*(hWinPosInfo: Hdwp): Winbool{.stdcall, dynlib: "user32",
    importc: "EndDeferWindowPos".}
proc isWindowVisible*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "IsWindowVisible".}
proc isIconic*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
                                     importc: "IsIconic".}
proc anyPopup*(): Winbool{.stdcall, dynlib: "user32", importc: "AnyPopup".}
proc bringWindowToTop*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "BringWindowToTop".}
proc isZoomed*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
                                     importc: "IsZoomed".}
proc endDialog*(hDlg: Hwnd, nResult: Int32): Winbool{.stdcall, dynlib: "user32",
    importc: "EndDialog".}
proc getDlgItem*(hDlg: Hwnd, nIDDlgItem: Int32): Hwnd{.stdcall,
    dynlib: "user32", importc: "GetDlgItem".}
proc setDlgItemInt*(hDlg: Hwnd, nIDDlgItem: Int32, uValue: Uint,
                    bSigned: Winbool): Winbool{.stdcall, dynlib: "user32",
    importc: "SetDlgItemInt".}
proc getDlgItemInt*(hDlg: Hwnd, nIDDlgItem: Int32, lpTranslated: var Winbool,
                    bSigned: Winbool): Uint{.stdcall, dynlib: "user32",
    importc: "GetDlgItemInt".}
proc checkDlgButton*(hDlg: Hwnd, nIDButton: Int32, uCheck: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "CheckDlgButton".}
proc checkRadioButton*(hDlg: Hwnd, nIDFirstButton: Int32, nIDLastButton: Int32,
                       nIDCheckButton: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "CheckRadioButton".}
proc isDlgButtonChecked*(hDlg: Hwnd, nIDButton: Int32): Uint{.stdcall,
    dynlib: "user32", importc: "IsDlgButtonChecked".}
proc getNextDlgGroupItem*(hDlg: Hwnd, hCtl: Hwnd, bPrevious: Winbool): Hwnd{.
    stdcall, dynlib: "user32", importc: "GetNextDlgGroupItem".}
proc getNextDlgTabItem*(hDlg: Hwnd, hCtl: Hwnd, bPrevious: Winbool): Hwnd{.
    stdcall, dynlib: "user32", importc: "GetNextDlgTabItem".}
proc getDlgCtrlID*(wnd: Hwnd): Int32{.stdcall, dynlib: "user32",
                                       importc: "GetDlgCtrlID".}
proc getDialogBaseUnits*(): Int32{.stdcall, dynlib: "user32",
                                   importc: "GetDialogBaseUnits".}
proc openClipboard*(hWndNewOwner: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "OpenClipboard".}
proc closeClipboard*(): Winbool{.stdcall, dynlib: "user32",
                                 importc: "CloseClipboard".}
proc getClipboardOwner*(): Hwnd{.stdcall, dynlib: "user32",
                                 importc: "GetClipboardOwner".}
proc setClipboardViewer*(hWndNewViewer: Hwnd): Hwnd{.stdcall, dynlib: "user32",
    importc: "SetClipboardViewer".}
proc getClipboardViewer*(): Hwnd{.stdcall, dynlib: "user32",
                                  importc: "GetClipboardViewer".}
proc changeClipboardChain*(hWndRemove: Hwnd, hWndNewNext: Hwnd): Winbool{.
    stdcall, dynlib: "user32", importc: "ChangeClipboardChain".}
proc setClipboardData*(uFormat: Uint, hMem: Handle): Handle{.stdcall,
    dynlib: "user32", importc: "SetClipboardData".}
proc getClipboardData*(uFormat: Uint): Handle{.stdcall, dynlib: "user32",
    importc: "GetClipboardData".}
proc countClipboardFormats*(): Int32{.stdcall, dynlib: "user32",
                                      importc: "CountClipboardFormats".}
proc enumClipboardFormats*(format: Uint): Uint{.stdcall, dynlib: "user32",
    importc: "EnumClipboardFormats".}
proc emptyClipboard*(): Winbool{.stdcall, dynlib: "user32",
                                 importc: "EmptyClipboard".}
proc isClipboardFormatAvailable*(format: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "IsClipboardFormatAvailable".}
proc getPriorityClipboardFormat*(paFormatPriorityList: var Uint, cFormats: Int32): Int32{.
    stdcall, dynlib: "user32", importc: "GetPriorityClipboardFormat".}
proc getOpenClipboardWindow*(): Hwnd{.stdcall, dynlib: "user32",
                                      importc: "GetOpenClipboardWindow".}
proc charNextExA*(CodePage: Int16, lpCurrentChar: Lpcstr, dwFlags: Dword): Lpstr{.
    stdcall, dynlib: "user32", importc: "CharNextExA".}
proc charPrevExA*(CodePage: Int16, lpStart: Lpcstr, lpCurrentChar: Lpcstr,
                  dwFlags: Dword): Lpstr{.stdcall, dynlib: "user32",
    importc: "CharPrevExA".}
proc setFocus*(wnd: Hwnd): Hwnd{.stdcall, dynlib: "user32", importc: "SetFocus".}
proc getActiveWindow*(): Hwnd{.stdcall, dynlib: "user32",
                               importc: "GetActiveWindow".}
proc getFocus*(): Hwnd{.stdcall, dynlib: "user32", importc: "GetFocus".}
proc getKBCodePage*(): Uint{.stdcall, dynlib: "user32", importc: "GetKBCodePage".}
proc getKeyState*(nVirtKey: Int32): Short{.stdcall, dynlib: "user32",
    importc: "GetKeyState".}
proc getAsyncKeyState*(vKey: Int32): Short{.stdcall, dynlib: "user32",
    importc: "GetAsyncKeyState".}
proc getKeyboardState*(lpKeyState: Pbyte): Winbool{.stdcall, dynlib: "user32",
    importc: "GetKeyboardState".}
proc setKeyboardState*(lpKeyState: Lpbyte): Winbool{.stdcall, dynlib: "user32",
    importc: "SetKeyboardState".}
proc getKeyboardType*(nTypeFlag: Int32): Int32{.stdcall, dynlib: "user32",
    importc: "GetKeyboardType".}
proc toAscii*(uVirtKey: Uint, uScanCode: Uint, lpKeyState: Pbyte,
              lpChar: Lpword, uFlags: Uint): Int32{.stdcall, dynlib: "user32",
    importc: "ToAscii".}
proc toAsciiEx*(uVirtKey: Uint, uScanCode: Uint, lpKeyState: Pbyte,
                lpChar: Lpword, uFlags: Uint, dwhkl: Hkl): Int32{.stdcall,
    dynlib: "user32", importc: "ToAsciiEx".}
proc toUnicode*(wVirtKey: Uint, wScanCode: Uint, lpKeyState: Pbyte,
                pwszBuff: Lpwstr, cchBuff: Int32, wFlags: Uint): Int32{.stdcall,
    dynlib: "user32", importc: "ToUnicode".}
proc oemKeyScan*(wOemChar: Int16): Dword{.stdcall, dynlib: "user32",
    importc: "OemKeyScan".}
proc keybdEvent*(bVk: Int8, bScan: Int8, dwFlags: Dword, dwExtraInfo: Dword){.
    stdcall, dynlib: "user32", importc: "keybd_event".}
proc mouseEvent*(dwFlags: Dword, dx: Dword, dy: Dword, cButtons: Dword,
                  dwExtraInfo: Dword){.stdcall, dynlib: "user32",
                                       importc: "mouse_event".}
proc getInputState*(): Winbool{.stdcall, dynlib: "user32",
                                importc: "GetInputState".}
proc getQueueStatus*(flags: Uint): Dword{.stdcall, dynlib: "user32",
    importc: "GetQueueStatus".}
proc getCapture*(): Hwnd{.stdcall, dynlib: "user32", importc: "GetCapture".}
proc setCapture*(wnd: Hwnd): Hwnd{.stdcall, dynlib: "user32",
                                    importc: "SetCapture".}
proc releaseCapture*(): Winbool{.stdcall, dynlib: "user32",
                                 importc: "ReleaseCapture".}
proc msgWaitForMultipleObjects*(nCount: Dword, pHandles: Lphandle,
                                fWaitAll: Winbool, dwMilliseconds: Dword,
                                dwWakeMask: Dword): Dword{.stdcall,
    dynlib: "user32", importc: "MsgWaitForMultipleObjects".}
proc setTimer*(wnd: Hwnd, nIDEvent: Uint, uElapse: Uint, lpTimerFunc: TIMERPROC): Uint{.
    stdcall, dynlib: "user32", importc: "SetTimer".}
proc killTimer*(wnd: Hwnd, uIDEvent: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "KillTimer".}
proc isWindowUnicode*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "IsWindowUnicode".}
proc enableWindow*(wnd: Hwnd, bEnable: Winbool): Winbool{.stdcall,
    dynlib: "user32", importc: "EnableWindow".}
proc isWindowEnabled*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "IsWindowEnabled".}
proc destroyAcceleratorTable*(hAccel: Haccel): Winbool{.stdcall,
    dynlib: "user32", importc: "DestroyAcceleratorTable".}
proc getSystemMetrics*(nIndex: Int32): Int32{.stdcall, dynlib: "user32",
    importc: "GetSystemMetrics".}
proc getMenu*(wnd: Hwnd): Hmenu{.stdcall, dynlib: "user32", importc: "GetMenu".}
proc setMenu*(wnd: Hwnd, menu: Hmenu): Winbool{.stdcall, dynlib: "user32",
    importc: "SetMenu".}
proc hiliteMenuItem*(wnd: Hwnd, menu: Hmenu, uIDHiliteItem: Uint,
                     uHilite: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "HiliteMenuItem".}
proc getMenuState*(menu: Hmenu, uId: Uint, uFlags: Uint): Uint{.stdcall,
    dynlib: "user32", importc: "GetMenuState".}
proc drawMenuBar*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
                                        importc: "DrawMenuBar".}
proc getSystemMenu*(wnd: Hwnd, bRevert: Winbool): Hmenu{.stdcall,
    dynlib: "user32", importc: "GetSystemMenu".}
proc createMenu*(): Hmenu{.stdcall, dynlib: "user32", importc: "CreateMenu".}
proc createPopupMenu*(): Hmenu{.stdcall, dynlib: "user32",
                                importc: "CreatePopupMenu".}
proc destroyMenu*(menu: Hmenu): Winbool{.stdcall, dynlib: "user32",
    importc: "DestroyMenu".}
proc checkMenuItem*(menu: Hmenu, uIDCheckItem: Uint, uCheck: Uint): Dword{.
    stdcall, dynlib: "user32", importc: "CheckMenuItem".}
proc enableMenuItem*(menu: Hmenu, uIDEnableItem: Uint, uEnable: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "EnableMenuItem".}
proc getSubMenu*(menu: Hmenu, nPos: Int32): Hmenu{.stdcall, dynlib: "user32",
    importc: "GetSubMenu".}
proc getMenuItemID*(menu: Hmenu, nPos: Int32): Uint{.stdcall, dynlib: "user32",
    importc: "GetMenuItemID".}
proc getMenuItemCount*(menu: Hmenu): Int32{.stdcall, dynlib: "user32",
    importc: "GetMenuItemCount".}
proc removeMenu*(menu: Hmenu, uPosition: Uint, uFlags: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "RemoveMenu".}
proc deleteMenu*(menu: Hmenu, uPosition: Uint, uFlags: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "DeleteMenu".}
proc setMenuItemBitmaps*(menu: Hmenu, uPosition: Uint, uFlags: Uint,
                         hBitmapUnchecked: Hbitmap, hBitmapChecked: Hbitmap): Winbool{.
    stdcall, dynlib: "user32", importc: "SetMenuItemBitmaps".}
proc getMenuCheckMarkDimensions*(): Long{.stdcall, dynlib: "user32",
    importc: "GetMenuCheckMarkDimensions".}
proc trackPopupMenu*(menu: Hmenu, uFlags: Uint, x: Int32, y: Int32,
                     nReserved: Int32, wnd: Hwnd, prcRect: var Rect): Winbool{.
    stdcall, dynlib: "user32", importc: "TrackPopupMenu".}
proc getMenuDefaultItem*(menu: Hmenu, fByPos: Uint, gmdiFlags: Uint): Uint{.
    stdcall, dynlib: "user32", importc: "GetMenuDefaultItem".}
proc setMenuDefaultItem*(menu: Hmenu, uItem: Uint, fByPos: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "SetMenuDefaultItem".}
proc getMenuItemRect*(wnd: Hwnd, menu: Hmenu, uItem: Uint, lprcItem: Lprect): Winbool{.
    stdcall, dynlib: "user32", importc: "GetMenuItemRect".}
proc menuItemFromPoint*(wnd: Hwnd, menu: Hmenu, ptScreen: Point): Int32{.
    stdcall, dynlib: "user32", importc: "MenuItemFromPoint".}
proc dragObject*(para1: Hwnd, para2: Hwnd, para3: Uint, para4: Dword,
                 para5: Hcursor): Dword{.stdcall, dynlib: "user32",
    importc: "DragObject".}
proc dragDetect*(wnd: Hwnd, pt: Point): Winbool{.stdcall, dynlib: "user32",
    importc: "DragDetect".}
proc drawIcon*(hDC: Hdc, X: Int32, Y: Int32, icon: Hicon): Winbool{.stdcall,
    dynlib: "user32", importc: "DrawIcon".}
proc updateWindow*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "UpdateWindow".}
proc setActiveWindow*(wnd: Hwnd): Hwnd{.stdcall, dynlib: "user32",
    importc: "SetActiveWindow".}
proc getForegroundWindow*(): Hwnd{.stdcall, dynlib: "user32",
                                   importc: "GetForegroundWindow".}
proc paintDesktop*(hdc: Hdc): Winbool{.stdcall, dynlib: "user32",
                                       importc: "PaintDesktop".}
proc setForegroundWindow*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "SetForegroundWindow".}
proc windowFromDC*(hDC: Hdc): Hwnd{.stdcall, dynlib: "user32",
                                    importc: "WindowFromDC".}
proc getDC*(wnd: Hwnd): Hdc{.stdcall, dynlib: "user32", importc: "GetDC".}
proc getDCEx*(wnd: Hwnd, hrgnClip: Hrgn, flags: Dword): Hdc{.stdcall,
    dynlib: "user32", importc: "GetDCEx".}
proc getWindowDC*(wnd: Hwnd): Hdc{.stdcall, dynlib: "user32",
                                    importc: "GetWindowDC".}
proc releaseDC*(wnd: Hwnd, hDC: Hdc): Int32{.stdcall, dynlib: "user32",
    importc: "ReleaseDC".}
proc beginPaint*(wnd: Hwnd, lpPaint: Lppaintstruct): Hdc{.stdcall,
    dynlib: "user32", importc: "BeginPaint".}
proc endPaint*(wnd: Hwnd, lpPaint: Lppaintstruct): Winbool{.stdcall,
    dynlib: "user32", importc: "EndPaint".}
proc getUpdateRect*(wnd: Hwnd, lpRect: Lprect, bErase: Winbool): Winbool{.
    stdcall, dynlib: "user32", importc: "GetUpdateRect".}
proc getUpdateRgn*(wnd: Hwnd, hRgn: Hrgn, bErase: Winbool): Int32{.stdcall,
    dynlib: "user32", importc: "GetUpdateRgn".}
proc setWindowRgn*(wnd: Hwnd, hRgn: Hrgn, bRedraw: Winbool): Int32{.stdcall,
    dynlib: "user32", importc: "SetWindowRgn".}
proc getWindowRgn*(wnd: Hwnd, hRgn: Hrgn): Int32{.stdcall, dynlib: "user32",
    importc: "GetWindowRgn".}
proc excludeUpdateRgn*(hDC: Hdc, wnd: Hwnd): Int32{.stdcall, dynlib: "user32",
    importc: "ExcludeUpdateRgn".}
proc invalidateRect*(wnd: Hwnd, lpRect: var Rect, bErase: Winbool): Winbool{.
    stdcall, dynlib: "user32", importc: "InvalidateRect".}
proc invalidateRect*(wnd: Hwnd, lpRect: Lprect, bErase: Winbool): Winbool{.
    stdcall, dynlib: "user32", importc: "InvalidateRect".}
proc validateRect*(wnd: Hwnd, lpRect: var Rect): Winbool{.stdcall,
    dynlib: "user32", importc: "ValidateRect".}
proc validateRect*(wnd: Hwnd, lpRect: Lprect): Winbool{.stdcall,
    dynlib: "user32", importc: "ValidateRect".}
proc invalidateRgn*(wnd: Hwnd, hRgn: Hrgn, bErase: Winbool): Winbool{.stdcall,
    dynlib: "user32", importc: "InvalidateRgn".}
proc validateRgn*(wnd: Hwnd, hRgn: Hrgn): Winbool{.stdcall, dynlib: "user32",
    importc: "ValidateRgn".}
proc redrawWindow*(wnd: Hwnd, lprcUpdate: var Rect, hrgnUpdate: Hrgn,
                   flags: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "RedrawWindow".}
proc redrawWindow*(wnd: Hwnd, lprcUpdate: Lprect, hrgnUpdate: Hrgn, flags: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "RedrawWindow".}
proc lockWindowUpdate*(hWndLock: Hwnd): Winbool{.stdcall, dynlib: "user32",
    importc: "LockWindowUpdate".}
proc scrollWindow*(wnd: Hwnd, XAmount: Int32, YAmount: Int32, lpRect: var Rect,
                   lpClipRect: var Rect): Winbool{.stdcall, dynlib: "user32",
    importc: "ScrollWindow".}
proc scrollDC*(hDC: Hdc, dx: Int32, dy: Int32, lprcScroll: var Rect,
               lprcClip: var Rect, hrgnUpdate: Hrgn, lprcUpdate: Lprect): Winbool{.
    stdcall, dynlib: "user32", importc: "ScrollDC".}
proc scrollWindowEx*(wnd: Hwnd, dx: Int32, dy: Int32, prcScroll: var Rect,
                     prcClip: var Rect, hrgnUpdate: Hrgn, prcUpdate: Lprect,
                     flags: Uint): Int32{.stdcall, dynlib: "user32",
    importc: "ScrollWindowEx".}
proc setScrollPos*(wnd: Hwnd, nBar: Int32, nPos: Int32, bRedraw: Winbool): Int32{.
    stdcall, dynlib: "user32", importc: "SetScrollPos".}
proc getScrollPos*(wnd: Hwnd, nBar: Int32): Int32{.stdcall, dynlib: "user32",
    importc: "GetScrollPos".}
proc setScrollRange*(wnd: Hwnd, nBar: Int32, nMinPos: Int32, nMaxPos: Int32,
                     bRedraw: Winbool): Winbool{.stdcall, dynlib: "user32",
    importc: "SetScrollRange".}
proc getScrollRange*(wnd: Hwnd, nBar: Int32, lpMinPos: Lpint, lpMaxPos: Lpint): Winbool{.
    stdcall, dynlib: "user32", importc: "GetScrollRange".}
proc showScrollBar*(wnd: Hwnd, wBar: Int32, bShow: Winbool): Winbool{.stdcall,
    dynlib: "user32", importc: "ShowScrollBar".}
proc enableScrollBar*(wnd: Hwnd, wSBflags: Uint, wArrows: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "EnableScrollBar".}
proc getClientRect*(wnd: Hwnd, lpRect: Lprect): Winbool{.stdcall,
    dynlib: "user32", importc: "GetClientRect".}
proc getWindowRect*(wnd: Hwnd, lpRect: Lprect): Winbool{.stdcall,
    dynlib: "user32", importc: "GetWindowRect".}
proc adjustWindowRect*(lpRect: Lprect, dwStyle: Dword, bMenu: Winbool): Winbool{.
    stdcall, dynlib: "user32", importc: "AdjustWindowRect".}
proc adjustWindowRectEx*(lpRect: Lprect, dwStyle: Dword, bMenu: Winbool,
                         dwExStyle: Dword): Winbool{.stdcall, dynlib: "user32",
    importc: "AdjustWindowRectEx".}
proc setWindowContextHelpId*(para1: Hwnd, para2: Dword): Winbool{.stdcall,
    dynlib: "user32", importc: "SetWindowContextHelpId".}
proc getWindowContextHelpId*(para1: Hwnd): Dword{.stdcall, dynlib: "user32",
    importc: "GetWindowContextHelpId".}
proc setMenuContextHelpId*(para1: Hmenu, para2: Dword): Winbool{.stdcall,
    dynlib: "user32", importc: "SetMenuContextHelpId".}
proc getMenuContextHelpId*(para1: Hmenu): Dword{.stdcall, dynlib: "user32",
    importc: "GetMenuContextHelpId".}
proc messageBeep*(uType: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "MessageBeep".}
proc showCursor*(bShow: Winbool): Int32{.stdcall, dynlib: "user32",
    importc: "ShowCursor".}
proc setCursorPos*(X: Int32, Y: Int32): Winbool{.stdcall, dynlib: "user32",
    importc: "SetCursorPos".}
proc setCursor*(cursor: Hcursor): Hcursor{.stdcall, dynlib: "user32",
    importc: "SetCursor".}
proc getCursorPos*(lpPoint: Lppoint): Winbool{.stdcall, dynlib: "user32",
    importc: "GetCursorPos".}
proc clipCursor*(lpRect: Lprect): Winbool{.stdcall, dynlib: "user32",
    importc: "ClipCursor".}
proc getClipCursor*(lpRect: Lprect): Winbool{.stdcall, dynlib: "user32",
    importc: "GetClipCursor".}
proc getCursor*(): Hcursor{.stdcall, dynlib: "user32", importc: "GetCursor".}
proc createCaret*(wnd: Hwnd, hBitmap: Hbitmap, nWidth: Int32, nHeight: Int32): Winbool{.
    stdcall, dynlib: "user32", importc: "CreateCaret".}
proc getCaretBlinkTime*(): Uint{.stdcall, dynlib: "user32",
                                 importc: "GetCaretBlinkTime".}
proc setCaretBlinkTime*(uMSeconds: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "SetCaretBlinkTime".}
proc destroyCaret*(): Winbool{.stdcall, dynlib: "user32",
                               importc: "DestroyCaret".}
proc hideCaret*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
                                      importc: "HideCaret".}
proc showCaret*(wnd: Hwnd): Winbool{.stdcall, dynlib: "user32",
                                      importc: "ShowCaret".}
proc setCaretPos*(X: Int32, Y: Int32): Winbool{.stdcall, dynlib: "user32",
    importc: "SetCaretPos".}
proc getCaretPos*(lpPoint: Lppoint): Winbool{.stdcall, dynlib: "user32",
    importc: "GetCaretPos".}
proc clientToScreen*(wnd: Hwnd, lpPoint: Lppoint): Winbool{.stdcall,
    dynlib: "user32", importc: "ClientToScreen".}
proc screenToClient*(wnd: Hwnd, lpPoint: Lppoint): Winbool{.stdcall,
    dynlib: "user32", importc: "ScreenToClient".}
proc mapWindowPoints*(hWndFrom: Hwnd, hWndTo: Hwnd, lpPoints: Lppoint,
                      cPoints: Uint): Int32{.stdcall, dynlib: "user32",
    importc: "MapWindowPoints".}
proc windowFromPoint*(Point: Point): Hwnd{.stdcall, dynlib: "user32",
    importc: "WindowFromPoint".}
proc childWindowFromPoint*(hWndParent: Hwnd, Point: Point): Hwnd{.stdcall,
    dynlib: "user32", importc: "ChildWindowFromPoint".}
proc getSysColor*(nIndex: Int32): Dword{.stdcall, dynlib: "user32",
    importc: "GetSysColor".}
proc getSysColorBrush*(nIndex: Int32): Hbrush{.stdcall, dynlib: "user32",
    importc: "GetSysColorBrush".}
proc setSysColors*(cElements: Int32, lpaElements: var Wint,
                   lpaRgbValues: var Colorref): Winbool{.stdcall,
    dynlib: "user32", importc: "SetSysColors".}
proc drawFocusRect*(hDC: Hdc, lprc: var Rect): Winbool{.stdcall,
    dynlib: "user32", importc: "DrawFocusRect".}
proc fillRect*(hDC: Hdc, lprc: Rect, hbr: Hbrush): Int32{.stdcall,
    dynlib: "user32", importc: "FillRect".}
proc frameRect*(hDC: Hdc, lprc: var Rect, hbr: Hbrush): Int32{.stdcall,
    dynlib: "user32", importc: "FrameRect".}
proc invertRect*(hDC: Hdc, lprc: var Rect): Winbool{.stdcall, dynlib: "user32",
    importc: "InvertRect".}
proc setRect*(lprc: Lprect, xLeft: Int32, yTop: Int32, xRight: Int32,
              yBottom: Int32): Winbool{.stdcall, dynlib: "user32",
                                        importc: "SetRect".}
proc setRectEmpty*(lprc: Lprect): Winbool{.stdcall, dynlib: "user32",
    importc: "SetRectEmpty".}
proc copyRect*(lprcDst: Lprect, lprcSrc: var Rect): Winbool{.stdcall,
    dynlib: "user32", importc: "CopyRect".}
proc inflateRect*(lprc: Lprect, dx: Int32, dy: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "InflateRect".}
proc intersectRect*(lprcDst: Lprect, lprcSrc1: var Rect, lprcSrc2: var Rect): Winbool{.
    stdcall, dynlib: "user32", importc: "IntersectRect".}
proc unionRect*(lprcDst: Lprect, lprcSrc1: var Rect, lprcSrc2: var Rect): Winbool{.
    stdcall, dynlib: "user32", importc: "UnionRect".}
proc subtractRect*(lprcDst: Lprect, lprcSrc1: var Rect, lprcSrc2: var Rect): Winbool{.
    stdcall, dynlib: "user32", importc: "SubtractRect".}
proc offsetRect*(lprc: Lprect, dx: Int32, dy: Int32): Winbool{.stdcall,
    dynlib: "user32", importc: "OffsetRect".}
proc isRectEmpty*(lprc: var Rect): Winbool{.stdcall, dynlib: "user32",
    importc: "IsRectEmpty".}
proc equalRect*(lprc1: var Rect, lprc2: var Rect): Winbool{.stdcall,
    dynlib: "user32", importc: "EqualRect".}
proc ptInRect*(lprc: var Rect, pt: Point): Winbool{.stdcall, dynlib: "user32",
    importc: "PtInRect".}
proc ptInRect*(lprc: Lprect, pt: Point): Winbool{.stdcall, dynlib: "user32",
    importc: "PtInRect".}
proc getWindowWord*(wnd: Hwnd, nIndex: Int32): Int16{.stdcall,
    dynlib: "user32", importc: "GetWindowWord".}
proc setWindowWord*(wnd: Hwnd, nIndex: Int32, wNewWord: Int16): Int16{.stdcall,
    dynlib: "user32", importc: "SetWindowWord".}
proc getClassWord*(wnd: Hwnd, nIndex: Int32): Int16{.stdcall, dynlib: "user32",
    importc: "GetClassWord".}
proc setClassWord*(wnd: Hwnd, nIndex: Int32, wNewWord: Int16): Int16{.stdcall,
    dynlib: "user32", importc: "SetClassWord".}
proc getDesktopWindow*(): Hwnd{.stdcall, dynlib: "user32",
                                importc: "GetDesktopWindow".}
proc getParent*(wnd: Hwnd): Hwnd{.stdcall, dynlib: "user32",
                                   importc: "GetParent".}
proc setParent*(hWndChild: Hwnd, hWndNewParent: Hwnd): Hwnd{.stdcall,
    dynlib: "user32", importc: "SetParent".}
proc enumChildWindows*(hWndParent: Hwnd, lpEnumFunc: Enumwindowsproc,
                       lp: Lparam): Winbool{.stdcall, dynlib: "user32",
    importc: "EnumChildWindows".}
proc enumWindows*(lpEnumFunc: Enumwindowsproc, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "EnumWindows".}
proc enumThreadWindows*(dwThreadId: Dword, lpfn: Enumwindowsproc, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "EnumThreadWindows".}
proc enumTaskWindows*(hTask: Hwnd, lpfn: Farproc, lp: Lparam): Winbool{.
    stdcall, dynlib: "user32", importc: "EnumThreadWindows".}
proc getTopWindow*(wnd: Hwnd): Hwnd{.stdcall, dynlib: "user32",
                                      importc: "GetTopWindow".}
proc getWindowThreadProcessId*(wnd: Hwnd, lpdwProcessId: Lpdword): Dword{.
    stdcall, dynlib: "user32", importc: "GetWindowThreadProcessId".}
proc getLastActivePopup*(wnd: Hwnd): Hwnd{.stdcall, dynlib: "user32",
    importc: "GetLastActivePopup".}
proc getWindow*(wnd: Hwnd, uCmd: Uint): Hwnd{.stdcall, dynlib: "user32",
    importc: "GetWindow".}
proc unhookWindowsHook*(nCode: Int32, pfnFilterProc: Hookproc): Winbool{.
    stdcall, dynlib: "user32", importc: "UnhookWindowsHook".}
proc unhookWindowsHookEx*(hhk: Hhook): Winbool{.stdcall, dynlib: "user32",
    importc: "UnhookWindowsHookEx".}
proc callNextHookEx*(hhk: Hhook, nCode: Int32, wp: Wparam, lp: Lparam): Lresult{.
    stdcall, dynlib: "user32", importc: "CallNextHookEx".}
proc checkMenuRadioItem*(para1: Hmenu, para2: Uint, para3: Uint, para4: Uint,
                         para5: Uint): Winbool{.stdcall, dynlib: "user32",
    importc: "CheckMenuRadioItem".}
proc createCursor*(hInst: Hinst, xHotSpot: Int32, yHotSpot: Int32,
                   nWidth: Int32, nHeight: Int32, pvANDPlane: Pointer,
                   pvXORPlane: Pointer): Hcursor{.stdcall, dynlib: "user32",
    importc: "CreateCursor".}
proc destroyCursor*(cursor: Hcursor): Winbool{.stdcall, dynlib: "user32",
    importc: "DestroyCursor".}
proc setSystemCursor*(hcur: Hcursor, anID: Dword): Winbool{.stdcall,
    dynlib: "user32", importc: "SetSystemCursor".}
proc createIcon*(hInstance: Hinst, nWidth: Int32, nHeight: Int32, cPlanes: Int8,
                 cBitsPixel: Int8, lpbANDbits: var Int8, lpbXORbits: var Int8): Hicon{.
    stdcall, dynlib: "user32", importc: "CreateIcon".}
proc destroyIcon*(icon: Hicon): Winbool{.stdcall, dynlib: "user32",
    importc: "DestroyIcon".}
proc lookupIconIdFromDirectory*(presbits: Pbyte, fIcon: Winbool): Int32{.
    stdcall, dynlib: "user32", importc: "LookupIconIdFromDirectory".}
proc lookupIconIdFromDirectoryEx*(presbits: Pbyte, fIcon: Winbool,
                                  cxDesired: Int32, cyDesired: Int32,
                                  Flags: Uint): Int32{.stdcall,
    dynlib: "user32", importc: "LookupIconIdFromDirectoryEx".}
proc createIconFromResource*(presbits: Pbyte, dwResSize: Dword, fIcon: Winbool,
                             dwVer: Dword): Hicon{.stdcall, dynlib: "user32",
    importc: "CreateIconFromResource".}
proc createIconFromResourceEx*(presbits: Pbyte, dwResSize: Dword,
                               fIcon: Winbool, dwVer: Dword, cxDesired: Int32,
                               cyDesired: Int32, Flags: Uint): Hicon{.stdcall,
    dynlib: "user32", importc: "CreateIconFromResourceEx".}
proc copyImage*(para1: Handle, para2: Uint, para3: Int32, para4: Int32,
                para5: Uint): Hicon{.stdcall, dynlib: "user32",
                                     importc: "CopyImage".}
proc createIconIndirect*(piconinfo: Piconinfo): Hicon{.stdcall,
    dynlib: "user32", importc: "CreateIconIndirect".}
proc copyIcon*(icon: Hicon): Hicon{.stdcall, dynlib: "user32",
                                     importc: "CopyIcon".}
proc getIconInfo*(icon: Hicon, piconinfo: Piconinfo): Winbool{.stdcall,
    dynlib: "user32", importc: "GetIconInfo".}
proc mapDialogRect*(hDlg: Hwnd, lpRect: Lprect): Winbool{.stdcall,
    dynlib: "user32", importc: "MapDialogRect".}
proc setScrollInfo*(para1: Hwnd, para2: Int32, para3: Lpcscrollinfo,
                    para4: Winbool): Int32{.stdcall, dynlib: "user32",
    importc: "SetScrollInfo".}
proc getScrollInfo*(para1: Hwnd, para2: Int32, para3: Lpscrollinfo): Winbool{.
    stdcall, dynlib: "user32", importc: "GetScrollInfo".}
proc translateMDISysAccel*(hWndClient: Hwnd, lpMsg: Lpmsg): Winbool{.stdcall,
    dynlib: "user32", importc: "TranslateMDISysAccel".}
proc arrangeIconicWindows*(wnd: Hwnd): Uint{.stdcall, dynlib: "user32",
    importc: "ArrangeIconicWindows".}
proc tileWindows*(hwndParent: Hwnd, wHow: Uint, lpRect: var Rect, cKids: Uint,
                  lpKids: var Hwnd): Int16{.stdcall, dynlib: "user32",
    importc: "TileWindows".}
proc cascadeWindows*(hwndParent: Hwnd, wHow: Uint, lpRect: var Rect,
                     cKids: Uint, lpKids: var Hwnd): Int16{.stdcall,
    dynlib: "user32", importc: "CascadeWindows".}
proc setLastErrorEx*(dwErrCode: Dword, dwType: Dword){.stdcall,
    dynlib: "user32", importc: "SetLastErrorEx".}
proc setDebugErrorLevel*(dwLevel: Dword){.stdcall, dynlib: "user32",
    importc: "SetDebugErrorLevel".}
proc drawEdge*(hdc: Hdc, qrc: Lprect, edge: Uint, grfFlags: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "DrawEdge".}
proc drawFrameControl*(para1: Hdc, para2: Lprect, para3: Uint, para4: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "DrawFrameControl".}
proc drawCaption*(para1: Hwnd, para2: Hdc, para3: var Rect, para4: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "DrawCaption".}
proc drawAnimatedRects*(wnd: Hwnd, idAni: Int32, lprcFrom: var Rect,
                        lprcTo: var Rect): Winbool{.stdcall, dynlib: "user32",
    importc: "DrawAnimatedRects".}
proc trackPopupMenuEx*(para1: Hmenu, para2: Uint, para3: Int32, para4: Int32,
                       para5: Hwnd, para6: Lptpmparams): Winbool{.stdcall,
    dynlib: "user32", importc: "TrackPopupMenuEx".}
proc childWindowFromPointEx*(para1: Hwnd, para2: Point, para3: Uint): Hwnd{.
    stdcall, dynlib: "user32", importc: "ChildWindowFromPointEx".}
proc drawIconEx*(hdc: Hdc, xLeft: Int32, yTop: Int32, icon: Hicon,
                 cxWidth: Int32, cyWidth: Int32, istepIfAniCur: Uint,
                 hbrFlickerFreeDraw: Hbrush, diFlags: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "DrawIconEx".}
proc animatePalette*(para1: Hpalette, para2: Uint, para3: Uint,
                     para4: var Paletteentry): Winbool{.stdcall,
    dynlib: "gdi32", importc: "AnimatePalette".}
proc arc*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32, para5: Int32,
          para6: Int32, para7: Int32, para8: Int32, para9: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "Arc".}
proc bitBlt*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32, para5: Int32,
             para6: Hdc, para7: Int32, para8: Int32, para9: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "BitBlt".}
proc cancelDC*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                     importc: "CancelDC".}
proc chord*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32, para5: Int32,
            para6: Int32, para7: Int32, para8: Int32, para9: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "Chord".}
proc closeMetaFile*(para1: Hdc): Hmetafile{.stdcall, dynlib: "gdi32",
    importc: "CloseMetaFile".}
proc combineRgn*(para1: Hrgn, para2: Hrgn, para3: Hrgn, para4: Int32): Int32{.
    stdcall, dynlib: "gdi32", importc: "CombineRgn".}
proc createBitmap*(para1: Int32, para2: Int32, para3: Uint, para4: Uint,
                   para5: Pointer): Hbitmap{.stdcall, dynlib: "gdi32",
    importc: "CreateBitmap".}
proc createBitmapIndirect*(para1: var Bitmap): Hbitmap{.stdcall,
    dynlib: "gdi32", importc: "CreateBitmapIndirect".}
proc createBrushIndirect*(para1: var Logbrush): Hbrush{.stdcall,
    dynlib: "gdi32", importc: "CreateBrushIndirect".}
proc createCompatibleBitmap*(para1: Hdc, para2: Int32, para3: Int32): Hbitmap{.
    stdcall, dynlib: "gdi32", importc: "CreateCompatibleBitmap".}
proc createDiscardableBitmap*(para1: Hdc, para2: Int32, para3: Int32): Hbitmap{.
    stdcall, dynlib: "gdi32", importc: "CreateDiscardableBitmap".}
proc createCompatibleDC*(para1: Hdc): Hdc{.stdcall, dynlib: "gdi32",
    importc: "CreateCompatibleDC".}
proc createDIBitmap*(para1: Hdc, para2: var Bitmapinfoheader, para3: Dword,
                     para4: Pointer, para5: var Bitmapinfo, para6: Uint): Hbitmap{.
    stdcall, dynlib: "gdi32", importc: "CreateDIBitmap".}
proc createDIBPatternBrush*(para1: Hglobal, para2: Uint): Hbrush{.stdcall,
    dynlib: "gdi32", importc: "CreateDIBPatternBrush".}
proc createDIBPatternBrushPt*(para1: Pointer, para2: Uint): Hbrush{.stdcall,
    dynlib: "gdi32", importc: "CreateDIBPatternBrushPt".}
proc createEllipticRgn*(para1: Int32, para2: Int32, para3: Int32, para4: Int32): Hrgn{.
    stdcall, dynlib: "gdi32", importc: "CreateEllipticRgn".}
proc createEllipticRgnIndirect*(para1: var Rect): Hrgn{.stdcall,
    dynlib: "gdi32", importc: "CreateEllipticRgnIndirect".}
proc createHatchBrush*(para1: Int32, para2: Colorref): Hbrush{.stdcall,
    dynlib: "gdi32", importc: "CreateHatchBrush".}
proc createPalette*(para1: var Logpalette): Hpalette{.stdcall, dynlib: "gdi32",
    importc: "CreatePalette".}
proc createPen*(para1: Int32, para2: Int32, para3: Colorref): Hpen{.stdcall,
    dynlib: "gdi32", importc: "CreatePen".}
proc createPenIndirect*(para1: var Logpen): Hpen{.stdcall, dynlib: "gdi32",
    importc: "CreatePenIndirect".}
proc createPolyPolygonRgn*(para1: var Point, para2: var Wint, para3: Int32,
                           para4: Int32): Hrgn{.stdcall, dynlib: "gdi32",
    importc: "CreatePolyPolygonRgn".}
proc createPatternBrush*(para1: Hbitmap): Hbrush{.stdcall, dynlib: "gdi32",
    importc: "CreatePatternBrush".}
proc createRectRgn*(para1: Int32, para2: Int32, para3: Int32, para4: Int32): Hrgn{.
    stdcall, dynlib: "gdi32", importc: "CreateRectRgn".}
proc createRectRgnIndirect*(para1: var Rect): Hrgn{.stdcall, dynlib: "gdi32",
    importc: "CreateRectRgnIndirect".}
proc createRoundRectRgn*(para1: Int32, para2: Int32, para3: Int32, para4: Int32,
                         para5: Int32, para6: Int32): Hrgn{.stdcall,
    dynlib: "gdi32", importc: "CreateRoundRectRgn".}
proc createSolidBrush*(para1: Colorref): Hbrush{.stdcall, dynlib: "gdi32",
    importc: "CreateSolidBrush".}
proc deleteDC*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                     importc: "DeleteDC".}
proc deleteMetaFile*(para1: Hmetafile): Winbool{.stdcall, dynlib: "gdi32",
    importc: "DeleteMetaFile".}
proc deleteObject*(para1: Hgdiobj): Winbool{.stdcall, dynlib: "gdi32",
    importc: "DeleteObject".}
proc drawEscape*(para1: Hdc, para2: Int32, para3: Int32, para4: Lpcstr): Int32{.
    stdcall, dynlib: "gdi32", importc: "DrawEscape".}
proc ellipse*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32, para5: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "Ellipse".}
proc enumObjects*(para1: Hdc, para2: Int32, para3: Enumobjectsproc,
                  para4: Lparam): Int32{.stdcall, dynlib: "gdi32",
    importc: "EnumObjects".}
proc equalRgn*(para1: Hrgn, para2: Hrgn): Winbool{.stdcall, dynlib: "gdi32",
    importc: "EqualRgn".}
proc escape*(para1: Hdc, para2: Int32, para3: Int32, para4: Lpcstr,
             para5: Lpvoid): Int32{.stdcall, dynlib: "gdi32", importc: "Escape".}
proc extEscape*(para1: Hdc, para2: Int32, para3: Int32, para4: Lpcstr,
                para5: Int32, para6: Lpstr): Int32{.stdcall, dynlib: "gdi32",
    importc: "ExtEscape".}
proc excludeClipRect*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
                      para5: Int32): Int32{.stdcall, dynlib: "gdi32",
    importc: "ExcludeClipRect".}
proc extCreateRegion*(para1: var Xform, para2: Dword, para3: var Rgndata): Hrgn{.
    stdcall, dynlib: "gdi32", importc: "ExtCreateRegion".}
proc extFloodFill*(para1: Hdc, para2: Int32, para3: Int32, para4: Colorref,
                   para5: Uint): Winbool{.stdcall, dynlib: "gdi32",
    importc: "ExtFloodFill".}
proc fillRgn*(para1: Hdc, para2: Hrgn, para3: Hbrush): Winbool{.stdcall,
    dynlib: "gdi32", importc: "FillRgn".}
proc floodFill*(para1: Hdc, para2: Int32, para3: Int32, para4: Colorref): Winbool{.
    stdcall, dynlib: "gdi32", importc: "FloodFill".}
proc frameRgn*(para1: Hdc, para2: Hrgn, para3: Hbrush, para4: Int32,
               para5: Int32): Winbool{.stdcall, dynlib: "gdi32",
                                       importc: "FrameRgn".}
proc getROP2*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32", importc: "GetROP2".}
proc getAspectRatioFilterEx*(para1: Hdc, para2: Lpsize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetAspectRatioFilterEx".}
proc getBkColor*(para1: Hdc): Colorref{.stdcall, dynlib: "gdi32",
                                        importc: "GetBkColor".}
proc getBkMode*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
                                    importc: "GetBkMode".}
proc getBitmapBits*(para1: Hbitmap, para2: Long, para3: Lpvoid): Long{.stdcall,
    dynlib: "gdi32", importc: "GetBitmapBits".}
proc getBitmapDimensionEx*(para1: Hbitmap, para2: Lpsize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetBitmapDimensionEx".}
proc getBoundsRect*(para1: Hdc, para2: Lprect, para3: Uint): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetBoundsRect".}
proc getBrushOrgEx*(para1: Hdc, para2: Lppoint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetBrushOrgEx".}
proc getClipBox*(para1: Hdc, para2: Lprect): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetClipBox".}
proc getClipRgn*(para1: Hdc, para2: Hrgn): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetClipRgn".}
proc getMetaRgn*(para1: Hdc, para2: Hrgn): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetMetaRgn".}
proc getCurrentObject*(para1: Hdc, para2: Uint): Hgdiobj{.stdcall,
    dynlib: "gdi32", importc: "GetCurrentObject".}
proc getCurrentPositionEx*(para1: Hdc, para2: Lppoint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCurrentPositionEx".}
proc getDeviceCaps*(para1: Hdc, para2: Int32): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetDeviceCaps".}
proc getDIBits*(para1: Hdc, para2: Hbitmap, para3: Uint, para4: Uint,
                para5: Lpvoid, para6: Lpbitmapinfo, para7: Uint): Int32{.
    stdcall, dynlib: "gdi32", importc: "GetDIBits".}
proc getFontData*(para1: Hdc, para2: Dword, para3: Dword, para4: Lpvoid,
                  para5: Dword): Dword{.stdcall, dynlib: "gdi32",
                                        importc: "GetFontData".}
proc getGraphicsMode*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetGraphicsMode".}
proc getMapMode*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
                                     importc: "GetMapMode".}
proc getMetaFileBitsEx*(para1: Hmetafile, para2: Uint, para3: Lpvoid): Uint{.
    stdcall, dynlib: "gdi32", importc: "GetMetaFileBitsEx".}
proc getNearestColor*(para1: Hdc, para2: Colorref): Colorref{.stdcall,
    dynlib: "gdi32", importc: "GetNearestColor".}
proc getNearestPaletteIndex*(para1: Hpalette, para2: Colorref): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetNearestPaletteIndex".}
proc getObjectType*(h: Hgdiobj): Dword{.stdcall, dynlib: "gdi32",
                                        importc: "GetObjectType".}
proc getPaletteEntries*(para1: Hpalette, para2: Uint, para3: Uint,
                        para4: Lppaletteentry): Uint{.stdcall, dynlib: "gdi32",
    importc: "GetPaletteEntries".}
proc getPixel*(para1: Hdc, para2: Int32, para3: Int32): Colorref{.stdcall,
    dynlib: "gdi32", importc: "GetPixel".}
proc getPixelFormat*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetPixelFormat".}
proc getPolyFillMode*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetPolyFillMode".}
proc getRasterizerCaps*(para1: LprasterizerStatus, para2: Uint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetRasterizerCaps".}
proc getRegionData*(para1: Hrgn, para2: Dword, para3: Lprgndata): Dword{.
    stdcall, dynlib: "gdi32", importc: "GetRegionData".}
proc getRgnBox*(para1: Hrgn, para2: Lprect): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetRgnBox".}
proc getStockObject*(para1: Int32): Hgdiobj{.stdcall, dynlib: "gdi32",
    importc: "GetStockObject".}
proc getStretchBltMode*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetStretchBltMode".}
proc getSystemPaletteEntries*(para1: Hdc, para2: Uint, para3: Uint,
                              para4: Lppaletteentry): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetSystemPaletteEntries".}
proc getSystemPaletteUse*(para1: Hdc): Uint{.stdcall, dynlib: "gdi32",
    importc: "GetSystemPaletteUse".}
proc getTextCharacterExtra*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetTextCharacterExtra".}
proc getTextAlign*(para1: Hdc): Uint{.stdcall, dynlib: "gdi32",
                                      importc: "GetTextAlign".}
proc getTextColor*(para1: Hdc): Colorref{.stdcall, dynlib: "gdi32",
    importc: "GetTextColor".}
proc getTextCharset*(hdc: Hdc): Int32{.stdcall, dynlib: "gdi32",
                                       importc: "GetTextCharset".}
proc getTextCharsetInfo*(hdc: Hdc, lpSig: Lpfontsignature, dwFlags: Dword): Int32{.
    stdcall, dynlib: "gdi32", importc: "GetTextCharsetInfo".}
proc translateCharsetInfo*(lpSrc: var Dword, lpCs: Lpcharsetinfo, dwFlags: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "TranslateCharsetInfo".}
proc getFontLanguageInfo*(para1: Hdc): Dword{.stdcall, dynlib: "gdi32",
    importc: "GetFontLanguageInfo".}
proc getViewportExtEx*(para1: Hdc, para2: Lpsize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetViewportExtEx".}
proc getViewportOrgEx*(para1: Hdc, para2: Lppoint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetViewportOrgEx".}
proc getWindowExtEx*(para1: Hdc, para2: Lpsize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetWindowExtEx".}
proc getWindowOrgEx*(para1: Hdc, para2: Lppoint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetWindowOrgEx".}
proc intersectClipRect*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
                        para5: Int32): Int32{.stdcall, dynlib: "gdi32",
    importc: "IntersectClipRect".}
proc invertRgn*(para1: Hdc, para2: Hrgn): Winbool{.stdcall, dynlib: "gdi32",
    importc: "InvertRgn".}
proc lineDDA*(para1: Int32, para2: Int32, para3: Int32, para4: Int32,
              para5: Lineddaproc, para6: Lparam): Winbool{.stdcall,
    dynlib: "gdi32", importc: "LineDDA".}
proc lineTo*(para1: Hdc, para2: Int32, para3: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "LineTo".}
proc maskBlt*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
              para5: Int32, para6: Hdc, para7: Int32, para8: Int32,
              para9: Hbitmap, para10: Int32, para11: Int32, para12: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "MaskBlt".}
proc plgBlt*(para1: Hdc, para2: var Point, para3: Hdc, para4: Int32,
             para5: Int32, para6: Int32, para7: Int32, para8: Hbitmap,
             para9: Int32, para10: Int32): Winbool{.stdcall, dynlib: "gdi32",
    importc: "PlgBlt".}
proc offsetClipRgn*(para1: Hdc, para2: Int32, para3: Int32): Int32{.stdcall,
    dynlib: "gdi32", importc: "OffsetClipRgn".}
proc offsetRgn*(para1: Hrgn, para2: Int32, para3: Int32): Int32{.stdcall,
    dynlib: "gdi32", importc: "OffsetRgn".}
proc patBlt*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32, para5: Int32,
             para6: Dword): Winbool{.stdcall, dynlib: "gdi32", importc: "PatBlt".}
proc pie*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32, para5: Int32,
          para6: Int32, para7: Int32, para8: Int32, para9: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "Pie".}
proc playMetaFile*(para1: Hdc, para2: Hmetafile): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PlayMetaFile".}
proc paintRgn*(para1: Hdc, para2: Hrgn): Winbool{.stdcall, dynlib: "gdi32",
    importc: "PaintRgn".}
proc polyPolygon*(para1: Hdc, para2: var Point, para3: var Wint, para4: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyPolygon".}
proc ptInRegion*(para1: Hrgn, para2: Int32, para3: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PtInRegion".}
proc ptVisible*(para1: Hdc, para2: Int32, para3: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PtVisible".}
proc rectInRegion*(para1: Hrgn, para2: var Rect): Winbool{.stdcall,
    dynlib: "gdi32", importc: "RectInRegion".}
proc rectVisible*(para1: Hdc, para2: var Rect): Winbool{.stdcall,
    dynlib: "gdi32", importc: "RectVisible".}
proc rectangle*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
                para5: Int32): Winbool{.stdcall, dynlib: "gdi32",
                                        importc: "Rectangle".}
proc restoreDC*(para1: Hdc, para2: Int32): Winbool{.stdcall, dynlib: "gdi32",
    importc: "RestoreDC".}
proc realizePalette*(para1: Hdc): Uint{.stdcall, dynlib: "gdi32",
                                        importc: "RealizePalette".}
proc roundRect*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
                para5: Int32, para6: Int32, para7: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "RoundRect".}
proc resizePalette*(para1: Hpalette, para2: Uint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "ResizePalette".}
proc saveDC*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32", importc: "SaveDC".}
proc selectClipRgn*(para1: Hdc, para2: Hrgn): Int32{.stdcall, dynlib: "gdi32",
    importc: "SelectClipRgn".}
proc extSelectClipRgn*(para1: Hdc, para2: Hrgn, para3: Int32): Int32{.stdcall,
    dynlib: "gdi32", importc: "ExtSelectClipRgn".}
proc setMetaRgn*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
                                     importc: "SetMetaRgn".}
proc selectObject*(para1: Hdc, para2: Hgdiobj): Hgdiobj{.stdcall,
    dynlib: "gdi32", importc: "SelectObject".}
proc selectPalette*(para1: Hdc, para2: Hpalette, para3: Winbool): Hpalette{.
    stdcall, dynlib: "gdi32", importc: "SelectPalette".}
proc setBkColor*(para1: Hdc, para2: Colorref): Colorref{.stdcall,
    dynlib: "gdi32", importc: "SetBkColor".}
proc setBkMode*(para1: Hdc, para2: Int32): Int32{.stdcall, dynlib: "gdi32",
    importc: "SetBkMode".}
proc setBitmapBits*(para1: Hbitmap, para2: Dword, para3: Pointer): Long{.
    stdcall, dynlib: "gdi32", importc: "SetBitmapBits".}
proc setBoundsRect*(para1: Hdc, para2: var Rect, para3: Uint): Uint{.stdcall,
    dynlib: "gdi32", importc: "SetBoundsRect".}
proc setDIBits*(para1: Hdc, para2: Hbitmap, para3: Uint, para4: Uint,
                para5: Pointer, para6: Pbitmapinfo, para7: Uint): Int32{.
    stdcall, dynlib: "gdi32", importc: "SetDIBits".}
proc setDIBitsToDevice*(para1: Hdc, para2: Int32, para3: Int32, para4: Dword,
                        para5: Dword, para6: Int32, para7: Int32, para8: Uint,
                        para9: Uint, para10: Pointer, para11: var Bitmapinfo,
                        para12: Uint): Int32{.stdcall, dynlib: "gdi32",
    importc: "SetDIBitsToDevice".}
proc setMapperFlags*(para1: Hdc, para2: Dword): Dword{.stdcall, dynlib: "gdi32",
    importc: "SetMapperFlags".}
proc setGraphicsMode*(hdc: Hdc, iMode: Int32): Int32{.stdcall, dynlib: "gdi32",
    importc: "SetGraphicsMode".}
proc setMapMode*(para1: Hdc, para2: Int32): Int32{.stdcall, dynlib: "gdi32",
    importc: "SetMapMode".}
proc setMetaFileBitsEx*(para1: Uint, para2: var Int8): Hmetafile{.stdcall,
    dynlib: "gdi32", importc: "SetMetaFileBitsEx".}
proc setPaletteEntries*(para1: Hpalette, para2: Uint, para3: Uint,
                        para4: var Paletteentry): Uint{.stdcall,
    dynlib: "gdi32", importc: "SetPaletteEntries".}
proc setPixel*(para1: Hdc, para2: Int32, para3: Int32, para4: Colorref): Colorref{.
    stdcall, dynlib: "gdi32", importc: "SetPixel".}
proc setPixelV*(para1: Hdc, para2: Int32, para3: Int32, para4: Colorref): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetPixelV".}
proc setPolyFillMode*(para1: Hdc, para2: Int32): Int32{.stdcall,
    dynlib: "gdi32", importc: "SetPolyFillMode".}
proc stretchBlt*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
                 para5: Int32, para6: Hdc, para7: Int32, para8: Int32,
                 para9: Int32, para10: Int32, para11: Dword): Winbool{.stdcall,
    dynlib: "gdi32", importc: "StretchBlt".}
proc setRectRgn*(para1: Hrgn, para2: Int32, para3: Int32, para4: Int32,
                 para5: Int32): Winbool{.stdcall, dynlib: "gdi32",
    importc: "SetRectRgn".}
proc stretchDIBits*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
                    para5: Int32, para6: Int32, para7: Int32, para8: Int32,
                    para9: Int32, para10: Pointer, para11: var Bitmapinfo,
                    para12: Uint, para13: Dword): Int32{.stdcall,
    dynlib: "gdi32", importc: "StretchDIBits".}
proc setROP2*(para1: Hdc, para2: Int32): Int32{.stdcall, dynlib: "gdi32",
    importc: "SetROP2".}
proc setStretchBltMode*(para1: Hdc, para2: Int32): Int32{.stdcall,
    dynlib: "gdi32", importc: "SetStretchBltMode".}
proc setSystemPaletteUse*(para1: Hdc, para2: Uint): Uint{.stdcall,
    dynlib: "gdi32", importc: "SetSystemPaletteUse".}
proc setTextCharacterExtra*(para1: Hdc, para2: Int32): Int32{.stdcall,
    dynlib: "gdi32", importc: "SetTextCharacterExtra".}
proc setTextColor*(para1: Hdc, para2: Colorref): Colorref{.stdcall,
    dynlib: "gdi32", importc: "SetTextColor".}
proc setTextAlign*(para1: Hdc, para2: Uint): Uint{.stdcall, dynlib: "gdi32",
    importc: "SetTextAlign".}
proc setTextJustification*(para1: Hdc, para2: Int32, para3: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetTextJustification".}
proc updateColors*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
    importc: "UpdateColors".}
proc playMetaFileRecord*(para1: Hdc, para2: Lphandletable, para3: Lpmetarecord,
                         para4: Uint): Winbool{.stdcall, dynlib: "gdi32",
    importc: "PlayMetaFileRecord".}
proc enumMetaFile*(para1: Hdc, para2: Hmetafile, para3: Enummetafileproc,
                   para4: Lparam): Winbool{.stdcall, dynlib: "gdi32",
    importc: "EnumMetaFile".}
proc closeEnhMetaFile*(para1: Hdc): Henhmetafile{.stdcall, dynlib: "gdi32",
    importc: "CloseEnhMetaFile".}
proc deleteEnhMetaFile*(para1: Henhmetafile): Winbool{.stdcall, dynlib: "gdi32",
    importc: "DeleteEnhMetaFile".}
proc enumEnhMetaFile*(para1: Hdc, para2: Henhmetafile, para3: Enhmetafileproc,
                      para4: Lpvoid, para5: var Rect): Winbool{.stdcall,
    dynlib: "gdi32", importc: "EnumEnhMetaFile".}
proc getEnhMetaFileHeader*(para1: Henhmetafile, para2: Uint,
                           para3: Lpenhmetaheader): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetEnhMetaFileHeader".}
proc getEnhMetaFilePaletteEntries*(para1: Henhmetafile, para2: Uint,
                                   para3: Lppaletteentry): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetEnhMetaFilePaletteEntries".}
proc getEnhMetaFileBits*(para1: Henhmetafile, para2: Uint, para3: Lpbyte): Uint{.
    stdcall, dynlib: "gdi32", importc: "GetEnhMetaFileBits".}
proc getWinMetaFileBits*(para1: Henhmetafile, para2: Uint, para3: Lpbyte,
                         para4: Wint, para5: Hdc): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetWinMetaFileBits".}
proc playEnhMetaFile*(para1: Hdc, para2: Henhmetafile, para3: Rect): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PlayEnhMetaFile".}
proc playEnhMetaFileRecord*(para1: Hdc, para2: Lphandletable,
                            para3: var TENHMETARECORD, para4: Uint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PlayEnhMetaFileRecord".}
proc setEnhMetaFileBits*(para1: Uint, para2: var Int8): Henhmetafile{.stdcall,
    dynlib: "gdi32", importc: "SetEnhMetaFileBits".}
proc setWinMetaFileBits*(para1: Uint, para2: var Int8, para3: Hdc,
                         para4: var Metafilepict): Henhmetafile{.stdcall,
    dynlib: "gdi32", importc: "SetWinMetaFileBits".}
proc gdiComment*(para1: Hdc, para2: Uint, para3: var Int8): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GdiComment".}
proc angleArc*(para1: Hdc, para2: Int32, para3: Int32, para4: Dword,
               para5: Float32, para6: Float32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "AngleArc".}
proc polyPolyline*(para1: Hdc, para2: var Point, para3: var Dword, para4: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyPolyline".}
proc getWorldTransform*(para1: Hdc, para2: Lpxform): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetWorldTransform".}
proc setWorldTransform*(para1: Hdc, para2: var Xform): Winbool{.stdcall,
    dynlib: "gdi32", importc: "SetWorldTransform".}
proc modifyWorldTransform*(para1: Hdc, para2: var Xform, para3: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "ModifyWorldTransform".}
proc combineTransform*(para1: Lpxform, para2: var Xform, para3: var Xform): Winbool{.
    stdcall, dynlib: "gdi32", importc: "CombineTransform".}
proc createDIBSection*(para1: Hdc, para2: var Bitmapinfo, para3: Uint,
                       para4: var Pointer, para5: Handle, para6: Dword): Hbitmap{.
    stdcall, dynlib: "gdi32", importc: "CreateDIBSection".}
proc getDIBColorTable*(para1: Hdc, para2: Uint, para3: Uint, para4: var Rgbquad): Uint{.
    stdcall, dynlib: "gdi32", importc: "GetDIBColorTable".}
proc setDIBColorTable*(para1: Hdc, para2: Uint, para3: Uint, para4: var Rgbquad): Uint{.
    stdcall, dynlib: "gdi32", importc: "SetDIBColorTable".}
proc setColorAdjustment*(para1: Hdc, para2: var Coloradjustment): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetColorAdjustment".}
proc getColorAdjustment*(para1: Hdc, para2: Lpcoloradjustment): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetColorAdjustment".}
proc createHalftonePalette*(para1: Hdc): Hpalette{.stdcall, dynlib: "gdi32",
    importc: "CreateHalftonePalette".}
proc endDoc*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32", importc: "EndDoc".}
proc startPage*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
                                    importc: "StartPage".}
proc endPage*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32", importc: "EndPage".}
proc abortDoc*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32", importc: "AbortDoc".}
proc setAbortProc*(para1: Hdc, para2: TABORTPROC): Int32{.stdcall,
    dynlib: "gdi32", importc: "SetAbortProc".}
proc arcTo*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32, para5: Int32,
            para6: Int32, para7: Int32, para8: Int32, para9: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "ArcTo".}
proc beginPath*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                      importc: "BeginPath".}
proc closeFigure*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                        importc: "CloseFigure".}
proc endPath*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32", importc: "EndPath".}
proc fillPath*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                     importc: "FillPath".}
proc flattenPath*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                        importc: "FlattenPath".}
proc getPath*(para1: Hdc, para2: Lppoint, para3: Lpbyte, para4: Int32): Int32{.
    stdcall, dynlib: "gdi32", importc: "GetPath".}
proc pathToRegion*(para1: Hdc): Hrgn{.stdcall, dynlib: "gdi32",
                                      importc: "PathToRegion".}
proc polyDraw*(para1: Hdc, para2: var Point, para3: var Int8, para4: Int32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyDraw".}
proc selectClipPath*(para1: Hdc, para2: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "SelectClipPath".}
proc setArcDirection*(para1: Hdc, para2: Int32): Int32{.stdcall,
    dynlib: "gdi32", importc: "SetArcDirection".}
proc setMiterLimit*(para1: Hdc, para2: Float32, para3: ptr Float32): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetMiterLimit".}
proc strokeAndFillPath*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
    importc: "StrokeAndFillPath".}
proc strokePath*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                       importc: "StrokePath".}
proc widenPath*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                      importc: "WidenPath".}
proc extCreatePen*(para1: Dword, para2: Dword, para3: var Logbrush,
                   para4: Dword, para5: var Dword): Hpen{.stdcall,
    dynlib: "gdi32", importc: "ExtCreatePen".}
proc getMiterLimit*(para1: Hdc, para2: ptr Float32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetMiterLimit".}
proc getArcDirection*(para1: Hdc): Int32{.stdcall, dynlib: "gdi32",
    importc: "GetArcDirection".}
proc moveToEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lppoint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "MoveToEx".}
proc createPolygonRgn*(para1: var Point, para2: Int32, para3: Int32): Hrgn{.
    stdcall, dynlib: "gdi32", importc: "CreatePolygonRgn".}
proc dPtoLP*(para1: Hdc, para2: Lppoint, para3: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "DPtoLP".}
proc lPtoDP*(para1: Hdc, para2: Lppoint, para3: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "LPtoDP".}
proc polygon*(para1: Hdc, para2: Lppoint, para3: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "Polygon".}
proc polyline*(para1: Hdc, para2: Lppoint, para3: Int32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "Polyline".}
proc polyBezier*(para1: Hdc, para2: Lppoint, para3: Dword): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PolyBezier".}
proc polyBezierTo*(para1: Hdc, para2: Point, para3: Dword): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PolyBezierTo".}
proc polylineTo*(para1: Hdc, para2: Lppoint, para3: Dword): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PolylineTo".}
proc setViewportExtEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lpsize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetViewportExtEx".}
proc setViewportOrgEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lppoint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetViewportOrgEx".}
proc setWindowExtEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lpsize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetWindowExtEx".}
proc setWindowOrgEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lppoint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetWindowOrgEx".}
proc offsetViewportOrgEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lppoint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "OffsetViewportOrgEx".}
proc offsetWindowOrgEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lppoint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "OffsetWindowOrgEx".}
proc scaleViewportExtEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
                         para5: Int32, para6: Lpsize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "ScaleViewportExtEx".}
proc scaleWindowExtEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Int32,
                       para5: Int32, para6: Lpsize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "ScaleWindowExtEx".}
proc setBitmapDimensionEx*(para1: Hbitmap, para2: Int32, para3: Int32,
                           para4: Lpsize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "SetBitmapDimensionEx".}
proc setBrushOrgEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lppoint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetBrushOrgEx".}
proc getDCOrgEx*(para1: Hdc, para2: Lppoint): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetDCOrgEx".}
proc fixBrushOrgEx*(para1: Hdc, para2: Int32, para3: Int32, para4: Lppoint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "FixBrushOrgEx".}
proc unrealizeObject*(para1: Hgdiobj): Winbool{.stdcall, dynlib: "gdi32",
    importc: "UnrealizeObject".}
proc gdiFlush*(): Winbool{.stdcall, dynlib: "gdi32", importc: "GdiFlush".}
proc gdiSetBatchLimit*(para1: Dword): Dword{.stdcall, dynlib: "gdi32",
    importc: "GdiSetBatchLimit".}
proc gdiGetBatchLimit*(): Dword{.stdcall, dynlib: "gdi32",
                                 importc: "GdiGetBatchLimit".}
proc setICMMode*(para1: Hdc, para2: Int32): Int32{.stdcall, dynlib: "gdi32",
    importc: "SetICMMode".}
proc checkColorsInGamut*(para1: Hdc, para2: Lpvoid, para3: Lpvoid, para4: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "CheckColorsInGamut".}
proc getColorSpace*(para1: Hdc): Handle{.stdcall, dynlib: "gdi32",
    importc: "GetColorSpace".}
proc setColorSpace*(para1: Hdc, para2: Hcolorspace): Winbool{.stdcall,
    dynlib: "gdi32", importc: "SetColorSpace".}
proc deleteColorSpace*(para1: Hcolorspace): Winbool{.stdcall, dynlib: "gdi32",
    importc: "DeleteColorSpace".}
proc getDeviceGammaRamp*(para1: Hdc, para2: Lpvoid): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetDeviceGammaRamp".}
proc setDeviceGammaRamp*(para1: Hdc, para2: Lpvoid): Winbool{.stdcall,
    dynlib: "gdi32", importc: "SetDeviceGammaRamp".}
proc colorMatchToTarget*(para1: Hdc, para2: Hdc, para3: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "ColorMatchToTarget".}
proc createPropertySheetPageA*(lppsp: Lpcpropsheetpage): Hpropsheetpage{.
    stdcall, dynlib: "comctl32", importc: "CreatePropertySheetPageA".}
proc destroyPropertySheetPage*(hPSPage: Hpropsheetpage): Winbool{.stdcall,
    dynlib: "comctl32", importc: "DestroyPropertySheetPage".}
proc initCommonControls*(){.stdcall, dynlib: "comctl32",
                            importc: "InitCommonControls".}
proc imageListAddIcon*(himl: Himagelist, hicon: Hicon): Int32
proc imageListCreate*(cx: Int32, cy: Int32, flags: Uint, cInitial: Int32,
                       cGrow: Int32): Himagelist{.stdcall, dynlib: "comctl32",
    importc: "ImageList_Create".}
proc imageListDestroy*(himl: Himagelist): Winbool{.stdcall, dynlib: "comctl32",
    importc: "ImageList_Destroy".}
proc imageListGetImageCount*(himl: Himagelist): Int32{.stdcall,
    dynlib: "comctl32", importc: "ImageList_GetImageCount".}
proc imageListAdd*(himl: Himagelist, hbmImage: Hbitmap, hbmMask: Hbitmap): Int32{.
    stdcall, dynlib: "comctl32", importc: "ImageList_Add".}
proc imageListReplaceIcon*(himl: Himagelist, i: Int32, hicon: Hicon): Int32{.
    stdcall, dynlib: "comctl32", importc: "ImageList_ReplaceIcon".}
proc imageListSetBkColor*(himl: Himagelist, clrBk: Colorref): Colorref{.
    stdcall, dynlib: "comctl32", importc: "ImageList_SetBkColor".}
proc imageListGetBkColor*(himl: Himagelist): Colorref{.stdcall,
    dynlib: "comctl32", importc: "ImageList_GetBkColor".}
proc imageListSetOverlayImage*(himl: Himagelist, iImage: Int32, iOverlay: Int32): Winbool{.
    stdcall, dynlib: "comctl32", importc: "ImageList_SetOverlayImage".}
proc imageListDraw*(himl: Himagelist, i: Int32, hdcDst: Hdc, x: Int32,
                     y: Int32, fStyle: Uint): Winbool{.stdcall,
    dynlib: "comctl32", importc: "ImageList_Draw".}
proc imageListReplace*(himl: Himagelist, i: Int32, hbmImage: Hbitmap,
                        hbmMask: Hbitmap): Winbool{.stdcall, dynlib: "comctl32",
    importc: "ImageList_Replace".}
proc imageListAddMasked*(himl: Himagelist, hbmImage: Hbitmap, crMask: Colorref): Int32{.
    stdcall, dynlib: "comctl32", importc: "ImageList_AddMasked".}
proc imageListDrawEx*(himl: Himagelist, i: Int32, hdcDst: Hdc, x: Int32,
                       y: Int32, dx: Int32, dy: Int32, rgbBk: Colorref,
                       rgbFg: Colorref, fStyle: Uint): Winbool{.stdcall,
    dynlib: "comctl32", importc: "ImageList_DrawEx".}
proc imageListRemove*(himl: Himagelist, i: Int32): Winbool{.stdcall,
    dynlib: "comctl32", importc: "ImageList_Remove".}
proc imageListGetIcon*(himl: Himagelist, i: Int32, flags: Uint): Hicon{.
    stdcall, dynlib: "comctl32", importc: "ImageList_GetIcon".}
proc imageListBeginDrag*(himlTrack: Himagelist, iTrack: Int32,
                          dxHotspot: Int32, dyHotspot: Int32): Winbool{.stdcall,
    dynlib: "comctl32", importc: "ImageList_BeginDrag".}
proc imageListEndDrag*(){.stdcall, dynlib: "comctl32",
                           importc: "ImageList_EndDrag".}
proc imageListDragEnter*(hwndLock: Hwnd, x: Int32, y: Int32): Winbool{.stdcall,
    dynlib: "comctl32", importc: "ImageList_DragEnter".}
proc imageListDragLeave*(hwndLock: Hwnd): Winbool{.stdcall, dynlib: "comctl32",
    importc: "ImageList_DragLeave".}
proc imageListDragMove*(x: Int32, y: Int32): Winbool{.stdcall,
    dynlib: "comctl32", importc: "ImageList_DragMove".}
proc imageListSetDragCursorImage*(himlDrag: Himagelist, iDrag: Int32,
                                   dxHotspot: Int32, dyHotspot: Int32): Winbool{.
    stdcall, dynlib: "comctl32", importc: "ImageList_SetDragCursorImage".}
proc imageListDragShowNolock*(fShow: Winbool): Winbool{.stdcall,
    dynlib: "comctl32", importc: "ImageList_DragShowNolock".}
proc imageListGetDragImage*(ppt: Lppoint, pptHotspot: Lppoint): Himagelist{.
    stdcall, dynlib: "comctl32", importc: "ImageList_GetDragImage".}
proc imageListGetIconSize*(himl: Himagelist, cx: var Int32, cy: var Int32): Winbool{.
    stdcall, dynlib: "comctl32", importc: "ImageList_GetIconSize".}
proc imageListSetIconSize*(himl: Himagelist, cx: Int32, cy: Int32): Winbool{.
    stdcall, dynlib: "comctl32", importc: "ImageList_SetIconSize".}
proc imageListGetImageInfo*(himl: Himagelist, i: Int32,
                             pImageInfo: var Imageinfo): Winbool{.stdcall,
    dynlib: "comctl32", importc: "ImageList_GetImageInfo".}
proc imageListMerge*(himl1: Himagelist, i1: Int32, himl2: Himagelist,
                      i2: Int32, dx: Int32, dy: Int32): Himagelist{.stdcall,
    dynlib: "comctl32", importc: "ImageList_Merge".}
proc imageListSetImageCount*(himl: Himagelist, uNewCount: Uint): Int{.stdcall,
    dynlib: "comctl32.dll", importc: "ImageList_SetImageCount".}
proc createToolbarEx*(wnd: Hwnd, ws: Dword, wID: Uint, nBitmaps: Int32,
                      hBMInst: Hinst, wBMID: Uint, lpButtons: Lpctbbutton,
                      iNumButtons: Int32, dxButton: Int32, dyButton: Int32,
                      dxBitmap: Int32, dyBitmap: Int32, uStructSize: Uint): Hwnd{.
    stdcall, dynlib: "comctl32", importc: "CreateToolbarEx".}
proc createMappedBitmap*(hInstance: Hinst, idBitmap: Int32, wFlags: Uint,
                         lpColorMap: Lpcolormap, iNumMaps: Int32): Hbitmap{.
    stdcall, dynlib: "comctl32", importc: "CreateMappedBitmap".}
proc menuHelp*(uMsg: Uint, wp: Wparam, lp: Lparam, hMainMenu: Hmenu,
               hInst: Hinst, hwndStatus: Hwnd, lpwIDs: var Uint){.stdcall,
    dynlib: "comctl32", importc: "MenuHelp".}
proc showHideMenuCtl*(wnd: Hwnd, uFlags: Uint, lpInfo: Lpint): Winbool{.
    stdcall, dynlib: "comctl32", importc: "ShowHideMenuCtl".}
proc getEffectiveClientRect*(wnd: Hwnd, lprc: Lprect, lpInfo: Lpint){.stdcall,
    dynlib: "comctl32", importc: "GetEffectiveClientRect".}
proc makeDragList*(hLB: Hwnd): Winbool{.stdcall, dynlib: "comctl32",
                                        importc: "MakeDragList".}
proc drawInsert*(handParent: Hwnd, hLB: Hwnd, nItem: Int32){.stdcall,
    dynlib: "comctl32", importc: "DrawInsert".}
proc lBItemFromPt*(hLB: Hwnd, pt: Point, bAutoScroll: Winbool): Int32{.stdcall,
    dynlib: "comctl32", importc: "LBItemFromPt".}
proc createUpDownControl*(dwStyle: Dword, x: Int32, y: Int32, cx: Int32,
                          cy: Int32, hParent: Hwnd, nID: Int32, hInst: Hinst,
                          hBuddy: Hwnd, nUpper: Int32, nLower: Int32,
                          nPos: Int32): Hwnd{.stdcall, dynlib: "comctl32",
    importc: "CreateUpDownControl".}
proc regCloseKey*(key: Hkey): Long{.stdcall, dynlib: "advapi32",
                                     importc: "RegCloseKey".}
proc regSetKeySecurity*(key: Hkey, SecurityInformation: SecurityInformation,
                        pSecurityDescriptor: PsecurityDescriptor): Long{.
    stdcall, dynlib: "advapi32", importc: "RegSetKeySecurity".}
proc regFlushKey*(key: Hkey): Long{.stdcall, dynlib: "advapi32",
                                     importc: "RegFlushKey".}
proc regGetKeySecurity*(key: Hkey, SecurityInformation: SecurityInformation,
                        pSecurityDescriptor: PsecurityDescriptor,
                        lpcbSecurityDescriptor: Lpdword): Long{.stdcall,
    dynlib: "advapi32", importc: "RegGetKeySecurity".}
proc regNotifyChangeKeyValue*(key: Hkey, bWatchSubtree: Winbool,
                              dwNotifyFilter: Dword, hEvent: Handle,
                              fAsynchronus: Winbool): Long{.stdcall,
    dynlib: "advapi32", importc: "RegNotifyChangeKeyValue".}
proc isValidCodePage*(CodePage: Uint): Winbool{.stdcall, dynlib: "kernel32",
    importc: "IsValidCodePage".}
proc getACP*(): Uint{.stdcall, dynlib: "kernel32", importc: "GetACP".}
proc getOEMCP*(): Uint{.stdcall, dynlib: "kernel32", importc: "GetOEMCP".}
proc getCPInfo*(para1: Uint, para2: Lpcpinfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetCPInfo".}
proc isDBCSLeadByte*(TestChar: Int8): Winbool{.stdcall, dynlib: "kernel32",
    importc: "IsDBCSLeadByte".}
proc isDBCSLeadByteEx*(CodePage: Uint, TestChar: Int8): Winbool{.stdcall,
    dynlib: "kernel32", importc: "IsDBCSLeadByteEx".}
proc multiByteToWideChar*(CodePage: Uint, dwFlags: Dword,
                          lpMultiByteStr: Lpcstr, cchMultiByte: Int32,
                          lpWideCharStr: Lpwstr, cchWideChar: Int32): Int32{.
    stdcall, dynlib: "kernel32", importc: "MultiByteToWideChar".}
proc wideCharToMultiByte*(CodePage: Uint, dwFlags: Dword,
                          lpWideCharStr: Lpcwstr, cchWideChar: Int32,
                          lpMultiByteStr: Lpstr, cchMultiByte: Int32,
                          lpDefaultChar: Lpcstr, lpUsedDefaultChar: Lpbool): Int32{.
    stdcall, dynlib: "kernel32", importc: "WideCharToMultiByte".}
proc isValidLocale*(Locale: Lcid, dwFlags: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "IsValidLocale".}
proc convertDefaultLocale*(Locale: Lcid): Lcid{.stdcall, dynlib: "kernel32",
    importc: "ConvertDefaultLocale".}
proc getThreadLocale*(): Lcid{.stdcall, dynlib: "kernel32",
                               importc: "GetThreadLocale".}
proc setThreadLocale*(Locale: Lcid): Winbool{.stdcall, dynlib: "kernel32",
    importc: "SetThreadLocale".}
proc getSystemDefaultLangID*(): Langid{.stdcall, dynlib: "kernel32",
                                        importc: "GetSystemDefaultLangID".}
proc getUserDefaultLangID*(): Langid{.stdcall, dynlib: "kernel32",
                                      importc: "GetUserDefaultLangID".}
proc getSystemDefaultLCID*(): Lcid{.stdcall, dynlib: "kernel32",
                                    importc: "GetSystemDefaultLCID".}
proc getUserDefaultLCID*(): Lcid{.stdcall, dynlib: "kernel32",
                                  importc: "GetUserDefaultLCID".}
proc readConsoleOutputAttribute*(hConsoleOutput: Handle, lpAttribute: Lpword,
                                 nLength: Dword, dwReadCoord: Coord,
                                 lpNumberOfAttrsRead: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputAttribute".}
proc writeConsoleOutputAttribute*(hConsoleOutput: Handle,
                                  lpAttribute: var Int16, nLength: Dword,
                                  dwWriteCoord: Coord,
                                  lpNumberOfAttrsWritten: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputAttribute".}
proc fillConsoleOutputAttribute*(hConsoleOutput: Handle, wAttribute: Int16,
                                 nLength: Dword, dwWriteCoord: Coord,
                                 lpNumberOfAttrsWritten: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FillConsoleOutputAttribute".}
proc getConsoleMode*(hConsoleHandle: Handle, lpMode: Lpdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetConsoleMode".}
proc getNumberOfConsoleInputEvents*(hConsoleInput: Handle,
                                    lpNumberOfEvents: Pdword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetNumberOfConsoleInputEvents".}
proc getConsoleScreenBufferInfo*(hConsoleOutput: Handle,
    lpConsoleScreenBufferInfo: PconsoleScreenBufferInfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetConsoleScreenBufferInfo".}
proc getLargestConsoleWindowSize*(hConsoleOutput: Handle): Coord
proc getConsoleCursorInfo*(hConsoleOutput: Handle,
                           lpConsoleCursorInfo: PconsoleCursorInfo): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetConsoleCursorInfo".}
proc getNumberOfConsoleMouseButtons*(lpNumberOfMouseButtons: Lpdword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetNumberOfConsoleMouseButtons".}
proc setConsoleMode*(hConsoleHandle: Handle, dwMode: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetConsoleMode".}
proc setConsoleActiveScreenBuffer*(hConsoleOutput: Handle): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetConsoleActiveScreenBuffer".}
proc flushConsoleInputBuffer*(hConsoleInput: Handle): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FlushConsoleInputBuffer".}
proc setConsoleScreenBufferSize*(hConsoleOutput: Handle, dwSize: Coord): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetConsoleScreenBufferSize".}
proc setConsoleCursorPosition*(hConsoleOutput: Handle, dwCursorPosition: Coord): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetConsoleCursorPosition".}
proc setConsoleCursorInfo*(hConsoleOutput: Handle,
                           lpConsoleCursorInfo: PconsoleCursorInfo): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetConsoleCursorInfo".}
proc setConsoleWindowInfo*(hConsoleOutput: Handle, bAbsolute: Winbool,
                           lpConsoleWindow: var SmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetConsoleWindowInfo".}
proc setConsoleTextAttribute*(hConsoleOutput: Handle, wAttributes: Int16): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetConsoleTextAttribute".}
proc setConsoleCtrlHandler*(HandlerRoutine: PhandlerRoutine, Add: Winbool): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetConsoleCtrlHandler".}
proc generateConsoleCtrlEvent*(dwCtrlEvent: Dword, dwProcessGroupId: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GenerateConsoleCtrlEvent".}
proc allocConsole*(): Winbool{.stdcall, dynlib: "kernel32",
                               importc: "AllocConsole".}
proc freeConsole*(): Winbool{.stdcall, dynlib: "kernel32",
                              importc: "FreeConsole".}
proc createConsoleScreenBuffer*(dwDesiredAccess: Dword, dwShareMode: Dword,
                                lpSecurityAttributes: var SecurityAttributes,
                                dwFlags: Dword, lpScreenBufferData: Lpvoid): Handle{.
    stdcall, dynlib: "kernel32", importc: "CreateConsoleScreenBuffer".}
proc getConsoleCP*(): Uint{.stdcall, dynlib: "kernel32", importc: "GetConsoleCP".}
proc setConsoleCP*(wCodePageID: Uint): Winbool{.stdcall, dynlib: "kernel32",
    importc: "SetConsoleCP".}
proc getConsoleOutputCP*(): Uint{.stdcall, dynlib: "kernel32",
                                  importc: "GetConsoleOutputCP".}
proc setConsoleOutputCP*(wCodePageID: Uint): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetConsoleOutputCP".}
proc wNetConnectionDialog*(wnd: Hwnd, dwType: Dword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetConnectionDialog".}
proc wNetDisconnectDialog*(wnd: Hwnd, dwType: Dword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetDisconnectDialog".}
proc wNetCloseEnum*(hEnum: Handle): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetCloseEnum".}
proc closeServiceHandle*(hSCObject: ScHandle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "CloseServiceHandle".}
proc controlService*(hService: ScHandle, dwControl: Dword,
                     lpServiceStatus: LpserviceStatus): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ControlService".}
proc deleteService*(hService: ScHandle): Winbool{.stdcall, dynlib: "advapi32",
    importc: "DeleteService".}
proc lockServiceDatabase*(hSCManager: ScHandle): ScLock{.stdcall,
    dynlib: "advapi32", importc: "LockServiceDatabase".}
proc notifyBootConfigStatus*(BootAcceptable: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "NotifyBootConfigStatus".}
proc queryServiceObjectSecurity*(hService: ScHandle,
                                 dwSecurityInformation: SecurityInformation,
                                 lpSecurityDescriptor: PsecurityDescriptor,
                                 cbBufSize: Dword, pcbBytesNeeded: Lpdword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "QueryServiceObjectSecurity".}
proc queryServiceStatus*(hService: ScHandle, lpServiceStatus: LpserviceStatus): Winbool{.
    stdcall, dynlib: "advapi32", importc: "QueryServiceStatus".}
proc setServiceObjectSecurity*(hService: ScHandle,
                               dwSecurityInformation: SecurityInformation,
                               lpSecurityDescriptor: PsecurityDescriptor): Winbool{.
    stdcall, dynlib: "advapi32", importc: "SetServiceObjectSecurity".}
proc setServiceStatus*(hServiceStatus: ServiceStatusHandle,
                       lpServiceStatus: LpserviceStatus): Winbool{.stdcall,
    dynlib: "advapi32", importc: "SetServiceStatus".}
proc unlockServiceDatabase*(ScLock: ScLock): Winbool{.stdcall,
    dynlib: "advapi32", importc: "UnlockServiceDatabase".}
proc choosePixelFormat*(para1: Hdc, para2: Ppixelformatdescriptor): Int32{.
    stdcall, dynlib: "gdi32", importc: "ChoosePixelFormat".}
proc describePixelFormat*(para1: Hdc, para2: Int32, para3: Uint,
                          para4: Lppixelformatdescriptor): Int32{.stdcall,
    dynlib: "gdi32", importc: "DescribePixelFormat".}
proc setPixelFormat*(para1: Hdc, para2: Int32, para3: Ppixelformatdescriptor): Winbool{.
    stdcall, dynlib: "gdi32", importc: "SetPixelFormat".}
proc swapBuffers*(para1: Hdc): Winbool{.stdcall, dynlib: "gdi32",
                                        importc: "SwapBuffers".}
proc dragQueryPoint*(para1: Hdrop, para2: Lppoint): Winbool{.stdcall,
    dynlib: "shell32", importc: "DragQueryPoint".}
proc dragFinish*(para1: Hdrop){.stdcall, dynlib: "shell32",
                                importc: "DragFinish".}
proc dragAcceptFiles*(para1: Hwnd, para2: Winbool){.stdcall, dynlib: "shell32",
    importc: "DragAcceptFiles".}
proc duplicateIcon*(para1: Hinst, para2: Hicon): Hicon{.stdcall,
    dynlib: "shell32", importc: "DuplicateIcon".}
proc ddeAbandonTransaction*(para1: Dword, para2: Hconv, para3: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "DdeAbandonTransaction".}
proc ddeAccessData*(para1: Hddedata, para2: Pdword): Pbyte{.stdcall,
    dynlib: "user32", importc: "DdeAccessData".}
proc ddeAddData*(para1: Hddedata, para2: Pbyte, para3: Dword, para4: Dword): Hddedata{.
    stdcall, dynlib: "user32", importc: "DdeAddData".}
proc ddeClientTransaction*(para1: Pbyte, para2: Dword, para3: Hconv, para4: Hsz,
                           para5: Uint, para6: Uint, para7: Dword, para8: Pdword): Hddedata{.
    stdcall, dynlib: "user32", importc: "DdeClientTransaction".}
proc ddeCmpStringHandles*(para1: Hsz, para2: Hsz): Int32{.stdcall,
    dynlib: "user32", importc: "DdeCmpStringHandles".}
proc ddeConnect*(para1: Dword, para2: Hsz, para3: Hsz, para4: var Convcontext): Hconv{.
    stdcall, dynlib: "user32", importc: "DdeConnect".}
proc ddeConnectList*(para1: Dword, para2: Hsz, para3: Hsz, para4: Hconvlist,
                     para5: Pconvcontext): Hconvlist{.stdcall, dynlib: "user32",
    importc: "DdeConnectList".}
proc ddeCreateDataHandle*(para1: Dword, para2: Lpbyte, para3: Dword,
                          para4: Dword, para5: Hsz, para6: Uint, para7: Uint): Hddedata{.
    stdcall, dynlib: "user32", importc: "DdeCreateDataHandle".}
proc ddeDisconnect*(para1: Hconv): Winbool{.stdcall, dynlib: "user32",
    importc: "DdeDisconnect".}
proc ddeDisconnectList*(para1: Hconvlist): Winbool{.stdcall, dynlib: "user32",
    importc: "DdeDisconnectList".}
proc ddeEnableCallback*(para1: Dword, para2: Hconv, para3: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "DdeEnableCallback".}
proc ddeFreeDataHandle*(para1: Hddedata): Winbool{.stdcall, dynlib: "user32",
    importc: "DdeFreeDataHandle".}
proc ddeFreeStringHandle*(para1: Dword, para2: Hsz): Winbool{.stdcall,
    dynlib: "user32", importc: "DdeFreeStringHandle".}
proc ddeGetData*(para1: Hddedata, para2: Lpbyte, para3: Dword, para4: Dword): Dword{.
    stdcall, dynlib: "user32", importc: "DdeGetData".}
proc ddeGetLastError*(para1: Dword): Uint{.stdcall, dynlib: "user32",
    importc: "DdeGetLastError".}
proc ddeImpersonateClient*(para1: Hconv): Winbool{.stdcall, dynlib: "user32",
    importc: "DdeImpersonateClient".}
proc ddeKeepStringHandle*(para1: Dword, para2: Hsz): Winbool{.stdcall,
    dynlib: "user32", importc: "DdeKeepStringHandle".}
proc ddeNameService*(para1: Dword, para2: Hsz, para3: Hsz, para4: Uint): Hddedata{.
    stdcall, dynlib: "user32", importc: "DdeNameService".}
proc ddePostAdvise*(para1: Dword, para2: Hsz, para3: Hsz): Winbool{.stdcall,
    dynlib: "user32", importc: "DdePostAdvise".}
proc ddeQueryConvInfo*(para1: Hconv, para2: Dword, para3: Pconvinfo): Uint{.
    stdcall, dynlib: "user32", importc: "DdeQueryConvInfo".}
proc ddeQueryNextServer*(para1: Hconvlist, para2: Hconv): Hconv{.stdcall,
    dynlib: "user32", importc: "DdeQueryNextServer".}
proc ddeReconnect*(para1: Hconv): Hconv{.stdcall, dynlib: "user32",
    importc: "DdeReconnect".}
proc ddeSetUserHandle*(para1: Hconv, para2: Dword, para3: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "DdeSetUserHandle".}
proc ddeUnaccessData*(para1: Hddedata): Winbool{.stdcall, dynlib: "user32",
    importc: "DdeUnaccessData".}
proc ddeUninitialize*(para1: Dword): Winbool{.stdcall, dynlib: "user32",
    importc: "DdeUninitialize".}
proc sHAddToRecentDocs*(para1: Uint, para2: Lpcvoid){.stdcall,
    dynlib: "shell32", importc: "SHAddToRecentDocs".}
proc sHBrowseForFolder*(para1: Lpbrowseinfo): Lpitemidlist{.stdcall,
    dynlib: "shell32", importc: "SHBrowseForFolder".}
proc sHChangeNotify*(para1: Long, para2: Uint, para3: Lpcvoid, para4: Lpcvoid){.
    stdcall, dynlib: "shell32", importc: "SHChangeNotify".}
proc sHFileOperation*(para1: Lpshfileopstruct): Int32{.stdcall,
    dynlib: "shell32", importc: "SHFileOperation".}
proc sHFreeNameMappings*(para1: Handle){.stdcall, dynlib: "shell32",
    importc: "SHFreeNameMappings".}
proc sHGetFileInfo*(para1: Lpctstr, para2: Dword, para3: var Shfileinfo,
                    para4: Uint, para5: Uint): Dword{.stdcall,
    dynlib: "shell32", importc: "SHGetFileInfo".}
proc sHGetPathFromIDList*(para1: Lpcitemidlist, para2: Lptstr): Winbool{.
    stdcall, dynlib: "shell32", importc: "SHGetPathFromIDList".}
proc sHGetSpecialFolderLocation*(para1: Hwnd, para2: Int32,
                                 para3: var Lpitemidlist): Hresult{.stdcall,
    dynlib: "shell32", importc: "SHGetSpecialFolderLocation".}
proc commDlgExtendedError*(): Dword{.stdcall, dynlib: "comdlg32",
                                     importc: "CommDlgExtendedError".}
  # wgl Windows OpenGL helper functions
proc wglUseFontBitmaps*(para1: Hdc, para2: Dword, para3: Dword, para4: Dword): Winbool{.
    stdcall, dynlib: "opengl32", importc: "wglUseFontBitmapsA".}
proc wglCreateContext*(para1: Hdc): Hglrc{.stdcall, dynlib: "opengl32",
    importc: "wglCreateContext".}
proc wglCreateLayerContext*(para1: Hdc, para2: Int32): Hglrc{.stdcall,
    dynlib: "opengl32", importc: "wglCreateLayerContext".}
proc wglCopyContext*(para1: Hglrc, para2: Hglrc, para3: Uint): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglCopyContext".}
proc wglDeleteContext*(para1: Hglrc): Winbool{.stdcall, dynlib: "opengl32",
    importc: "wglDeleteContext".}
proc wglGetCurrentContext*(): Hglrc{.stdcall, dynlib: "opengl32",
                                     importc: "wglGetCurrentContext".}
proc wglGetCurrentDC*(): Hdc{.stdcall, dynlib: "opengl32",
                              importc: "wglGetCurrentDC".}
proc wglMakeCurrent*(para1: Hdc, para2: Hglrc): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglMakeCurrent".}
proc wglShareLists*(para1: Hglrc, para2: Hglrc): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglShareLists".}
proc wglUseFontBitmapsW*(para1: Hdc, para2: Dword, para3: Dword, para4: Dword): Winbool{.
    stdcall, dynlib: "opengl32", importc: "wglUseFontBitmapsW".}
proc wglUseFontOutlines*(para1: Hdc, para2: Dword, para3: Dword, para4: Dword,
                         para5: Float32, para6: Float32, para7: Int32,
                         para8: Lpglyphmetricsfloat): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglUseFontOutlinesA".}
proc wglUseFontBitmapsA*(para1: Hdc, para2: Dword, para3: Dword, para4: Dword): Winbool{.
    stdcall, dynlib: "opengl32", importc: "wglUseFontBitmapsA".}
proc wglUseFontOutlinesA*(para1: Hdc, para2: Dword, para3: Dword, para4: Dword,
                          para5: Float32, para6: Float32, para7: Int32,
                          para8: Lpglyphmetricsfloat): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglUseFontOutlinesA".}
proc wglDescribeLayerPlane*(para1: Hdc, para2: Int32, para3: Int32, para4: Uint,
                            para5: Lplayerplanedescriptor): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglDescribeLayerPlane".}
proc wglGetLayerPaletteEntries*(para1: Hdc, para2: Int32, para3: Int32,
                                para4: Int32, para5: var Colorref): Int32{.
    stdcall, dynlib: "opengl32", importc: "wglGetLayerPaletteEntries".}
proc wglGetProcAddress*(para1: Lpcstr): TProc{.stdcall, dynlib: "opengl32",
    importc: "wglGetProcAddress".}
proc wglRealizeLayerPalette*(para1: Hdc, para2: Int32, para3: Winbool): Winbool{.
    stdcall, dynlib: "opengl32", importc: "wglRealizeLayerPalette".}
proc wglSetLayerPaletteEntries*(para1: Hdc, para2: Int32, para3: Int32,
                                para4: Int32, para5: var Colorref): Int32{.
    stdcall, dynlib: "opengl32", importc: "wglSetLayerPaletteEntries".}
proc wglSwapLayerBuffers*(para1: Hdc, para2: Uint): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglSwapLayerBuffers".}
proc wglUseFontOutlinesW*(para1: Hdc, para2: Dword, para3: Dword, para4: Dword,
                          para5: Float32, para6: Float32, para7: Int32,
                          para8: Lpglyphmetricsfloat): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglUseFontOutlinesW".}
  # translated macros
proc animateCreate*(hWndP: Hwnd, id: Hmenu, dwStyle: Dword, hInstance: Hinst): Hwnd
proc animateOpen*(wnd: Hwnd, szName: Lptstr): Lresult
proc animatePlay*(wnd: Hwnd, `from`, `to`: Int32, rep: Uint): Lresult

proc animateStop*(wnd: Hwnd): Lresult
proc animateClose*(wnd: Hwnd): Lresult
proc animateSeek*(wnd: Hwnd, frame: Int32): Lresult
proc propSheetAddPage*(hPropSheetDlg: Hwnd, hpage: Hpropsheetpage): Lresult
proc propSheetApply*(hPropSheetDlg: Hwnd): Lresult
proc propSheetCancelToClose*(hPropSheetDlg: Hwnd): Lresult
proc propSheetChanged*(hPropSheetDlg, hwndPage: Hwnd): Lresult
proc propSheetGetCurrentPageHwnd*(hDlg: Hwnd): Lresult
proc propSheetGetTabControl*(hPropSheetDlg: Hwnd): Lresult
proc propSheetIsDialogMessage*(hDlg: Hwnd, pMsg: Int32): Lresult
proc propSheetPressButton*(hPropSheetDlg: Hwnd, iButton: Int32): Lresult
proc propSheetQuerySiblings*(hPropSheetDlg: Hwnd, param1, param2: Int32): Lresult
proc propSheetRebootSystem*(hPropSheetDlg: Hwnd): Lresult
proc propSheetRemovePage*(hPropSheetDlg: Hwnd, hpage: Hpropsheetpage,
                           index: Int32): Lresult
proc propSheetRestartWindows*(hPropSheetDlg: Hwnd): Lresult
proc propSheetSetCurSel*(hPropSheetDlg: Hwnd, hpage: Hpropsheetpage,
                          index: Int32): Lresult
proc propSheetSetCurSelByID*(hPropSheetDlg: Hwnd, id: Int32): Lresult
proc propSheetSetFinishText*(hPropSheetDlg: Hwnd, lpszText: Lptstr): Lresult
proc propSheetSetTitle*(hPropSheetDlg: Hwnd, dwStyle: Dword, lpszText: Lpctstr): Lresult
proc propSheetSetWizButtons*(hPropSheetDlg: Hwnd, dwFlags: Dword): Lresult
proc propSheetUnChanged*(hPropSheetDlg: Hwnd, hwndPage: Hwnd): Lresult
proc headerDeleteItem*(hwndHD: Hwnd, index: Int32): Winbool
proc headerGetItem*(hwndHD: Hwnd, index: Int32, hdi: var HdItem): Winbool
proc headerGetItemCount*(hwndHD: Hwnd): Int32
proc headerInsertItem*(hwndHD: Hwnd, index: Int32, hdi: var HdItem): Int32
proc headerLayout*(hwndHD: Hwnd, layout: var HdLayout): Winbool
proc headerSetItem*(hwndHD: Hwnd, index: Int32, hdi: var HdItem): Winbool
proc listViewArrange*(hwndLV: Hwnd, code: Uint): Lresult
proc listViewCreateDragImage*(wnd: Hwnd, i: Int32, lpptUpLeft: Lppoint): Lresult
proc listViewDeleteAllItems*(wnd: Hwnd): Lresult
proc listViewDeleteColumn*(wnd: Hwnd, iCol: Int32): Lresult
proc listViewDeleteItem*(wnd: Hwnd, iItem: Int32): Lresult
proc listViewEditLabel*(hwndLV: Hwnd, i: Int32): Lresult
proc listViewEnsureVisible*(hwndLV: Hwnd, i, fPartialOK: Int32): Lresult
proc listViewFindItem*(wnd: Hwnd, iStart: Int32, lvfi: var LvFindinfo): Int32
proc listViewGetBkColor*(wnd: Hwnd): Lresult
proc listViewGetCallbackMask*(wnd: Hwnd): Lresult
proc listViewGetColumn*(wnd: Hwnd, iCol: Int32, col: var LvColumn): Lresult
proc listViewGetColumnWidth*(wnd: Hwnd, iCol: Int32): Lresult
proc listViewGetCountPerPage*(hwndLV: Hwnd): Lresult
proc listViewGetEditControl*(hwndLV: Hwnd): Lresult
proc listViewGetImageList*(wnd: Hwnd, iImageList: Wint): Lresult
proc listViewGetISearchString*(hwndLV: Hwnd, lpsz: Lptstr): Lresult
proc listViewGetItem*(wnd: Hwnd, item: var LvItem): Lresult
proc listViewGetItemCount*(wnd: Hwnd): Lresult
proc listViewGetItemPosition*(hwndLV: Hwnd, i: Int32, pt: var Point): Int32
proc listViewGetItemSpacing*(hwndLV: Hwnd, fSmall: Int32): Lresult
proc listViewGetItemState*(hwndLV: Hwnd, i, mask: Int32): Lresult
proc listViewGetNextItem*(wnd: Hwnd, iStart, flags: Int32): Lresult
proc listViewGetOrigin*(hwndLV: Hwnd, pt: var Point): Lresult
proc listViewGetSelectedCount*(hwndLV: Hwnd): Lresult
proc listViewGetStringWidth*(hwndLV: Hwnd, psz: Lpctstr): Lresult
proc listViewGetTextBkColor*(wnd: Hwnd): Lresult
proc listViewGetTextColor*(wnd: Hwnd): Lresult
proc listViewGetTopIndex*(hwndLV: Hwnd): Lresult
proc listViewGetViewRect*(wnd: Hwnd, rc: var Rect): Lresult
proc listViewHitTest*(hwndLV: Hwnd, info: var LvHittestinfo): Lresult
proc listViewInsertColumn*(wnd: Hwnd, iCol: Int32, col: var LvColumn): Lresult
proc listViewInsertItem*(wnd: Hwnd, item: var LvItem): Lresult
proc listViewRedrawItems*(hwndLV: Hwnd, iFirst, iLast: Int32): Lresult
proc listViewScroll*(hwndLV: Hwnd, dx, dy: Int32): Lresult
proc listViewSetBkColor*(wnd: Hwnd, clrBk: Colorref): Lresult
proc listViewSetCallbackMask*(wnd: Hwnd, mask: Uint): Lresult
proc listViewSetColumn*(wnd: Hwnd, iCol: Int32, col: var LvColumn): Lresult
proc listViewSetColumnWidth*(wnd: Hwnd, iCol, cx: Int32): Lresult
proc listViewSetImageList*(wnd: Hwnd, himl: Int32, iImageList: Himagelist): Lresult
proc listViewSetItem*(wnd: Hwnd, item: var LvItem): Lresult
proc listViewSetItemCount*(hwndLV: Hwnd, cItems: Int32): Lresult
proc listViewSetItemPosition*(hwndLV: Hwnd, i, x, y: Int32): Lresult
proc listViewSetItemPosition32*(hwndLV: Hwnd, i, x, y: Int32): Lresult
proc listViewSetItemState*(hwndLV: Hwnd, i, data, mask: Int32): Lresult
proc listViewSetItemText*(hwndLV: Hwnd, i, iSubItem: Int32, pszText: Lptstr): Lresult
proc listViewSetTextBkColor*(wnd: Hwnd, clrTextBk: Colorref): Lresult
proc listViewSetTextColor*(wnd: Hwnd, clrText: Colorref): Lresult
proc listViewSortItems*(hwndLV: Hwnd, pfnCompare: Pfnlvcompare, lPrm: Lparam): Lresult
proc listViewUpdate*(hwndLV: Hwnd, i: Int32): Lresult
proc treeViewInsertItem*(wnd: Hwnd, lpis: LptvInsertstruct): Lresult
proc treeViewDeleteItem*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewDeleteAllItems*(wnd: Hwnd): Lresult
proc treeViewExpand*(wnd: Hwnd, hitem: Htreeitem, code: Int32): Lresult
proc treeViewGetCount*(wnd: Hwnd): Lresult
proc treeViewGetIndent*(wnd: Hwnd): Lresult
proc treeViewSetIndent*(wnd: Hwnd, indent: Int32): Lresult
proc treeViewGetImageList*(wnd: Hwnd, iImage: Wparam): Lresult
proc treeViewSetImageList*(wnd: Hwnd, himl: Himagelist, iImage: Wparam): Lresult
proc treeViewGetNextItem*(wnd: Hwnd, hitem: Htreeitem, code: Int32): Lresult
proc treeViewGetChild*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewGetNextSibling*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewGetPrevSibling*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewGetParent*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewGetFirstVisible*(wnd: Hwnd): Lresult
proc treeViewGetNextVisible*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewGetPrevVisible*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewGetSelection*(wnd: Hwnd): Lresult
proc treeViewGetDropHilight*(wnd: Hwnd): Lresult
proc treeViewGetRoot*(wnd: Hwnd): Lresult
proc treeViewSelect*(wnd: Hwnd, hitem: Htreeitem, code: Int32): Lresult
proc treeViewSelectItem*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewSelectDropTarget*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewSelectSetFirstVisible*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewGetItem*(wnd: Hwnd, item: var TV_ITEM): Lresult
proc treeViewSetItem*(wnd: Hwnd, item: var TV_ITEM): Lresult
proc treeViewEditLabel*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewGetEditControl*(wnd: Hwnd): Lresult
proc treeViewGetVisibleCount*(wnd: Hwnd): Lresult
proc treeViewHitTest*(wnd: Hwnd, lpht: LptvHittestinfo): Lresult
proc treeViewCreateDragImage*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewSortChildren*(wnd: Hwnd, hitem: Htreeitem, recurse: Int32): Lresult
proc treeViewEnsureVisible*(wnd: Hwnd, hitem: Htreeitem): Lresult
proc treeViewSortChildrenCB*(wnd: Hwnd, psort: LptvSortcb, recurse: Int32): Lresult
proc treeViewEndEditLabelNow*(wnd: Hwnd, fCancel: Int32): Lresult
proc treeViewGetISearchString*(hwndTV: Hwnd, lpsz: Lptstr): Lresult
proc tabCtrlGetImageList*(wnd: Hwnd): Lresult
proc tabCtrlSetImageList*(wnd: Hwnd, himl: Himagelist): Lresult
proc tabCtrlGetItemCount*(wnd: Hwnd): Lresult
proc tabCtrlGetItem*(wnd: Hwnd, iItem: Int32, item: var TC_ITEM): Lresult
proc tabCtrlSetItem*(wnd: Hwnd, iItem: Int32, item: var TC_ITEM): Lresult

proc tabCtrlInsertItem*(wnd: Hwnd, iItem: Int32, item: var TC_ITEM): Lresult
proc tabCtrlDeleteItem*(wnd: Hwnd, i: Int32): Lresult
proc tabCtrlDeleteAllItems*(wnd: Hwnd): Lresult
proc tabCtrlGetItemRect*(wnd: Hwnd, i: Int32, rc: var Rect): Lresult
proc tabCtrlGetCurSel*(wnd: Hwnd): Lresult
proc tabCtrlSetCurSel*(wnd: Hwnd, i: Int32): Lresult
proc tabCtrlHitTest*(hwndTC: Hwnd, info: var TC_HITTESTINFO): Lresult
proc tabCtrlSetItemExtra*(hwndTC: Hwnd, cb: Int32): Lresult
proc tabCtrlAdjustRect*(wnd: Hwnd, bLarger: Winbool, rc: var Rect): Lresult
proc tabCtrlSetItemSize*(wnd: Hwnd, x, y: Int32): Lresult
proc tabCtrlRemoveImage*(wnd: Hwnd, i: Wparam): Lresult
proc tabCtrlSetPadding*(wnd: Hwnd, cx, cy: Int32): Lresult
proc tabCtrlGetRowCount*(wnd: Hwnd): Lresult
proc tabCtrlGetToolTips*(wnd: Hwnd): Lresult
proc tabCtrlSetToolTips*(wnd: Hwnd, hwndTT: Int32): Lresult
proc tabCtrlGetCurFocus*(wnd: Hwnd): Lresult
proc tabCtrlSetCurFocus*(wnd: Hwnd, i: Int32): Lresult
proc sndmsg*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam): Lresult
proc commDlgOpenSaveGetSpecA*(hdlg: Hwnd, psz: Lpstr, cbmax: Int32): Lresult
proc commDlgOpenSaveGetSpecW*(hdlg: Hwnd, psz: Lpwstr, cbmax: Int32): Lresult
when defined(winUnicode):
  proc CommDlg_OpenSave_GetSpec*(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT
else:
  proc commDlgOpenSaveGetSpec*(hdlg: Hwnd, psz: Lpstr, cbmax: Int32): Lresult
proc commDlgOpenSaveGetFilePathA*(hdlg: Hwnd, psz: Lpstr, cbmax: Int32): Lresult
proc commDlgOpenSaveGetFilePathW*(hdlg: Hwnd, psz: Lpwstr, cbmax: Int32): Lresult
when defined(winUnicode):
  proc CommDlg_OpenSave_GetFilePath*(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT
else:
  proc commDlgOpenSaveGetFilePath*(hdlg: Hwnd, psz: Lpstr, cbmax: Int32): Lresult
proc commDlgOpenSaveGetFolderPathA*(hdlg: Hwnd, psz: Lpstr, cbmax: Int32): Lresult
proc commDlgOpenSaveGetFolderPathW*(hdlg: Hwnd, psz: Lpwstr, cbmax: Int32): Lresult
when defined(winUnicode):
  proc CommDlg_OpenSave_GetFolderPath*(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT
else:
  proc commDlgOpenSaveGetFolderPath*(hdlg: Hwnd, psz: Lpstr, cbmax: Int32): Lresult
proc commDlgOpenSaveGetFolderIDList*(hdlg: Hwnd, pidl: Lpvoid, cbmax: Int32): Lresult
proc commDlgOpenSaveSetControlText*(hdlg: Hwnd, id: Int32, text: Lpstr): Lresult
proc commDlgOpenSaveHideControl*(hdlg: Hwnd, id: Int32): Lresult
proc commDlgOpenSaveSetDefExt*(hdlg: Hwnd, pszext: Lpstr): Lresult
proc getNextWindow*(wnd: Hwnd, uCmd: Uint): Hwnd{.stdcall, dynlib: "user32",
    importc: "GetWindow".}
proc globalAllocPtr*(flags, cb: Dword): Pointer
proc globalFreePtr*(lp: Pointer): Pointer
proc globalUnlockPtr*(lp: Pointer): Pointer
proc globalLockPtr*(lp: Pointer): Pointer
proc globalReAllocPtr*(lp: Pointer, cbNew, flags: Dword): Pointer
proc globalPtrHandle*(lp: Pointer): Pointer
proc setLayeredWindowAttributes*(HWND: Hwnd, crKey: Colorref, bAlpha: Int8,
                                 dwFlags: Dword): Winbool{.stdcall,
    dynlib: "user32", importc: "SetLayeredWindowAttributes".}
type
  Piid* = Pguid
  TIID* = TGUID
  TFNDlgProc* = Farproc
  TFNThreadStartRoutine* = Farproc
  TFNTimerAPCRoutine* = Farproc
  TFNFiberStartRoutine* = Farproc
  TFNHookProc* = Hookproc
  PObjectTypeList* = ptr TObjectTypeList
  ObjectTypeList* {.final, pure.} = object
    Level*: Int16
    Sbz*: Int16
    ObjectType*: Pguid

  TObjectTypeList* = ObjectTypeList
  AuditEventType* = Dword
  PBlendFunction* = ptr TBlendFunction
  Blendfunction* {.final, pure.} = object
    BlendOp*: Int8
    BlendFlags*: Int8
    SourceConstantAlpha*: Int8
    AlphaFormat*: Int8

  TBlendFunction* = Blendfunction
  WinCertificate* {.final, pure.} = object
    dwLength*: Dword
    wRevision*: Int16
    wCertificateType*: Int16
    bCertificate*: Array[0..0, Int8]

  TWinCertificate* = WinCertificate
  PWinCertificate* = ptr TWinCertificate
  TMaxLogPalette* {.final, pure.} = object
    palVersion*: Int16
    palNumEntries*: Int16
    palPalEntry*: Array[int8, TPaletteEntry]

  PMaxLogPalette* = ptr TMaxLogPalette
  POSVersionInfoA* = Posversioninfo
  TBitmapFileHeader* = Bitmapfileheader
  PBitmapFileHeader* = ptr TBitmapFileHeader

const
  # dll names
  advapi32* = "advapi32.dll"
  kernel32* = "kernel32.dll"
  mpr* = "mpr.dll"
  version* = "version.dll"
  comctl32* = "comctl32.dll"
  gdi32* = "gdi32.dll"
  opengl32* = "opengl32.dll"
  user32* = "user32.dll"
  wintrust* = "wintrust.dll"
  # Openfile Share modes normally declared in sysutils
  fmShareCompat* = 0x00000000
  fmShareExclusive* = 0x00000010
  fmShareDenyWrite* = 0x00000020
  fmShareDenyRead* = 0x00000030
  fmShareDenyNone* = 0x00000040
  # HRESULT codes, delphilike
  SifTrackpos* = 0x00000010
  Htborder* = 18
  CpUtf7* = 65000
  CpUtf8* = 65001
  CreateNoWindow* = 0x08000000
  VkAttn* = 246
  VkCrsel* = 247
  VkExsel* = 248
  VkEreof* = 249
  VkPlay* = 250
  VkZoom* = 251
  VkNoname* = 252
  VkPa1* = 253
  VkOemClear* = 254

const                         # Severity values
  FacilityNtBit* = 0x10000000

                            #  A language ID is a 16 bit value which is the combination of a
                            #  primary language ID and a secondary language ID.  The bits are
                            #  allocated as follows:
                            #
                            #       +-----------------------+-------------------------+
                            #       |     Sublanguage ID    |   Primary Language ID   |
                            #       +-----------------------+-------------------------+
                            #        15                   10 9                       0   bit
                            #
                            #
                            #  Language ID creation/extraction macros:
                            #
                            #    MAKELANGID    - construct language id from a primary language id and
                            #                    a sublanguage id.
                            #    PRIMARYLANGID - extract primary language id from a language id.
                            #    SUBLANGID     - extract sublanguage id from a language id.
                            #
proc makelangid*(PrimaryLang, SubLang: Ushort): Int16
proc primarylangid*(LangId: Int16): Int16
proc sublangid*(LangId: Int16): Int16

  #
  #  A locale ID is a 32 bit value which is the combination of a
  #  language ID, a sort ID, and a reserved area.  The bits are
  #  allocated as follows:
  #
  #       +-------------+---------+-------------------------+
  #       |   Reserved  | Sort ID |      Language ID        |
  #       +-------------+---------+-------------------------+
  #        31         20 19     16 15                      0   bit
  #
  #
  #  Locale ID creation/extraction macros:
  #
  #    MAKELCID            - construct the locale id from a language id and a sort id.
  #    MAKESORTLCID        - construct the locale id from a language id, sort id, and sort version.
  #    LANGIDFROMLCID      - extract the language id from a locale id.
  #    SORTIDFROMLCID      - extract the sort id from a locale id.
  #    SORTVERSIONFROMLCID - extract the sort version from a locale id.
  #
const
  NlsValidLocaleMask* = 0x000FFFFF

proc makelcid*(LangId, SortId: Int16): Dword
proc makesortlcid*(LangId, SortId, SortVersion: Int16): Dword
proc langidfromlcid*(LocaleId: Lcid): Int16
proc sortidfromlcid*(LocaleId: Lcid): Int16
proc sortversionfromlcid*(LocaleId: Lcid): Int16

  #
  #  Default System and User IDs for language and locale.
  #
proc langSystemDefault*(): Int16
proc langUserDefault*(): Int16
proc localeNeutral*(): Dword
proc localeInvariant*(): Dword
proc succeeded*(Status: Hresult): Winbool
proc failed*(Status: Hresult): Winbool
proc isError*(Status: Hresult): Winbool
proc hResultCode*(hr: Hresult): Int32
proc hResultFacility*(hr: Hresult): Int32
proc hResultSeverity*(hr: Hresult): Int32
proc makeResult*(p1, p2, mask: Int32): Hresult
proc hResultFromWin32*(x: Int32): Hresult
proc hResultFromNT*(x: Int32): Hresult
proc initializeCriticalSection*(CriticalSection: var TRTLCriticalSection){.
    stdcall, dynlib: "kernel32", importc: "InitializeCriticalSection".}
proc enterCriticalSection*(CriticalSection: var TRTLCriticalSection){.stdcall,
    dynlib: "kernel32", importc: "EnterCriticalSection".}
proc leaveCriticalSection*(CriticalSection: var TRTLCriticalSection){.stdcall,
    dynlib: "kernel32", importc: "LeaveCriticalSection".}
proc deleteCriticalSection*(CriticalSection: var TRTLCriticalSection){.stdcall,
    dynlib: "kernel32", importc: "DeleteCriticalSection".}
proc initializeCriticalSectionAndSpinCount*(
    CriticalSection: var TRTLCriticalSection, dwSpinCount: Dword): Winbool{.
    stdcall, dynlib: "kernel32",
    importc: "InitializeCriticalSectionAndSpinCount".}
proc setCriticalSectionSpinCount*(CriticalSection: var TRTLCriticalSection,
                                  dwSpinCount: Dword): Dword{.stdcall,
    dynlib: "kernel32", importc: "SetCriticalSectionSpinCount".}
proc tryEnterCriticalSection*(CriticalSection: var TRTLCriticalSection): Winbool{.
    stdcall, dynlib: "kernel32", importc: "TryEnterCriticalSection".}
proc controlService*(hService: ScHandle, dwControl: Dword,
                     ServiceStatus: var TSERVICESTATUS): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ControlService".}
proc queryServiceStatus*(hService: ScHandle,
                         lpServiceStatus: var TSERVICESTATUS): Winbool{.stdcall,
    dynlib: "advapi32", importc: "QueryServiceStatus".}
proc setServiceStatus*(hServiceStatus: ServiceStatusHandle,
                       ServiceStatus: TSERVICESTATUS): Winbool{.stdcall,
    dynlib: "advapi32", importc: "SetServiceStatus".}
proc adjustTokenPrivileges*(TokenHandle: THandle, DisableAllPrivileges: Winbool,
                            NewState: TTokenPrivileges, BufferLength: Dword,
                            PreviousState: var TTokenPrivileges,
                            ReturnLength: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AdjustTokenPrivileges".}
proc adjustWindowRect*(lpRect: var TRect, dwStyle: Dword, bMenu: Winbool): Winbool{.
    stdcall, dynlib: "user32", importc: "AdjustWindowRect".}
proc adjustWindowRectEx*(lpRect: var TRect, dwStyle: Dword, bMenu: Winbool,
                         dwExStyle: Dword): Winbool{.stdcall, dynlib: "user32",
    importc: "AdjustWindowRectEx".}
proc allocateAndInitializeSid*(pIdentifierAuthority: TSIDIdentifierAuthority,
                               nSubAuthorityCount: Int8,
                               nSubAuthority0, nSubAuthority1: Dword,
    nSubAuthority2, nSubAuthority3, nSubAuthority4: Dword, nSubAuthority5,
    nSubAuthority6, nSubAuthority7: Dword, pSid: var Pointer): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AllocateAndInitializeSid".}
proc allocateLocallyUniqueId*(Luid: var TLargeInteger): Winbool{.stdcall,
    dynlib: "advapi32", importc: "AllocateLocallyUniqueId".}
proc backupRead*(hFile: THandle, lpBuffer: Pbyte, nNumberOfBytesToRead: Dword,
                 lpNumberOfBytesRead: var Dword, bAbort: Winbool,
                 bProcessSecurity: Winbool, lpContext: var Pointer): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BackupRead".}
proc backupSeek*(hFile: THandle, dwLowBytesToSeek, dwHighBytesToSeek: Dword,
                 lpdwLowByteSeeked, lpdwHighByteSeeked: var Dword,
                 lpContext: Pointer): Winbool{.stdcall, dynlib: "kernel32",
    importc: "BackupSeek".}
proc backupWrite*(hFile: THandle, lpBuffer: Pbyte, nNumberOfBytesToWrite: Dword,
                  lpNumberOfBytesWritten: var Dword,
                  bAbort, bProcessSecurity: Winbool, lpContext: var Pointer): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BackupWrite".}
proc beginPaint*(wnd: Hwnd, lpPaint: var TPaintStruct): Hdc{.stdcall,
    dynlib: "user32", importc: "BeginPaint".}
proc buildCommDCB*(lpDef: Cstring, lpDCB: var TDCB): Winbool{.stdcall,
    dynlib: "kernel32", importc: "BuildCommDCBA".}
proc buildCommDCBA*(lpDef: Lpcstr, lpDCB: var TDCB): Winbool{.stdcall,
    dynlib: "kernel32", importc: "BuildCommDCBA".}
proc buildCommDCBAndTimeouts*(lpDef: Cstring, lpDCB: var TDCB,
                              lpCommTimeouts: var TCommTimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsA".}
proc buildCommDCBAndTimeoutsA*(lpDef: Lpcstr, lpDCB: var TDCB,
                               lpCommTimeouts: var TCommTimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsA".}
proc buildCommDCBAndTimeoutsW*(lpDef: Lpwstr, lpDCB: var TDCB,
                               lpCommTimeouts: var TCommTimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsW".}
proc buildCommDCBW*(lpDef: Lpwstr, lpDCB: var TDCB): Winbool{.stdcall,
    dynlib: "kernel32", importc: "BuildCommDCBW".}
proc callMsgFilter*(lpMsg: var TMsg, nCode: Int): Winbool{.stdcall,
    dynlib: "user32", importc: "CallMsgFilterA".}
proc callMsgFilterA*(lpMsg: var TMsg, nCode: Int): Winbool{.stdcall,
    dynlib: "user32", importc: "CallMsgFilterA".}
proc callMsgFilterW*(lpMsg: var TMsg, nCode: Int): Winbool{.stdcall,
    dynlib: "user32", importc: "CallMsgFilterW".}
proc callNamedPipe*(lpNamedPipeName: Cstring, lpInBuffer: Pointer,
                    nInBufferSize: Dword, lpOutBuffer: Pointer,
                    nOutBufferSize: Dword, lpBytesRead: var Dword,
                    nTimeOut: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "CallNamedPipeA".}
proc callNamedPipeA*(lpNamedPipeName: Lpcstr, lpInBuffer: Pointer,
                     nInBufferSize: Dword, lpOutBuffer: Pointer,
                     nOutBufferSize: Dword, lpBytesRead: var Dword,
                     nTimeOut: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "CallNamedPipeA".}
proc callNamedPipeW*(lpNamedPipeName: Lpwstr, lpInBuffer: Pointer,
                     nInBufferSize: Dword, lpOutBuffer: Pointer,
                     nOutBufferSize: Dword, lpBytesRead: var Dword,
                     nTimeOut: Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "CallNamedPipeW".}
proc coRegisterClassObject*(para1: TCLSID, para2: Pointer, para3: Dword,
                            para4: Dword, out_para5: Dword): Hresult{.stdcall,
    dynlib: "ole32.dll", importc: "CoRegisterClassObject".}
proc changeDisplaySettings*(lpDevMode: var Tdevicemode, dwFlags: Dword): Int32{.
    stdcall, dynlib: "user32", importc: "ChangeDisplaySettingsA".}
proc changeDisplaySettingsA*(lpDevMode: var TdevicemodeA, dwFlags: Dword): Int32{.
    stdcall, dynlib: "user32", importc: "ChangeDisplaySettingsA".}
proc changeDisplaySettingsEx*(lpszDeviceName: Cstring,
                              lpDevMode: var Tdevicemode, wnd: Hwnd,
                              dwFlags: Dword, lParam: Pointer): Int32{.stdcall,
    dynlib: "user32", importc: "ChangeDisplaySettingsExA".}
proc changeDisplaySettingsExA*(lpszDeviceName: Lpcstr,
                               lpDevMode: var TdevicemodeA, wnd: Hwnd,
                               dwFlags: Dword, lParam: Pointer): Int32{.stdcall,
    dynlib: "user32", importc: "ChangeDisplaySettingsExA".}
proc changeDisplaySettingsExW*(lpszDeviceName: Lpwstr,
                               lpDevMode: var TDeviceModeW, wnd: Hwnd,
                               dwFlags: Dword, lParam: Pointer): Int32{.stdcall,
    dynlib: "user32", importc: "ChangeDisplaySettingsExW".}
proc changeDisplaySettingsW*(lpDevMode: var TDeviceModeW, dwFlags: Dword): Int32{.
    stdcall, dynlib: "user32", importc: "ChangeDisplaySettingsW".}
  #function CheckColorsInGamut(DC: HDC; var RGBQuads, Results; Count: DWORD): WINBOOL; stdcall; external 'gdi32' name 'CheckColorsInGamut';
proc choosePixelFormat*(para1: Hdc, para2: var Pixelformatdescriptor): Int32{.
    stdcall, dynlib: "gdi32", importc: "ChoosePixelFormat".}
proc clearCommError*(hFile: THandle, lpErrors: var Dword, lpStat: Pcomstat): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ClearCommError".}
proc clientToScreen*(wnd: Hwnd, lpPoint: var TPoint): Winbool{.stdcall,
    dynlib: "user32", importc: "ClientToScreen".}
proc clipCursor*(lpRect: var Rect): Winbool{.stdcall, dynlib: "user32",
    importc: "ClipCursor".}
  #function CombineTransform(var p1: TXForm; const p2, p3: TXForm): WINBOOL; stdcall; external 'gdi32' name 'CombineTransform';
proc commConfigDialog*(lpszName: Cstring, wnd: Hwnd, lpCC: var TCommConfig): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CommConfigDialogA".}
proc commConfigDialogA*(lpszName: Lpcstr, wnd: Hwnd, lpCC: var TCommConfig): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CommConfigDialogA".}
proc commConfigDialogW*(lpszName: Lpwstr, wnd: Hwnd, lpCC: var TCommConfig): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CommConfigDialogW".}
  #function CompareFileTime(const lpFileTime1, lpFileTime2: TFileTime): Longint; stdcall; external 'kernel32' name 'CompareFileTime';
  #function ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor, CurrentSecurityDescriptor: PSecurityDescriptor; var NewDescriptor: PSecurityDescriptor; ObjectType: PGUID; IsDirectoryObject: WINBOOL; const GenericMapping: TGenericMapping): WINBOOL;
  #  stdcall; external 'advapi32' name 'ConvertToAutoInheritPrivateObjectSecurity';
proc copyAcceleratorTable*(hAccelSrc: Haccel, lpAccelDst: Pointer,
                           cAccelEntries: Int): Int{.stdcall, dynlib: "user32",
    importc: "CopyAcceleratorTableA".}
proc copyAcceleratorTableA*(hAccelSrc: Haccel, lpAccelDst: Pointer,
                            cAccelEntries: Int): Int{.stdcall, dynlib: "user32",
    importc: "CopyAcceleratorTableA".}
proc copyAcceleratorTableW*(hAccelSrc: Haccel, lpAccelDst: Pointer,
                            cAccelEntries: Int): Int{.stdcall, dynlib: "user32",
    importc: "CopyAcceleratorTableW".}
proc copyRect*(lprcDst: var TRect, lprcSrc: TRect): Winbool{.stdcall,
    dynlib: "user32", importc: "CopyRect".}
proc createAcceleratorTable*(Accel: Pointer, Count: Int): Haccel{.stdcall,
    dynlib: "user32", importc: "CreateAcceleratorTableA".}
proc createAcceleratorTableA*(Accel: Pointer, Count: Int): Haccel{.stdcall,
    dynlib: "user32", importc: "CreateAcceleratorTableA".}
proc createAcceleratorTableW*(Accel: Pointer, Count: Int): Haccel{.stdcall,
    dynlib: "user32", importc: "CreateAcceleratorTableW".}
  #function CreateBitmapIndirect(const p1: TBitmap): HBITMAP; stdcall; external 'gdi32' name 'CreateBitmapIndirect';
  #function CreateBrushIndirect(const p1: TLogBrush): HBRUSH; stdcall; external 'gdi32' name 'CreateBrushIndirect';
proc createColorSpace*(ColorSpace: var TLogColorSpace): Hcolorspace{.stdcall,
    dynlib: "gdi32", importc: "CreateColorSpaceA".}
proc createColorSpaceA*(ColorSpace: var TLogColorSpaceA): Hcolorspace{.stdcall,
    dynlib: "gdi32", importc: "CreateColorSpaceA".}
  #function CreateColorSpaceW(var ColorSpace: TLogColorSpaceW): HCOLORSPACE; stdcall; external 'gdi32' name 'CreateColorSpaceW';
proc createDialogIndirectParam*(hInstance: Hinst, lpTemplate: TDlgTemplate,
                                hWndParent: Hwnd, lpDialogFunc: TFNDlgProc,
                                dwInitParam: Lparam): Hwnd{.stdcall,
    dynlib: "user32", importc: "CreateDialogIndirectParamA".}
  #function CreateDialogIndirectParamA(hInstance: HINST; const lpTemplate: TDlgTemplate; hWndParent: HWND; lpDialogFunc: TFNDlgProc; dwInitParam: LPARAM): HWND; stdcall; external 'user32' name 'CreateDialogIndirectParamA';
  #function CreateDialogIndirectParamW(hInstance: HINST; const lpTemplate: TDlgTemplate; hWndParent: HWND; lpDialogFunc: TFNDlgProc; dwInitParam: LPARAM): HWND; stdcall; external 'user32' name 'CreateDialogIndirectParamW';
  #function CreateDIBitmap(DC: HDC; var InfoHeader: TBitmapInfoHeader; dwUsage: DWORD; InitBits: PChar; var InitInfo: TBitmapInfo; wUsage: UINT): HBITMAP; stdcall; external 'gdi32' name 'CreateDIBitmap';
  #function CreateDIBPatternBrushPt(const p1: Pointer; p2: UINT): HBRUSH; stdcall; external 'gdi32' name 'CreateDIBPatternBrushPt';
  #function CreateDIBSection(DC: HDC; const p2: TBitmapInfo; p3: UINT; var p4: Pointer; p5: THandle; p6: DWORD): HBITMAP; stdcall; external 'gdi32' name 'CreateDIBSection';
  #function CreateEllipticRgnIndirect(const p1: TRect): HRGN; stdcall; external 'gdi32' name 'CreateEllipticRgnIndirect';
  #function CreateFontIndirect(const p1: TLogFont): HFONT;stdcall; external 'gdi32' name 'CreateFontIndirectA';
  #function CreateFontIndirectA(const p1: TLogFontA): HFONT; stdcall; external 'gdi32' name 'CreateFontIndirectA';
  #function CreateFontIndirectEx(const p1: PEnumLogFontExDV): HFONT;stdcall; external 'gdi32' name 'CreateFontIndirectExA';
  #function CreateFontIndirectExA(const p1: PEnumLogFontExDVA): HFONT;stdcall; external 'gdi32' name 'CreateFontIndirectExA';
  #function CreateFontIndirectExW(const p1: PEnumLogFontExDVW): HFONT;stdcall; external 'gdi32' name 'CreateFontIndirectExW';
  #function CreateFontIndirectW(const p1: TLogFontW): HFONT; stdcall; external 'gdi32' name 'CreateFontIndirectW';
proc createIconIndirect*(piconinfo: var TIconInfo): Hicon{.stdcall,
    dynlib: "user32", importc: "CreateIconIndirect".}
  #function CreatePalette(const LogPalette: TLogPalette): HPalette; stdcall; external 'gdi32' name 'CreatePalette';
  #function CreatePenIndirect(const LogPen: TLogPen): HPEN; stdcall; external 'gdi32' name 'CreatePenIndirect';
proc createPipe*(hReadPipe, hWritePipe: var THandle,
                 lpPipeAttributes: Psecurityattributes, nSize: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreatePipe".}
proc createPolygonRgn*(Points: Pointer, Count, FillMode: Int): Hrgn{.stdcall,
    dynlib: "gdi32", importc: "CreatePolygonRgn".}
proc createPolyPolygonRgn*(pPtStructs: Pointer, pIntArray: Pointer, p3, p4: Int): Hrgn{.
    stdcall, dynlib: "gdi32", importc: "CreatePolyPolygonRgn".}
  #function CreatePrivateObjectSecurity(ParentDescriptor, CreatorDescriptor: PSecurityDescriptor; var NewDescriptor: PSecurityDescriptor; IsDirectoryObject: WINBOOL; Token: THandle; const GenericMapping: TGenericMapping): WINBOOL;
  #  stdcall; external 'advapi32' name 'CreatePrivateObjectSecurity';
  #function CreatePrivateObjectSecurityEx(ParentDescriptor, CreatorDescriptor: PSecurityDescriptor; var NewDescriptor: PSecurityDescriptor; ObjectType: PGUID; IsContainerObject: WINBOOL; AutoInheritFlags: ULONG; Token: THandle;
  #  const GenericMapping: TGenericMapping): WINBOOL;stdcall; external 'advapi32' name 'CreatePrivateObjectSecurityEx';
proc createProcess*(lpApplicationName: Cstring, lpCommandLine: Cstring,
    lpProcessAttributes, lpThreadAttributes: Psecurityattributes,
                    bInheritHandles: Winbool, dwCreationFlags: Dword,
                    lpEnvironment: Pointer, lpCurrentDirectory: Cstring,
                    lpStartupInfo: TStartupInfo,
                    lpProcessInformation: var TProcessInformation): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateProcessA".}
proc createProcessA*(lpApplicationName: Lpcstr, lpCommandLine: Lpcstr,
    lpProcessAttributes, lpThreadAttributes: Psecurityattributes,
                     bInheritHandles: Winbool, dwCreationFlags: Dword,
                     lpEnvironment: Pointer, lpCurrentDirectory: Lpcstr,
                     lpStartupInfo: TStartupInfo,
                     lpProcessInformation: var TProcessInformation): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateProcessA".}
  #function CreateProcessAsUser(hToken: THandle; lpApplicationName: PChar; lpCommandLine: PChar; lpProcessAttributes: PSecurityAttributes; lpThreadAttributes: PSecurityAttributes; bInheritHandles: WINBOOL; dwCreationFlags: DWORD;
  # lpEnvironment: Pointer; lpCurrentDirectory: PChar; const lpStartupInfo: TStartupInfo; var lpProcessInformation: TProcessInformation): WINBOOL;stdcall; external 'advapi32' name 'CreateProcessAsUserA';
  #function CreateProcessAsUserA(hToken: THandle; lpApplicationName: LPCSTR; lpCommandLine: LPCSTR; lpProcessAttributes: PSecurityAttributes; lpThreadAttributes: PSecurityAttributes; bInheritHandles: WINBOOL; dwCreationFlags: DWORD;
  #  lpEnvironment: Pointer; lpCurrentDirectory: LPCSTR; const lpStartupInfo: TStartupInfo; var lpProcessInformation: TProcessInformation): WINBOOL; stdcall; external 'advapi32' name 'CreateProcessAsUserA';
  #function CreateProcessAsUserW(hToken: THandle; lpApplicationName: LPWSTR; lpCommandLine: LPWSTR; lpProcessAttributes: PSecurityAttributes; lpThreadAttributes: PSecurityAttributes; bInheritHandles: WINBOOL; dwCreationFlags: DWORD;
  #  lpEnvironment: Pointer; lpCurrentDirectory: LPWSTR; const lpStartupInfo: TStartupInfo; var lpProcessInformation: TProcessInformation): WINBOOL; stdcall; external 'advapi32' name 'CreateProcessAsUserW';
proc createProcessW*(lpApplicationName: Lpwstr, lpCommandLine: Lpwstr,
    lpProcessAttributes, lpThreadAttributes: Psecurityattributes,
                     bInheritHandles: Winbool, dwCreationFlags: Dword,
                     lpEnvironment: Pointer, lpCurrentDirectory: Lpwstr,
                     lpStartupInfo: TStartupInfo,
                     lpProcessInformation: var TProcessInformation): Winbool{.
    stdcall, dynlib: "kernel32", importc: "CreateProcessW".}
  #function CreateRectRgnIndirect(const p1: TRect): HRGN; stdcall; external 'gdi32' name 'CreateRectRgnIndirect';
proc createRemoteThread*(hProcess: THandle, lpThreadAttributes: Pointer,
                         dwStackSize: Dword,
                         lpStartAddress: TFNThreadStartRoutine,
                         lpParameter: Pointer, dwCreationFlags: Dword,
                         lpThreadId: var Dword): THandle{.stdcall,
    dynlib: "kernel32", importc: "CreateRemoteThread".}
proc createThread*(lpThreadAttributes: Pointer, dwStackSize: Dword,
                   lpStartAddress: TFNThreadStartRoutine, lpParameter: Pointer,
                   dwCreationFlags: Dword, lpThreadId: var Dword): THandle{.
    stdcall, dynlib: "kernel32", importc: "CreateThread".}
proc ddeSetQualityOfService*(hWndClient: Hwnd,
                             pqosNew: TSecurityQualityOfService,
                             pqosPrev: PsecurityQualityOfService): Winbool{.
    stdcall, dynlib: "user32", importc: "DdeSetQualityOfService".}
  #function DeleteAce(var pAcl: TACL; dwAceIndex: DWORD): WINBOOL; stdcall; external 'advapi32' name 'DeleteAce';
proc describePixelFormat*(DC: Hdc, p2: Int, p3: Uint,
                          p4: var TPixelFormatDescriptor): Winbool{.stdcall,
    dynlib: "gdi32", importc: "DescribePixelFormat".}
  #function DestroyPrivateObjectSecurity(var ObjectDescriptor: PSecurityDescriptor): WINBOOL; stdcall; external 'advapi32' name 'DestroyPrivateObjectSecurity';
proc deviceIoControl*(hDevice: THandle, dwIoControlCode: Dword,
                      lpInBuffer: Pointer, nInBufferSize: Dword,
                      lpOutBuffer: Pointer, nOutBufferSize: Dword,
                      lpBytesReturned: var Dword, lpOverlapped: Poverlapped): Winbool{.
    stdcall, dynlib: "kernel32", importc: "DeviceIoControl".}
proc dialogBoxIndirectParam*(hInstance: Hinst, lpDialogTemplate: TDlgTemplate,
                             hWndParent: Hwnd, lpDialogFunc: TFNDlgProc,
                             dwInitParam: Lparam): Int{.stdcall,
    dynlib: "user32", importc: "DialogBoxIndirectParamA".}
proc dialogBoxIndirectParamA*(hInstance: Hinst, lpDialogTemplate: TDlgTemplate,
                              hWndParent: Hwnd, lpDialogFunc: TFNDlgProc,
                              dwInitParam: Lparam): Int{.stdcall,
    dynlib: "user32", importc: "DialogBoxIndirectParamA".}
proc dialogBoxIndirectParamW*(hInstance: Hinst, lpDialogTemplate: TDlgTemplate,
                              hWndParent: Hwnd, lpDialogFunc: TFNDlgProc,
                              dwInitParam: Lparam): Int{.stdcall,
    dynlib: "user32", importc: "DialogBoxIndirectParamW".}
proc dispatchMessage*(lpMsg: TMsg): Int32{.stdcall, dynlib: "user32",
    importc: "DispatchMessageA".}
proc dispatchMessageA*(lpMsg: TMsg): Int32{.stdcall, dynlib: "user32",
    importc: "DispatchMessageA".}
proc dispatchMessageW*(lpMsg: TMsg): Int32{.stdcall, dynlib: "user32",
    importc: "DispatchMessageW".}
proc dosDateTimeToFileTime*(wFatDate, wFatTime: Int16, lpFileTime: var TFileTime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "DosDateTimeToFileTime".}
proc dPtoLP*(DC: Hdc, Points: Pointer, Count: Int): Winbool{.stdcall,
    dynlib: "gdi32", importc: "DPtoLP".}
  # function DrawAnimatedRects(wnd: HWND; idAni: Integer; const lprcFrom, lprcTo: TRect): WINBOOL; stdcall; external 'user32' name 'DrawAnimatedRects';
  #function DrawCaption(p1: HWND; p2: HDC; const p3: TRect; p4: UINT): WINBOOL; stdcall; external 'user32' name 'DrawCaption';
proc drawEdge*(hdc: Hdc, qrc: var TRect, edge: Uint, grfFlags: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "DrawEdge".}
  #function DrawFocusRect(hDC: HDC; const lprc: TRect): WINBOOL; stdcall; external 'user32' name 'DrawFocusRect';
proc drawFrameControl*(DC: Hdc, Rect: TRect, uType, uState: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "DrawFrameControl".}
proc drawText*(hDC: Hdc, lpString: Cstring, nCount: Int, lpRect: var TRect,
               uFormat: Uint): Int{.stdcall, dynlib: "user32",
                                    importc: "DrawTextA".}
proc drawTextA*(hDC: Hdc, lpString: Lpcstr, nCount: Int, lpRect: var TRect,
                uFormat: Uint): Int{.stdcall, dynlib: "user32",
                                     importc: "DrawTextA".}
proc drawTextEx*(DC: Hdc, lpchText: Cstring, cchText: Int, p4: var TRect,
                 dwDTFormat: Uint, DTParams: Pdrawtextparams): Int{.stdcall,
    dynlib: "user32", importc: "DrawTextExA".}
proc drawTextExA*(DC: Hdc, lpchText: Lpcstr, cchText: Int, p4: var TRect,
                  dwDTFormat: Uint, DTParams: Pdrawtextparams): Int{.stdcall,
    dynlib: "user32", importc: "DrawTextExA".}
proc drawTextExW*(DC: Hdc, lpchText: Lpwstr, cchText: Int, p4: var TRect,
                  dwDTFormat: Uint, DTParams: Pdrawtextparams): Int{.stdcall,
    dynlib: "user32", importc: "DrawTextExW".}
proc drawTextW*(hDC: Hdc, lpString: Lpwstr, nCount: Int, lpRect: var TRect,
                uFormat: Uint): Int{.stdcall, dynlib: "user32",
                                     importc: "DrawTextW".}
  #function DuplicateTokenEx(hExistingToken: THandle; dwDesiredAccess: DWORD; lpTokenAttributes: PSecurityAttributes; ImpersonationLevel: TSecurityImpersonationLevel; TokenType: TTokenType; var phNewToken: THandle): WINBOOL;
  #  stdcall; external 'advapi32' name 'DuplicateTokenEx';
proc endPaint*(wnd: Hwnd, lpPaint: TPaintStruct): Winbool{.stdcall,
    dynlib: "user32", importc: "EndPaint".}
  #function EnumDisplayDevices(Unused: Pointer; iDevNum: DWORD; var lpDisplayDevice: TDisplayDevice; dwFlags: DWORD): WINBOOL;stdcall; external 'user32' name 'EnumDisplayDevicesA';
  #function EnumDisplayDevicesA(Unused: Pointer; iDevNum: DWORD; var lpDisplayDevice: TDisplayDeviceA; dwFlags: DWORD): WINBOOL;stdcall; external 'user32' name 'EnumDisplayDevicesA';
  #function EnumDisplayDevicesW(Unused: Pointer; iDevNum: DWORD; var lpDisplayDevice: TDisplayDeviceW; dwFlags: DWORD): WINBOOL;stdcall; external 'user32' name 'EnumDisplayDevicesW';
proc enumDisplaySettings*(lpszDeviceName: Cstring, iModeNum: Dword,
                          lpDevMode: var Tdevicemode): Winbool{.stdcall,
    dynlib: "user32", importc: "EnumDisplaySettingsA".}
proc enumDisplaySettingsA*(lpszDeviceName: Lpcstr, iModeNum: Dword,
                           lpDevMode: var TdevicemodeA): Winbool{.stdcall,
    dynlib: "user32", importc: "EnumDisplaySettingsA".}
proc enumDisplaySettingsW*(lpszDeviceName: Lpwstr, iModeNum: Dword,
                           lpDevMode: var TDeviceModeW): Winbool{.stdcall,
    dynlib: "user32", importc: "EnumDisplaySettingsW".}
  #function EnumEnhMetaFile(DC: HDC; p2: HENHMETAFILE; p3: TFNEnhMFEnumProc; p4: Pointer; const p5: TRect): WINBOOL; stdcall; external 'gdi32' name 'EnumEnhMetaFile';
  #function EnumFontFamiliesEx(DC: HDC; var p2: TLogFont; p3: TFNFontEnumProc; p4: LPARAM; p5: DWORD): WINBOOL;stdcall; external 'gdi32' name 'EnumFontFamiliesExA';
  #function EnumFontFamiliesExA(DC: HDC; var p2: TLogFontA; p3: TFNFontEnumProcA; p4: LPARAM; p5: DWORD): WINBOOL; stdcall; external 'gdi32' name 'EnumFontFamiliesExA';
  #function EnumFontFamiliesExW(DC: HDC; var p2: TLogFontW; p3: TFNFontEnumProcW; p4: LPARAM; p5: DWORD): WINBOOL; stdcall; external 'gdi32' name 'EnumFontFamiliesExW';
  #function EqualRect(const lprc1, lprc2: TRect): WINBOOL; stdcall; external 'user32' name 'EqualRect';
proc extCreatePen*(PenStyle, Width: Dword, Brush: TLogBrush, StyleCount: Dword,
                   Style: Pointer): Hpen{.stdcall, dynlib: "gdi32",
    importc: "ExtCreatePen".}
proc extCreateRegion*(p1: Pxform, p2: Dword, p3: TRgnData): Hrgn{.stdcall,
    dynlib: "gdi32", importc: "ExtCreateRegion".}
  # function ExtEscape(DC: HDC; p2, p3: Integer; const p4: LPCSTR; p5: Integer; p6: LPSTR): Integer; stdcall; external 'gdi32' name 'ExtEscape';
proc fileTimeToDosDateTime*(lpFileTime: TFileTime,
                            lpFatDate, lpFatTime: var Int16): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FileTimeToDosDateTime".}
proc fileTimeToLocalFileTime*(lpFileTime: TFileTime,
                              lpLocalFileTime: var TFileTime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "FileTimeToLocalFileTime".}
proc fileTimeToSystemTime*(lpFileTime: TFileTime, lpSystemTime: var TSystemTime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FileTimeToSystemTime".}
proc fillConsoleOutputAttribute*(hConsoleOutput: THandle, wAttribute: Int16,
                                 nLength: Dword, dwWriteCoord: TCoord,
                                 lpNumberOfAttrsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FillConsoleOutputAttribute".}
proc fillConsoleOutputCharacter*(hConsoleOutput: THandle, cCharacter: Char,
                                 nLength: Dword, dwWriteCoord: TCoord,
                                 lpNumberOfCharsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FillConsoleOutputCharacterA".}
proc fillConsoleOutputCharacterA*(hConsoleOutput: THandle, cCharacter: Char,
                                  nLength: Dword, dwWriteCoord: TCoord,
                                  lpNumberOfCharsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FillConsoleOutputCharacterA".}
proc fillConsoleOutputCharacterW*(hConsoleOutput: THandle, cCharacter: WideChar,
                                  nLength: Dword, dwWriteCoord: TCoord,
                                  lpNumberOfCharsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FillConsoleOutputCharacterW".}
  #function FillRect(hDC: HDC; const lprc: TRect; hbr: HBRUSH): Integer; stdcall; external 'user32' name 'FillRect';
proc findFirstFile*(lpFileName: Cstring, lpFindFileData: var TWIN32FindData): THandle{.
    stdcall, dynlib: "kernel32", importc: "FindFirstFileA".}
proc findFirstFileA*(lpFileName: Lpcstr, lpFindFileData: var TWIN32FindDataA): THandle{.
    stdcall, dynlib: "kernel32", importc: "FindFirstFileA".}
proc findFirstFileW*(lpFileName: Lpwstr, lpFindFileData: var TWIN32FindDataW): THandle{.
    stdcall, dynlib: "kernel32", importc: "FindFirstFileW".}
  #function FindFirstFreeAce(var pAcl: TACL; var pAce: Pointer): WINBOOL; stdcall; external 'advapi32' name 'FindFirstFreeAce';
proc findNextFile*(hFindFile: THandle, lpFindFileData: var TWIN32FindData): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FindNextFileA".}
proc findNextFileA*(hFindFile: THandle, lpFindFileData: var TWIN32FindDataA): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FindNextFileA".}
proc findNextFileW*(hFindFile: THandle, lpFindFileData: var TWIN32FindDataW): Winbool{.
    stdcall, dynlib: "kernel32", importc: "FindNextFileW".}
  #function FlushInstructionCache(hProcess: THandle; const lpBaseAddress: Pointer; dwSize: DWORD): WINBOOL; stdcall; external 'kernel32' name 'FlushInstructionCache';
  #function FlushViewOfFile(const lpBaseAddress: Pointer; dwNumberOfBytesToFlush: DWORD): WINBOOL; stdcall; external 'kernel32' name 'FlushViewOfFile';
  #function FrameRect(hDC: HDC; const lprc: TRect; hbr: HBRUSH): Integer; stdcall; external 'user32' name 'FrameRect';
  #function GetAce(const pAcl: TACL; dwAceIndex: DWORD; var pAce: Pointer): WINBOOL; stdcall; external 'advapi32' name 'GetAce';
  #function GetAclInformation(const pAcl: TACL; pAclInformation: Pointer; nAclInformationLength: DWORD; dwAclInformationClass: TAclInformationClass): WINBOOL; stdcall; external 'advapi32' name 'GetAclInformation';
  #function GetAltTabInfo(wnd: HWND; iItem: Integer; var pati: TAltTabInfo; pszItemText: PChar; cchItemText: UINT): WINBOOL;stdcall; external 'user32' name 'GetAltTabInfoA';
  #function GetAltTabInfoA(wnd: HWND; iItem: Integer; var pati: TAltTabInfo; pszItemText: LPCSTR; cchItemText: UINT): WINBOOL;stdcall; external 'user32' name 'GetAltTabInfoA';
  #function GetAltTabInfoW(wnd: HWND; iItem: Integer; var pati: TAltTabInfo; pszItemText: LPWSTR; cchItemText: UINT): WINBOOL;stdcall; external 'user32' name 'GetAltTabInfoW';
proc getAspectRatioFilterEx*(DC: Hdc, p2: var TSize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetAspectRatioFilterEx".}
proc getBinaryType*(lpApplicationName: Cstring, lpBinaryType: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetBinaryTypeA".}
proc getBinaryTypeA*(lpApplicationName: Lpcstr, lpBinaryType: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetBinaryTypeA".}
proc getBinaryTypeW*(lpApplicationName: Lpwstr, lpBinaryType: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetBinaryTypeW".}
proc getBitmapDimensionEx*(p1: Hbitmap, p2: var TSize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetBitmapDimensionEx".}
proc getBoundsRect*(DC: Hdc, p2: var TRect, p3: Uint): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetBoundsRect".}
proc getBrushOrgEx*(DC: Hdc, p2: var TPoint): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetBrushOrgEx".}
proc getCaretPos*(lpPoint: var TPoint): Winbool{.stdcall, dynlib: "user32",
    importc: "GetCaretPos".}
proc getCharABCWidths*(DC: Hdc, p2, p3: Uint, ABCStructs: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsA".}
proc getCharABCWidthsA*(DC: Hdc, p2, p3: Uint, ABCStructs: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsA".}
proc getCharABCWidthsFloat*(DC: Hdc, p2, p3: Uint, ABCFloatSturcts: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsFloatA".}
proc getCharABCWidthsFloatA*(DC: Hdc, p2, p3: Uint, ABCFloatSturcts: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsFloatA".}
proc getCharABCWidthsFloatW*(DC: Hdc, p2, p3: Uint, ABCFloatSturcts: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsFloatW".}
  #function GetCharABCWidthsI(DC: HDC; p2, p3: UINT; p4: PWORD; const Widths): WINBOOL;stdcall; external 'gdi32' name 'GetCharABCWidthsI';
proc getCharABCWidthsW*(DC: Hdc, p2, p3: Uint, ABCStructs: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharABCWidthsW".}
proc getCharacterPlacement*(DC: Hdc, p2: Cstring, p3, p4: Winbool,
                            p5: var TGCPResults, p6: Dword): Dword{.stdcall,
    dynlib: "gdi32", importc: "GetCharacterPlacementA".}
proc getCharacterPlacementA*(DC: Hdc, p2: Lpcstr, p3, p4: Winbool,
                             p5: var TGCPResults, p6: Dword): Dword{.stdcall,
    dynlib: "gdi32", importc: "GetCharacterPlacementA".}
proc getCharacterPlacementW*(DC: Hdc, p2: Lpwstr, p3, p4: Winbool,
                             p5: var TGCPResults, p6: Dword): Dword{.stdcall,
    dynlib: "gdi32", importc: "GetCharacterPlacementW".}
proc getCharWidth*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCharWidthA".}
proc getCharWidth32*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCharWidth32A".}
proc getCharWidth32A*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCharWidth32A".}
proc getCharWidth32W*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCharWidth32W".}
proc getCharWidthA*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCharWidthA".}
proc getCharWidthFloat*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidthFloatA".}
proc getCharWidthFloatA*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidthFloatA".}
proc getCharWidthFloatW*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetCharWidthFloatW".}
  #function GetCharWidthI(DC: HDC; p2, p3: UINT; p4: PWORD; const Widths:pointer): WINBOOL;stdcall; external 'gdi32' name 'GetCharWidthI';
proc getCharWidthW*(DC: Hdc, p2, p3: Uint, Widths: Pointer): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetCharWidthW".}
proc getClassInfo*(hInstance: Hinst, lpClassName: Cstring,
                   lpWndClass: var TWndClass): Winbool{.stdcall,
    dynlib: "user32", importc: "GetClassInfoA".}
proc getClassInfoA*(hInstance: Hinst, lpClassName: Lpcstr,
                    lpWndClass: var TWndClassA): Winbool{.stdcall,
    dynlib: "user32", importc: "GetClassInfoA".}
proc getClassInfoEx*(Instance: Hinst, Classname: Cstring,
                     WndClass: var TWndClassEx): Winbool{.stdcall,
    dynlib: "user32", importc: "GetClassInfoExA".}
  #function GetClassInfoExA(Instance: HINST; Classname: LPCSTR; var WndClass: TWndClassExA): WINBOOL; stdcall; external 'user32' name 'GetClassInfoExA';
  #function GetClassInfoExW(Instance: HINST; Classname: LPWSTR; var WndClass: TWndClassExW): WINBOOL; stdcall; external 'user32' name 'GetClassInfoExW';
  #function GetClassInfoW(hInstance: HINST; lpClassName: LPWSTR; var lpWndClass: TWndClassW): WINBOOL; stdcall; external 'user32' name 'GetClassInfoW';
proc getClientRect*(wnd: Hwnd, lpRect: var TRect): Winbool{.stdcall,
    dynlib: "user32", importc: "GetClientRect".}
proc getClipBox*(DC: Hdc, Rect: var TRect): Int{.stdcall, dynlib: "gdi32",
    importc: "GetClipBox".}
proc getClipCursor*(lpRect: var TRect): Winbool{.stdcall, dynlib: "user32",
    importc: "GetClipCursor".}
proc getColorAdjustment*(DC: Hdc, p2: var TColorAdjustment): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetColorAdjustment".}
proc getCommConfig*(hCommDev: THandle, lpCC: var TCommConfig,
                    lpdwSize: var Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "GetCommConfig".}
proc getCommMask*(hFile: THandle, lpEvtMask: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetCommMask".}
proc getCommModemStatus*(hFile: THandle, lpModemStat: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetCommModemStatus".}
proc getCommProperties*(hFile: THandle, lpCommProp: var TCommProp): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetCommProperties".}
proc getCommState*(hFile: THandle, lpDCB: var TDCB): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetCommState".}
proc getCommTimeouts*(hFile: THandle, lpCommTimeouts: var TCommTimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetCommTimeouts".}
proc getComputerName*(lpBuffer: Cstring, nSize: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetComputerNameA".}
proc getComputerNameA*(lpBuffer: Lpcstr, nSize: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetComputerNameA".}
proc getComputerNameW*(lpBuffer: Lpwstr, nSize: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetComputerNameW".}
proc getConsoleCursorInfo*(hConsoleOutput: THandle,
                           lpConsoleCursorInfo: var TConsoleCursorInfo): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetConsoleCursorInfo".}
proc getConsoleMode*(hConsoleHandle: THandle, lpMode: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetConsoleMode".}
proc getConsoleScreenBufferInfo*(hConsoleOutput: THandle,
    lpConsoleScreenBufferInfo: var TConsoleScreenBufferInfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetConsoleScreenBufferInfo".}
proc getCPInfo*(CodePage: Uint, lpCPInfo: var Tcpinfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetCPInfo".}
  #function GetCurrentHwProfile(var lpHwProfileInfo: THWProfileInfo): WINBOOL;stdcall; external 'advapi32' name 'GetCurrentHwProfileA';
  #function GetCurrentHwProfileA(var lpHwProfileInfo: THWProfileInfoA): WINBOOL;stdcall; external 'advapi32' name 'GetCurrentHwProfileA';
  #function GetCurrentHwProfileW(var lpHwProfileInfo: THWProfileInfoW): WINBOOL;stdcall; external 'advapi32' name 'GetCurrentHwProfileW';
proc getCursorInfo*(pci: var TCursorInfo): Winbool{.stdcall, dynlib: "user32",
    importc: "GetCursorInfo".}
proc getCursorPos*(lpPoint: var TPoint): Winbool{.stdcall, dynlib: "user32",
    importc: "GetCursorPos".}
proc getDCOrgEx*(DC: Hdc, Origin: var TPoint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetDCOrgEx".}
proc getDefaultCommConfig*(lpszName: Cstring, lpCC: var TCommConfig,
                           lpdwSize: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetDefaultCommConfigA".}
proc getDefaultCommConfigA*(lpszName: Lpcstr, lpCC: var TCommConfig,
                            lpdwSize: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetDefaultCommConfigA".}
proc getDefaultCommConfigW*(lpszName: Lpwstr, lpCC: var TCommConfig,
                            lpdwSize: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetDefaultCommConfigW".}
proc getDIBColorTable*(DC: Hdc, p2, p3: Uint, RGBQuadStructs: Pointer): Uint{.
    stdcall, dynlib: "gdi32", importc: "GetDIBColorTable".}
proc getDIBits*(DC: Hdc, Bitmap: Hbitmap, StartScan, NumScans: Uint,
                Bits: Pointer, BitInfo: var TBitmapInfo, Usage: Uint): Int{.
    stdcall, dynlib: "gdi32", importc: "GetDIBits".}
proc getDiskFreeSpace*(lpRootPathName: Cstring, lpSectorsPerCluster,
    lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceA".}
proc getDiskFreeSpaceA*(lpRootPathName: Lpcstr, lpSectorsPerCluster,
    lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceA".}
proc getDiskFreeSpaceEx*(lpDirectoryName: Cstring, lpFreeBytesAvailableToCaller,
    lpTotalNumberOfBytes: var TLargeInteger,
                         lpTotalNumberOfFreeBytes: PlargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceExA".}
proc getDiskFreeSpaceExA*(lpDirectoryName: Lpcstr, lpFreeBytesAvailableToCaller,
    lpTotalNumberOfBytes: var TLargeInteger,
                          lpTotalNumberOfFreeBytes: PlargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceExA".}
proc getDiskFreeSpaceExW*(lpDirectoryName: Lpwstr, lpFreeBytesAvailableToCaller,
    lpTotalNumberOfBytes: var TLargeInteger,
                          lpTotalNumberOfFreeBytes: PlargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceExW".}
proc getDiskFreeSpaceW*(lpRootPathName: Lpwstr, lpSectorsPerCluster,
    lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceW".}
proc getDiskFreeSpaceEx*(lpDirectoryName: Cstring, lpFreeBytesAvailableToCaller,
    lpTotalNumberOfBytes: PlargeInteger, lpTotalNumberOfFreeBytes: PlargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceExA".}
proc getDiskFreeSpaceExA*(lpDirectoryName: Lpcstr, lpFreeBytesAvailableToCaller,
    lpTotalNumberOfBytes: PlargeInteger, lpTotalNumberOfFreeBytes: PlargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceExA".}
proc getDiskFreeSpaceExW*(lpDirectoryName: Lpwstr, lpFreeBytesAvailableToCaller,
    lpTotalNumberOfBytes: PlargeInteger, lpTotalNumberOfFreeBytes: PlargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetDiskFreeSpaceExW".}
  #function GetEnhMetaFilePixelFormat(p1: HENHMETAFILE; p2: Cardinal; var p3: TPixelFormatDescriptor): UINT;stdcall; external 'gdi32' name 'GetEnhMetaFilePixelFormat';
proc getExitCodeProcess*(hProcess: THandle, lpExitCode: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetExitCodeProcess".}
proc getExitCodeThread*(hThread: THandle, lpExitCode: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetExitCodeThread".}
proc getFileInformationByHandle*(hFile: THandle, lpFileInformation: var TByHandleFileInformation): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetFileInformationByHandle".}
  #function GetFileSecurity(lpFileName: PChar; RequestedInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor; nLength: DWORD; var lpnLengthNeeded: DWORD): WINBOOL;stdcall; external 'advapi32' name 'GetFileSecurityA';
  #function GetFileSecurityA(lpFileName: LPCSTR; RequestedInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor; nLength: DWORD; var lpnLengthNeeded: DWORD): WINBOOL; stdcall; external 'advapi32' name 'GetFileSecurityA';
  #function GetFileSecurityW(lpFileName: LPWSTR; RequestedInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor; nLength: DWORD; var lpnLengthNeeded: DWORD): WINBOOL; stdcall; external 'advapi32' name 'GetFileSecurityW';
proc getFileVersionInfoSize*(lptstrFilename: Cstring, lpdwHandle: var Dword): Dword{.
    stdcall, dynlib: "version", importc: "GetFileVersionInfoSizeA".}
proc getFileVersionInfoSizeA*(lptstrFilename: Lpcstr, lpdwHandle: var Dword): Dword{.
    stdcall, dynlib: "version", importc: "GetFileVersionInfoSizeA".}
proc getFileVersionInfoSizeW*(lptstrFilename: Lpwstr, lpdwHandle: var Dword): Dword{.
    stdcall, dynlib: "version", importc: "GetFileVersionInfoSizeW".}
  # removed because old definition was wrong !
  # function GetFullPathName(lpFileName: PChar; nBufferLength: DWORD; lpBuffer: PChar; var lpFilePart: PChar): DWORD;stdcall; external 'kernel32' name 'GetFullPathNameA';
  # function GetFullPathNameA(lpFileName: LPCSTR; nBufferLength: DWORD; lpBuffer: LPCSTR; var lpFilePart: LPCSTR): DWORD; stdcall; external 'kernel32' name 'GetFullPathNameA';
  # function GetFullPathNameW(lpFileName: LPWSTR; nBufferLength: DWORD; lpBuffer: LPWSTR; var lpFilePart: LPWSTR): DWORD; stdcall; external 'kernel32' name 'GetFullPathNameW';
proc getGlyphOutline*(DC: Hdc, p2, p3: Uint, p4: TGlyphMetrics, p5: Dword,
                      p6: Pointer, p7: TMat2): Dword{.stdcall, dynlib: "gdi32",
    importc: "GetGlyphOutlineA".}
proc getGlyphOutlineA*(DC: Hdc, p2, p3: Uint, p4: TGlyphMetrics, p5: Dword,
                       p6: Pointer, p7: TMat2): Dword{.stdcall, dynlib: "gdi32",
    importc: "GetGlyphOutlineA".}
proc getGlyphOutlineW*(DC: Hdc, p2, p3: Uint, p4: TGlyphMetrics, p5: Dword,
                       p6: Pointer, p7: TMat2): Dword{.stdcall, dynlib: "gdi32",
    importc: "GetGlyphOutlineW".}
  #function GetGUIThreadInfo(idThread: DWORD; var pgui: TGUIThreadinfo): WINBOOL;stdcall; external 'user32' name 'GetGUIThreadInfo';
proc getHandleInformation*(hObject: THandle, lpdwFlags: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetHandleInformation".}
  #function GetICMProfile(DC: HDC; var Size: DWORD; Name: PChar): WINBOOL;stdcall; external 'gdi32' name 'GetICMProfileA';
  #function GetICMProfileA(DC: HDC; var Size: DWORD; Name: LPCSTR): WINBOOL; stdcall; external 'gdi32' name 'GetICMProfileA';
  #function GetICMProfileW(DC: HDC; var Size: DWORD; Name: LPWSTR): WINBOOL; stdcall; external 'gdi32' name 'GetICMProfileW';
proc getIconInfo*(icon: Hicon, piconinfo: var TIconInfo): Winbool{.stdcall,
    dynlib: "user32", importc: "GetIconInfo".}
  #function GetKernelObjectSecurity(Handle: THandle; RequestedInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor; nLength: DWORD; var lpnLengthNeeded: DWORD): WINBOOL; stdcall; external 'advapi32' name 'GetKernelObjectSecurity';
proc getKerningPairs*(DC: Hdc, Count: Dword, KerningPairs: Pointer): Dword{.
    stdcall, dynlib: "gdi32", importc: "GetKerningPairs".}
proc getKeyboardLayoutList*(nBuff: Int, List: Pointer): Uint{.stdcall,
    dynlib: "user32", importc: "GetKeyboardLayoutList".}
  #function GetKeyboardState(var KeyState: TKeyboardState): WINBOOL; stdcall; external 'user32' name 'GetKeyboardState';
  #function GetLastInputInfo(var plii: TLastInputInfo): WINBOOL;stdcall; external 'user32' name 'GetLastInputInfo';
proc getSystemTime*(lpSystemTime: var Systemtime){.stdcall, dynlib: "kernel32",
    importc: "GetSystemTime".}
proc getLocalTime*(SystemTime: var Systemtime){.stdcall, dynlib: "kernel32",
    importc: "GetLocalTime".}
proc getSystemInfo*(SystemInfo: var SystemInfo){.stdcall, dynlib: "kernel32",
    importc: "GetSystemInfo".}
proc setSystemTime*(lpSystemTime: var Systemtime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetSystemTime".}
proc setLocalTime*(lpSystemTime: var Systemtime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetLocalTime".}
proc getLogColorSpace*(p1: Hcolorspace, ColorSpace: var TLogColorSpace,
                       Size: Dword): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetLogColorSpaceA".}
proc getLogColorSpaceA*(p1: Hcolorspace, ColorSpace: var TLogColorSpaceA,
                        Size: Dword): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetLogColorSpaceA".}
  #function GetLogColorSpaceW(p1: HCOLORSPACE; var ColorSpace: TLogColorSpaceW; Size: DWORD): WINBOOL; stdcall; external 'gdi32' name 'GetLogColorSpaceW';
proc getMailslotInfo*(hMailslot: THandle, lpMaxMessageSize: Pointer,
                      lpNextSize: var Dword,
                      lpMessageCount, lpReadTimeout: Pointer): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetMailslotInfo".}
  #function GetMenuBarInfo(hend: HWND; idObject, idItem: Longint; var pmbi: TMenuBarInfo): WINBOOL;stdcall; external 'user32' name 'GetMenuBarInfo';
  #function GetMenuInfo(menu: HMENU; var lpmi: TMenuInfo): WINBOOL;stdcall; external 'user32' name 'GetMenuInfo';
proc getMenuItemInfo*(p1: Hmenu, p2: Uint, p3: Winbool, p4: var TMenuItemInfo): Winbool{.
    stdcall, dynlib: "user32", importc: "GetMenuItemInfoA".}
proc getMenuItemInfoA*(p1: Hmenu, p2: Uint, p3: Winbool, p4: var TMenuItemInfoA): Winbool{.
    stdcall, dynlib: "user32", importc: "GetMenuItemInfoA".}
  #function GetMenuItemInfoW(p1: HMENU; p2: UINT; p3: WINBOOL; var p4: TMenuItemInfoW): WINBOOL; stdcall; external 'user32' name 'GetMenuItemInfoW';
proc getMenuItemRect*(wnd: Hwnd, menu: Hmenu, uItem: Uint, lprcItem: var TRect): Winbool{.
    stdcall, dynlib: "user32", importc: "GetMenuItemRect".}
proc getMessage*(lpMsg: var TMsg, wnd: Hwnd, wMsgFilterMin, wMsgFilterMax: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "GetMessageA".}
proc getMessageA*(lpMsg: var TMsg, wnd: Hwnd,
                  wMsgFilterMin, wMsgFilterMax: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "GetMessageA".}
proc getMessageW*(lpMsg: var TMsg, wnd: Hwnd,
                  wMsgFilterMin, wMsgFilterMax: Uint): Winbool{.stdcall,
    dynlib: "user32", importc: "GetMessageW".}
proc getMiterLimit*(DC: Hdc, Limit: var Float32): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetMiterLimit".}
  #function GetMouseMovePoints(cbSize: UINT; var lppt, lpptBuf: TMouseMovePoint; nBufPoints: Integer; resolution: DWORD): Integer;stdcall; external 'user32' name 'GetMouseMovePoints';
proc getNamedPipeInfo*(hNamedPipe: THandle, lpFlags: var Dword,
                       lpOutBufferSize, lpInBufferSize, lpMaxInstances: Pointer): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetNamedPipeInfo".}
proc getNumberOfConsoleInputEvents*(hConsoleInput: THandle,
                                    lpNumberOfEvents: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetNumberOfConsoleInputEvents".}
proc getNumberOfConsoleMouseButtons*(lpNumberOfMouseButtons: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetNumberOfConsoleMouseButtons".}
  #function GetNumberOfEventLogRecords(hEventLog: THandle; var NumberOfRecords: DWORD): WINBOOL; stdcall; external 'advapi32' name 'GetNumberOfEventLogRecords';
  #function GetOldestEventLogRecord(hEventLog: THandle; var OldestRecord: DWORD): WINBOOL; stdcall; external 'advapi32' name 'GetOldestEventLogRecord';
proc getOverlappedResult*(hFile: THandle, lpOverlapped: TOverlapped,
                          lpNumberOfBytesTransferred: var Dword, bWait: Winbool): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetOverlappedResult".}
proc getPaletteEntries*(Palette: Hpalette, StartIndex, NumEntries: Uint,
                        PaletteEntries: Pointer): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetPaletteEntries".}
proc getPath*(DC: Hdc, Points, Types: Pointer, nSize: Int): Int{.stdcall,
    dynlib: "gdi32", importc: "GetPath".}
proc getPriorityClipboardFormat*(paFormatPriorityList: Pointer, cFormats: Int): Int{.
    stdcall, dynlib: "user32", importc: "GetPriorityClipboardFormat".}
  #function GetPrivateObjectSecurity(ObjectDescriptor: PSecurityDescriptor; SecurityInformation: SECURITY_INFORMATION; ResultantDescriptor: PSecurityDescriptor; DescriptorLength: DWORD; var ReturnLength: DWORD): WINBOOL;
  #  stdcall; external 'advapi32' name 'GetPrivateObjectSecurity';
proc getPrivateProfileSectionNamesA*(lpszReturnBuffer: Lpstr, nSize: Dword,
                                     lpFileName: Lpcstr): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetPrivateProfileSectionNamesA".}
proc getPrivateProfileSectionNamesW*(lpszReturnBuffer: Lpwstr, nSize: Dword,
                                     lpFileName: Lpcwstr): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetPrivateProfileSectionNamesW".}
proc getPrivateProfileSectionNames*(lpszReturnBuffer: Lptstr, nSize: Dword,
                                    lpFileName: Lpctstr): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetPrivateProfileSectionNamesA".}
proc getPrivateProfileStructA*(lpszSection, lpszKey: Lpcstr, lpStruct: Lpvoid,
                               uSizeStruct: Uint, szFile: Lpcstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetPrivateProfileStructA".}
proc getPrivateProfileStructW*(lpszSection, lpszKey: Lpcwstr, lpStruct: Lpvoid,
                               uSizeStruct: Uint, szFile: Lpcwstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetPrivateProfileStructW".}
proc getPrivateProfileStruct*(lpszSection, lpszKey: Lpctstr, lpStruct: Lpvoid,
                              uSizeStruct: Uint, szFile: Lpctstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetPrivateProfileStructA".}
proc getProcessAffinityMask*(hProcess: THandle, lpProcessAffinityMask,
    lpSystemAffinityMask: var Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "GetProcessAffinityMask".}
proc getProcessHeaps*(NumberOfHeaps: Dword, ProcessHeaps: var THandle): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetProcessHeaps".}
proc getProcessPriorityBoost*(hThread: THandle,
                              DisablePriorityBoost: var Winbool): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetProcessPriorityBoost".}
proc getProcessShutdownParameters*(lpdwLevel, lpdwFlags: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetProcessShutdownParameters".}
proc getProcessTimes*(hProcess: THandle, lpCreationTime, lpExitTime,
    lpKernelTime, lpUserTime: var TFileTime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetProcessTimes".}
proc getProcessWorkingSetSize*(hProcess: THandle, lpMinimumWorkingSetSize,
    lpMaximumWorkingSetSize: var Dword): Winbool{.stdcall, dynlib: "kernel32",
    importc: "GetProcessWorkingSetSize".}
proc getQueuedCompletionStatus*(CompletionPort: THandle,
    lpNumberOfBytesTransferred, lpCompletionKey: var Dword,
                                lpOverlapped: var Poverlapped,
                                dwMilliseconds: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetQueuedCompletionStatus".}
proc getRasterizerCaps*(p1: var TRasterizerStatus, p2: Uint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetRasterizerCaps".}
proc getRgnBox*(RGN: Hrgn, p2: var TRect): Int{.stdcall, dynlib: "gdi32",
    importc: "GetRgnBox".}
proc getScrollInfo*(wnd: Hwnd, BarFlag: Int, ScrollInfo: var TScrollInfo): Winbool{.
    stdcall, dynlib: "user32", importc: "GetScrollInfo".}
proc getScrollRange*(wnd: Hwnd, nBar: Int, lpMinPos, lpMaxPos: var Int): Winbool{.
    stdcall, dynlib: "user32", importc: "GetScrollRange".}
  #function GetSecurityDescriptorControl(pSecurityDescriptor: PSecurityDescriptor; var pControl: SECURITY_DESCRIPTOR_CONTROL; var lpdwRevision: DWORD): WINBOOL; stdcall; external 'advapi32' name 'GetSecurityDescriptorControl';
  #function GetSecurityDescriptorDacl(pSecurityDescriptor: PSecurityDescriptor; var lpbDaclPresent: WINBOOL; var pDacl: PACL; var lpbDaclDefaulted: WINBOOL): WINBOOL; stdcall; external 'advapi32' name 'GetSecurityDescriptorDacl';
  #function GetSecurityDescriptorGroup(pSecurityDescriptor: PSecurityDescriptor; var pGroup: PSID; var lpbGroupDefaulted: WINBOOL): WINBOOL; stdcall; external 'advapi32' name 'GetSecurityDescriptorGroup';
  #function GetSecurityDescriptorOwner(pSecurityDescriptor: PSecurityDescriptor; var pOwner: PSID; var lpbOwnerDefaulted: WINBOOL): WINBOOL; stdcall; external 'advapi32' name 'GetSecurityDescriptorOwner';
  #function GetSecurityDescriptorSacl(pSecurityDescriptor: PSecurityDescriptor; var lpbSaclPresent: WINBOOL; var pSacl: PACL; var lpbSaclDefaulted: WINBOOL): WINBOOL; stdcall; external 'advapi32' name 'GetSecurityDescriptorSacl';
proc getStartupInfo*(lpStartupInfo: var TSTARTUPINFO){.stdcall,
    dynlib: "kernel32", importc: "GetStartupInfoA".}
proc getStringTypeA*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Lpcstr,
                     cchSrc: Winbool, lpCharType: var Int16): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetStringTypeA".}
proc getStringTypeEx*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Cstring,
                      cchSrc: Int, lpCharType: var Int16): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetStringTypeExA".}
proc getStringTypeExA*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Lpcstr,
                       cchSrc: Int, lpCharType: var Int16): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetStringTypeExA".}
proc getStringTypeExW*(Locale: Lcid, dwInfoType: Dword, lpSrcStr: Lpwstr,
                       cchSrc: Int, lpCharType: var Int16): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetStringTypeExW".}
proc getStringTypeW*(dwInfoType: Dword, lpSrcStr: Wchar, cchSrc: Winbool,
                     lpCharType: var Int16): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetStringTypeW".}
proc getSystemPaletteEntries*(DC: Hdc, StartIndex, NumEntries: Uint,
                              PaletteEntries: Pointer): Uint{.stdcall,
    dynlib: "gdi32", importc: "GetSystemPaletteEntries".}
proc getSystemPowerStatus*(lpSystemPowerStatus: var TSystemPowerStatus): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetSystemPowerStatus".}
proc getSystemTimeAdjustment*(lpTimeAdjustment, lpTimeIncrement: var Dword,
                              lpTimeAdjustmentDisabled: var Winbool): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetSystemTimeAdjustment".}
proc getSystemTimeAsFileTime*(lpSystemTimeAsFileTime: var TFILETIME){.stdcall,
    dynlib: "kernel32", importc: "GetSystemTimeAsFileTime".}
proc getTabbedTextExtent*(hDC: Hdc, lpString: Cstring,
                          nCount, nTabPositions: Int,
                          lpnTabStopPositions: Pointer): Dword{.stdcall,
    dynlib: "user32", importc: "GetTabbedTextExtentA".}
proc getTabbedTextExtentA*(hDC: Hdc, lpString: Lpcstr,
                           nCount, nTabPositions: Int,
                           lpnTabStopPositions: Pointer): Dword{.stdcall,
    dynlib: "user32", importc: "GetTabbedTextExtentA".}
proc getTabbedTextExtentW*(hDC: Hdc, lpString: Lpwstr,
                           nCount, nTabPositions: Int,
                           lpnTabStopPositions: Pointer): Dword{.stdcall,
    dynlib: "user32", importc: "GetTabbedTextExtentW".}
proc getTapeParameters*(hDevice: THandle, dwOperation: Dword,
                        lpdwSize: var Dword, lpTapeInformation: Pointer): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetTapeParameters".}
proc getTapePosition*(hDevice: THandle, dwPositionType: Dword,
                      lpdwPartition, lpdwOffsetLow: var Dword,
                      lpdwOffsetHigh: Pointer): Dword{.stdcall,
    dynlib: "kernel32", importc: "GetTapePosition".}
proc getTextExtentExPoint*(DC: Hdc, p2: Cstring, p3, p4: Int, p5, p6: Pinteger,
                           p7: var TSize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetTextExtentExPointA".}
proc getTextExtentExPointA*(DC: Hdc, p2: Lpcstr, p3, p4: Int, p5, p6: Pinteger,
                            p7: var TSize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetTextExtentExPointA".}
  #function GetTextExtentExPointI(DC: HDC; p2: PWORD; p3, p4: Integer; p5, p6: PINT; var p7: TSize): WINBOOL;stdcall; external 'gdi32' name 'GetTextExtentExPointI';
proc getTextExtentExPointW*(DC: Hdc, p2: Lpwstr, p3, p4: Int, p5, p6: Pinteger,
                            p7: var TSize): Winbool{.stdcall, dynlib: "gdi32",
    importc: "GetTextExtentExPointW".}
proc getTextExtentPoint*(DC: Hdc, Str: Cstring, Count: Int, Size: var TSize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetTextExtentPointA".}
proc getTextExtentPoint32*(DC: Hdc, Str: Cstring, Count: Int, Size: var TSize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetTextExtentPoint32A".}
proc getTextExtentPoint32A*(DC: Hdc, Str: Lpcstr, Count: Int, Size: var TSize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetTextExtentPoint32A".}
proc getTextExtentPoint32W*(DC: Hdc, Str: Lpwstr, Count: Int, Size: var TSize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetTextExtentPoint32W".}
proc getTextExtentPointA*(DC: Hdc, Str: Lpcstr, Count: Int, Size: var TSize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetTextExtentPointA".}
  #function GetTextExtentPointI(DC: HDC; p2: PWORD; p3: Integer; var p4: TSize): WINBOOL;stdcall; external 'gdi32' name 'GetTextExtentPointI';
proc getTextExtentPointW*(DC: Hdc, Str: Lpwstr, Count: Int, Size: var TSize): Winbool{.
    stdcall, dynlib: "gdi32", importc: "GetTextExtentPointW".}
proc getTextMetrics*(DC: Hdc, TM: var TTextMetric): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetTextMetricsA".}
  #function GetTextMetricsA(DC: HDC; var TM: TTextMetricA): WINBOOL; stdcall; external 'gdi32' name 'GetTextMetricsA';
  #function GetTextMetricsW(DC: HDC; var TM: TTextMetricW): WINBOOL; stdcall; external 'gdi32' name 'GetTextMetricsW';
proc getThreadContext*(hThread: THandle, lpContext: var TContext): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetThreadContext".}
proc getThreadPriorityBoost*(hThread: THandle, DisablePriorityBoost: var Winbool): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetThreadPriorityBoost".}
proc getThreadSelectorEntry*(hThread: THandle, dwSelector: Dword,
                             lpSelectorEntry: var TLDTEntry): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetThreadSelectorEntry".}
proc getThreadTimes*(hThread: THandle, lpCreationTime, lpExitTime, lpKernelTime,
                                       lpUserTime: var TFileTime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetThreadTimes".}
proc getTimeZoneInformation*(lpTimeZoneInformation: var TTimeZoneInformation): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetTimeZoneInformation".}
  #function GetTitleBarInfo(wnd: HWND; var pti: TTitleBarInfo): WINBOOL;stdcall; external 'user32' name 'GetTitleBarInfo';
  #function GetTokenInformation(TokenHandle: THandle; TokenInformationClass: TTokenInformationClass; TokenInformation: Pointer; TokenInformationLength: DWORD; var ReturnLength: DWORD): WINBOOL; stdcall; external 'advapi32' name 'GetTokenInformation';
proc getUpdateRect*(wnd: Hwnd, lpRect: var TRect, bErase: Winbool): Winbool{.
    stdcall, dynlib: "user32", importc: "GetUpdateRect".}
proc getUserName*(lpBuffer: Cstring, nSize: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetUserNameA".}
proc getUserNameA*(lpBuffer: Lpcstr, nSize: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetUserNameA".}
proc getUserNameW*(lpBuffer: Lpwstr, nSize: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "GetUserNameW".}
proc getUserObjectInformation*(hObj: THandle, nIndex: Int, pvInfo: Pointer,
                               nLength: Dword, lpnLengthNeeded: var Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "GetUserObjectInformationA".}
proc getUserObjectInformationA*(hObj: THandle, nIndex: Int, pvInfo: Pointer,
                                nLength: Dword, lpnLengthNeeded: var Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "GetUserObjectInformationA".}
proc getUserObjectInformationW*(hObj: THandle, nIndex: Int, pvInfo: Pointer,
                                nLength: Dword, lpnLengthNeeded: var Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "GetUserObjectInformationW".}
proc getUserObjectSecurity*(hObj: THandle, pSIRequested: var Dword,
                            pSID: PsecurityDescriptor, nLength: Dword,
                            lpnLengthNeeded: var Dword): Winbool{.stdcall,
    dynlib: "user32", importc: "GetUserObjectSecurity".}
proc getVersionEx*(lpVersionInformation: var TOSVersionInfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVersionExA".}
proc getVersionExA*(lpVersionInformation: var TOSVersionInfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVersionExA".}
proc getVersionExW*(lpVersionInformation: var TOSVersionInfoW): Winbool{.
    stdcall, dynlib: "kernel32", importc: "GetVersionExW".}
proc getViewportExtEx*(DC: Hdc, Size: var TSize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetViewportExtEx".}
proc getViewportOrgEx*(DC: Hdc, Point: var TPoint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetViewportOrgEx".}
proc getVolumeInformation*(lpRootPathName: Cstring, lpVolumeNameBuffer: Cstring,
                           nVolumeNameSize: Dword, lpVolumeSerialNumber: Pdword,
    lpMaximumComponentLength, lpFileSystemFlags: var Dword,
                           lpFileSystemNameBuffer: Cstring,
                           nFileSystemNameSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVolumeInformationA".}
proc getVolumeInformationA*(lpRootPathName: Lpcstr, lpVolumeNameBuffer: Lpcstr,
                            nVolumeNameSize: Dword,
                            lpVolumeSerialNumber: Pdword,
    lpMaximumComponentLength, lpFileSystemFlags: var Dword,
                            lpFileSystemNameBuffer: Lpcstr,
                            nFileSystemNameSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVolumeInformationA".}
proc getVolumeInformationW*(lpRootPathName: Lpwstr, lpVolumeNameBuffer: Lpwstr,
                            nVolumeNameSize: Dword,
                            lpVolumeSerialNumber: Pdword,
    lpMaximumComponentLength, lpFileSystemFlags: var Dword,
                            lpFileSystemNameBuffer: Lpwstr,
                            nFileSystemNameSize: Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "GetVolumeInformationW".}
proc getWindowExtEx*(DC: Hdc, Size: var TSize): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetWindowExtEx".}
  #function GetWindowInfo(wnd: HWND; var pwi: TWindowInfo): WINBOOL;stdcall; external 'user32' name 'GetWindowInfo';
proc getWindowOrgEx*(DC: Hdc, Point: var TPoint): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetWindowOrgEx".}
proc getWindowRect*(wnd: Hwnd, lpRect: var TRect): Winbool{.stdcall,
    dynlib: "user32", importc: "GetWindowRect".}
proc getWorldTransform*(DC: Hdc, p2: var TXForm): Winbool{.stdcall,
    dynlib: "gdi32", importc: "GetWorldTransform".}
  #function GradientFill(DC: HDC; var p2: TTriVertex; p3: ULONG; p4: Pointer; p5, p6: ULONG): WINBOOL;stdcall; external 'gdi32' name 'GradientFill';
proc globalMemoryStatus*(Buffer: var Memorystatus){.stdcall, dynlib: "kernel32",
    importc: "GlobalMemoryStatus".}
proc heapWalk*(hHeap: THandle, lpEntry: var TProcessHeapEntry): Winbool{.
    stdcall, dynlib: "kernel32", importc: "HeapWalk".}
proc imageListGetDragImage*(ppt: var Point, pptHotspot: var Point): Himagelist{.
    stdcall, dynlib: "comctl32", importc: "ImageList_GetDragImage".}
proc inflateRect*(lprc: var TRect, dx, dy: Int): Winbool{.stdcall,
    dynlib: "user32", importc: "InflateRect".}
proc initializeAcl*(pAcl: var TACL, nAclLength, dwAclRevision: Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "InitializeAcl".}
proc initializeCriticalSectionAndSpinCount*(
    lpCriticalSection: var TRTLCriticalSection, dwSpinCount: Dword): Winbool{.
    stdcall, dynlib: "kernel32",
    importc: "InitializeCriticalSectionAndSpinCount".}
proc initializeSid*(Sid: Pointer, pIdentifierAuthority: TSIDIdentifierAuthority,
                    nSubAuthorityCount: Int8): Winbool{.stdcall,
    dynlib: "advapi32", importc: "InitializeSid".}
proc insertMenuItem*(p1: Hmenu, p2: Uint, p3: Winbool, p4: TMenuItemInfo): Winbool{.
    stdcall, dynlib: "user32", importc: "InsertMenuItemA".}
proc insertMenuItemA*(p1: Hmenu, p2: Uint, p3: Winbool, p4: TMenuItemInfoA): Winbool{.
    stdcall, dynlib: "user32", importc: "InsertMenuItemA".}
  #function InsertMenuItemW(p1: HMENU; p2: UINT; p3: WINBOOL; const p4: TMenuItemInfoW): WINBOOL; stdcall; external 'user32' name 'InsertMenuItemW';
proc intersectRect*(lprcDst: var TRect, lprcSrc1, lprcSrc2: TRect): Winbool{.
    stdcall, dynlib: "user32", importc: "IntersectRect".}
  #function InvertRect(hDC: HDC; const lprc: TRect): WINBOOL; stdcall; external 'user32' name 'InvertRect';
proc isDialogMessage*(hDlg: Hwnd, lpMsg: var TMsg): Winbool{.stdcall,
    dynlib: "user32", importc: "IsDialogMessageA".}
proc isDialogMessageA*(hDlg: Hwnd, lpMsg: var TMsg): Winbool{.stdcall,
    dynlib: "user32", importc: "IsDialogMessageA".}
proc isDialogMessageW*(hDlg: Hwnd, lpMsg: var TMsg): Winbool{.stdcall,
    dynlib: "user32", importc: "IsDialogMessageW".}
  #function IsRectEmpty(const lprc: TRect): WINBOOL; stdcall; external 'user32' name 'IsRectEmpty';
proc isValidAcl*(pAcl: TACL): Winbool{.stdcall, dynlib: "advapi32",
                                       importc: "IsValidAcl".}
proc localFileTimeToFileTime*(lpLocalFileTime: TFileTime,
                              lpFileTime: var TFileTime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "LocalFileTimeToFileTime".}
proc lockFileEx*(hFile: THandle, dwFlags, dwReserved: Dword,
                 nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh: Dword,
                 lpOverlapped: TOverlapped): Winbool{.stdcall,
    dynlib: "kernel32", importc: "LockFileEx".}
proc logonUser*(lpszUsername, lpszDomain, lpszPassword: Cstring,
                dwLogonType, dwLogonProvider: Dword, phToken: var THandle): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LogonUserA".}
proc logonUserA*(lpszUsername, lpszDomain, lpszPassword: Lpcstr,
                 dwLogonType, dwLogonProvider: Dword, phToken: var THandle): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LogonUserA".}
proc logonUserW*(lpszUsername, lpszDomain, lpszPassword: Lpwstr,
                 dwLogonType, dwLogonProvider: Dword, phToken: var THandle): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LogonUserW".}
proc lookupAccountName*(lpSystemName, lpAccountName: Cstring, Sid: Psid,
                        cbSid: var Dword, ReferencedDomainName: Cstring,
                        cbReferencedDomainName: var Dword,
                        peUse: var SidNameUse): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupAccountNameA".}
proc lookupAccountNameA*(lpSystemName, lpAccountName: Lpcstr, Sid: Psid,
                         cbSid: var Dword, ReferencedDomainName: Lpcstr,
                         cbReferencedDomainName: var Dword,
                         peUse: var SidNameUse): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupAccountNameA".}
proc lookupAccountNameW*(lpSystemName, lpAccountName: Lpwstr, Sid: Psid,
                         cbSid: var Dword, ReferencedDomainName: Lpwstr,
                         cbReferencedDomainName: var Dword,
                         peUse: var SidNameUse): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupAccountNameW".}
proc lookupAccountSid*(lpSystemName: Cstring, Sid: Psid, Name: Cstring,
                       cbName: var Dword, ReferencedDomainName: Cstring,
                       cbReferencedDomainName: var Dword,
                       peUse: var SidNameUse): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupAccountSidA".}
proc lookupAccountSidA*(lpSystemName: Lpcstr, Sid: Psid, Name: Lpcstr,
                        cbName: var Dword, ReferencedDomainName: Lpcstr,
                        cbReferencedDomainName: var Dword,
                        peUse: var SidNameUse): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupAccountSidA".}
proc lookupAccountSidW*(lpSystemName: Lpwstr, Sid: Psid, Name: Lpwstr,
                        cbName: var Dword, ReferencedDomainName: Lpwstr,
                        cbReferencedDomainName: var Dword,
                        peUse: var SidNameUse): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupAccountSidW".}
proc lookupPrivilegeDisplayName*(lpSystemName, lpName: Lpcstr,
                                 lpDisplayName: Cstring,
                                 cbDisplayName, lpLanguageId: var Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameA".}
proc lookupPrivilegeDisplayNameA*(lpSystemName, lpName: Lpcstr,
                                  lpDisplayName: Lpcstr,
                                  cbDisplayName, lpLanguageId: var Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameA".}
proc lookupPrivilegeDisplayNameW*(lpSystemName, lpName: Lpcstr,
                                  lpDisplayName: Lpwstr,
                                  cbDisplayName, lpLanguageId: var Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameW".}
proc lookupPrivilegeName*(lpSystemName: Cstring, lpLuid: var TLargeInteger,
                          lpName: Cstring, cbName: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeNameA".}
proc lookupPrivilegeNameA*(lpSystemName: Lpcstr, lpLuid: var TLargeInteger,
                           lpName: Lpcstr, cbName: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeNameA".}
proc lookupPrivilegeNameW*(lpSystemName: Lpwstr, lpLuid: var TLargeInteger,
                           lpName: Lpwstr, cbName: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeNameW".}
proc lookupPrivilegeValue*(lpSystemName, lpName: Cstring,
                           lpLuid: var TLargeInteger): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeValueA".}
proc lookupPrivilegeValueA*(lpSystemName, lpName: Lpcstr,
                            lpLuid: var TLargeInteger): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeValueA".}
proc lookupPrivilegeValueW*(lpSystemName, lpName: Lpwstr,
                            lpLuid: var TLargeInteger): Winbool{.stdcall,
    dynlib: "advapi32", importc: "LookupPrivilegeValueW".}
proc lPtoDP*(DC: Hdc, Points: Pointer, Count: Int): Winbool{.stdcall,
    dynlib: "gdi32", importc: "LPtoDP".}
proc makeAbsoluteSD*(pSelfRelativeSecurityDescriptor: PsecurityDescriptor,
                     pAbsoluteSecurityDescriptor: PsecurityDescriptor,
                     lpdwAbsoluteSecurityDescriptorSi: var Dword,
                     pDacl: var TACL, lpdwDaclSize: var Dword, pSacl: var TACL,

                     lpdwSaclSize: var Dword, pOwner: Psid,
                     lpdwOwnerSize: var Dword, pPrimaryGroup: Pointer,
                     lpdwPrimaryGroupSize: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "MakeAbsoluteSD".}
proc makeSelfRelativeSD*(pAbsoluteSecurityDescriptor: PsecurityDescriptor,
                         pSelfRelativeSecurityDescriptor: PsecurityDescriptor,
                         lpdwBufferLength: var Dword): Winbool{.stdcall,
    dynlib: "advapi32", importc: "MakeSelfRelativeSD".}
proc mapDialogRect*(hDlg: Hwnd, lpRect: var TRect): Winbool{.stdcall,
    dynlib: "user32", importc: "MapDialogRect".}
proc mapWindowPoints*(hWndFrom, hWndTo: Hwnd, lpPoints: Pointer, cPoints: Uint): Int{.
    stdcall, dynlib: "user32", importc: "MapWindowPoints".}
proc messageBoxIndirect*(MsgBoxParams: TMsgBoxParams): Winbool{.stdcall,
    dynlib: "user32", importc: "MessageBoxIndirectA".}
proc messageBoxIndirectA*(MsgBoxParams: TMsgBoxParamsA): Winbool{.stdcall,
    dynlib: "user32", importc: "MessageBoxIndirectA".}
  #function MessageBoxIndirectW(const MsgBoxParams: TMsgBoxParamsW): WINBOOL; stdcall; external 'user32' name 'MessageBoxIndirectW';
  #function ModifyWorldTransform(DC: HDC; const p2: TXForm; p3: DWORD): WINBOOL; stdcall; external 'gdi32' name 'ModifyWorldTransform';
proc msgWaitForMultipleObjects*(nCount: Dword, pHandles: Pointer,
                                fWaitAll: Winbool,
                                dwMilliseconds, dwWakeMask: Dword): Dword{.
    stdcall, dynlib: "user32", importc: "MsgWaitForMultipleObjects".}
proc msgWaitForMultipleObjectsEx*(nCount: Dword, pHandles: Pointer,
                                  dwMilliseconds, dwWakeMask, dwFlags: Dword): Dword{.
    stdcall, dynlib: "user32", importc: "MsgWaitForMultipleObjectsEx".}
  # function MultiByteToWideChar(CodePage: UINT; dwFlags: DWORD; const lpMultiByteStr: LPCSTR; cchMultiByte: Integer; lLPWSTRStr: LPWSTR; cchWideChar: Integer): Integer; stdcall; external 'kernel32' name 'MultiByteToWideChar';
proc objectOpenAuditAlarm*(SubsystemName: Cstring, HandleId: Pointer,
                           ObjectTypeName: Cstring, ObjectName: Cstring,
                           pSecurityDescriptor: PsecurityDescriptor,
                           ClientToken: THandle,
                           DesiredAccess, GrantedAccess: Dword,
                           Privileges: var TPrivilegeSet,
                           ObjectCreation, AccessGranted: Winbool,
                           GenerateOnClose: var Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectOpenAuditAlarmA".}
proc objectOpenAuditAlarmA*(SubsystemName: Lpcstr, HandleId: Pointer,
                            ObjectTypeName: Lpcstr, ObjectName: Lpcstr,
                            pSecurityDescriptor: PsecurityDescriptor,
                            ClientToken: THandle,
                            DesiredAccess, GrantedAccess: Dword,
                            Privileges: var TPrivilegeSet,
                            ObjectCreation, AccessGranted: Winbool,
                            GenerateOnClose: var Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectOpenAuditAlarmA".}
proc objectOpenAuditAlarmW*(SubsystemName: Lpwstr, HandleId: Pointer,
                            ObjectTypeName: Lpwstr, ObjectName: Lpwstr,
                            pSecurityDescriptor: PsecurityDescriptor,
                            ClientToken: THandle,
                            DesiredAccess, GrantedAccess: Dword,
                            Privileges: var TPrivilegeSet,
                            ObjectCreation, AccessGranted: Winbool,
                            GenerateOnClose: var Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectOpenAuditAlarmW".}
proc objectPrivilegeAuditAlarm*(SubsystemName: Cstring, HandleId: Pointer,
                                ClientToken: THandle, DesiredAccess: Dword,
                                Privileges: var TPrivilegeSet,
                                AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmA".}
proc objectPrivilegeAuditAlarmA*(SubsystemName: Lpcstr, HandleId: Pointer,
                                 ClientToken: THandle, DesiredAccess: Dword,
                                 Privileges: var TPrivilegeSet,
                                 AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmA".}
proc objectPrivilegeAuditAlarmW*(SubsystemName: Lpwstr, HandleId: Pointer,
                                 ClientToken: THandle, DesiredAccess: Dword,
                                 Privileges: var TPrivilegeSet,
                                 AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmW".}
proc offsetRect*(lprc: var TRect, dx, dy: Int): Winbool{.stdcall,
    dynlib: "user32", importc: "OffsetRect".}
proc offsetViewportOrgEx*(DC: Hdc, X, Y: Int, Points: Pointer): Winbool{.
    stdcall, dynlib: "gdi32", importc: "OffsetViewportOrgEx".}
proc offsetWindowOrgEx*(DC: Hdc, X, Y: Int, Points: Pointer): Winbool{.stdcall,
    dynlib: "gdi32", importc: "OffsetWindowOrgEx".}
proc openFile*(lpFileName: Lpcstr, lpReOpenBuff: var TOFStruct, uStyle: Uint): Hfile{.
    stdcall, dynlib: "kernel32", importc: "OpenFile".}
proc openProcessToken*(ProcessHandle: THandle, DesiredAccess: Dword,
                       TokenHandle: var THandle): Winbool{.stdcall,
    dynlib: "advapi32", importc: "OpenProcessToken".}
proc openThreadToken*(ThreadHandle: THandle, DesiredAccess: Dword,
                      OpenAsSelf: Winbool, TokenHandle: var THandle): Winbool{.
    stdcall, dynlib: "advapi32", importc: "OpenThreadToken".}
proc peekConsoleInput*(hConsoleInput: THandle, lpBuffer: var TInputRecord,
                       nLength: Dword, lpNumberOfEventsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "PeekConsoleInputA".}
proc peekConsoleInputA*(hConsoleInput: THandle, lpBuffer: var TInputRecord,
                        nLength: Dword, lpNumberOfEventsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "PeekConsoleInputA".}
proc peekConsoleInputW*(hConsoleInput: THandle, lpBuffer: var TInputRecord,
                        nLength: Dword, lpNumberOfEventsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "PeekConsoleInputW".}
proc peekMessage*(lpMsg: var TMsg, wnd: Hwnd,
                  wMsgFilterMin, wMsgFilterMax, wRemoveMsg: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "PeekMessageA".}
proc peekMessageA*(lpMsg: var TMsg, wnd: Hwnd,
                   wMsgFilterMin, wMsgFilterMax, wRemoveMsg: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "PeekMessageA".}
proc peekMessageW*(lpMsg: var TMsg, wnd: Hwnd,
                   wMsgFilterMin, wMsgFilterMax, wRemoveMsg: Uint): Winbool{.
    stdcall, dynlib: "user32", importc: "PeekMessageW".}
  #function PlayEnhMetaFile(DC: HDC; p2: HENHMETAFILE; const p3: TRect): WINBOOL; stdcall; external 'gdi32' name 'PlayEnhMetaFile';
proc playEnhMetaFileRecord*(DC: Hdc, p2: var THandleTable, p3: TEnhMetaRecord,
                            p4: Uint): Winbool{.stdcall, dynlib: "gdi32",
    importc: "PlayEnhMetaFileRecord".}
proc playMetaFileRecord*(DC: Hdc, p2: THandleTable, p3: TMetaRecord, p4: Uint): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PlayMetaFileRecord".}
proc plgBlt*(DC: Hdc, PointsArray: Pointer, p3: Hdc, p4, p5, p6, p7: Int,
             p8: Hbitmap, p9, p10: Int): Winbool{.stdcall, dynlib: "gdi32",
    importc: "PlgBlt".}
proc polyBezier*(DC: Hdc, Points: Pointer, Count: Dword): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PolyBezier".}
proc polyBezierTo*(DC: Hdc, Points: Pointer, Count: Dword): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PolyBezierTo".}
proc polyDraw*(DC: Hdc, Points, Types: Pointer, cCount: Int): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PolyDraw".}
proc polygon*(DC: Hdc, Points: Pointer, Count: Int): Winbool{.stdcall,
    dynlib: "gdi32", importc: "Polygon".}
proc polyline*(DC: Hdc, Points: Pointer, Count: Int): Winbool{.stdcall,
    dynlib: "gdi32", importc: "Polyline".}
proc polyLineTo*(DC: Hdc, Points: Pointer, Count: Dword): Winbool{.stdcall,
    dynlib: "gdi32", importc: "PolylineTo".}
proc polyPolygon*(DC: Hdc, Points: Pointer, nPoints: Pointer, p4: Int): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyPolygon".}
proc polyPolyline*(DC: Hdc, PointStructs: Pointer, Points: Pointer, p4: Dword): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyPolyline".}
proc polyTextOut*(DC: Hdc, PolyTextArray: Pointer, Strings: Int): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyTextOutA".}
proc polyTextOutA*(DC: Hdc, PolyTextArray: Pointer, Strings: Int): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyTextOutA".}
proc polyTextOutW*(DC: Hdc, PolyTextArray: Pointer, Strings: Int): Winbool{.
    stdcall, dynlib: "gdi32", importc: "PolyTextOutW".}
proc privilegeCheck*(ClientToken: THandle, RequiredPrivileges: TPrivilegeSet,
                     pfResult: var Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "PrivilegeCheck".}
proc privilegedServiceAuditAlarm*(SubsystemName, ServiceName: Cstring,
                                  ClientToken: THandle,
                                  Privileges: var TPrivilegeSet,
                                  AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmA".}
proc privilegedServiceAuditAlarmA*(SubsystemName, ServiceName: Lpcstr,
                                   ClientToken: THandle,
                                   Privileges: var TPrivilegeSet,
                                   AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmA".}
proc privilegedServiceAuditAlarmW*(SubsystemName, ServiceName: Lpwstr,
                                   ClientToken: THandle,
                                   Privileges: var TPrivilegeSet,
                                   AccessGranted: Winbool): Winbool{.stdcall,
    dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmW".}
  #function PtInRect(const lprc: TRect; pt: TPoint): WINBOOL; stdcall; external 'user32' name 'PtInRect';
proc queryPerformanceCounter*(lpPerformanceCount: var TLargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "QueryPerformanceCounter".}
proc queryPerformanceFrequency*(lpFrequency: var TLargeInteger): Winbool{.
    stdcall, dynlib: "kernel32", importc: "QueryPerformanceFrequency".}
  #function QueryRecoveryAgents(p1: PChar; var p2: Pointer; var p3: TRecoveryAgentInformation): DWORD;stdcall; external 'kernel32' name 'QueryRecoveryAgentsA';
  #function QueryRecoveryAgentsA(p1: LPCSTR; var p2: Pointer; var p3: TRecoveryAgentInformationA): DWORD;stdcall; external 'kernel32' name 'QueryRecoveryAgentsA';
  #function QueryRecoveryAgentsW(p1: LPWSTR; var p2: Pointer; var p3: TRecoveryAgentInformationW): DWORD;stdcall; external 'kernel32' name 'QueryRecoveryAgentsW';
proc raiseException*(dwExceptionCode: Dword, dwExceptionFlags: Dword,
                     nNumberOfArguments: Dword, lpArguments: var Dword){.
    stdcall, dynlib: "kernel32", importc: "RaiseException".}
proc unhandledExceptionFilter*(ExceptionInfo: var Emptyrecord): Long{.stdcall,
    dynlib: "kernel32", importc: "UnhandledExceptionFilter".}
proc readConsole*(hConsoleInput: THandle, lpBuffer: Pointer,
                  nNumberOfCharsToRead: Dword, lpNumberOfCharsRead: var Dword,
                  lpReserved: Pointer): Winbool{.stdcall, dynlib: "kernel32",
    importc: "ReadConsoleA".}
proc readConsoleA*(hConsoleInput: THandle, lpBuffer: Pointer,
                   nNumberOfCharsToRead: Dword, lpNumberOfCharsRead: var Dword,
                   lpReserved: Pointer): Winbool{.stdcall, dynlib: "kernel32",
    importc: "ReadConsoleA".}
proc readConsoleInput*(hConsoleInput: THandle, lpBuffer: var TInputRecord,
                       nLength: Dword, lpNumberOfEventsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleInputA".}
proc readConsoleInputA*(hConsoleInput: THandle, lpBuffer: var TInputRecord,
                        nLength: Dword, lpNumberOfEventsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleInputA".}
proc readConsoleInputW*(hConsoleInput: THandle, lpBuffer: var TInputRecord,
                        nLength: Dword, lpNumberOfEventsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleInputW".}
proc readConsoleOutput*(hConsoleOutput: THandle, lpBuffer: Pointer,
                        dwBufferSize, dwBufferCoord: TCoord,
                        lpReadRegion: var TSmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ReadConsoleOutputA".}
proc readConsoleOutputA*(hConsoleOutput: THandle, lpBuffer: Pointer,
                         dwBufferSize, dwBufferCoord: TCoord,
                         lpReadRegion: var TSmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ReadConsoleOutputA".}
proc readConsoleOutputAttribute*(hConsoleOutput: THandle, lpAttribute: Pointer,
                                 nLength: Dword, dwReadCoord: TCoord,
                                 lpNumberOfAttrsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputAttribute".}
proc readConsoleOutputCharacter*(hConsoleOutput: THandle, lpCharacter: Lpcstr,
                                 nLength: Dword, dwReadCoord: TCoord,
                                 lpNumberOfCharsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterA".}
proc readConsoleOutputCharacterA*(hConsoleOutput: THandle, lpCharacter: Lpcstr,
                                  nLength: Dword, dwReadCoord: TCoord,
                                  lpNumberOfCharsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterA".}
proc readConsoleOutputCharacterW*(hConsoleOutput: THandle, lpCharacter: Lpcstr,
                                  nLength: Dword, dwReadCoord: TCoord,
                                  lpNumberOfCharsRead: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterW".}
proc readConsoleOutputW*(hConsoleOutput: THandle, lpBuffer: Pointer,
                         dwBufferSize, dwBufferCoord: TCoord,
                         lpReadRegion: var TSmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ReadConsoleOutputW".}
proc readConsoleW*(hConsoleInput: THandle, lpBuffer: Pointer,
                   nNumberOfCharsToRead: Dword, lpNumberOfCharsRead: var Dword,
                   lpReserved: Pointer): Winbool{.stdcall, dynlib: "kernel32",
    importc: "ReadConsoleW".}
proc readEventLog*(hEventLog: THandle, dwReadFlags, dwRecordOffset: Dword,
                   lpBuffer: Pointer, nNumberOfBytesToRead: Dword,
                   pnBytesRead, pnMinNumberOfBytesNeeded: var Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "ReadEventLogA".}
proc readEventLogA*(hEventLog: THandle, dwReadFlags, dwRecordOffset: Dword,
                    lpBuffer: Pointer, nNumberOfBytesToRead: Dword,
                    pnBytesRead, pnMinNumberOfBytesNeeded: var Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "ReadEventLogA".}
proc readEventLogW*(hEventLog: THandle, dwReadFlags, dwRecordOffset: Dword,
                    lpBuffer: Pointer, nNumberOfBytesToRead: Dword,
                    pnBytesRead, pnMinNumberOfBytesNeeded: var Dword): Winbool{.
    stdcall, dynlib: "advapi32", importc: "ReadEventLogW".}
proc readFile*(hFile: THandle, Buffer: Pointer, nNumberOfBytesToRead: Dword,
               lpNumberOfBytesRead: var Dword, lpOverlapped: Poverlapped): Winbool{.
    stdcall, dynlib: "kernel32", importc: "ReadFile".}
proc readProcessMemory*(hProcess: THandle, lpBaseAddress: Pointer,
                        lpBuffer: Pointer, nSize: Dword,
                        lpNumberOfBytesRead: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ReadProcessMemory".}
  #function RectInRegion(RGN: HRGN; const p2: TRect): WINBOOL; stdcall; external 'gdi32' name 'RectInRegion';
  #function RectVisible(DC: HDC; const Rect: TRect): WINBOOL; stdcall; external 'gdi32' name 'RectVisible';
proc regConnectRegistry*(lpMachineName: Cstring, key: Hkey, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegConnectRegistryA".}
proc regConnectRegistryA*(lpMachineName: Lpcstr, key: Hkey, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegConnectRegistryA".}
proc regConnectRegistryW*(lpMachineName: Lpwstr, key: Hkey, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegConnectRegistryW".}
proc regCreateKey*(key: Hkey, lpSubKey: Cstring, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyA".}
proc regCreateKeyA*(key: Hkey, lpSubKey: Lpcstr, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyA".}
proc regCreateKeyEx*(key: Hkey, lpSubKey: Cstring, Reserved: Dword,
                     lpClass: Cstring, dwOptions: Dword, samDesired: Regsam,
                     lpSecurityAttributes: Psecurityattributes,
                     phkResult: var Hkey, lpdwDisposition: Pdword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyExA".}
proc regCreateKeyExA*(key: Hkey, lpSubKey: Lpcstr, Reserved: Dword,
                      lpClass: Lpcstr, dwOptions: Dword, samDesired: Regsam,
                      lpSecurityAttributes: Psecurityattributes,
                      phkResult: var Hkey, lpdwDisposition: Pdword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyExA".}
proc regCreateKeyExW*(key: Hkey, lpSubKey: Lpwstr, Reserved: Dword,
                      lpClass: Lpwstr, dwOptions: Dword, samDesired: Regsam,
                      lpSecurityAttributes: Psecurityattributes,
                      phkResult: var Hkey, lpdwDisposition: Pdword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyExW".}
proc regCreateKeyW*(key: Hkey, lpSubKey: Lpwstr, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegCreateKeyW".}
proc regEnumKeyEx*(key: Hkey, dwIndex: Dword, lpName: Cstring,
                   lpcbName: var Dword, lpReserved: Pointer, lpClass: Cstring,
                   lpcbClass: Pdword, lpftLastWriteTime: Pfiletime): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegEnumKeyExA".}
proc regEnumKeyExA*(key: Hkey, dwIndex: Dword, lpName: Lpcstr,
                    lpcbName: var Dword, lpReserved: Pointer, lpClass: Lpcstr,
                    lpcbClass: Pdword, lpftLastWriteTime: Pfiletime): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegEnumKeyExA".}
proc regEnumKeyExW*(key: Hkey, dwIndex: Dword, lpName: Lpwstr,
                    lpcbName: var Dword, lpReserved: Pointer, lpClass: Lpwstr,
                    lpcbClass: Pdword, lpftLastWriteTime: Pfiletime): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegEnumKeyExW".}
proc regEnumValue*(key: Hkey, dwIndex: Dword, lpValueName: Cstring,
                   lpcbValueName: var Dword, lpReserved: Pointer,
                   lpType: Pdword, lpData: Pbyte, lpcbData: Pdword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegEnumValueA".}
proc regEnumValueA*(key: Hkey, dwIndex: Dword, lpValueName: Cstring,
                    lpcbValueName: var Dword, lpReserved: Pointer,
                    lpType: Pdword, lpData: Pbyte, lpcbData: Pdword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegEnumValueA".}
proc regEnumValueW*(key: Hkey, dwIndex: Dword, lpValueName: Cstring,
                    lpcbValueName: var Dword, lpReserved: Pointer,
                    lpType: Pdword, lpData: Pbyte, lpcbData: Pdword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegEnumValueW".}
proc regGetKeySecurity*(key: Hkey, SecurityInformation: SecurityInformation,
                        pSecurityDescriptor: PsecurityDescriptor,
                        lpcbSecurityDescriptor: var Dword): Int32{.stdcall,
    dynlib: "advapi32", importc: "RegGetKeySecurity".}
proc regSetValueEx*(key: Hkey, lpValueName: Lpcstr, Reserved: Dword,
                    dwType: Dword, lpData: Pointer, cbData: Dword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegSetValueExA".}
proc regSetValueExA*(key: Hkey, lpValueName: Lpcstr, Reserved: Dword,
                     dwType: Dword, lpData: Pointer, cbData: Dword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegSetValueExA".}
proc regSetValueExW*(key: Hkey, lpValueName: Lpcwstr, Reserved: Dword,
                     dwType: Dword, lpData: Pointer, cbData: Dword): Long{.
    stdcall, dynlib: "advapi32", importc: "RegSetValueExW".}
proc registerClass*(lpWndClass: TWndClass): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassA".}
proc registerClassA*(lpWndClass: TWndClassA): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassA".}
proc registerClassEx*(WndClass: TWndClassEx): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassExA".}
proc registerClassExA*(WndClass: TWndClassExA): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassExA".}
proc registerClassExW*(WndClass: TWndClassExW): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassExW".}
proc registerClassW*(lpWndClass: TWndClassW): Atom{.stdcall, dynlib: "user32",
    importc: "RegisterClassW".}
proc regOpenKey*(key: Hkey, lpSubKey: Cstring, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegOpenKeyA".}
proc regOpenKeyA*(key: Hkey, lpSubKey: Lpcstr, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegOpenKeyA".}
proc regOpenKeyEx*(key: Hkey, lpSubKey: Cstring, ulOptions: Dword,
                   samDesired: Regsam, phkResult: var Hkey): Int32{.stdcall,
    dynlib: "advapi32", importc: "RegOpenKeyExA".}
proc regOpenKeyExA*(key: Hkey, lpSubKey: Lpcstr, ulOptions: Dword,
                    samDesired: Regsam, phkResult: var Hkey): Int32{.stdcall,
    dynlib: "advapi32", importc: "RegOpenKeyExA".}
proc regOpenKeyExW*(key: Hkey, lpSubKey: Lpwstr, ulOptions: Dword,
                    samDesired: Regsam, phkResult: var Hkey): Int32{.stdcall,
    dynlib: "advapi32", importc: "RegOpenKeyExW".}
proc regOpenKeyW*(key: Hkey, lpSubKey: Lpwstr, phkResult: var Hkey): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegOpenKeyW".}
proc regQueryMultipleValues*(key: Hkey, ValList: Pointer, NumVals: Dword,
                             lpValueBuf: Cstring, ldwTotsize: var Dword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegQueryMultipleValuesA".}
proc regQueryMultipleValuesA*(key: Hkey, ValList: Pointer, NumVals: Dword,
                              lpValueBuf: Lpcstr, ldwTotsize: var Dword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegQueryMultipleValuesA".}
proc regQueryMultipleValuesW*(key: Hkey, ValList: Pointer, NumVals: Dword,
                              lpValueBuf: Lpwstr, ldwTotsize: var Dword): Int32{.
    stdcall, dynlib: "advapi32", importc: "RegQueryMultipleValuesW".}
proc regQueryValue*(key: Hkey, lpSubKey: Cstring, lpValue: Cstring,
                    lpcbValue: var Int32): Int32{.stdcall, dynlib: "advapi32",
    importc: "RegQueryValueA".}
proc regQueryValueA*(key: Hkey, lpSubKey: Lpcstr, lpValue: Lpcstr,
                     lpcbValue: var Int32): Int32{.stdcall, dynlib: "advapi32",
    importc: "RegQueryValueA".}
proc regQueryValueW*(key: Hkey, lpSubKey: Lpwstr, lpValue: Lpwstr,
                     lpcbValue: var Int32): Int32{.stdcall, dynlib: "advapi32",
    importc: "RegQueryValueW".}
proc resetDC*(DC: Hdc, p2: Tdevicemode): Hdc{.stdcall, dynlib: "gdi32",
    importc: "ResetDCA".}
proc resetDCA*(DC: Hdc, p2: TdevicemodeA): Hdc{.stdcall, dynlib: "gdi32",
    importc: "ResetDCA".}
  #function ResetDCW(DC: HDC; const p2: TDeviceModeW): HDC; stdcall; external 'gdi32' name 'ResetDCW';
proc screenToClient*(wnd: Hwnd, lpPoint: var TPoint): Winbool{.stdcall,
    dynlib: "user32", importc: "ScreenToClient".}
proc scrollConsoleScreenBuffer*(hConsoleOutput: THandle,
                                lpScrollRectangle: TSmallRect,
                                lpClipRectangle: TSmallRect,
                                dwDestinationOrigin: TCoord,
                                lpFill: var TCharInfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ScrollConsoleScreenBufferA".}
proc scrollConsoleScreenBufferA*(hConsoleOutput: THandle,
                                 lpScrollRectangle: TSmallRect,
                                 lpClipRectangle: TSmallRect,
                                 dwDestinationOrigin: TCoord,
                                 lpFill: var TCharInfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ScrollConsoleScreenBufferA".}
proc scrollConsoleScreenBufferW*(hConsoleOutput: THandle,
                                 lpScrollRectangle: TSmallRect,
                                 lpClipRectangle: TSmallRect,
                                 dwDestinationOrigin: TCoord,
                                 lpFill: var TCharInfo): Winbool{.stdcall,
    dynlib: "kernel32", importc: "ScrollConsoleScreenBufferW".}
proc scrollWindow*(wnd: Hwnd, XAmount: Int32, YAmount: Int32, rect: Lprect,
                   lpClipRect: Lprect): Winbool{.stdcall, dynlib: "user32",
    importc: "ScrollWindow".}
proc scrollWindowEx*(wnd: Hwnd, dx: Int32, dy: Int32, prcScroll: Lprect,
                     prcClip: Lprect, hrgnUpdate: Hrgn, prcUpdate: Lprect,
                     flags: Uint): Int32{.stdcall, dynlib: "user32",
    importc: "ScrollWindowEx".}
  #function ScrollDC(DC: HDC; DX, DY: Integer; var Scroll, Clip: TRect; Rgn: HRGN; Update: PRect): WINBOOL; stdcall; external 'user32' name 'ScrollDC';
  #function SearchPath(lpPath, lpFileName, lpExtension: PChar; nBufferLength: DWORD; lpBuffer: PChar; var lpFilePart: PChar): DWORD;stdcall; external 'kernel32' name 'SearchPathA';
  #function SearchPathA(lpPath, lpFileName, lpExtension: LPCSTR; nBufferLength: DWORD; lpBuffer: LPCSTR; var lpFilePart: LPCSTR): DWORD; stdcall; external 'kernel32' name 'SearchPathA';
  #function SearchPathW(lpPath, lpFileName, lpExtension: LPWSTR; nBufferLength: DWORD; lpBuffer: LPWSTR; var lpFilePart: LPWSTR): DWORD; stdcall; external 'kernel32' name 'SearchPathW';
  #function SendInput(cInputs: UINT; var pInputs: TInput; cbSize: Integer): UINT;stdcall; external 'user32' name 'SendInput';
proc sendMessageTimeout*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam,
                         fuFlags, uTimeout: Uint, lpdwResult: var Dword): Lresult{.
    stdcall, dynlib: "user32", importc: "SendMessageTimeoutA".}
proc sendMessageTimeoutA*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam,
                          fuFlags, uTimeout: Uint, lpdwResult: var Dword): Lresult{.
    stdcall, dynlib: "user32", importc: "SendMessageTimeoutA".}
proc sendMessageTimeoutW*(wnd: Hwnd, Msg: Uint, wp: Wparam, lp: Lparam,
                          fuFlags, uTimeout: Uint, lpdwResult: var Dword): Lresult{.
    stdcall, dynlib: "user32", importc: "SendMessageTimeoutW".}
  #function SetAclInformation(var pAcl: TACL; pAclInformation: Pointer; nAclInformationLength: DWORD; dwAclInformationClass: TAclInformationClass): WINBOOL; stdcall; external 'advapi32' name 'SetAclInformation';
  #function SetColorAdjustment(DC: HDC; const p2: TColorAdjustment): WINBOOL; stdcall; external 'gdi32' name 'SetColorAdjustment';
proc setCommConfig*(hCommDev: THandle, lpCC: TCommConfig, dwSize: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetCommConfig".}
proc setCommState*(hFile: THandle, lpDCB: TDCB): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetCommState".}
proc setCommTimeouts*(hFile: THandle, lpCommTimeouts: TCommTimeouts): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetCommTimeouts".}
proc setConsoleCursorInfo*(hConsoleOutput: THandle,
                           lpConsoleCursorInfo: TConsoleCursorInfo): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetConsoleCursorInfo".}
  #function SetConsoleWindowInfo(hConsoleOutput: THandle; bAbsolute: WINBOOL; const lpConsoleWindow: TSmallRect): WINBOOL; stdcall; external 'kernel32' name 'SetConsoleWindowInfo';
proc setCriticalSectionSpinCount*(lpCriticalSection: var TRTLCriticalSection,
                                  dwSpinCount: Dword): Dword{.stdcall,
    dynlib: "kernel32", importc: "SetCriticalSectionSpinCount".}
proc setDeviceGammaRamp*(DC: Hdc, Ramp: Pointer): Winbool{.stdcall,
    dynlib: "gdi32", importc: "SetDeviceGammaRamp".}
proc setDIBColorTable*(DC: Hdc, p2, p3: Uint, RGBQuadSTructs: Pointer): Uint{.
    stdcall, dynlib: "gdi32", importc: "SetDIBColorTable".}
proc setDIBits*(DC: Hdc, Bitmap: Hbitmap, StartScan, NumScans: Uint,
                Bits: Pointer, BitsInfo: var TBitmapInfo, Usage: Uint): Int{.
    stdcall, dynlib: "gdi32", importc: "SetDIBits".}
  #function SetDIBitsToDevice(DC: HDC; DestX, DestY: Integer; Width, Height: DWORD; SrcX, SrcY: Integer; nStartScan, NumScans: UINT; Bits: Pointer; var BitsInfo: TBitmapInfo; Usage: UINT): Integer; stdcall; external 'gdi32' name 'SetDIBitsToDevice';
proc setEnhMetaFileBits*(para1: Uint, para2: Pointer): Henhmetafile{.stdcall,
    dynlib: "gdi32", importc: "SetEnhMetaFileBits".}
proc setFileTime*(hFile: Handle, lpCreationTime: var Filetime,
                  lpLastAccessTime: var Filetime, lpLastWriteTime: var Filetime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetFileTime".}
  #function SetKeyboardState(var KeyState: TKeyboardState): WINBOOL; stdcall; external 'user32' name 'SetKeyboardState';
  #function SetLocalTime(const lpSystemTime: TSystemTime): WINBOOL; stdcall; external 'kernel32' name 'SetLocalTime';
  #function SetMenuInfo(menu: HMENU; const lpcmi: TMenuInfo): WINBOOL;stdcall; external 'user32' name 'SetMenuInfo';
proc setMenuItemInfo*(p1: Hmenu, p2: Uint, p3: Winbool, p4: TMenuItemInfo): Winbool{.
    stdcall, dynlib: "user32", importc: "SetMenuItemInfoA".}
proc setMenuItemInfoA*(p1: Hmenu, p2: Uint, p3: Winbool, p4: TMenuItemInfoA): Winbool{.
    stdcall, dynlib: "user32", importc: "SetMenuItemInfoA".}
  #function SetMenuItemInfoW(p1: HMENU; p2: UINT; p3: WINBOOL; const p4: TMenuItemInfoW): WINBOOL; stdcall; external 'user32' name 'SetMenuItemInfoW';
proc setMetaFileBitsEx*(p1: Uint, p2: Cstring): Hmetafile{.stdcall,
    dynlib: "gdi32", importc: "SetMetaFileBitsEx".}
proc setNamedPipeHandleState*(hNamedPipe: THandle, lpMode: var Dword,
    lpMaxCollectionCount, lpCollectDataTimeout: Pointer): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetNamedPipeHandleState".}
proc setPaletteEntries*(Palette: Hpalette, StartIndex, NumEntries: Uint,
                        PaletteEntries: Pointer): Uint{.stdcall,
    dynlib: "gdi32", importc: "SetPaletteEntries".}
  #function SetPrivateObjectSecurity(SecurityInformation: SECURITY_INFORMATION; ModificationDescriptor: PSecurityDescriptor; var ObjectsSecurityDescriptor: PSecurityDescriptor; const GenericMapping: TGenericMapping; Token: THandle): WINBOOL;
  #  stdcall; external 'advapi32' name 'SetPrivateObjectSecurity';
  #function SetPrivateObjectSecurityEx(SecurityInformation: SECURITY_INFORMATION; ModificationDescriptor: PSecurityDescriptor; var ObjectsSecurityDescriptor: PSecurityDescriptor; AutoInheritFlags: ULONG;
  #  const GenericMapping: TGenericMapping; Token: THandle): WINBOOL;stdcall; external 'advapi32' name 'SetPrivateObjectSecurityEx';
proc setRect*(lprc: var TRect, xLeft, yTop, xRight, yBottom: Int): Winbool{.
    stdcall, dynlib: "user32", importc: "SetRect".}
proc setRectEmpty*(lprc: var TRect): Winbool{.stdcall, dynlib: "user32",
    importc: "SetRectEmpty".}
proc setScrollInfo*(wnd: Hwnd, BarFlag: Int, ScrollInfo: TScrollInfo,
                    Redraw: Winbool): Int{.stdcall, dynlib: "user32",
    importc: "SetScrollInfo".}
proc setSysColors*(cElements: Int, lpaElements: Pointer, lpaRgbValues: Pointer): Winbool{.
    stdcall, dynlib: "user32", importc: "SetSysColors".}
  #function SetSystemTime(const lpSystemTime: TSystemTime): WINBOOL; stdcall; external 'kernel32' name 'SetSystemTime';
proc setThreadContext*(hThread: THandle, lpContext: TContext): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SetThreadContext".}
  #function SetTimeZoneInformation(const lpTimeZoneInformation: TTimeZoneInformation): WINBOOL; stdcall; external 'kernel32' name 'SetTimeZoneInformation';
proc setUserObjectSecurity*(hObj: THandle, pSIRequested: var Dword,
                            pSID: PsecurityDescriptor): Winbool{.stdcall,
    dynlib: "user32", importc: "SetUserObjectSecurity".}
proc setWaitableTimer*(hTimer: THandle, lpDueTime: var TLargeInteger,
                       lPeriod: Int32, pfnCompletionRoutine: TFNTimerAPCRoutine,
                       lpArgToCompletionRoutine: Pointer, fResume: Winbool): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SetWaitableTimer".}
proc setWinMetaFileBits*(p1: Uint, p2: Cstring, p3: Hdc, p4: TMetaFilePict): Henhmetafile{.
    stdcall, dynlib: "gdi32", importc: "SetWinMetaFileBits".}
  #function SetWorldTransform(DC: HDC; const p2: TXForm): WINBOOL; stdcall; external 'gdi32' name 'SetWorldTransform';
proc startDoc*(DC: Hdc, p2: TDocInfo): Int{.stdcall, dynlib: "gdi32",
    importc: "StartDocA".}
proc startDocA*(DC: Hdc, p2: TDocInfoA): Int{.stdcall, dynlib: "gdi32",
    importc: "StartDocA".}
  #function StartDocW(DC: HDC; const p2: TDocInfoW): Integer; stdcall; external 'gdi32' name 'StartDocW';
  #function StretchDIBits(DC: HDC; DestX, DestY, DestWidth, DestHegiht, SrcX, SrcY, SrcWidth, SrcHeight: Integer; Bits: Pointer; var BitsInfo: TBitmapInfo; Usage: UINT; Rop: DWORD): Integer; stdcall; external 'gdi32' name 'StretchDIBits';
proc subtractRect*(lprcDst: var TRect, lprcSrc1, lprcSrc2: TRect): Winbool{.
    stdcall, dynlib: "user32", importc: "SubtractRect".}
proc systemTimeToFileTime*(lpSystemTime: TSystemTime, lpFileTime: var TFileTime): Winbool{.
    stdcall, dynlib: "kernel32", importc: "SystemTimeToFileTime".}
proc systemTimeToTzSpecificLocalTime*(lpTimeZoneInformation: Ptimezoneinformation,
    lpUniversalTime, lpLocalTime: var TSystemTime): Winbool{.stdcall,
    dynlib: "kernel32", importc: "SystemTimeToTzSpecificLocalTime".}
proc tabbedTextOut*(hDC: Hdc, X, Y: Int, lpString: Cstring,
                    nCount, nTabPositions: Int, lpnTabStopPositions: Pointer,
                    nTabOrigin: Int): Int32{.stdcall, dynlib: "user32",
    importc: "TabbedTextOutA".}
proc tabbedTextOutA*(hDC: Hdc, X, Y: Int, lpString: Lpcstr,
                     nCount, nTabPositions: Int, lpnTabStopPositions: Pointer,
                     nTabOrigin: Int): Int32{.stdcall, dynlib: "user32",
    importc: "TabbedTextOutA".}
proc tabbedTextOutW*(hDC: Hdc, X, Y: Int, lpString: Lpwstr,
                     nCount, nTabPositions: Int, lpnTabStopPositions: Pointer,
                     nTabOrigin: Int): Int32{.stdcall, dynlib: "user32",
    importc: "TabbedTextOutW".}
  #function ToAscii(uVirtKey, uScanCode: UINT; const KeyState: TKeyboardState; lpChar: PChar; uFlags: UINT): Integer; stdcall; external 'user32' name 'ToAscii';
  #function ToAsciiEx(uVirtKey: UINT; uScanCode: UINT; const KeyState: TKeyboardState; lpChar: PChar; uFlags: UINT; dwhkl: HKL): Integer; stdcall; external 'user32' name 'ToAsciiEx';
  #function ToUnicode(wVirtKey, wScanCode: UINT; const KeyState: TKeyboardState; var pwszBuff; cchBuff: Integer; wFlags: UINT): Integer; stdcall; external 'user32' name 'ToUnicode';
  # Careful, NT and higher only.
proc trackMouseEvent*(EventTrack: var TTrackMouseEvent): Winbool{.stdcall,
    dynlib: "user32", importc: "TrackMouseEvent".}
proc trackMouseEvent*(lpEventTrack: PTrackMouseEvent): Winbool{.stdcall,
    dynlib: "user32", importc: "TrackMouseEvent".}
proc trackPopupMenu*(menu: Hmenu, uFlags: Uint, x: Int32, y: Int32,
                     nReserved: Int32, wnd: Hwnd, prcRect: Prect): Winbool{.
    stdcall, dynlib: "user32", importc: "TrackPopupMenu".}
proc transactNamedPipe*(hNamedPipe: THandle, lpInBuffer: Pointer,
                        nInBufferSize: Dword, lpOutBuffer: Pointer,
                        nOutBufferSize: Dword, lpBytesRead: var Dword,
                        lpOverlapped: Poverlapped): Winbool{.stdcall,
    dynlib: "kernel32", importc: "TransactNamedPipe".}
proc translateAccelerator*(wnd: Hwnd, hAccTable: Haccel, lpMsg: var TMsg): Int{.
    stdcall, dynlib: "user32", importc: "TranslateAcceleratorA".}
proc translateAcceleratorA*(wnd: Hwnd, hAccTable: Haccel, lpMsg: var TMsg): Int{.
    stdcall, dynlib: "user32", importc: "TranslateAcceleratorA".}
proc translateAcceleratorW*(wnd: Hwnd, hAccTable: Haccel, lpMsg: var TMsg): Int{.
    stdcall, dynlib: "user32", importc: "TranslateAcceleratorW".}
proc translateCharsetInfo*(lpSrc: var Dword, lpCs: var TCharsetInfo,
                           dwFlags: Dword): Winbool{.stdcall, dynlib: "gdi32",
    importc: "TranslateCharsetInfo".}
proc translateMDISysAccel*(hWndClient: Hwnd, lpMsg: TMsg): Winbool{.stdcall,
    dynlib: "user32", importc: "TranslateMDISysAccel".}
proc translateMessage*(lpMsg: TMsg): Winbool{.stdcall, dynlib: "user32",
    importc: "TranslateMessage".}
  #function TransparentDIBits(DC: HDC; p2, p3, p4, p5: Integer; const p6: Pointer; const p7: PBitmapInfo; p8: UINT; p9, p10, p11, p12: Integer; p13: UINT): WINBOOL;stdcall; external 'gdi32' name 'TransparentDIBits';
proc tryEnterCriticalSection*(lpCriticalSection: var TRTLCriticalSection): Winbool{.
    stdcall, dynlib: "kernel32", importc: "TryEnterCriticalSection".}
proc unhandledExceptionFilter*(ExceptionInfo: TExceptionPointers): Int32{.
    stdcall, dynlib: "kernel32", importc: "UnhandledExceptionFilter".}
proc unionRect*(lprcDst: var TRect, lprcSrc1, lprcSrc2: TRect): Winbool{.
    stdcall, dynlib: "user32", importc: "UnionRect".}
proc unlockFileEx*(hFile: THandle, dwReserved, nNumberOfBytesToUnlockLow: Dword,
                   nNumberOfBytesToUnlockHigh: Dword, lpOverlapped: TOverlapped): Winbool{.
    stdcall, dynlib: "kernel32", importc: "UnlockFileEx".}
proc verFindFile*(uFlags: Dword,
                  szFileName, szWinDir, szAppDir, szCurDir: Cstring,
                  lpuCurDirLen: var Uint, szDestDir: Cstring,
                  lpuDestDirLen: var Uint): Dword{.stdcall, dynlib: "version",
    importc: "VerFindFileA".}
proc verFindFileA*(uFlags: Dword,
                   szFileName, szWinDir, szAppDir, szCurDir: Lpcstr,
                   lpuCurDirLen: var Uint, szDestDir: Lpcstr,
                   lpuDestDirLen: var Uint): Dword{.stdcall, dynlib: "version",
    importc: "VerFindFileA".}
proc verFindFileW*(uFlags: Dword,
                   szFileName, szWinDir, szAppDir, szCurDir: Lpwstr,
                   lpuCurDirLen: var Uint, szDestDir: Lpwstr,
                   lpuDestDirLen: var Uint): Dword{.stdcall, dynlib: "version",
    importc: "VerFindFileW".}
proc verInstallFile*(uFlags: Dword, szSrcFileName, szDestFileName, szSrcDir,
                                    szDestDir, szCurDir, szTmpFile: Cstring,
                     lpuTmpFileLen: var Uint): Dword{.stdcall,
    dynlib: "version", importc: "VerInstallFileA".}
proc verInstallFileA*(uFlags: Dword, szSrcFileName, szDestFileName, szSrcDir,
                                     szDestDir, szCurDir, szTmpFile: Lpcstr,
                      lpuTmpFileLen: var Uint): Dword{.stdcall,
    dynlib: "version", importc: "VerInstallFileA".}
proc verInstallFileW*(uFlags: Dword, szSrcFileName, szDestFileName, szSrcDir,
                                     szDestDir, szCurDir, szTmpFile: Lpwstr,
                      lpuTmpFileLen: var Uint): Dword{.stdcall,
    dynlib: "version", importc: "VerInstallFileW".}
proc verQueryValue*(pBlock: Pointer, lpSubBlock: Cstring,
                    lplpBuffer: var Pointer, puLen: var Uint): Winbool{.stdcall,
    dynlib: "version", importc: "VerQueryValueA".}
proc verQueryValueA*(pBlock: Pointer, lpSubBlock: Lpcstr,
                     lplpBuffer: var Pointer, puLen: var Uint): Winbool{.
    stdcall, dynlib: "version", importc: "VerQueryValueA".}
proc verQueryValueW*(pBlock: Pointer, lpSubBlock: Lpwstr,
                     lplpBuffer: var Pointer, puLen: var Uint): Winbool{.
    stdcall, dynlib: "version", importc: "VerQueryValueW".}
proc virtualQuery*(lpAddress: Pointer, lpBuffer: var TMemoryBasicInformation,
                   dwLength: Dword): Dword{.stdcall, dynlib: "kernel32",
    importc: "VirtualQuery".}
proc virtualQueryEx*(hProcess: THandle, lpAddress: Pointer,
                     lpBuffer: var TMemoryBasicInformation, dwLength: Dword): Dword{.
    stdcall, dynlib: "kernel32", importc: "VirtualQueryEx".}
proc waitCommEvent*(hFile: THandle, lpEvtMask: var Dword,
                    lpOverlapped: Poverlapped): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WaitCommEvent".}
proc waitForDebugEvent*(lpDebugEvent: var TDebugEvent, dwMilliseconds: Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WaitForDebugEvent".}
proc wglDescribeLayerPlane*(p1: Hdc, p2, p3: Int, p4: Int,
                            p5: var TLayerPlaneDescriptor): Winbool{.stdcall,
    dynlib: "opengl32", importc: "wglDescribeLayerPlane".}
proc wglGetLayerPaletteEntries*(p1: Hdc, p2, p3, p4: Int, pcr: Pointer): Int{.
    stdcall, dynlib: "opengl32", importc: "wglGetLayerPaletteEntries".}
proc wglSetLayerPaletteEntries*(p1: Hdc, p2, p3, p4: Int, pcr: Pointer): Int{.
    stdcall, dynlib: "opengl32", importc: "wglSetLayerPaletteEntries".}
  #function wglSwapMultipleBuffers(p1: UINT; const p2: PWGLSwap): DWORD;stdcall; external 'opengl32' name 'wglSwapMultipleBuffers';
  #function WinSubmitCertificate(var lpCertificate: TWinCertificate): WINBOOL;stdcall; external 'imaghlp' name 'WinSubmitCertificate';
  #function WinVerifyTrust(wnd: HWND; const ActionID: TGUID; ActionData: Pointer): Longint;stdcall; external 'imaghlp' name 'WinVerifyTrust';
proc wNetAddConnection2*(lpNetResource: var TNetResource,
                         lpPassword, lpUserName: Cstring, dwFlags: Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetAddConnection2A".}
proc wNetAddConnection2A*(lpNetResource: var TNetResourceA,
                          lpPassword, lpUserName: Lpcstr, dwFlags: Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetAddConnection2A".}
  #function WNetAddConnection2W(var lpNetResource: TNetResourceW; lpPassword, lpUserName: LPWSTR; dwFlags: DWORD): DWORD; stdcall; external 'mpr' name 'WNetAddConnection2W';
proc wNetAddConnection3*(hwndOwner: Hwnd, lpNetResource: var TNetResource,
                         lpPassword, lpUserName: Cstring, dwFlags: Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetAddConnection3A".}
proc wNetAddConnection3A*(hwndOwner: Hwnd, lpNetResource: var TNetResourceA,
                          lpPassword, lpUserName: Lpcstr, dwFlags: Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetAddConnection3A".}
  #function WNetAddConnection3W(hwndOwner: HWND; var lpNetResource: TNetResourceW; lpPassword, lpUserName: LPWSTR; dwFlags: DWORD): DWORD; stdcall; external 'mpr' name 'WNetAddConnection3W';
proc wNetConnectionDialog1*(lpConnDlgStruct: var TConnectDlgStruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetConnectionDialog1A".}
proc wNetConnectionDialog1A*(lpConnDlgStruct: var TConnectDlgStruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetConnectionDialog1A".}
  #function WNetConnectionDialog1W(var lpConnDlgStruct: TConnectDlgStruct): DWORD; stdcall; external 'mpr' name 'WNetConnectionDialog1W';
proc wNetDisconnectDialog1*(lpConnDlgStruct: var TDiscDlgStruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetDisconnectDialog1A".}
proc wNetDisconnectDialog1A*(lpConnDlgStruct: var TDiscDlgStructA): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetDisconnectDialog1A".}
  #function WNetDisconnectDialog1W(var lpConnDlgStruct: TDiscDlgStructW): DWORD; stdcall; external 'mpr' name 'WNetDisconnectDialog1W';
proc wNetEnumResource*(hEnum: THandle, lpcCount: var Dword, lpBuffer: Pointer,
                       lpBufferSize: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetEnumResourceA".}
proc wNetEnumResourceA*(hEnum: THandle, lpcCount: var Dword, lpBuffer: Pointer,
                        lpBufferSize: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetEnumResourceA".}
proc wNetEnumResourceW*(hEnum: THandle, lpcCount: var Dword, lpBuffer: Pointer,
                        lpBufferSize: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetEnumResourceW".}
proc wNetGetConnection*(lpLocalName: Cstring, lpRemoteName: Cstring,
                        lpnLength: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetConnectionA".}
proc wNetGetConnectionA*(lpLocalName: Lpcstr, lpRemoteName: Lpcstr,
                         lpnLength: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetConnectionA".}
proc wNetGetConnectionW*(lpLocalName: Lpwstr, lpRemoteName: Lpwstr,
                         lpnLength: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetConnectionW".}
proc wNetGetLastError*(lpError: var Dword, lpErrorBuf: Cstring,
                       nErrorBufSize: Dword, lpNameBuf: Cstring,
                       nNameBufSize: Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetLastErrorA".}
proc wNetGetLastErrorA*(lpError: var Dword, lpErrorBuf: Lpcstr,
                        nErrorBufSize: Dword, lpNameBuf: Lpcstr,
                        nNameBufSize: Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetLastErrorA".}
proc wNetGetLastErrorW*(lpError: var Dword, lpErrorBuf: Lpwstr,
                        nErrorBufSize: Dword, lpNameBuf: Lpwstr,
                        nNameBufSize: Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetLastErrorW".}
proc wNetGetNetworkInformation*(lpProvider: Cstring,
                                lpNetInfoStruct: var TNetInfoStruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetNetworkInformationA".}
proc wNetGetNetworkInformationA*(lpProvider: Lpcstr,
                                 lpNetInfoStruct: var TNetInfoStruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetNetworkInformationA".}
proc wNetGetNetworkInformationW*(lpProvider: Lpwstr,
                                 lpNetInfoStruct: var TNetInfoStruct): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetNetworkInformationW".}
proc wNetGetProviderName*(dwNetType: Dword, lpProviderName: Cstring,
                          lpBufferSize: var Dword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetGetProviderNameA".}
proc wNetGetProviderNameA*(dwNetType: Dword, lpProviderName: Lpcstr,
                           lpBufferSize: var Dword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetGetProviderNameA".}
proc wNetGetProviderNameW*(dwNetType: Dword, lpProviderName: Lpwstr,
                           lpBufferSize: var Dword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetGetProviderNameW".}
proc wNetGetResourceParent*(lpNetResource: Pnetresource, lpBuffer: Pointer,
                            cbBuffer: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetGetResourceParentA".}
proc wNetGetResourceParentA*(lpNetResource: Pnetresourcea, lpBuffer: Pointer,
                             cbBuffer: var Dword): Dword{.stdcall,
    dynlib: "mpr", importc: "WNetGetResourceParentA".}
  #function WNetGetResourceParentW(lpNetResource: PNetResourceW; lpBuffer: Pointer; var cbBuffer: DWORD): DWORD;stdcall; external 'mpr' name 'WNetGetResourceParentW';
proc wNetGetUniversalName*(lpLocalPath: Cstring, dwInfoLevel: Dword,
                           lpBuffer: Pointer, lpBufferSize: var Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUniversalNameA".}
proc wNetGetUniversalNameA*(lpLocalPath: Lpcstr, dwInfoLevel: Dword,
                            lpBuffer: Pointer, lpBufferSize: var Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUniversalNameA".}
proc wNetGetUniversalNameW*(lpLocalPath: Lpwstr, dwInfoLevel: Dword,
                            lpBuffer: Pointer, lpBufferSize: var Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUniversalNameW".}
proc wNetGetUser*(lpName: Cstring, lpUserName: Cstring, lpnLength: var Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUserA".}
proc wNetGetUserA*(lpName: Lpcstr, lpUserName: Lpcstr, lpnLength: var Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUserA".}
proc wNetGetUserW*(lpName: Lpwstr, lpUserName: Lpwstr, lpnLength: var Dword): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetGetUserW".}
proc wNetOpenEnum*(dwScope, dwType, dwUsage: Dword, lpNetResource: Pnetresource,
                   lphEnum: var THandle): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetOpenEnumA".}
proc wNetOpenEnumA*(dwScope, dwType, dwUsage: Dword,
                    lpNetResource: Pnetresourcea, lphEnum: var THandle): Dword{.
    stdcall, dynlib: "mpr", importc: "WNetOpenEnumA".}
  #function WNetOpenEnumW(dwScope, dwType, dwUsage: DWORD; lpNetResource: PNetResourceW; var lphEnum: THandle): DWORD; stdcall; external 'mpr' name 'WNetOpenEnumW';
proc wNetUseConnection*(hwndOwner: Hwnd, lpNetResource: var TNetResource,
                        lpUserID: Cstring, lpPassword: Cstring, dwFlags: Dword,
                        lpAccessName: Cstring, lpBufferSize: var Dword,
                        lpResult: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetUseConnectionA".}
proc wNetUseConnectionA*(hwndOwner: Hwnd, lpNetResource: var TNetResourceA,
                         lpUserID: Lpcstr, lpPassword: Lpcstr, dwFlags: Dword,
                         lpAccessName: Lpcstr, lpBufferSize: var Dword,
                         lpResult: var Dword): Dword{.stdcall, dynlib: "mpr",
    importc: "WNetUseConnectionA".}
  #function WNetUseConnectionW(hwndOwner: HWND; var lpNetResource: TNetResourceW; lpUserID: LPWSTR; lpPassword: LPWSTR; dwFlags: DWORD; lpAccessName: LPWSTR; var lpBufferSize: DWORD; var lpResult: DWORD): DWORD; stdcall; external 'mpr' name 'WNetUseConnectionW';
proc writeConsole*(hConsoleOutput: THandle, lpBuffer: Pointer,
                   nNumberOfCharsToWrite: Dword,
                   lpNumberOfCharsWritten: var Dword, lpReserved: Pointer): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleA".}
proc writeConsoleA*(hConsoleOutput: THandle, lpBuffer: Pointer,
                    nNumberOfCharsToWrite: Dword,
                    lpNumberOfCharsWritten: var Dword, lpReserved: Pointer): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleA".}
proc writeConsoleInput*(hConsoleInput: THandle, lpBuffer: TInputRecord,
                        nLength: Dword, lpNumberOfEventsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleInputA".}
proc writeConsoleInputA*(hConsoleInput: THandle, lpBuffer: TInputRecord,
                         nLength: Dword, lpNumberOfEventsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleInputA".}
proc writeConsoleInputW*(hConsoleInput: THandle, lpBuffer: TInputRecord,
                         nLength: Dword, lpNumberOfEventsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleInputW".}
proc writeConsoleOutput*(hConsoleOutput: THandle, lpBuffer: Pointer,
                         dwBufferSize, dwBufferCoord: TCoord,
                         lpWriteRegion: var TSmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteConsoleOutputA".}
proc writeConsoleOutputA*(hConsoleOutput: THandle, lpBuffer: Pointer,
                          dwBufferSize, dwBufferCoord: TCoord,
                          lpWriteRegion: var TSmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteConsoleOutputA".}
proc writeConsoleOutputAttribute*(hConsoleOutput: THandle, lpAttribute: Pointer,
                                  nLength: Dword, dwWriteCoord: TCoord,
                                  lpNumberOfAttrsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputAttribute".}
proc writeConsoleOutputCharacter*(hConsoleOutput: THandle, lpCharacter: Cstring,
                                  nLength: Dword, dwWriteCoord: TCoord,
                                  lpNumberOfCharsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterA".}
proc writeConsoleOutputCharacterA*(hConsoleOutput: THandle, lpCharacter: Lpcstr,
                                   nLength: Dword, dwWriteCoord: TCoord,
                                   lpNumberOfCharsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterA".}
proc writeConsoleOutputCharacterW*(hConsoleOutput: THandle, lpCharacter: Lpwstr,
                                   nLength: Dword, dwWriteCoord: TCoord,
                                   lpNumberOfCharsWritten: var Dword): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterW".}
proc writeConsoleOutputW*(hConsoleOutput: THandle, lpBuffer: Pointer,
                          dwBufferSize, dwBufferCoord: TCoord,
                          lpWriteRegion: var TSmallRect): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteConsoleOutputW".}
proc writeConsoleW*(hConsoleOutput: THandle, lpBuffer: Pointer,
                    nNumberOfCharsToWrite: Dword,
                    lpNumberOfCharsWritten: var Dword, lpReserved: Pointer): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteConsoleW".}
proc writeFile*(hFile: THandle, Buffer: Pointer, nNumberOfBytesToWrite: Dword,
                lpNumberOfBytesWritten: var Dword, lpOverlapped: Poverlapped): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WriteFile".}
proc writeFileEx*(hFile: THandle, lpBuffer: Pointer,
                  nNumberOfBytesToWrite: Dword, lpOverlapped: TOverlapped,
                  lpCompletionRoutine: Farproc): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteFileEx".}
proc writePrivateProfileStructA*(lpszSection, lpszKey: Lpcstr, lpStruct: Lpvoid,
                                 uSizeStruct: Uint, szFile: Lpcstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WritePrivateProfileStructA".}
proc writePrivateProfileStructW*(lpszSection, lpszKey: Lpcwstr,
                                 lpStruct: Lpvoid, uSizeStruct: Uint,
                                 szFile: Lpcwstr): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WritePrivateProfileStructW".}
proc writePrivateProfileStruct*(lpszSection, lpszKey: Lpctstr, lpStruct: Lpvoid,
                                uSizeStruct: Uint, szFile: Lpctstr): Winbool{.
    stdcall, dynlib: "kernel32", importc: "WritePrivateProfileStructA".}
proc writeProcessMemory*(hProcess: THandle, lpBaseAddress: Pointer,
                         lpBuffer: Pointer, nSize: Dword,
                         lpNumberOfBytesWritten: var Dword): Winbool{.stdcall,
    dynlib: "kernel32", importc: "WriteProcessMemory".}
proc sHFileOperation*(para1: var Shfileopstruct): Int32{.stdcall,
    dynlib: "shell32", importc: "SHFileOperation".}

  # these are old Win16 funcs that under win32 are aliases for several char* funcs.
# exist under Win32 (even in SDK's from 2002), but are officially "deprecated"
proc ansiNext*(lpsz: Lpcstr): Lpstr{.stdcall, dynlib: "user32",
                                     importc: "CharNextA".}
proc ansiPrev*(lpszStart: Lpcstr, lpszCurrent: Lpcstr): Lpstr{.stdcall,
    dynlib: "user32", importc: "CharPrevA".}
proc ansiToOem*(lpszSrc: Lpcstr, lpszDst: Lpstr): Winbool{.stdcall,
    dynlib: "user32", importc: "CharToOemA".}
proc oemToAnsi*(lpszSrc: Lpcstr, lpszDst: Lpstr): Winbool{.stdcall,
    dynlib: "user32", importc: "OemToCharA".}
proc ansiToOemBuff*(lpszSrc: Lpcstr, lpszDst: Lpstr, cchDstLength: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "CharToOemBuffA".}
proc oemToAnsiBuff*(lpszSrc: Lpcstr, lpszDst: Lpstr, cchDstLength: Dword): Winbool{.
    stdcall, dynlib: "user32", importc: "OemToCharBuffA".}
proc ansiUpper*(lpsz: Lpstr): Lpstr{.stdcall, dynlib: "user32",
                                     importc: "CharUpperA".}
proc ansiUpperBuff*(lpsz: Lpstr, cchLength: Dword): Dword{.stdcall,
    dynlib: "user32", importc: "CharUpperBuffA".}
proc ansiLower*(lpsz: Lpstr): Lpstr{.stdcall, dynlib: "user32",
                                     importc: "CharLowerA".}
proc ansiLowerBuff*(lpsz: Lpstr, cchLength: Dword): Dword{.stdcall,
    dynlib: "user32", importc: "CharLowerBuffA".}

#== Implementation of macros

# WinBase.h

proc freeModule*(h: Hinst): Winbool =
  result = freeLibrary(h)

proc makeProcInstance*(p, i: Pointer): Pointer =
  result = p

proc freeProcInstance*(p: Pointer): Pointer =
  result = p

proc globalDiscard*(hglbMem: Hglobal): Hglobal =
  result = globalReAlloc(hglbMem, 0, GMEM_MOVEABLE)

proc localDiscard*(hlocMem: Hlocal): Hlocal =
  result = localReAlloc(hlocMem, 0, LMEM_MOVEABLE)

# WinGDI.h

proc getGValue*(rgb: Int32): Int8 =
  result = toU8(rgb shr 8'i32)
proc rgb*(r, g, b: Int): Colorref =
  result = toU32(r) or (toU32(g) shl 8) or (toU32(b) shl 16)
proc rgb*(r, g, b: Range[0 .. 255]): Colorref =
  result = r or g shl 8 or b shl 16

proc palettergb*(r, g, b: Range[0..255]): Colorref =
  result = 0x02000000 or rgb(r, g, b)

proc paletteindex*(i: Dword): Colorref =
  result = Colorref(0x01000000'i32 or i and 0xffff'i32)


proc getRValue*(rgb: Colorref): Int8 =
  result = toU8(rgb)

proc getGValue*(rgb: Colorref): Int8 =
  result = toU8(rgb shr 8)

proc getBValue*(rgb: Colorref): Int8 =
  result = toU8(rgb shr 16)

#

proc hibyte*(w: Int32): Int8 =
  result = toU8(w shr 8'i32 and 0x000000FF'i32)

proc hiword*(L: Int32): Int16 =
  result = toU16(L shr 16'i32 and 0x0000FFFF'i32)

proc lobyte*(w: Int32): Int8 =
  result = toU8(w)

proc loword*(L: Int32): Int16 =
  result = toU16(L)

proc makelong*(a, b: Int32): Long =
  result = a and 0x0000ffff'i32 or b shl 16'i32

proc makeword*(a, b: Int32): Int16 =
  result = toU16(a and 0xff'i32) or toU16(b shl 8'i32)

proc sextHiword*(L: Int32): Int32 =
  # return type might be wrong
  result = hiword(L)

proc zextHiword*(L: Int32): Int32 =
  # return type might be wrong
  result = hiword(L) and 0xffff'i32

proc sextLoword*(L: Int32): Int32 =
  result = loword(L)

proc indextooverlaymask*(i: Int32): Int32 =
  # return type might be wrong
  result = i shl 8'i32

proc indextostateimagemask*(i: Int32): Int32 =
  # return type might be wrong
  result = i shl 12'i32

proc makeintatom*(i: Int32): Lptstr =
  result = cast[Lptstr](cast[UlongPtr](toU16(i)))

proc makelangid*(p, s: Int32): Int32 =
  # return type might be wrong
  result = toU16(s) shl 10'i16 or toU16(p)

proc primarylangid*(lgid: Int32): Int16 =
  result = toU16(lgid) and 0x000003FF'i16

proc sublangid*(lgid: Int32): Int32 =
  # return type might be wrong
  result = toU16(lgid) shr 10'i16

proc langidfromlcid*(lcid: Int32): Int16 =
  result = toU16(lcid)

proc sortidfromlcid*(lcid: Int32): Int16 =
  result = toU16((lcid and 0x000FFFFF'i32) shr 16'i32)

proc makelcid*(lgid, srtid: Int32): Dword =
  result = toU32(srtid shl 16'i32 or lgid and 0xffff'i32)

proc makelparam*(L, h: Int32): Lparam =
  result = Lparam(makelong(L, h))

proc makelresult*(L, h: Int32): Lresult =
  result = Lresult(makelong(L, h))

proc makerop4*(fore, back: Int32): Dword =
  result = back shl 8'i32 and 0xFF000000'i32 or fore

proc makewparam*(L, h: Int32): Wparam =
  result = Wparam(makelong(L, h))

proc getXLparam*(lp: Windows.Lparam): Int32 =
  result = loword(lp.Int32)

proc getYLparam*(lp: Windows.Lparam): Int32 =
  result = hiword(lp.Int32)

proc unicodeNull*(): WCHAR =
  result = 0'u16



proc getFirstChild*(h: HWND): HWND =
  result = getTopWindow(h)

proc getNextSibling*(h: HWND): HWND =
  result = getWindow(h, GW_HWNDNEXT)

proc getWindowID*(h: HWND): int32 =
  result = getDlgCtrlID(h)

proc subclassWindow*(h: HWND, p: LONG): LONG =
  result = setWindowLong(h, GWL_WNDPROC, p)

proc getWmCommandCmd*(w, L: int32): int32 =
  # return type might be wrong
  result = hiword(w)

proc getWmCommandId(w, L: int32): int32 =
  # return type might be wrong
  result = loword(w)

proc getWmCtlcolorHdc(w, L, msg: int32): HDC =
  result = Hdc(w)

proc getWmCtlcolorHwnd(w, L, msg: int32): HWND =
  result = Hwnd(L)

proc getWmHscrollCode(w, L: int32): int32 =
  # return type might be wrong
  result = loword(w)

proc getWmHscrollHwnd(w, L: int32): HWND =
  result = Hwnd(L)

proc getWmHscrollPos(w, L: int32): int32 =
  # return type might be wrong
  result = hiword(w)

proc getWmMdiactivateFactivate(h, a, b: int32): int32 =
  # return type might be wrong
  result = ord(b == h)

proc getWmMdiactivateHwndactivate(a, b: int32): HWND =
  result = Hwnd(b)

proc getWmMdiactivateHwnddeact(a, b: int32): HWND =
  result = Hwnd(a)

proc getWmVscrollCode(w, L: int32): int32 =
  # return type might be wrong
  result = loword(w)

proc getWmVscrollHwnd(w, L: int32): HWND =
  result = Hwnd(L)

proc getWmVscrollPos(w, L: int32): int32 =
  # return type might be wrong
  result = hiword(w)

proc fBinary(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fBinary) shr bp_DCB_fBinary

proc setFBinary(a: var DCB, fBinary: DWORD) =
  a.flags = a.flags or ((fBinary shl bp_DCB_fBinary) and bm_DCB_fBinary)

proc fParity(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fParity) shr bp_DCB_fParity

proc setFParity(a: var DCB, fParity: DWORD) =
  a.flags = a.flags or ((fParity shl bp_DCB_fParity) and bm_DCB_fParity)

proc fOutxCtsFlow(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fOutxCtsFlow) shr bp_DCB_fOutxCtsFlow

proc setFOutxCtsFlow(a: var DCB, fOutxCtsFlow: DWORD) =
  a.flags = a.flags or
      ((fOutxCtsFlow shl bp_DCB_fOutxCtsFlow) and bm_DCB_fOutxCtsFlow)

proc fOutxDsrFlow(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fOutxDsrFlow) shr bp_DCB_fOutxDsrFlow

proc setFOutxDsrFlow(a: var DCB, fOutxDsrFlow: DWORD) =
  a.flags = a.flags or
      ((fOutxDsrFlow shl bp_DCB_fOutxDsrFlow) and bm_DCB_fOutxDsrFlow)

proc fDtrControl(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fDtrControl) shr bp_DCB_fDtrControl

proc setFDtrControl(a: var DCB, fDtrControl: DWORD) =
  a.flags = a.flags or
      ((fDtrControl shl bp_DCB_fDtrControl) and bm_DCB_fDtrControl)

proc fDsrSensitivity(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fDsrSensitivity) shr bp_DCB_fDsrSensitivity

proc setFDsrSensitivity(a: var DCB, fDsrSensitivity: DWORD) =
  a.flags = a.flags or
      ((fDsrSensitivity shl bp_DCB_fDsrSensitivity) and
      bm_DCB_fDsrSensitivity)

proc fTXContinueOnXoff(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fTXContinueOnXoff) shr
      bp_DCB_fTXContinueOnXoff

proc setFTXContinueOnXoff(a: var DCB, fTXContinueOnXoff: DWORD) =
  a.flags = a.flags or
      ((fTXContinueOnXoff shl bp_DCB_fTXContinueOnXoff) and
      bm_DCB_fTXContinueOnXoff)

proc fOutX(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fOutX) shr bp_DCB_fOutX

proc setFOutX(a: var DCB, fOutX: DWORD) =
  a.flags = a.flags or ((fOutX shl bp_DCB_fOutX) and bm_DCB_fOutX)

proc fInX(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fInX) shr bp_DCB_fInX

proc setFInX(a: var DCB, fInX: DWORD) =
  a.flags = a.flags or ((fInX shl bp_DCB_fInX) and bm_DCB_fInX)

proc fErrorChar(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fErrorChar) shr bp_DCB_fErrorChar

proc setFErrorChar(a: var DCB, fErrorChar: DWORD) =
  a.flags = a.flags or
      ((fErrorChar shl bp_DCB_fErrorChar) and bm_DCB_fErrorChar)

proc fNull(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fNull) shr bp_DCB_fNull

proc setFNull(a: var DCB, fNull: DWORD) =
  a.flags = a.flags or ((fNull shl bp_DCB_fNull) and bm_DCB_fNull)

proc fRtsControl(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fRtsControl) shr bp_DCB_fRtsControl

proc setFRtsControl(a: var DCB, fRtsControl: DWORD) =
  a.flags = a.flags or
      ((fRtsControl shl bp_DCB_fRtsControl) and bm_DCB_fRtsControl)

proc fAbortOnError(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fAbortOnError) shr bp_DCB_fAbortOnError

proc setFAbortOnError(a: var DCB, fAbortOnError: DWORD) =
  a.flags = a.flags or
      ((fAbortOnError shl bp_DCB_fAbortOnError) and bm_DCB_fAbortOnError)

proc fDummy2(a: var DCB): DWORD =
  result = (a.flags and bm_DCB_fDummy2) shr bp_DCB_fDummy2

proc setFDummy2(a: var DCB, fDummy2: DWORD) =
  a.flags = a.flags or ((fDummy2 shl bp_DCB_fDummy2) and bm_DCB_fDummy2)

proc fCtsHold(a: var COMSTAT): DWORD =
  result = (a.flag0 and bm_COMSTAT_fCtsHold) shr bp_COMSTAT_fCtsHold

proc setFCtsHold(a: var COMSTAT, fCtsHold: DWORD) =
  a.flag0 = a.flag0 or
      ((fCtsHold shl bp_COMSTAT_fCtsHold) and bm_COMSTAT_fCtsHold)

proc fDsrHold(a: var COMSTAT): DWORD =
  result = (a.flag0 and bm_COMSTAT_fDsrHold) shr bp_COMSTAT_fDsrHold

proc setFDsrHold(a: var COMSTAT, fDsrHold: DWORD) =
  a.flag0 = a.flag0 or
      ((fDsrHold shl bp_COMSTAT_fDsrHold) and bm_COMSTAT_fDsrHold)

proc fRlsdHold(a: var COMSTAT): DWORD =
  result = (a.flag0 and bm_COMSTAT_fRlsdHold) shr bp_COMSTAT_fRlsdHold

proc setFRlsdHold(a: var COMSTAT, fRlsdHold: DWORD) =
  a.flag0 = a.flag0 or
      ((fRlsdHold shl bp_COMSTAT_fRlsdHold) and bm_COMSTAT_fRlsdHold)

proc fXoffHold(a: var COMSTAT): DWORD =
  result = (a.flag0 and bm_COMSTAT_fXoffHold) shr bp_COMSTAT_fXoffHold

proc setFXoffHold(a: var COMSTAT, fXoffHold: DWORD) =
  a.flag0 = a.flag0 or
      ((fXoffHold shl bp_COMSTAT_fXoffHold) and bm_COMSTAT_fXoffHold)

proc fXoffSent(a: var COMSTAT): DWORD =
  result = (a.flag0 and bm_COMSTAT_fXoffSent) shr bp_COMSTAT_fXoffSent

proc setFXoffSent(a: var COMSTAT, fXoffSent: DWORD) =
  a.flag0 = a.flag0 or
      ((fXoffSent shl bp_COMSTAT_fXoffSent) and bm_COMSTAT_fXoffSent)

proc fEof(a: var COMSTAT): DWORD =
  result = (a.flag0 and bm_COMSTAT_fEof) shr bp_COMSTAT_fEof

proc setFEof(a: var COMSTAT, fEof: DWORD) =
  a.flag0 = a.flag0 or ((fEof shl bp_COMSTAT_fEof) and bm_COMSTAT_fEof)

proc fTxim(a: var COMSTAT): DWORD =
  result = (a.flag0 and bm_COMSTAT_fTxim) shr bp_COMSTAT_fTxim

proc setFTxim(a: var COMSTAT, fTxim: DWORD) =
  a.flag0 = a.flag0 or ((fTxim shl bp_COMSTAT_fTxim) and bm_COMSTAT_fTxim)

proc fReserved(a: var COMSTAT): DWORD =
  result = (a.flag0 and bm_COMSTAT_fReserved) shr bp_COMSTAT_fReserved

proc setFReserved(a: var COMSTAT, fReserved: DWORD) =
  a.flag0 = a.flag0 or
      ((fReserved shl bp_COMSTAT_fReserved) and bm_COMSTAT_fReserved)

proc bAppReturnCode(a: var DDEACK): int16 =
  result = (a.flag0 and bm_DDEACK_bAppReturnCode) shr
      bp_DDEACK_bAppReturnCode

proc setBAppReturnCode(a: var DDEACK, bAppReturnCode: int16) =
  a.flag0 = a.flag0 or
      ((bAppReturnCode shl bp_DDEACK_bAppReturnCode) and
      bm_DDEACK_bAppReturnCode)

proc reserved(a: var DDEACK): int16 =
  result = (a.flag0 and bm_DDEACK_reserved) shr bp_DDEACK_reserved

proc setReserved(a: var DDEACK, reserved: int16) =
  a.flag0 = a.flag0 or
      ((reserved shl bp_DDEACK_reserved) and bm_DDEACK_reserved)

proc fBusy(a: var DDEACK): int16 =
  result = (a.flag0 and bm_DDEACK_fBusy) shr bp_DDEACK_fBusy

proc setFBusy(a: var DDEACK, fBusy: int16) =
  a.flag0 = a.flag0 or ((fBusy shl bp_DDEACK_fBusy) and bm_DDEACK_fBusy)

proc fAck(a: var DDEACK): int16 =
  result = (a.flag0 and bm_DDEACK_fAck) shr bp_DDEACK_fAck

proc setFAck(a: var DDEACK, fAck: int16) =
  a.flag0 = a.flag0 or ((fAck shl bp_DDEACK_fAck) and bm_DDEACK_fAck)

proc reserved(a: var DDEADVISE): int16 =
  result = (a.flag0 and bm_DDEADVISE_reserved) shr bp_DDEADVISE_reserved

proc setReserved(a: var DDEADVISE, reserved: int16) =
  a.flag0 = a.flag0 or
      ((reserved shl bp_DDEADVISE_reserved) and bm_DDEADVISE_reserved)

proc fDeferUpd(a: var DDEADVISE): int16 =
  result = (a.flag0 and bm_DDEADVISE_fDeferUpd) shr bp_DDEADVISE_fDeferUpd

proc setFDeferUpd(a: var DDEADVISE, fDeferUpd: int16) =
  a.flag0 = a.flag0 or
      ((fDeferUpd shl bp_DDEADVISE_fDeferUpd) and bm_DDEADVISE_fDeferUpd)

proc fAckReq(a: var DDEADVISE): int16 =
  result = (a.flag0 and bm_DDEADVISE_fAckReq) shr bp_DDEADVISE_fAckReq

proc setFAckReq(a: var DDEADVISE, fAckReq: int16) =
  a.flag0 = a.flag0 or
      ((fAckReq shl bp_DDEADVISE_fAckReq) and bm_DDEADVISE_fAckReq)

proc unused(a: var DDEDATA): int16 =
  result = (a.flag0 and bm_DDEDATA_unused) shr bp_DDEDATA_unused

proc setUnused(a: var DDEDATA, unused: int16) =
  a.flag0 = a.flag0 or ((unused shl bp_DDEDATA_unused) and bm_DDEDATA_unused)

proc fResponse(a: var DDEDATA): int16 =
  result = (a.flag0 and bm_DDEDATA_fResponse) shr bp_DDEDATA_fResponse

proc setFResponse(a: var DDEDATA, fResponse: int16) =
  a.flag0 = a.flag0 or
      ((fResponse shl bp_DDEDATA_fResponse) and bm_DDEDATA_fResponse)

proc fRelease(a: var DDEDATA): int16 =
  result = (a.flag0 and bm_DDEDATA_fRelease) shr bp_DDEDATA_fRelease

proc setFRelease(a: var DDEDATA, fRelease: int16) =
  a.flag0 = a.flag0 or
      ((fRelease shl bp_DDEDATA_fRelease) and bm_DDEDATA_fRelease)

proc reserved(a: var DDEDATA): int16 =
  result = (a.flag0 and bm_DDEDATA_reserved) shr bp_DDEDATA_reserved

proc setReserved(a: var DDEDATA, reserved: int16) =
  a.flag0 = a.flag0 or
      ((reserved shl bp_DDEDATA_reserved) and bm_DDEDATA_reserved)

proc fAckReq(a: var DDEDATA): int16 =
  result = (a.flag0 and bm_DDEDATA_fAckReq) shr bp_DDEDATA_fAckReq

proc setFAckReq(a: var DDEDATA, fAckReq: int16) =
  a.flag0 = a.flag0 or
      ((fAckReq shl bp_DDEDATA_fAckReq) and bm_DDEDATA_fAckReq)

proc unused(a: var DDELN): int16 =
  result = (a.flag0 and bm_DDELN_unused) shr bp_DDELN_unused

proc setUnused(a: var DDELN, unused: int16) =
  a.flag0 = a.flag0 or ((unused shl bp_DDELN_unused) and bm_DDELN_unused)

proc fRelease(a: var DDELN): int16 =
  result = (a.flag0 and bm_DDELN_fRelease) shr bp_DDELN_fRelease

proc setFRelease(a: var DDELN, fRelease: int16) =
  a.flag0 = a.flag0 or
      ((fRelease shl bp_DDELN_fRelease) and bm_DDELN_fRelease)

proc fDeferUpd(a: var DDELN): int16 =
  result = (a.flag0 and bm_DDELN_fDeferUpd) shr bp_DDELN_fDeferUpd

proc setFDeferUpd(a: var DDELN, fDeferUpd: int16) =
  a.flag0 = a.flag0 or
      ((fDeferUpd shl bp_DDELN_fDeferUpd) and bm_DDELN_fDeferUpd)

proc fAckReq(a: var DDELN): int16 =
  result = (a.flag0 and bm_DDELN_fAckReq) shr bp_DDELN_fAckReq

proc setFAckReq(a: var DDELN, fAckReq: int16) =
  a.flag0 = a.flag0 or ((fAckReq shl bp_DDELN_fAckReq) and bm_DDELN_fAckReq)

proc unused(a: var DDEPOKE): int16 =
  result = (a.flag0 and bm_DDEPOKE_unused) shr bp_DDEPOKE_unused

proc setUnused(a: var DDEPOKE, unused: int16) =
  a.flag0 = a.flag0 or ((unused shl bp_DDEPOKE_unused) and bm_DDEPOKE_unused)

proc fRelease(a: var DDEPOKE): int16 =
  result = (a.flag0 and bm_DDEPOKE_fRelease) shr bp_DDEPOKE_fRelease

proc setFRelease(a: var DDEPOKE, fRelease: int16) =
  a.flag0 = a.flag0 or
      ((fRelease shl bp_DDEPOKE_fRelease) and bm_DDEPOKE_fRelease)

proc fReserved(a: var DDEPOKE): int16 =
  result = (a.flag0 and bm_DDEPOKE_fReserved) shr bp_DDEPOKE_fReserved

proc setFReserved(a: var DDEPOKE, fReserved: int16) =
  a.flag0 = a.flag0 or
      ((fReserved shl bp_DDEPOKE_fReserved) and bm_DDEPOKE_fReserved)

proc unused(a: var DDEUP): int16 =
  result = (a.flag0 and bm_DDEUP_unused) shr bp_DDEUP_unused

proc setUnused(a: var DDEUP, unused: int16) =
  a.flag0 = a.flag0 or ((unused shl bp_DDEUP_unused) and bm_DDEUP_unused)

proc fAck(a: var DDEUP): int16 =
  result = (a.flag0 and bm_DDEUP_fAck) shr bp_DDEUP_fAck

proc setFAck(a: var DDEUP, fAck: int16) =
  a.flag0 = a.flag0 or ((fAck shl bp_DDEUP_fAck) and bm_DDEUP_fAck)

proc fRelease(a: var DDEUP): int16 =
  result = (a.flag0 and bm_DDEUP_fRelease) shr bp_DDEUP_fRelease

proc setFRelease(a: var DDEUP, fRelease: int16) =
  a.flag0 = a.flag0 or
      ((fRelease shl bp_DDEUP_fRelease) and bm_DDEUP_fRelease)

proc fReserved(a: var DDEUP): int16 =
  result = (a.flag0 and bm_DDEUP_fReserved) shr bp_DDEUP_fReserved

proc setFReserved(a: var DDEUP, fReserved: int16) =
  a.flag0 = a.flag0 or
      ((fReserved shl bp_DDEUP_fReserved) and bm_DDEUP_fReserved)

proc fAckReq(a: var DDEUP): int16 =
  result = (a.flag0 and bm_DDEUP_fAckReq) shr bp_DDEUP_fAckReq

proc setFAckReq(a: var DDEUP, fAckReq: int16) =
  a.flag0 = a.flag0 or ((fAckReq shl bp_DDEUP_fAckReq) and bm_DDEUP_fAckReq)

proc createWindowA(lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD,
                   X: int32, Y: int32, nWidth: int32, nHeight: int32,
                   hWndParent: HWND, menu: HMENU, hInstance: HINST,
                   lpParam: LPVOID): HWND =
  result = createWindowExA(0, lpClassName, lpWindowName, dwStyle, x, y, nWidth,
                           nHeight, hWndParent, menu, hInstance, lpParam)

proc createDialogA(hInstance: HINST, lpTemplateName: LPCSTR, hWndParent: HWND,
                   lpDialogFunc: DLGPROC): HWND =
  result = createDialogParamA(hInstance, lpTemplateName, hWndParent,
                              lpDialogFunc, 0)

proc createDialogIndirectA(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                           hWndParent: HWND, lpDialogFunc: DLGPROC): HWND =
  result = createDialogIndirectParamA(hInstance, lpTemplate, hWndParent,
                                      lpDialogFunc, 0)

proc dialogBoxA(hInstance: HINST, lpTemplateName: LPCSTR, hWndParent: HWND,
                lpDialogFunc: DLGPROC): int32 =
  result = dialogBoxParamA(hInstance, lpTemplateName, hWndParent, lpDialogFunc,
                           0)

proc dialogBoxIndirectA(hInstance: HINST, hDialogTemplate: LPCDLGTEMPLATE,
                        hWndParent: HWND, lpDialogFunc: DLGPROC): int32 =
  result = dialogBoxIndirectParamA(hInstance, hDialogTemplate, hWndParent,
                                   lpDialogFunc, 0)

proc createWindowW(lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD,
                   X: int32, Y: int32, nWidth: int32, nHeight: int32,
                   hWndParent: HWND, menu: HMENU, hInstance: HINST,
                   lpParam: LPVOID): HWND =
  result = createWindowExW(0, lpClassName, lpWindowName, dwStyle, x, y, nWidth,
                           nHeight, hWndParent, menu, hInstance, lpParam)

proc createDialogW(hInstance: HINST, lpName: LPCWSTR, hWndParent: HWND,
                   lpDialogFunc: DLGPROC): HWND =
  result = createDialogParamW(hInstance, lpName, hWndParent, lpDialogFunc, 0)

proc createDialogIndirectW(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                           hWndParent: HWND, lpDialogFunc: DLGPROC): HWND =
  result = createDialogIndirectParamW(hInstance, lpTemplate, hWndParent,
                                      lpDialogFunc, 0)

proc dialogBoxW(hInstance: HINST, lpTemplate: LPCWSTR, hWndParent: HWND,
                lpDialogFunc: DLGPROC): int32 =
  result = dialogBoxParamW(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0)

proc dialogBoxIndirectW(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                        hWndParent: HWND, lpDialogFunc: DLGPROC): int32 =
  result = dialogBoxIndirectParamW(hInstance, lpTemplate, hWndParent,
                                   lpDialogFunc, 0)

when defined(winUnicode):
  proc CreateWindow(lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD,
                    X: int32, Y: int32, nWidth: int32, nHeight: int32,
                    hWndParent: HWND, menu: HMENU, hInstance: HINST,
                    lpParam: LPVOID): HWND =
    result = CreateWindowEx(0, lpClassName, lpWindowName, dwStyle, x, y, nWidth,
                            nHeight, hWndParent, hMenu, hInstance, lpParam)

  proc CreateDialog(hInstance: HINST, lpName: LPCWSTR, hWndParent: HWND,
                    lpDialogFunc: DLGPROC): HWND =
    result = CreateDialogParam(hInstance, lpName, hWndParent, lpDialogFunc, 0)

  proc CreateDialogIndirect(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                            hWndParent: HWND, lpDialogFunc: DLGPROC): HWND =
    result = CreateDialogIndirectParam(hInstance, lpTemplate, hWndParent,
                                       lpDialogFunc, 0)

  proc DialogBox(hInstance: HINST, lpTemplate: LPCWSTR, hWndParent: HWND,
                 lpDialogFunc: DLGPROC): int32 =
    result = DialogBoxParam(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0)

  proc DialogBoxIndirect(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                         hWndParent: HWND, lpDialogFunc: DLGPROC): int32 =
    result = DialogBoxIndirectParam(hInstance, lpTemplate, hWndParent,
                                    lpDialogFunc, 0)

else:
  proc createWindow(lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD,
                    X: int32, Y: int32, nWidth: int32, nHeight: int32,
                    hWndParent: HWND, menu: HMENU, hInstance: HINST,
                    lpParam: LPVOID): HWND =
    result = createWindowEx(0, lpClassName, lpWindowName, dwStyle, x, y, nWidth,
                            nHeight, hWndParent, menu, hInstance, lpParam)

  proc createDialog(hInstance: HINST, lpTemplateName: LPCSTR, hWndParent: HWND,
                    lpDialogFunc: DLGPROC): HWND =
    result = createDialogParam(hInstance, lpTemplateName, hWndParent,
                               lpDialogFunc, 0)

  proc createDialogIndirect(hInstance: HINST, lpTemplate: LPCDLGTEMPLATE,
                            hWndParent: HWND, lpDialogFunc: DLGPROC): HWND =
    result = createDialogIndirectParam(hInstance, lpTemplate, hWndParent,
                                       lpDialogFunc, 0)

  proc dialogBox(hInstance: HINST, lpTemplateName: LPCSTR, hWndParent: HWND,
                 lpDialogFunc: DLGPROC): int32 =
    result = dialogBoxParam(hInstance, lpTemplateName, hWndParent, lpDialogFunc,
                            0)

  proc dialogBoxIndirect(hInstance: HINST, hDialogTemplate: LPCDLGTEMPLATE,
                         hWndParent: HWND, lpDialogFunc: DLGPROC): int32 =
    result = dialogBoxIndirectParam(hInstance, hDialogTemplate, hWndParent,
                                    lpDialogFunc, 0)

proc globalAllocPtr(flags, cb: DWord): Pointer =
  result = globalLock(globalAlloc(flags, cb))

proc globalFreePtr(lp: Pointer): Pointer =
  result = cast[Pointer](globalFree(cast[Hwnd](globalUnlockPtr(lp))))

proc globalUnlockPtr(lp: pointer): Pointer =
  discard globalUnlock(globalHandle(lp))
  result = lp

proc globalLockPtr(lp: pointer): Pointer =
  result = globalLock(globalHandle(lp))

proc globalReAllocPtr(lp: Pointer, cbNew, flags: DWord): Pointer =
  result = globalLock(globalReAlloc(cast[Hwnd](globalUnlockPtr(lp)), cbNew, flags))

proc globalPtrHandle(lp: pointer): Pointer =
  result = cast[Pointer](globalHandle(lp))

proc imageListAddIcon(himl: HIMAGELIST, hicon: HICON): int32 =
  result = imageListReplaceIcon(himl, -1, hicon)

proc animateCreate(hWndP: HWND, id: HMENU, dwStyle: DWORD, hInstance: HINST): HWND =
  result = createWindow(cast[Lpcstr](AnimateClass), nil, dwStyle, 0, 0, 0, 0, hWndP,
                        id, hInstance, nil)

proc animateOpen(wnd: HWND, szName: LPTSTR): LRESULT =
  result = sendMessage(wnd, ACM_OPEN, 0, cast[Lparam](szName))

proc animatePlay(wnd: HWND, `from`, `to`: int32, rep: UINT): LRESULT =
  result = sendMessage(wnd, ACM_PLAY, Wparam(rep),
                       Lparam(makelong(`from`, `to`)))

proc animateStop(wnd: HWND): LRESULT =
  result = sendMessage(wnd, ACM_STOP, 0, 0)

proc animateClose(wnd: HWND): LRESULT =
  result = animateOpen(wnd, nil)

proc animateSeek(wnd: HWND, frame: int32): LRESULT =
  result = animatePlay(wnd, frame, frame, 1)

proc propSheetAddPage(hPropSheetDlg: HWND, hpage: HPROPSHEETPAGE): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_ADDPAGE, 0, cast[Lparam](hpage))

proc propSheetApply(hPropSheetDlg: HWND): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_APPLY, 0, 0)

proc propSheetCancelToClose(hPropSheetDlg: HWND): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_CANCELTOCLOSE, 0, 0)

proc propSheetChanged(hPropSheetDlg, hwndPage: HWND): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_CHANGED, Wparam(hwndPage), 0)

proc propSheetGetCurrentPageHwnd(hDlg: HWND): LRESULT =
  result = sendMessage(hDlg, PSM_GETCURRENTPAGEHWND, 0, 0)

proc propSheetGetTabControl(hPropSheetDlg: HWND): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_GETTABCONTROL, 0, 0)

proc propSheetIsDialogMessage(hDlg: HWND, pMsg: int32): LRESULT =
  result = sendMessage(hDlg, PSM_ISDIALOGMESSAGE, 0, Lparam(pMsg))

proc propSheetPressButton(hPropSheetDlg: HWND, iButton: int32): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_PRESSBUTTON, Wparam(Int32(iButton)), 0)

proc propSheetQuerySiblings(hPropSheetDlg: HWND, param1, param2: int32): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_QUERYSIBLINGS, Wparam(param1),
                       Lparam(param2))

proc propSheetRebootSystem(hPropSheetDlg: HWND): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_REBOOTSYSTEM, 0, 0)

proc propSheetRemovePage(hPropSheetDlg: HWND, hpage: HPROPSHEETPAGE,
                          index: int32): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_REMOVEPAGE, Wparam(index),
                       cast[Lparam](hpage))

proc propSheetRestartWindows(hPropSheetDlg: HWND): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_RESTARTWINDOWS, 0, 0)

proc propSheetSetCurSel(hPropSheetDlg: HWND, hpage: HPROPSHEETPAGE,
                         index: int32): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_SETCURSEL, Wparam(index),
                       cast[Lparam](hpage))

proc propSheetSetCurSelByID(hPropSheetDlg: HWND, id: int32): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_SETCURSELID, 0, Lparam(id))

proc propSheetSetFinishText(hPropSheetDlg: HWND, lpszText: LPTSTR): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_SETFINISHTEXT, 0, cast[Lparam](lpszText))

proc propSheetSetTitle(hPropSheetDlg: HWND, dwStyle: DWORD, lpszText: LPCTSTR): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_SETTITLE, Wparam(dwStyle),
                       cast[Lparam](lpszText))

proc propSheetSetWizButtons(hPropSheetDlg: HWND, dwFlags: DWORD): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_SETWIZBUTTONS, 0, Lparam(dwFlags))

proc propSheetUnChanged(hPropSheetDlg: HWND, hwndPage: HWND): LRESULT =
  result = sendMessage(hPropSheetDlg, PSM_UNCHANGED, Wparam(hwndPage), 0)

proc headerDeleteItem(hwndHD: HWND, index: int32): WINBOOL =
  result = Winbool(sendMessage(hwndHD, HDM_DELETEITEM, Wparam(index), 0))

proc headerGetItem(hwndHD: HWND, index: int32, hdi: var HD_ITEM): WINBOOL =
  result = Winbool(sendMessage(hwndHD, HDM_GETITEM, Wparam(index),
                               cast[Lparam](addr(hdi))))

proc headerGetItemCount(hwndHD: HWND): int32 =
  result = Int32(sendMessage(hwndHD, HDM_GETITEMCOUNT, 0, 0))

proc headerInsertItem(hwndHD: HWND, index: int32, hdi: var HD_ITEM): int32 =
  result = Int32(sendMessage(hwndHD, HDM_INSERTITEM, Wparam(index),
                             cast[Lparam](addr(hdi))))

proc headerLayout(hwndHD: HWND, layout: var HD_LAYOUT): WINBOOL =
  result = Winbool(sendMessage(hwndHD, HDM_LAYOUT, 0,
                   cast[Lparam](addr(layout))))

proc headerSetItem(hwndHD: HWND, index: int32, hdi: var HD_ITEM): WINBOOL =
  result = Winbool(sendMessage(hwndHD, HDM_SETITEM, Wparam(index),
                               cast[Lparam](addr(hdi))))

proc listViewArrange(hwndLV: HWND, code: UINT): LRESULT =
  result = sendMessage(hwndLV, LVM_ARRANGE, Wparam(code), 0)

proc listViewCreateDragImage(wnd: HWND, i: int32, lpptUpLeft: LPPOINT): LRESULT =
  result = sendMessage(wnd, LVM_CREATEDRAGIMAGE, Wparam(i), cast[Lparam](lpptUpLeft))

proc listViewDeleteAllItems(wnd: HWND): LRESULT =
  result = sendMessage(wnd, LVM_DELETEALLITEMS, 0, 0)

proc listViewDeleteColumn(wnd: HWND, iCol: int32): LRESULT =
  result = sendMessage(wnd, LVM_DELETECOLUMN, Wparam(iCol), 0)

proc listViewDeleteItem(wnd: HWND, iItem: int32): LRESULT =
  result = sendMessage(wnd, LVM_DELETEITEM, Wparam(iItem), 0)

proc listViewEditLabel(hwndLV: HWND, i: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_EDITLABEL, Wparam(Int32(i)), 0)

proc listViewEnsureVisible(hwndLV: HWND, i, fPartialOK: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_ENSUREVISIBLE, Wparam(i),
                       makelparam(fPartialOK, 0))

proc listViewFindItem(wnd: HWND, iStart: int32, lvfi: var LV_FINDINFO): int32 =
  result = sendMessage(wnd, LVM_FINDITEM, Wparam(iStart), 
                       cast[Lparam](addr(lvfi))).Int32

proc listViewGetBkColor(wnd: HWND): LRESULT =
  result = sendMessage(wnd, LVM_GETBKCOLOR, 0, 0)

proc listViewGetCallbackMask(wnd: HWND): LRESULT =
  result = sendMessage(wnd, LVM_GETCALLBACKMASK, 0, 0)

proc listViewGetColumn(wnd: HWND, iCol: int32, col: var LV_COLUMN): LRESULT =
  result = sendMessage(wnd, LVM_GETCOLUMN, Wparam(iCol), cast[Lparam](addr(col)))

proc listViewGetColumnWidth(wnd: HWND, iCol: int32): LRESULT =
  result = sendMessage(wnd, LVM_GETCOLUMNWIDTH, Wparam(iCol), 0)

proc listViewGetCountPerPage(hwndLV: HWND): LRESULT =
  result = sendMessage(hwndLV, LVM_GETCOUNTPERPAGE, 0, 0)

proc listViewGetEditControl(hwndLV: HWND): LRESULT =
  result = sendMessage(hwndLV, LVM_GETEDITCONTROL, 0, 0)

proc listViewGetImageList(wnd: HWND, iImageList: wINT): LRESULT =
  result = sendMessage(wnd, LVM_GETIMAGELIST, Wparam(iImageList), 0)

proc listViewGetISearchString(hwndLV: HWND, lpsz: LPTSTR): LRESULT =
  result = sendMessage(hwndLV, LVM_GETISEARCHSTRING, 0, cast[Lparam](lpsz))

proc listViewGetItem(wnd: HWND, item: var LV_ITEM): LRESULT =
  result = sendMessage(wnd, LVM_GETITEM, 0, cast[Lparam](addr(item)))

proc listViewGetItemCount(wnd: HWND): LRESULT =
  result = sendMessage(wnd, LVM_GETITEMCOUNT, 0, 0)

proc listViewGetItemPosition(hwndLV: HWND, i: int32, pt: var POINT): int32 =
  result = sendMessage(hwndLV, LVM_GETITEMPOSITION, Wparam(Int32(i)),
                       cast[Lparam](addr(pt))).Int32

proc listViewGetItemSpacing(hwndLV: HWND, fSmall: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_GETITEMSPACING, fSmall, 0)

proc listViewGetItemState(hwndLV: HWND, i, mask: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_GETITEMSTATE, Wparam(i), Lparam(mask))

proc listViewGetNextItem(wnd: HWND, iStart, flags: int32): LRESULT =
  result = sendMessage(wnd, LVM_GETNEXTITEM, Wparam(iStart), Lparam(flags))

proc listViewGetOrigin(hwndLV: HWND, pt: var POINT): LRESULT =
  result = sendMessage(hwndLV, LVM_GETORIGIN, Wparam(0), cast[Lparam](addr(pt)))

proc listViewGetSelectedCount(hwndLV: HWND): LRESULT =
  result = sendMessage(hwndLV, LVM_GETSELECTEDCOUNT, 0, 0)

proc listViewGetStringWidth(hwndLV: HWND, psz: LPCTSTR): LRESULT =
  result = sendMessage(hwndLV, LVM_GETSTRINGWIDTH, 0, cast[Lparam](psz))

proc listViewGetTextBkColor(wnd: HWND): LRESULT =
  result = sendMessage(wnd, LVM_GETTEXTBKCOLOR, 0, 0)

proc listViewGetTextColor(wnd: HWND): LRESULT =
  result = sendMessage(wnd, LVM_GETTEXTCOLOR, 0, 0)

proc listViewGetTopIndex(hwndLV: HWND): LRESULT =
  result = sendMessage(hwndLV, LVM_GETTOPINDEX, 0, 0)

proc listViewGetViewRect(wnd: HWND, rc: var RECT): LRESULT =
  result = sendMessage(wnd, LVM_GETVIEWRECT, 0, cast[Lparam](addr(rc)))

proc listViewHitTest(hwndLV: HWND, info: var LV_HITTESTINFO): LRESULT =
  result = sendMessage(hwndLV, LVM_HITTEST, 0, cast[Lparam](addr(info)))

proc listViewInsertColumn(wnd: HWND, iCol: int32, col: var LV_COLUMN): LRESULT =
  result = sendMessage(wnd, LVM_INSERTCOLUMN, Wparam(iCol), cast[Lparam](addr(col)))

proc listViewInsertItem(wnd: HWND, item: var LV_ITEM): LRESULT =
  result = sendMessage(wnd, LVM_INSERTITEM, 0, cast[Lparam](addr(item)))

proc listViewRedrawItems(hwndLV: HWND, iFirst, iLast: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_REDRAWITEMS, Wparam(iFirst), Lparam(iLast))

proc listViewScroll(hwndLV: HWND, dx, dy: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_SCROLL, Wparam(dx), Lparam(dy))

proc listViewSetBkColor(wnd: HWND, clrBk: COLORREF): LRESULT =
  result = sendMessage(wnd, LVM_SETBKCOLOR, 0, Lparam(clrBk))

proc listViewSetCallbackMask(wnd: HWND, mask: UINT): LRESULT =
  result = sendMessage(wnd, LVM_SETCALLBACKMASK, Wparam(mask), 0)

proc listViewSetColumn(wnd: HWND, iCol: int32, col: var LV_COLUMN): LRESULT =
  result = sendMessage(wnd, LVM_SETCOLUMN, Wparam(iCol), cast[Lparam](addr(col)))

proc listViewSetColumnWidth(wnd: HWND, iCol, cx: int32): LRESULT =
  result = sendMessage(wnd, LVM_SETCOLUMNWIDTH, Wparam(iCol), makelparam(cx, 0))

proc listViewSetImageList(wnd: HWND, himl: int32, iImageList: HIMAGELIST): LRESULT =
  result = sendMessage(wnd, LVM_SETIMAGELIST, Wparam(iImageList),
                       Lparam(Uint(himl)))

proc listViewSetItem(wnd: HWND, item: var LV_ITEM): LRESULT =
  result = sendMessage(wnd, LVM_SETITEM, 0, cast[Lparam](addr(item)))

proc listViewSetItemCount(hwndLV: HWND, cItems: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_SETITEMCOUNT, Wparam(cItems), 0)

proc listViewSetItemPosition(hwndLV: HWND, i, x, y: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_SETITEMPOSITION, Wparam(i), makelparam(x, y))

proc listViewSetItemPosition32(hwndLV: HWND, i, x, y: int32): LRESULT =
  var ptNewPos: Point
  ptNewPos.x = x
  ptNewPos.y = y
  result = sendMessage(hwndLV, LVM_SETITEMPOSITION32, Wparam(i),
                       cast[Lparam](addr(ptNewPos)))

proc listViewSetItemState(hwndLV: HWND, i, data, mask: int32): LRESULT =
  var gnuLvi: LvItem
  gnuLvi.stateMask = Uint(mask)
  gnuLvi.state = Uint(data)
  result = sendMessage(hwndLV, LVM_SETITEMSTATE, Wparam(i),
                       cast[Lparam](addr(gnuLvi)))

proc listViewSetItemText(hwndLV: HWND, i, iSubItem: int32, pszText: LPTSTR): LRESULT =
  var gnuLvi: LvItem
  gnuLvi.iSubItem = iSubItem
  gnuLvi.pszText = pszText
  result = sendMessage(hwndLV, LVM_SETITEMTEXT, Wparam(i),
                       cast[Lparam](addr(gnuLvi)))

proc listViewSetTextBkColor(wnd: HWND, clrTextBk: COLORREF): LRESULT =
  result = sendMessage(wnd, LVM_SETTEXTBKCOLOR, 0, Lparam(clrTextBk))

proc listViewSetTextColor(wnd: HWND, clrText: COLORREF): LRESULT =
  result = sendMessage(wnd, LVM_SETTEXTCOLOR, 0, Lparam(clrText))

proc listViewSortItems(hwndLV: HWND, pfnCompare: PFNLVCOMPARE, 
                        lPrm: LPARAM): LRESULT =
  result = sendMessage(hwndLV, LVM_SORTITEMS, Wparam(lPrm), 
                       cast[Lparam](pfnCompare))

proc listViewUpdate(hwndLV: HWND, i: int32): LRESULT =
  result = sendMessage(hwndLV, LVM_UPDATE, Wparam(i), 0)

proc treeViewInsertItem(wnd: HWND, lpis: LPTV_INSERTSTRUCT): LRESULT =
  result = sendMessage(wnd, TVM_INSERTITEM, 0, cast[Lparam](lpis))

proc treeViewDeleteItem(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = sendMessage(wnd, TVM_DELETEITEM, 0, cast[Lparam](hitem))

proc treeViewDeleteAllItems(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TVM_DELETEITEM, 0, cast[Lparam](TviRoot))

proc treeViewExpand(wnd: HWND, hitem: HTREEITEM, code: int32): LRESULT =
  result = sendMessage(wnd, TVM_EXPAND, Wparam(code), cast[Lparam](hitem))

proc treeViewGetCount(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TVM_GETCOUNT, 0, 0)

proc treeViewGetIndent(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TVM_GETINDENT, 0, 0)

proc treeViewSetIndent(wnd: HWND, indent: int32): LRESULT =
  result = sendMessage(wnd, TVM_SETINDENT, Wparam(indent), 0)

proc treeViewGetImageList(wnd: HWND, iImage: WPARAM): LRESULT =
  result = sendMessage(wnd, TVM_GETIMAGELIST, iImage, 0)

proc treeViewSetImageList(wnd: HWND, himl: HIMAGELIST, iImage: WPARAM): LRESULT =
  result = sendMessage(wnd, TVM_SETIMAGELIST, iImage, Lparam(Uint(himl)))

proc treeViewGetNextItem(wnd: HWND, hitem: HTREEITEM, code: int32): LRESULT =
  result = sendMessage(wnd, TVM_GETNEXTITEM, Wparam(code), cast[Lparam](hitem))

proc treeViewGetChild(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewGetNextItem(wnd, hitem, TVGN_CHILD)

proc treeViewGetNextSibling(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewGetNextItem(wnd, hitem, TVGN_NEXT)

proc treeViewGetPrevSibling(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewGetNextItem(wnd, hitem, TVGN_PREVIOUS)

proc treeViewGetParent(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewGetNextItem(wnd, hitem, TVGN_PARENT)

proc treeViewGetFirstVisible(wnd: HWND): LRESULT =
  result = treeViewGetNextItem(wnd, Htreeitem(nil), TVGN_FIRSTVISIBLE)

proc treeViewGetNextVisible(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewGetNextItem(wnd, hitem, TVGN_NEXTVISIBLE)

proc treeViewGetPrevVisible(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewGetNextItem(wnd, hitem, TVGN_PREVIOUSVISIBLE)

proc treeViewGetSelection(wnd: HWND): LRESULT =
  result = treeViewGetNextItem(wnd, Htreeitem(nil), TVGN_CARET)

proc treeViewGetDropHilight(wnd: HWND): LRESULT =
  result = treeViewGetNextItem(wnd, Htreeitem(nil), TVGN_DROPHILITE)

proc treeViewGetRoot(wnd: HWND): LRESULT =
  result = treeViewGetNextItem(wnd, Htreeitem(nil), TVGN_ROOT)

proc treeViewSelect(wnd: HWND, hitem: HTREEITEM, code: int32): LRESULT =
  result = sendMessage(wnd, TVM_SELECTITEM, Wparam(code), cast[Lparam](hitem))

proc treeViewSelectItem(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewSelect(wnd, hitem, TVGN_CARET)

proc treeViewSelectDropTarget(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewSelect(wnd, hitem, TVGN_DROPHILITE)

proc treeViewSelectSetFirstVisible(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = treeViewSelect(wnd, hitem, TVGN_FIRSTVISIBLE)

proc treeViewGetItem(wnd: HWND, item: var TV_ITEM): LRESULT =
  result = sendMessage(wnd, TVM_GETITEM, 0, cast[Lparam](addr(item)))

proc treeViewSetItem(wnd: HWND, item: var TV_ITEM): LRESULT =
  result = sendMessage(wnd, TVM_SETITEM, 0, cast[Lparam](addr(item)))

proc treeViewEditLabel(wnd: HWND, hitem: HTREEITEM): LRESULT =
  Result = sendMessage(wnd, TVM_EDITLABEL, 0, cast[Lparam](hitem))

proc treeViewGetEditControl(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TVM_GETEDITCONTROL, 0, 0)

proc treeViewGetVisibleCount(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TVM_GETVISIBLECOUNT, 0, 0)

proc treeViewHitTest(wnd: HWND, lpht: LPTV_HITTESTINFO): LRESULT =
  result = sendMessage(wnd, TVM_HITTEST, 0, cast[Lparam](lpht))

proc treeViewCreateDragImage(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = sendMessage(wnd, TVM_CREATEDRAGIMAGE, 0, cast[Lparam](hitem))

proc treeViewSortChildren(wnd: HWND, hitem: HTREEITEM, recurse: int32): LRESULT =
  result = sendMessage(wnd, TVM_SORTCHILDREN, Wparam(recurse), cast[Lparam](hitem))

proc treeViewEnsureVisible(wnd: HWND, hitem: HTREEITEM): LRESULT =
  result = sendMessage(wnd, TVM_ENSUREVISIBLE, 0, cast[Lparam](hitem))

proc treeViewSortChildrenCB(wnd: HWND, psort: LPTV_SORTCB, recurse: int32): LRESULT =
  result = sendMessage(wnd, TVM_SORTCHILDRENCB, Wparam(recurse), cast[Lparam](psort))

proc treeViewEndEditLabelNow(wnd: HWND, fCancel: int32): LRESULT =
  result = sendMessage(wnd, TVM_ENDEDITLABELNOW, Wparam(fCancel), 0)

proc treeViewGetISearchString(hwndTV: HWND, lpsz: LPTSTR): LRESULT =
  result = sendMessage(hwndTV, TVM_GETISEARCHSTRING, 0, cast[Lparam](lpsz))

proc tabCtrlGetImageList(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TCM_GETIMAGELIST, 0, 0)

proc tabCtrlSetImageList(wnd: HWND, himl: HIMAGELIST): LRESULT =
  result = sendMessage(wnd, TCM_SETIMAGELIST, 0, Lparam(Uint(himl)))

proc tabCtrlGetItemCount(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TCM_GETITEMCOUNT, 0, 0)

proc tabCtrlGetItem(wnd: HWND, iItem: int32, item: var TC_ITEM): LRESULT =
  result = sendMessage(wnd, TCM_GETITEM, Wparam(iItem), cast[Lparam](addr(item)))

proc tabCtrlSetItem(wnd: HWND, iItem: int32, item: var TC_ITEM): LRESULT =
  result = sendMessage(wnd, TCM_SETITEM, Wparam(iItem), cast[Lparam](addr(item)))

proc tabCtrlInsertItem(wnd: HWND, iItem: int32, item: var TC_ITEM): LRESULT =
  result = sendMessage(wnd, TCM_INSERTITEM, Wparam(iItem), cast[Lparam](addr(item)))

proc tabCtrlDeleteItem(wnd: HWND, i: int32): LRESULT =
  result = sendMessage(wnd, TCM_DELETEITEM, Wparam(i), 0)

proc tabCtrlDeleteAllItems(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TCM_DELETEALLITEMS, 0, 0)

proc tabCtrlGetItemRect(wnd: HWND, i: int32, rc: var RECT): LRESULT =
  result = sendMessage(wnd, TCM_GETITEMRECT, Wparam(Int32(i)), cast[Lparam](addr(rc)))

proc tabCtrlGetCurSel(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TCM_GETCURSEL, 0, 0)

proc tabCtrlSetCurSel(wnd: HWND, i: int32): LRESULT =
  result = sendMessage(wnd, TCM_SETCURSEL, Wparam(i), 0)

proc tabCtrlHitTest(hwndTC: HWND, info: var TC_HITTESTINFO): LRESULT =
  result = sendMessage(hwndTC, TCM_HITTEST, 0, cast[Lparam](addr(info)))

proc tabCtrlSetItemExtra(hwndTC: HWND, cb: int32): LRESULT =
  result = sendMessage(hwndTC, TCM_SETITEMEXTRA, Wparam(cb), 0)

proc tabCtrlAdjustRect(wnd: HWND, bLarger: WINBOOL, rc: var RECT): LRESULT =
  result = sendMessage(wnd, TCM_ADJUSTRECT, Wparam(bLarger), cast[Lparam](addr(rc)))

proc tabCtrlSetItemSize(wnd: HWND, x, y: int32): LRESULT =
  result = sendMessage(wnd, TCM_SETITEMSIZE, 0, makelparam(x, y))

proc tabCtrlRemoveImage(wnd: HWND, i: WPARAM): LRESULT =
  result = sendMessage(wnd, TCM_REMOVEIMAGE, i, 0)

proc tabCtrlSetPadding(wnd: HWND, cx, cy: int32): LRESULT =
  result = sendMessage(wnd, TCM_SETPADDING, 0, makelparam(cx, cy))

proc tabCtrlGetRowCount(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TCM_GETROWCOUNT, 0, 0)

proc tabCtrlGetToolTips(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TCM_GETTOOLTIPS, 0, 0)

proc tabCtrlSetToolTips(wnd: HWND, hwndTT: int32): LRESULT =
  result = sendMessage(wnd, TCM_SETTOOLTIPS, Wparam(hwndTT), 0)

proc tabCtrlGetCurFocus(wnd: HWND): LRESULT =
  result = sendMessage(wnd, TCM_GETCURFOCUS, 0, 0)

proc tabCtrlSetCurFocus(wnd: HWND, i: int32): LRESULT =
  result = sendMessage(wnd, TCM_SETCURFOCUS, i, 0)

proc sndmsg(wnd: HWND, Msg: UINT, wp: WPARAM, lp: LPARAM): LRESULT =
  result = sendMessage(wnd, msg, wp, lp)

proc commDlgOpenSaveGetSpecA(hdlg: HWND, psz: LPSTR, cbmax: int32): LRESULT =
  result = sndmsg(hdlg, CDM_GETSPEC, Wparam(cbmax), cast[Lparam](psz))

proc commDlgOpenSaveGetSpecW(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT =
  result = sndmsg(hdlg, CDM_GETSPEC, Wparam(cbmax), cast[Lparam](psz))

when defined(winUnicode):
  proc CommDlg_OpenSave_GetSpec(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT =
    result = SNDMSG(hdlg, CDM_GETSPEC, WPARAM(cbmax), cast[LPARAM](psz))
else:
  proc commDlgOpenSaveGetSpec(hdlg: HWND, psz: LPSTR, cbmax: int32): LRESULT =
    result = sndmsg(hdlg, CDM_GETSPEC, Wparam(cbmax), cast[Lparam](psz))

proc commDlgOpenSaveGetFilePathA(hdlg: HWND, psz: LPSTR, cbmax: int32): LRESULT =
  result = sndmsg(hdlg, CDM_GETFILEPATH, Wparam(cbmax), cast[Lparam](psz))

proc commDlgOpenSaveGetFilePathW(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT =
  result = sndmsg(hdlg, CDM_GETFILEPATH, Wparam(cbmax), cast[Lparam](psz))

when defined(winUnicode):
  proc CommDlg_OpenSave_GetFilePath(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT =
    result = SNDMSG(hdlg, CDM_GETFILEPATH, WPARAM(cbmax), cast[LPARAM](psz))
else:
  proc commDlgOpenSaveGetFilePath(hdlg: HWND, psz: LPSTR, cbmax: int32): LRESULT =
    result = sndmsg(hdlg, CDM_GETFILEPATH, Wparam(cbmax), cast[Lparam](psz))

proc commDlgOpenSaveGetFolderPathA(hdlg: HWND, psz: LPSTR, cbmax: int32): LRESULT =
  result = sndmsg(hdlg, CDM_GETFOLDERPATH, Wparam(cbmax), cast[Lparam](psz))

proc commDlgOpenSaveGetFolderPathW(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT =
  result = sndmsg(hdlg, CDM_GETFOLDERPATH, Wparam(cbmax), cast[Lparam](psz))

when defined(winUnicode):
  proc CommDlg_OpenSave_GetFolderPath(hdlg: HWND, psz: LPWSTR, cbmax: int32): LRESULT =
    result = SNDMSG(hdlg, CDM_GETFOLDERPATH, WPARAM(cbmax), cast[LPARAM]((psz)))
else:
  proc commDlgOpenSaveGetFolderPath(hdlg: HWND, psz: LPSTR, cbmax: int32): LRESULT =
    result = sndmsg(hdlg, CDM_GETFOLDERPATH, Wparam(cbmax), cast[Lparam](psz))

proc commDlgOpenSaveGetFolderIDList(hdlg: HWND, pidl: LPVOID, cbmax: int32): LRESULT =
  result = sndmsg(hdlg, CDM_GETFOLDERIDLIST, Wparam(cbmax), cast[Lparam](pidl))

proc commDlgOpenSaveSetControlText(hdlg: HWND, id: int32, text: LPSTR): LRESULT =
  result = sndmsg(hdlg, CDM_SETCONTROLTEXT, Wparam(id), cast[Lparam](text))

proc commDlgOpenSaveHideControl(hdlg: HWND, id: int32): LRESULT =
  result = sndmsg(hdlg, CDM_HIDECONTROL, Wparam(id), 0)

proc commDlgOpenSaveSetDefExt(hdlg: HWND, pszext: LPSTR): LRESULT =
  result = sndmsg(hdlg, CDM_SETDEFEXT, 0, cast[Lparam](pszext))

proc internalGetLargestConsoleWindowSize(hConsoleOutput: Handle): Dword{.
    stdcall, dynlib: "kernel32", importc: "GetLargestConsoleWindowSize".}
proc getLargestConsoleWindowSize(hConsoleOutput: HANDLE): COORD =
  var res: Dword
  res = internalGetLargestConsoleWindowSize(hConsoleOutput)
  result.y = toU16(res and 0x0000ffff) # XXX: correct?
  result.x = toU16(res shr 16)

proc succeeded(Status: HRESULT): WINBOOL =
  result = (status and 0x80000000).Winbool

proc failed(Status: HRESULT): WINBOOL =
  result = (status and 0x80000000).Winbool

proc isError(Status: HRESULT): WINBOOL =
  result = ord((Int(status) shr 31) == SEVERITY_ERROR)

proc hResultCode(hr: HRESULT): int32 =
  result = hr and 0x0000FFFF'i32

proc hResultFacility(hr: HRESULT): int32 =
  result = (hr shr 16'i32) and 0x00001FFF'i32

proc hResultSeverity(hr: HRESULT): int32 =
  result = (hr shr 31'i32) and 0x00000001'i32

proc makeResult(p1, p2, mask: int32): HRESULT =
  result = (p1 shl 31'i32) or (p2 shl 16'i32) or mask

proc hResultFromWin32(x: int32): HRESULT =
  result = x
  if result != 0'i32:
    result = ((result and 0x0000FFFF'i32) or (int32(FACILITY_WIN32) shl 16'i32) or
        0x80000000'i32)

proc hResultFromNT(x: int32): HRESULT =
  result = x or Int32(FACILITY_NT_BIT)

proc makelangid(PrimaryLang, SubLang: USHORT): int16 =
  result = (subLang shl 10'i16) or primaryLang

proc primarylangid(LangId: int16): int16 =
  result = langId and 0x000003FF'i16

proc sublangid(LangId: int16): int16 =
  result = langId shr 10'i16

proc makelcid(LangId, SortId: int16): DWORD =
  result = toU32((ze(sortId) shl 16) or ze(langId))

proc makesortlcid(LangId, SortId, SortVersion: int16): DWORD =
  result = makelcid(langId, sortId) or (sortVersion shl 20'i32)

proc langidfromlcid(LocaleId: LCID): int16 =
  result = toU16(localeId)

proc sortidfromlcid(LocaleId: LCID): int16 =
  result = toU16((Dword(localeId) shr 16) and 0x0000000F)

proc sortversionfromlcid(LocaleId: LCID): int16 =
  result = toU16((Dword(localeId) shr 20) and 0x0000000F)

proc langSystemDefault(): int16 =
  result = toU16(makelangid(toU16(LANG_NEUTRAL), SUBLANG_SYS_DEFAULT))

proc langUserDefault(): int16 =
  result = toU16(makelangid(toU16(LANG_NEUTRAL), SUBLANG_DEFAULT))

proc localeNeutral(): DWORD =
  result = makelcid(makelangid(toU16(LANG_NEUTRAL), SUBLANG_NEUTRAL), SORT_DEFAULT)

proc localeInvariant(): DWORD =
  result = makelcid(makelangid(toU16(LANG_INVARIANT), SUBLANG_NEUTRAL), SORT_DEFAULT)
